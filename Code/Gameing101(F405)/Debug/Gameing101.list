
Gameing101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006880  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  08006a20  08006a20  00016a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007790  08007790  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007798  08007798  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080077a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000078  08007818  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08007818  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dfb7  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248a  00000000  00000000  0002e05f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  000304f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  000312a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ce3  00000000  00000000  00031f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6fe  00000000  00000000  00049c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f545  00000000  00000000  00059321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000448c  00000000  00000000  000e88b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a08 	.word	0x08006a08

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006a08 	.word	0x08006a08

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b974 	b.w	8000f6c <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468e      	mov	lr, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d14d      	bne.n	8000d46 <__udivmoddi4+0xaa>
 8000caa:	428a      	cmp	r2, r1
 8000cac:	4694      	mov	ip, r2
 8000cae:	d969      	bls.n	8000d84 <__udivmoddi4+0xe8>
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	b152      	cbz	r2, 8000ccc <__udivmoddi4+0x30>
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	f1c2 0120 	rsb	r1, r2, #32
 8000cbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cca:	4094      	lsls	r4, r2
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	0c21      	lsrs	r1, r4, #16
 8000cd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd6:	fa1f f78c 	uxth.w	r7, ip
 8000cda:	fb08 e316 	mls	r3, r8, r6, lr
 8000cde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ce2:	fb06 f107 	mul.w	r1, r6, r7
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	d90a      	bls.n	8000d00 <__udivmoddi4+0x64>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf2:	f080 811f 	bcs.w	8000f34 <__udivmoddi4+0x298>
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	f240 811c 	bls.w	8000f34 <__udivmoddi4+0x298>
 8000cfc:	3e02      	subs	r6, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d08:	fb08 3310 	mls	r3, r8, r0, r3
 8000d0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d10:	fb00 f707 	mul.w	r7, r0, r7
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x92>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d20:	f080 810a 	bcs.w	8000f38 <__udivmoddi4+0x29c>
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	f240 8107 	bls.w	8000f38 <__udivmoddi4+0x29c>
 8000d2a:	4464      	add	r4, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	1be4      	subs	r4, r4, r7
 8000d34:	2600      	movs	r6, #0
 8000d36:	b11d      	cbz	r5, 8000d40 <__udivmoddi4+0xa4>
 8000d38:	40d4      	lsrs	r4, r2
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0xc2>
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	f000 80ef 	beq.w	8000f2e <__udivmoddi4+0x292>
 8000d50:	2600      	movs	r6, #0
 8000d52:	e9c5 0100 	strd	r0, r1, [r5]
 8000d56:	4630      	mov	r0, r6
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	fab3 f683 	clz	r6, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d14a      	bne.n	8000dfc <__udivmoddi4+0x160>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xd4>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 80f9 	bhi.w	8000f62 <__udivmoddi4+0x2c6>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb61 0303 	sbc.w	r3, r1, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	469e      	mov	lr, r3
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e0      	beq.n	8000d40 <__udivmoddi4+0xa4>
 8000d7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d82:	e7dd      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000d84:	b902      	cbnz	r2, 8000d88 <__udivmoddi4+0xec>
 8000d86:	deff      	udf	#255	; 0xff
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	f040 8092 	bne.w	8000eb6 <__udivmoddi4+0x21a>
 8000d92:	eba1 010c 	sub.w	r1, r1, ip
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	2601      	movs	r6, #1
 8000da0:	0c20      	lsrs	r0, r4, #16
 8000da2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da6:	fb07 1113 	mls	r1, r7, r3, r1
 8000daa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dae:	fb0e f003 	mul.w	r0, lr, r3
 8000db2:	4288      	cmp	r0, r1
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x12c>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x12a>
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	f200 80cb 	bhi.w	8000f5c <__udivmoddi4+0x2c0>
 8000dc6:	4643      	mov	r3, r8
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x156>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x154>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f200 80bb 	bhi.w	8000f66 <__udivmoddi4+0x2ca>
 8000df0:	4608      	mov	r0, r1
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x9a>
 8000dfc:	f1c6 0720 	rsb	r7, r6, #32
 8000e00:	40b3      	lsls	r3, r6
 8000e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e12:	431c      	orrs	r4, r3
 8000e14:	40f9      	lsrs	r1, r7
 8000e16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e22:	0c20      	lsrs	r0, r4, #16
 8000e24:	fa1f fe8c 	uxth.w	lr, ip
 8000e28:	fb09 1118 	mls	r1, r9, r8, r1
 8000e2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e30:	fb08 f00e 	mul.w	r0, r8, lr
 8000e34:	4288      	cmp	r0, r1
 8000e36:	fa02 f206 	lsl.w	r2, r2, r6
 8000e3a:	d90b      	bls.n	8000e54 <__udivmoddi4+0x1b8>
 8000e3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e44:	f080 8088 	bcs.w	8000f58 <__udivmoddi4+0x2bc>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f240 8085 	bls.w	8000f58 <__udivmoddi4+0x2bc>
 8000e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e52:	4461      	add	r1, ip
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e68:	458e      	cmp	lr, r1
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x1e2>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e74:	d26c      	bcs.n	8000f50 <__udivmoddi4+0x2b4>
 8000e76:	458e      	cmp	lr, r1
 8000e78:	d96a      	bls.n	8000f50 <__udivmoddi4+0x2b4>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4461      	add	r1, ip
 8000e7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e82:	fba0 9402 	umull	r9, r4, r0, r2
 8000e86:	eba1 010e 	sub.w	r1, r1, lr
 8000e8a:	42a1      	cmp	r1, r4
 8000e8c:	46c8      	mov	r8, r9
 8000e8e:	46a6      	mov	lr, r4
 8000e90:	d356      	bcc.n	8000f40 <__udivmoddi4+0x2a4>
 8000e92:	d053      	beq.n	8000f3c <__udivmoddi4+0x2a0>
 8000e94:	b15d      	cbz	r5, 8000eae <__udivmoddi4+0x212>
 8000e96:	ebb3 0208 	subs.w	r2, r3, r8
 8000e9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ea2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea6:	40f1      	lsrs	r1, r6
 8000ea8:	431f      	orrs	r7, r3
 8000eaa:	e9c5 7100 	strd	r7, r1, [r5]
 8000eae:	2600      	movs	r6, #0
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	f1c2 0320 	rsb	r3, r2, #32
 8000eba:	40d8      	lsrs	r0, r3
 8000ebc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec4:	4091      	lsls	r1, r2
 8000ec6:	4301      	orrs	r1, r0
 8000ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed8:	0c0b      	lsrs	r3, r1, #16
 8000eda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ede:	fb00 f60e 	mul.w	r6, r0, lr
 8000ee2:	429e      	cmp	r6, r3
 8000ee4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x260>
 8000eea:	eb1c 0303 	adds.w	r3, ip, r3
 8000eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef2:	d22f      	bcs.n	8000f54 <__udivmoddi4+0x2b8>
 8000ef4:	429e      	cmp	r6, r3
 8000ef6:	d92d      	bls.n	8000f54 <__udivmoddi4+0x2b8>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4463      	add	r3, ip
 8000efc:	1b9b      	subs	r3, r3, r6
 8000efe:	b289      	uxth	r1, r1
 8000f00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f04:	fb07 3316 	mls	r3, r7, r6, r3
 8000f08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x28a>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f1c:	d216      	bcs.n	8000f4c <__udivmoddi4+0x2b0>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d914      	bls.n	8000f4c <__udivmoddi4+0x2b0>
 8000f22:	3e02      	subs	r6, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f2c:	e738      	b.n	8000da0 <__udivmoddi4+0x104>
 8000f2e:	462e      	mov	r6, r5
 8000f30:	4628      	mov	r0, r5
 8000f32:	e705      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000f34:	4606      	mov	r6, r0
 8000f36:	e6e3      	b.n	8000d00 <__udivmoddi4+0x64>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6f8      	b.n	8000d2e <__udivmoddi4+0x92>
 8000f3c:	454b      	cmp	r3, r9
 8000f3e:	d2a9      	bcs.n	8000e94 <__udivmoddi4+0x1f8>
 8000f40:	ebb9 0802 	subs.w	r8, r9, r2
 8000f44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f48:	3801      	subs	r0, #1
 8000f4a:	e7a3      	b.n	8000e94 <__udivmoddi4+0x1f8>
 8000f4c:	4646      	mov	r6, r8
 8000f4e:	e7ea      	b.n	8000f26 <__udivmoddi4+0x28a>
 8000f50:	4620      	mov	r0, r4
 8000f52:	e794      	b.n	8000e7e <__udivmoddi4+0x1e2>
 8000f54:	4640      	mov	r0, r8
 8000f56:	e7d1      	b.n	8000efc <__udivmoddi4+0x260>
 8000f58:	46d0      	mov	r8, sl
 8000f5a:	e77b      	b.n	8000e54 <__udivmoddi4+0x1b8>
 8000f5c:	3b02      	subs	r3, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	e732      	b.n	8000dc8 <__udivmoddi4+0x12c>
 8000f62:	4630      	mov	r0, r6
 8000f64:	e709      	b.n	8000d7a <__udivmoddi4+0xde>
 8000f66:	4464      	add	r4, ip
 8000f68:	3802      	subs	r0, #2
 8000f6a:	e742      	b.n	8000df2 <__udivmoddi4+0x156>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <smallRbit>:
static uint8_t SendBuf[2];

//This buffer holds 1 Character bitmap image (8x8)
//static uint8_t chBuf[8];

uint8_t smallRbit(uint8_t re) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	return (uint8_t) (__RBIT(re) >> 24);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	0e1b      	lsrs	r3, r3, #24
 8000f8a:	b2db      	uxtb	r3, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <modulo>:

int modulo(int x, int N) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	return (x % N + N) % N;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	fb93 f2f2 	sdiv	r2, r3, r2
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	fb01 f202 	mul.w	r2, r1, r2
 8000fb0:	1a9a      	subs	r2, r3, r2
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	fb93 f2f2 	sdiv	r2, r3, r2
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	fb01 f202 	mul.w	r2, r1, r2
 8000fc2:	1a9b      	subs	r3, r3, r2
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LCD_Init>:

// Display Initialization
void LCD_Init(LS013B4DN04 *MemDisp, SPI_HandleTypeDef *Bus,
		GPIO_TypeDef *dispGPIO, uint16_t LCDcs) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	807b      	strh	r3, [r7, #2]

	//Store params into our struct
	MemDisp->Bus = Bus;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	601a      	str	r2, [r3, #0]
	MemDisp->dispGPIO = dispGPIO;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
	MemDisp->LCDcs = LCDcs;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	811a      	strh	r2, [r3, #8]

	DispBuf = malloc(1152);
 8000ff0:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8000ff4:	f004 fb96 	bl	8005724 <malloc>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <LCD_Init+0xb4>)
 8000ffe:	601a      	str	r2, [r3, #0]
	DispBuf2 = malloc(1152);
 8001000:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8001004:	f004 fb8e 	bl	8005724 <malloc>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <LCD_Init+0xb8>)
 800100e:	601a      	str	r2, [r3, #0]
	TextBuf = malloc(8);
 8001010:	2008      	movs	r0, #8
 8001012:	f004 fb87 	bl	8005724 <malloc>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <LCD_Init+0xbc>)
 800101c:	601a      	str	r2, [r3, #0]

	memset(DispBuf, 0x00, 1152);
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <LCD_Init+0xb4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fb83 	bl	8005734 <memset>
	memset(DispBuf2, 0x00, 1152);
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <LCD_Init+0xb8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fb7b 	bl	8005734 <memset>
	memset(TextBuf, 0x00, 1152);
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <LCD_Init+0xbc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fb73 	bl	8005734 <memset>

	//At lease 3 + 13 clock is needed for Display clear (16 Clock = 8x2 bit = 2 byte)
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6858      	ldr	r0, [r3, #4]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	891b      	ldrh	r3, [r3, #8]
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	f002 ffcb 	bl	8003ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to data sheet
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	2396      	movs	r3, #150	; 0x96
 8001064:	2202      	movs	r2, #2
 8001066:	490a      	ldr	r1, [pc, #40]	; (8001090 <LCD_Init+0xc0>)
 8001068:	f003 fce5 	bl	8004a36 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6858      	ldr	r0, [r3, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	891b      	ldrh	r3, [r3, #8]
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	f002 ffbc 	bl	8003ff4 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000098 	.word	0x20000098
 8001088:	2000009c 	.word	0x2000009c
 800108c:	200000a0 	.word	0x200000a0
 8001090:	20000000 	.word	0x20000000

08001094 <LCD_UpdateFull>:

// Display update (Transmit data)
void LCD_UpdateFull(LS013B4DN04 *MemDisp) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <LCD_UpdateFull+0xd0>)
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <LCD_UpdateFull+0xd4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010aa:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010b8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	891b      	ldrh	r3, [r3, #8]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 ff95 	bl	8003ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	2396      	movs	r3, #150	; 0x96
 80010d0:	2201      	movs	r2, #1
 80010d2:	4924      	ldr	r1, [pc, #144]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010d4:	f003 fcaf 	bl	8004a36 <HAL_SPI_Transmit>

	for (uint8_t row = 0; row < 96; row++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e02b      	b.n	8001136 <LCD_UpdateFull+0xa2>
		SendBuf[1] = smallRbit(row + 1); // counting from row number 1 to row number 96
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff43 	bl	8000f70 <smallRbit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010f0:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	491d      	ldr	r1, [pc, #116]	; (800116c <LCD_UpdateFull+0xd8>)
 80010f8:	2396      	movs	r3, #150	; 0x96
 80010fa:	2201      	movs	r2, #1
 80010fc:	f003 fc9b 	bl	8004a36 <HAL_SPI_Transmit>

		uint16_t offset = row * 12;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	0052      	lsls	r2, r2, #1
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	81bb      	strh	r3, [r7, #12]
		HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <LCD_UpdateFull+0xdc>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	18d1      	adds	r1, r2, r3
 800111a:	2396      	movs	r3, #150	; 0x96
 800111c:	220c      	movs	r2, #12
 800111e:	f003 fc8a 	bl	8004a36 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	2396      	movs	r3, #150	; 0x96
 8001128:	2201      	movs	r2, #1
 800112a:	4912      	ldr	r1, [pc, #72]	; (8001174 <LCD_UpdateFull+0xe0>)
 800112c:	f003 fc83 	bl	8004a36 <HAL_SPI_Transmit>
	for (uint8_t row = 0; row < 96; row++) {
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3301      	adds	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b5f      	cmp	r3, #95	; 0x5f
 800113a:	d9d0      	bls.n	80010de <LCD_UpdateFull+0x4a>
	}

	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	2396      	movs	r3, #150	; 0x96
 8001142:	2201      	movs	r2, #1
 8001144:	490b      	ldr	r1, [pc, #44]	; (8001174 <LCD_UpdateFull+0xe0>)
 8001146:	f003 fc76 	bl	8004a36 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6858      	ldr	r0, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	891b      	ldrh	r3, [r3, #8]
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	f002 ff4d 	bl	8003ff4 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000a4 	.word	0x200000a4
 8001168:	20000004 	.word	0x20000004
 800116c:	200000a5 	.word	0x200000a5
 8001170:	20000098 	.word	0x20000098
 8001174:	20000094 	.word	0x20000094

08001178 <LCD_UpdateLine>:

// Display update (Transmit data)
void LCD_UpdateLine(LS013B4DN04 *MemDisp, uint8_t lineNum) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <LCD_UpdateLine+0xa4>)
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <LCD_UpdateLine+0xa8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4313      	orrs	r3, r2
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <LCD_UpdateLine+0xa4>)
 8001192:	701a      	strb	r2, [r3, #0]
//	SendBuf[0] ^= 1 << 6;

	// CS On
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6858      	ldr	r0, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	891b      	ldrh	r3, [r3, #8]
 800119c:	2201      	movs	r2, #1
 800119e:	4619      	mov	r1, r3
 80011a0:	f002 ff28 	bl	8003ff4 <HAL_GPIO_WritePin>

	// Command
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	2396      	movs	r3, #150	; 0x96
 80011aa:	2201      	movs	r2, #1
 80011ac:	491b      	ldr	r1, [pc, #108]	; (800121c <LCD_UpdateLine+0xa4>)
 80011ae:	f003 fc42 	bl	8004a36 <HAL_SPI_Transmit>

	// Line num
	SendBuf[1] = smallRbit(lineNum + 1); // counting from row number 1 to row number 96
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fed9 	bl	8000f70 <smallRbit>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <LCD_UpdateLine+0xa4>)
 80011c4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	4916      	ldr	r1, [pc, #88]	; (8001224 <LCD_UpdateLine+0xac>)
 80011cc:	2396      	movs	r3, #150	; 0x96
 80011ce:	2201      	movs	r2, #1
 80011d0:	f003 fc31 	bl	8004a36 <HAL_SPI_Transmit>

	uint16_t offset = lineNum * 12;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	0052      	lsls	r2, r2, #1
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <LCD_UpdateLine+0xb0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	18d1      	adds	r1, r2, r3
 80011ee:	2396      	movs	r3, #150	; 0x96
 80011f0:	220c      	movs	r2, #12
 80011f2:	f003 fc20 	bl	8004a36 <HAL_SPI_Transmit>

	// Trailer
	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 2, 150);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	2396      	movs	r3, #150	; 0x96
 80011fc:	2202      	movs	r2, #2
 80011fe:	490b      	ldr	r1, [pc, #44]	; (800122c <LCD_UpdateLine+0xb4>)
 8001200:	f003 fc19 	bl	8004a36 <HAL_SPI_Transmit>

	// Cs Off
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6858      	ldr	r0, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	891b      	ldrh	r3, [r3, #8]
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	f002 fef0 	bl	8003ff4 <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200000a4 	.word	0x200000a4
 8001220:	20000004 	.word	0x20000004
 8001224:	200000a5 	.word	0x200000a5
 8001228:	20000098 	.word	0x20000098
 800122c:	20000094 	.word	0x20000094

08001230 <LCD_LoadObjs>:
void LCD_LoadFull(uint8_t *BMP) {
	memcpy(DispBuf, BMP, 1152);
}

void LCD_LoadObjs(GameObj *header, uint8_t drawMode, uint8_t repeatMode,
		bool flip) {
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af04      	add	r7, sp, #16
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	4608      	mov	r0, r1
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	4603      	mov	r3, r0
 8001240:	70fb      	strb	r3, [r7, #3]
 8001242:	460b      	mov	r3, r1
 8001244:	70bb      	strb	r3, [r7, #2]
 8001246:	4613      	mov	r3, r2
 8001248:	707b      	strb	r3, [r7, #1]
	GameObj *ptr = header;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

	if (!ptr->full)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	7c1b      	ldrb	r3, [r3, #16]
 8001252:	f083 0301 	eor.w	r3, r3, #1
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d12c      	bne.n	80012b6 <LCD_LoadObjs+0x86>
		return;

	for (;;) {
		LCD_LoadObj(ptr->bmpAsset, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	edd3 7a01 	vldr	s15, [r3, #4]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	ed93 7a02 	vldr	s14, [r3, #8]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	7b19      	ldrb	r1, [r3, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	7b5c      	ldrb	r4, [r3, #13]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	7bdb      	ldrb	r3, [r3, #15]
 8001278:	78fd      	ldrb	r5, [r7, #3]
 800127a:	787a      	ldrb	r2, [r7, #1]
 800127c:	9202      	str	r2, [sp, #8]
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	78bb      	ldrb	r3, [r7, #2]
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	462b      	mov	r3, r5
 8001286:	4622      	mov	r2, r4
 8001288:	eef0 0a47 	vmov.f32	s1, s14
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f000 f818 	bl	80012c4 <LCD_LoadObj>
				repeatMode, ptr->index, flip);

		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == header)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	7c1b      	ldrb	r3, [r3, #16]
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10a      	bne.n	80012ba <LCD_LoadObjs+0x8a>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d005      	beq.n	80012ba <LCD_LoadObjs+0x8a>
			return;
		ptr = ptr->next;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	60fb      	str	r3, [r7, #12]
		LCD_LoadObj(ptr->bmpAsset, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 80012b4:	e7d2      	b.n	800125c <LCD_LoadObjs+0x2c>
		return;
 80012b6:	bf00      	nop
 80012b8:	e000      	b.n	80012bc <LCD_LoadObjs+0x8c>
			return;
 80012ba:	bf00      	nop
	}
}
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012c4 <LCD_LoadObj>:

void LCD_LoadObj(uint8_t *bmpAsset, float posX, float posY, uint8_t width,
		uint8_t height, uint8_t drawMode, uint8_t repeatMode, uint8_t index,
		bool flip) {
 80012c4:	b5b0      	push	{r4, r5, r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80012d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4603      	mov	r3, r0
 80012dc:	70fb      	strb	r3, [r7, #3]
 80012de:	460b      	mov	r3, r1
 80012e0:	70bb      	strb	r3, [r7, #2]
 80012e2:	4613      	mov	r3, r2
 80012e4:	707b      	strb	r3, [r7, #1]
	short displayRow;
	short displayRowOffset;

	//Counting from Y origin point to bmpH using for loop
	for (uint8_t y = 0; y < height; y++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ec:	e18e      	b.n	800160c <LCD_LoadObj+0x348>
		displayRow = modulo(floor(posY) + y, 96);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff f932 	bl	8000558 <__aeabi_f2d>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	ec43 2b10 	vmov	d0, r2, r3
 80012fc:	f005 fb04 	bl	8006908 <floor>
 8001300:	ec55 4b10 	vmov	r4, r5, d0
 8001304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f913 	bl	8000534 <__aeabi_i2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7fe ffc1 	bl	800029c <__adddf3>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4610      	mov	r0, r2
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fc0b 	bl	8000b3c <__aeabi_d2iz>
 8001326:	4603      	mov	r3, r0
 8001328:	2160      	movs	r1, #96	; 0x60
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fe34 	bl	8000f98 <modulo>
 8001330:	4603      	mov	r3, r0
 8001332:	847b      	strh	r3, [r7, #34]	; 0x22

		if ((repeatMode == REPEATMODE_NONE)
 8001334:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001338:	2b00      	cmp	r3, #0
 800133a:	d109      	bne.n	8001350 <LCD_LoadObj+0x8c>
				&& (displayRow < 0 || displayRow >= 96)) {
 800133c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001340:	2b00      	cmp	r3, #0
 8001342:	f2c0 815d 	blt.w	8001600 <LCD_LoadObj+0x33c>
 8001346:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800134a:	2b5f      	cmp	r3, #95	; 0x5f
 800134c:	f300 8158 	bgt.w	8001600 <LCD_LoadObj+0x33c>
			continue;
		}

		displayRowOffset = displayRow * 12;
 8001350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001352:	461a      	mov	r2, r3
 8001354:	0052      	lsls	r2, r2, #1
 8001356:	4413      	add	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	b29b      	uxth	r3, r3
 800135c:	843b      	strh	r3, [r7, #32]

		int firstXByte = floor(floor(posX) / 8);
 800135e:	68b8      	ldr	r0, [r7, #8]
 8001360:	f7ff f8fa 	bl	8000558 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ec43 2b10 	vmov	d0, r2, r3
 800136c:	f005 facc 	bl	8006908 <floor>
 8001370:	ec51 0b10 	vmov	r0, r1, d0
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	4baa      	ldr	r3, [pc, #680]	; (8001624 <LCD_LoadObj+0x360>)
 800137a:	f7ff fa6f 	bl	800085c <__aeabi_ddiv>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	ec43 2b17 	vmov	d7, r2, r3
 8001386:	eeb0 0a47 	vmov.f32	s0, s14
 800138a:	eef0 0a67 	vmov.f32	s1, s15
 800138e:	f005 fabb 	bl	8006908 <floor>
 8001392:	ec53 2b10 	vmov	r2, r3, d0
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fbcf 	bl	8000b3c <__aeabi_d2iz>
 800139e:	4603      	mov	r3, r0
 80013a0:	61fb      	str	r3, [r7, #28]
		uint8_t leftOffset = modulo(floor(posX), 8);
 80013a2:	68b8      	ldr	r0, [r7, #8]
 80013a4:	f7ff f8d8 	bl	8000558 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	ec43 2b10 	vmov	d0, r2, r3
 80013b0:	f005 faaa 	bl	8006908 <floor>
 80013b4:	ec53 2b10 	vmov	r2, r3, d0
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fbbe 	bl	8000b3c <__aeabi_d2iz>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2108      	movs	r1, #8
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fde7 	bl	8000f98 <modulo>
 80013ca:	4603      	mov	r3, r0
 80013cc:	76fb      	strb	r3, [r7, #27]

		uint8_t v1 = 0x00, v2 = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t *currentEditingBuf;

		for (uint8_t j = 0; j < width + 1; j++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80013e0:	e107      	b.n	80015f2 <LCD_LoadObj+0x32e>
			if (j == width)
 80013e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d103      	bne.n	80013f4 <LCD_LoadObj+0x130>
				v2 = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80013f2:	e016      	b.n	8001422 <LCD_LoadObj+0x15e>
			else
				v2 = *(bmpAsset + width * y + j + index * (height * width));
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80013fa:	fb02 f303 	mul.w	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001404:	78ba      	ldrb	r2, [r7, #2]
 8001406:	78f9      	ldrb	r1, [r7, #3]
 8001408:	fb01 f202 	mul.w	r2, r1, r2
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	18c2      	adds	r2, r0, r3
 8001412:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001416:	4413      	add	r3, r2
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			if (repeatMode == REPEATMODE_NONE
 8001422:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001426:	2b00      	cmp	r3, #0
 8001428:	d110      	bne.n	800144c <LCD_LoadObj+0x188>
					&& (firstXByte + j < 0 || firstXByte + j > 11)) {
 800142a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	4413      	add	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	db05      	blt.n	8001442 <LCD_LoadObj+0x17e>
 8001436:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	4413      	add	r3, r2
 800143e:	2b0b      	cmp	r3, #11
 8001440:	dd04      	ble.n	800144c <LCD_LoadObj+0x188>
				v1 = v2;
 8001442:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001446:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				continue;
 800144a:	e0cd      	b.n	80015e8 <LCD_LoadObj+0x324>
			}

			currentEditingBuf = DispBuf + displayRowOffset
					+ (firstXByte + j) % 12;
 800144c:	4b76      	ldr	r3, [pc, #472]	; (8001628 <LCD_LoadObj+0x364>)
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001454:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	441a      	add	r2, r3
 800145c:	4b73      	ldr	r3, [pc, #460]	; (800162c <LCD_LoadObj+0x368>)
 800145e:	fb83 1302 	smull	r1, r3, r3, r2
 8001462:	1059      	asrs	r1, r3, #1
 8001464:	17d3      	asrs	r3, r2, #31
 8001466:	1ac9      	subs	r1, r1, r3
 8001468:	460b      	mov	r3, r1
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	440b      	add	r3, r1
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	1ad1      	subs	r1, r2, r3
 8001472:	460b      	mov	r3, r1
 8001474:	4423      	add	r3, r4
			currentEditingBuf = DispBuf + displayRowOffset
 8001476:	4403      	add	r3, r0
 8001478:	617b      	str	r3, [r7, #20]

			if (flip) {
 800147a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d057      	beq.n	8001532 <LCD_LoadObj+0x26e>
				switch (drawMode) {
 8001482:	787b      	ldrb	r3, [r7, #1]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d03b      	beq.n	8001500 <LCD_LoadObj+0x23c>
 8001488:	2b02      	cmp	r3, #2
 800148a:	f300 80a9 	bgt.w	80015e0 <LCD_LoadObj+0x31c>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <LCD_LoadObj+0x1d4>
 8001492:	2b01      	cmp	r3, #1
 8001494:	d01b      	beq.n	80014ce <LCD_LoadObj+0x20a>
 8001496:	e0a3      	b.n	80015e0 <LCD_LoadObj+0x31c>
				case DRAWMODE_ADD:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b25a      	sxtb	r2, r3
 800149e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80014a2:	7efb      	ldrb	r3, [r7, #27]
 80014a4:	f1c3 0308 	rsb	r3, r3, #8
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80014ac:	b259      	sxtb	r1, r3
 80014ae:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80014b2:	7efb      	ldrb	r3, [r7, #27]
 80014b4:	fa40 f303 	asr.w	r3, r0, r3
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	430b      	orrs	r3, r1
 80014bc:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80014be:	43db      	mvns	r3, r3
 80014c0:	b25b      	sxtb	r3, r3
 80014c2:	4013      	ands	r3, r2
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	701a      	strb	r2, [r3, #0]
					break;
 80014cc:	e088      	b.n	80015e0 <LCD_LoadObj+0x31c>
				case DRAWMODE_CULL:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	b25a      	sxtb	r2, r3
 80014d4:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80014d8:	7efb      	ldrb	r3, [r7, #27]
 80014da:	f1c3 0308 	rsb	r3, r3, #8
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80014e2:	b259      	sxtb	r1, r3
 80014e4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80014e8:	7efb      	ldrb	r3, [r7, #27]
 80014ea:	fa40 f303 	asr.w	r3, r0, r3
 80014ee:	b25b      	sxtb	r3, r3
 80014f0:	430b      	orrs	r3, r1
 80014f2:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b25b      	sxtb	r3, r3
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	701a      	strb	r2, [r3, #0]
					break;
 80014fe:	e06f      	b.n	80015e0 <LCD_LoadObj+0x31c>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b25a      	sxtb	r2, r3
 8001506:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800150a:	7efb      	ldrb	r3, [r7, #27]
 800150c:	f1c3 0308 	rsb	r3, r3, #8
 8001510:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 8001514:	b259      	sxtb	r1, r3
 8001516:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800151a:	7efb      	ldrb	r3, [r7, #27]
 800151c:	fa40 f303 	asr.w	r3, r0, r3
 8001520:	b25b      	sxtb	r3, r3
 8001522:	430b      	orrs	r3, r1
 8001524:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 8001526:	4053      	eors	r3, r2
 8001528:	b25b      	sxtb	r3, r3
 800152a:	b2da      	uxtb	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	701a      	strb	r2, [r3, #0]
					break;
 8001530:	e056      	b.n	80015e0 <LCD_LoadObj+0x31c>
				}
			} else {
				switch (drawMode) {
 8001532:	787b      	ldrb	r3, [r7, #1]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d03a      	beq.n	80015ae <LCD_LoadObj+0x2ea>
 8001538:	2b02      	cmp	r3, #2
 800153a:	dc51      	bgt.n	80015e0 <LCD_LoadObj+0x31c>
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <LCD_LoadObj+0x282>
 8001540:	2b01      	cmp	r3, #1
 8001542:	d019      	beq.n	8001578 <LCD_LoadObj+0x2b4>
 8001544:	e04c      	b.n	80015e0 <LCD_LoadObj+0x31c>
				case DRAWMODE_ADD:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b25a      	sxtb	r2, r3
 800154c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001550:	7efb      	ldrb	r3, [r7, #27]
 8001552:	f1c3 0308 	rsb	r3, r3, #8
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 800155a:	b259      	sxtb	r1, r3
 800155c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001560:	7efb      	ldrb	r3, [r7, #27]
 8001562:	fa40 f303 	asr.w	r3, r0, r3
 8001566:	b25b      	sxtb	r3, r3
 8001568:	430b      	orrs	r3, r1
 800156a:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 800156c:	4313      	orrs	r3, r2
 800156e:	b25b      	sxtb	r3, r3
 8001570:	b2da      	uxtb	r2, r3
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	701a      	strb	r2, [r3, #0]
					break;
 8001576:	e033      	b.n	80015e0 <LCD_LoadObj+0x31c>
				case DRAWMODE_CULL:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b25a      	sxtb	r2, r3
 800157e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001582:	7efb      	ldrb	r3, [r7, #27]
 8001584:	f1c3 0308 	rsb	r3, r3, #8
 8001588:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 800158c:	b259      	sxtb	r1, r3
 800158e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001592:	7efb      	ldrb	r3, [r7, #27]
 8001594:	fa40 f303 	asr.w	r3, r0, r3
 8001598:	b25b      	sxtb	r3, r3
 800159a:	430b      	orrs	r3, r1
 800159c:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 800159e:	43db      	mvns	r3, r3
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	4013      	ands	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	701a      	strb	r2, [r3, #0]
					break;
 80015ac:	e018      	b.n	80015e0 <LCD_LoadObj+0x31c>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	b25a      	sxtb	r2, r3
 80015b4:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80015b8:	7efb      	ldrb	r3, [r7, #27]
 80015ba:	f1c3 0308 	rsb	r3, r3, #8
 80015be:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80015c2:	b259      	sxtb	r1, r3
 80015c4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80015c8:	7efb      	ldrb	r3, [r7, #27]
 80015ca:	fa40 f303 	asr.w	r3, r0, r3
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	430b      	orrs	r3, r1
 80015d2:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80015d4:	4053      	eors	r3, r2
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	701a      	strb	r2, [r3, #0]
					break;
 80015de:	bf00      	nop
				}
			}

			v1 = v2;
 80015e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t j = 0; j < width + 1; j++) {
 80015e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ec:	3301      	adds	r3, #1
 80015ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f4bf aef2 	bcs.w	80013e2 <LCD_LoadObj+0x11e>
 80015fe:	e000      	b.n	8001602 <LCD_LoadObj+0x33e>
			continue;
 8001600:	bf00      	nop
	for (uint8_t y = 0; y < height; y++) {
 8001602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001606:	3301      	adds	r3, #1
 8001608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800160c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001610:	78bb      	ldrb	r3, [r7, #2]
 8001612:	429a      	cmp	r2, r3
 8001614:	f4ff ae6b 	bcc.w	80012ee <LCD_LoadObj+0x2a>
		}
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3728      	adds	r7, #40	; 0x28
 800161e:	46bd      	mov	sp, r7
 8001620:	bdb0      	pop	{r4, r5, r7, pc}
 8001622:	bf00      	nop
 8001624:	40200000 	.word	0x40200000
 8001628:	20000098 	.word	0x20000098
 800162c:	2aaaaaab 	.word	0x2aaaaaab

08001630 <LCD_DrawLine>:

void LCD_DrawLine(uint8_t startingRow, int startingPoint, uint8_t length,
		uint8_t drawMode, bool flip) {
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6039      	str	r1, [r7, #0]
 8001638:	4611      	mov	r1, r2
 800163a:	461a      	mov	r2, r3
 800163c:	4603      	mov	r3, r0
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	460b      	mov	r3, r1
 8001642:	71bb      	strb	r3, [r7, #6]
 8001644:	4613      	mov	r3, r2
 8001646:	717b      	strb	r3, [r7, #5]
	uint16_t rowOffset = (startingRow % 96) * 12;
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	4b78      	ldr	r3, [pc, #480]	; (800182c <LCD_DrawLine+0x1fc>)
 800164c:	fba3 1302 	umull	r1, r3, r3, r2
 8001650:	0999      	lsrs	r1, r3, #6
 8001652:	460b      	mov	r3, r1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	440b      	add	r3, r1
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	b2db      	uxtb	r3, r3
 800165e:	b29b      	uxth	r3, r3
 8001660:	461a      	mov	r2, r3
 8001662:	0052      	lsls	r2, r2, #1
 8001664:	4413      	add	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	82bb      	strh	r3, [r7, #20]

	for (uint8_t j = 0; j < length; j++) {
 800166a:	2300      	movs	r3, #0
 800166c:	75fb      	strb	r3, [r7, #23]
 800166e:	e0d1      	b.n	8001814 <LCD_DrawLine+0x1e4>
		if (startingPoint + j < 0 || startingPoint + j > 95)
 8001670:	7dfa      	ldrb	r2, [r7, #23]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	4413      	add	r3, r2
 8001676:	2b00      	cmp	r3, #0
 8001678:	f2c0 80c8 	blt.w	800180c <LCD_DrawLine+0x1dc>
 800167c:	7dfa      	ldrb	r2, [r7, #23]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	2b5f      	cmp	r3, #95	; 0x5f
 8001684:	f300 80c2 	bgt.w	800180c <LCD_DrawLine+0x1dc>
			continue;
		uint8_t additionalOffset = ((startingPoint + j) % 96) / 8;
 8001688:	7dfa      	ldrb	r2, [r7, #23]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	441a      	add	r2, r3
 800168e:	4b68      	ldr	r3, [pc, #416]	; (8001830 <LCD_DrawLine+0x200>)
 8001690:	fb83 1302 	smull	r1, r3, r3, r2
 8001694:	1119      	asrs	r1, r3, #4
 8001696:	17d3      	asrs	r3, r2, #31
 8001698:	1ac9      	subs	r1, r1, r3
 800169a:	460b      	mov	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	440b      	add	r3, r1
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	1ad1      	subs	r1, r2, r3
 80016a4:	460b      	mov	r3, r1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	da00      	bge.n	80016ac <LCD_DrawLine+0x7c>
 80016aa:	3307      	adds	r3, #7
 80016ac:	10db      	asrs	r3, r3, #3
 80016ae:	74fb      	strb	r3, [r7, #19]

		uint8_t *currentEditingBuf = DispBuf + rowOffset + additionalOffset;
 80016b0:	4b60      	ldr	r3, [pc, #384]	; (8001834 <LCD_DrawLine+0x204>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	8ab9      	ldrh	r1, [r7, #20]
 80016b6:	7cfb      	ldrb	r3, [r7, #19]
 80016b8:	440b      	add	r3, r1
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
		if (flip) {
 80016be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d051      	beq.n	800176a <LCD_DrawLine+0x13a>
			switch (drawMode) {
 80016c6:	797b      	ldrb	r3, [r7, #5]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d037      	beq.n	800173c <LCD_DrawLine+0x10c>
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	f300 809e 	bgt.w	800180e <LCD_DrawLine+0x1de>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <LCD_DrawLine+0xac>
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d019      	beq.n	800170e <LCD_DrawLine+0xde>
 80016da:	e098      	b.n	800180e <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	7df9      	ldrb	r1, [r7, #23]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	440b      	add	r3, r1
 80016e8:	4259      	negs	r1, r3
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	f001 0107 	and.w	r1, r1, #7
 80016f2:	bf58      	it	pl
 80016f4:	424b      	negpl	r3, r1
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	fa41 f303 	asr.w	r3, r1, r3
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	b25b      	sxtb	r3, r3
 8001702:	4013      	ands	r3, r2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	b2da      	uxtb	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	701a      	strb	r2, [r3, #0]
				break;
 800170c:	e07f      	b.n	800180e <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b25a      	sxtb	r2, r3
 8001714:	7df9      	ldrb	r1, [r7, #23]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	440b      	add	r3, r1
 800171a:	4259      	negs	r1, r3
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	f001 0107 	and.w	r1, r1, #7
 8001724:	bf58      	it	pl
 8001726:	424b      	negpl	r3, r1
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	fa41 f303 	asr.w	r3, r1, r3
 800172e:	b25b      	sxtb	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b25b      	sxtb	r3, r3
 8001734:	b2da      	uxtb	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	701a      	strb	r2, [r3, #0]
				break;
 800173a:	e068      	b.n	800180e <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b25a      	sxtb	r2, r3
 8001742:	7df9      	ldrb	r1, [r7, #23]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	440b      	add	r3, r1
 8001748:	4259      	negs	r1, r3
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	f001 0107 	and.w	r1, r1, #7
 8001752:	bf58      	it	pl
 8001754:	424b      	negpl	r3, r1
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	fa41 f303 	asr.w	r3, r1, r3
 800175c:	b25b      	sxtb	r3, r3
 800175e:	4053      	eors	r3, r2
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	701a      	strb	r2, [r3, #0]
				break;
 8001768:	e051      	b.n	800180e <LCD_DrawLine+0x1de>
			}
		} else {
			switch (drawMode) {
 800176a:	797b      	ldrb	r3, [r7, #5]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d036      	beq.n	80017de <LCD_DrawLine+0x1ae>
 8001770:	2b02      	cmp	r3, #2
 8001772:	dc4c      	bgt.n	800180e <LCD_DrawLine+0x1de>
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <LCD_DrawLine+0x14e>
 8001778:	2b01      	cmp	r3, #1
 800177a:	d017      	beq.n	80017ac <LCD_DrawLine+0x17c>
 800177c:	e047      	b.n	800180e <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	b25a      	sxtb	r2, r3
 8001784:	7df9      	ldrb	r1, [r7, #23]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	440b      	add	r3, r1
 800178a:	4259      	negs	r1, r3
 800178c:	f003 0307 	and.w	r3, r3, #7
 8001790:	f001 0107 	and.w	r1, r1, #7
 8001794:	bf58      	it	pl
 8001796:	424b      	negpl	r3, r1
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	fa41 f303 	asr.w	r3, r1, r3
 800179e:	b25b      	sxtb	r3, r3
 80017a0:	4313      	orrs	r3, r2
 80017a2:	b25b      	sxtb	r3, r3
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	701a      	strb	r2, [r3, #0]
				break;
 80017aa:	e030      	b.n	800180e <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b25a      	sxtb	r2, r3
 80017b2:	7df9      	ldrb	r1, [r7, #23]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	440b      	add	r3, r1
 80017b8:	4259      	negs	r1, r3
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	f001 0107 	and.w	r1, r1, #7
 80017c2:	bf58      	it	pl
 80017c4:	424b      	negpl	r3, r1
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	fa41 f303 	asr.w	r3, r1, r3
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	b25b      	sxtb	r3, r3
 80017d2:	4013      	ands	r3, r2
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	701a      	strb	r2, [r3, #0]
				break;
 80017dc:	e017      	b.n	800180e <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	b25a      	sxtb	r2, r3
 80017e4:	7df9      	ldrb	r1, [r7, #23]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	440b      	add	r3, r1
 80017ea:	4259      	negs	r1, r3
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	f001 0107 	and.w	r1, r1, #7
 80017f4:	bf58      	it	pl
 80017f6:	424b      	negpl	r3, r1
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	fa41 f303 	asr.w	r3, r1, r3
 80017fe:	b25b      	sxtb	r3, r3
 8001800:	4053      	eors	r3, r2
 8001802:	b25b      	sxtb	r3, r3
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	701a      	strb	r2, [r3, #0]
				break;
 800180a:	e000      	b.n	800180e <LCD_DrawLine+0x1de>
			continue;
 800180c:	bf00      	nop
	for (uint8_t j = 0; j < length; j++) {
 800180e:	7dfb      	ldrb	r3, [r7, #23]
 8001810:	3301      	adds	r3, #1
 8001812:	75fb      	strb	r3, [r7, #23]
 8001814:	7dfa      	ldrb	r2, [r7, #23]
 8001816:	79bb      	ldrb	r3, [r7, #6]
 8001818:	429a      	cmp	r2, r3
 800181a:	f4ff af29 	bcc.w	8001670 <LCD_DrawLine+0x40>
			}
		}

	}
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	371c      	adds	r7, #28
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	aaaaaaab 	.word	0xaaaaaaab
 8001830:	2aaaaaab 	.word	0x2aaaaaab
 8001834:	20000098 	.word	0x20000098

08001838 <LCD_Invert>:

// Inverts color, WILL CAUSE PERFORMANCE LOSS
void LCD_Invert(void) {
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
	uint16_t invt = 1152;
 800183e:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001842:	80fb      	strh	r3, [r7, #6]
	do {
		invt--;
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	3b01      	subs	r3, #1
 8001848:	80fb      	strh	r3, [r7, #6]
		DispBuf[invt] = ~DispBuf[invt];
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <LCD_Invert+0x40>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	4413      	add	r3, r2
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <LCD_Invert+0x40>)
 8001856:	6819      	ldr	r1, [r3, #0]
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	440b      	add	r3, r1
 800185c:	43d2      	mvns	r2, r2
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]
	} while (invt);
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1ed      	bne.n	8001844 <LCD_Invert+0xc>
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000098 	.word	0x20000098

0800187c <LCD_Fill>:

//Fill screen with either black or white color
void LCD_Fill(bool flip) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	memset(DispBuf, (flip ? 0xFF : 0x00), 1152);
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <LCD_Fill+0x2c>)
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <LCD_Fill+0x18>
 8001890:	23ff      	movs	r3, #255	; 0xff
 8001892:	e000      	b.n	8001896 <LCD_Fill+0x1a>
 8001894:	2300      	movs	r3, #0
 8001896:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800189a:	4619      	mov	r1, r3
 800189c:	f003 ff4a 	bl	8005734 <memset>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000098 	.word	0x20000098

080018ac <LCD_Print>:
	}

}

void LCD_Print(char *str, short xPos, short yPos, uint8_t drawMode,
		uint8_t repeatMode, bool flip) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08c      	sub	sp, #48	; 0x30
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	4608      	mov	r0, r1
 80018b6:	4611      	mov	r1, r2
 80018b8:	461a      	mov	r2, r3
 80018ba:	4603      	mov	r3, r0
 80018bc:	817b      	strh	r3, [r7, #10]
 80018be:	460b      	mov	r3, r1
 80018c0:	813b      	strh	r3, [r7, #8]
 80018c2:	4613      	mov	r3, r2
 80018c4:	71fb      	strb	r3, [r7, #7]
	short strLength = strlen(str);
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7fe fc8a 	bl	80001e0 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	833b      	strh	r3, [r7, #24]
	short lineSpacing = 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	82fb      	strh	r3, [r7, #22]
	short charSpacing = -1;
 80018d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d8:	82bb      	strh	r3, [r7, #20]
	short spaceSpacing = 1;
 80018da:	2301      	movs	r3, #1
 80018dc:	827b      	strh	r3, [r7, #18]
	short tabSpacing = 8 + charSpacing;
 80018de:	8abb      	ldrh	r3, [r7, #20]
 80018e0:	3308      	adds	r3, #8
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	823b      	strh	r3, [r7, #16]

	short lineOff = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	83fb      	strh	r3, [r7, #30]
	short charOff = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	83bb      	strh	r3, [r7, #28]

	for (short i = 0; i < strLength; i++) {
 80018ee:	2300      	movs	r3, #0
 80018f0:	837b      	strh	r3, [r7, #26]
 80018f2:	e067      	b.n	80019c4 <LCD_Print+0x118>
		if (str[i] == '\n') {
 80018f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b0a      	cmp	r3, #10
 8001900:	d109      	bne.n	8001916 <LCD_Print+0x6a>
			lineOff += (8 + lineSpacing);
 8001902:	8afa      	ldrh	r2, [r7, #22]
 8001904:	8bfb      	ldrh	r3, [r7, #30]
 8001906:	4413      	add	r3, r2
 8001908:	b29b      	uxth	r3, r3
 800190a:	3308      	adds	r3, #8
 800190c:	b29b      	uxth	r3, r3
 800190e:	83fb      	strh	r3, [r7, #30]
			charOff = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	83bb      	strh	r3, [r7, #28]
			continue;
 8001914:	e050      	b.n	80019b8 <LCD_Print+0x10c>
		}
		if (str[i] == ' ') {
 8001916:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b20      	cmp	r3, #32
 8001922:	d105      	bne.n	8001930 <LCD_Print+0x84>
			charOff += spaceSpacing;
 8001924:	8bba      	ldrh	r2, [r7, #28]
 8001926:	8a7b      	ldrh	r3, [r7, #18]
 8001928:	4413      	add	r3, r2
 800192a:	b29b      	uxth	r3, r3
 800192c:	83bb      	strh	r3, [r7, #28]
			continue;
 800192e:	e043      	b.n	80019b8 <LCD_Print+0x10c>
		}
		if (str[i] == '\t') {
 8001930:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b09      	cmp	r3, #9
 800193c:	d105      	bne.n	800194a <LCD_Print+0x9e>
			charOff += tabSpacing;
 800193e:	8bba      	ldrh	r2, [r7, #28]
 8001940:	8a3b      	ldrh	r3, [r7, #16]
 8001942:	4413      	add	r3, r2
 8001944:	b29b      	uxth	r3, r3
 8001946:	83bb      	strh	r3, [r7, #28]
			continue;
 8001948:	e036      	b.n	80019b8 <LCD_Print+0x10c>
		}

		FetchText(TextBuf, str[i]);
 800194a:	4b24      	ldr	r3, [pc, #144]	; (80019dc <LCD_Print+0x130>)
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4413      	add	r3, r2
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f001 fdcb 	bl	80034f4 <FetchText>
		LCD_LoadObj(TextBuf, xPos + charOff, yPos + lineOff, 1, 8, drawMode,
 800195e:	4b1f      	ldr	r3, [pc, #124]	; (80019dc <LCD_Print+0x130>)
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001966:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800196a:	4413      	add	r3, r2
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001974:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001978:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800197c:	4413      	add	r3, r2
 800197e:	ee07 3a10 	vmov	s14, r3
 8001982:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001986:	79fa      	ldrb	r2, [r7, #7]
 8001988:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	2300      	movs	r3, #0
 8001990:	9301      	str	r3, [sp, #4]
 8001992:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	2208      	movs	r2, #8
 800199c:	2101      	movs	r1, #1
 800199e:	eef0 0a47 	vmov.f32	s1, s14
 80019a2:	eeb0 0a67 	vmov.f32	s0, s15
 80019a6:	f7ff fc8d 	bl	80012c4 <LCD_LoadObj>
				repeatMode, 0, flip);
		charOff += (8 + charSpacing);
 80019aa:	8aba      	ldrh	r2, [r7, #20]
 80019ac:	8bbb      	ldrh	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	3308      	adds	r3, #8
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	83bb      	strh	r3, [r7, #28]
	for (short i = 0; i < strLength; i++) {
 80019b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3301      	adds	r3, #1
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	837b      	strh	r3, [r7, #26]
 80019c4:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80019c8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	db91      	blt.n	80018f4 <LCD_Print+0x48>
	}
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3720      	adds	r7, #32
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200000a0 	.word	0x200000a0

080019e0 <LookupKeyState>:

static uint8_t KeyBuffer[4] = { 0, 0, 0, 0 };
static bool KeyStates[4] = { 0, 0, 0, 0 };
static bool KeysUsedToBeLow[4] = { 0, 0, 0, 0 };

uint8_t LookupKeyState(uint8_t n) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(KEYS_GPIO_Port, KeyPins[n])) {
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <LookupKeyState+0x30>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <LookupKeyState+0x34>)
 80019f6:	f002 fae5 	bl	8003fc4 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <LookupKeyState+0x24>
		return 0xff;
 8001a00:	23ff      	movs	r3, #255	; 0xff
 8001a02:	e000      	b.n	8001a06 <LookupKeyState+0x26>
	}
	return 0x00;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	08006a2c 	.word	0x08006a2c
 8001a14:	40020800 	.word	0x40020800

08001a18 <KeyScan>:

void KeyScan() {
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
	for (uint8_t j = 0; j < 4; j++) {
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	e02f      	b.n	8001a84 <KeyScan+0x6c>
		KeyBuffer[j] = ((KeyBuffer[j] << 1) | (LookupKeyState(j) & 0x01));
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <KeyScan+0x7c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	b25c      	sxtb	r4, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ffd5 	bl	80019e0 <LookupKeyState>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	b25b      	sxtb	r3, r3
 8001a40:	4323      	orrs	r3, r4
 8001a42:	b25a      	sxtb	r2, r3
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	b2d1      	uxtb	r1, r2
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <KeyScan+0x7c>)
 8001a4a:	54d1      	strb	r1, [r2, r3]

		if ((KeyBuffer[j] | 0xf0) == 0xff) {
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4a11      	ldr	r2, [pc, #68]	; (8001a94 <KeyScan+0x7c>)
 8001a50:	5cd3      	ldrb	r3, [r2, r3]
 8001a52:	f063 030f 	orn	r3, r3, #15
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2bff      	cmp	r3, #255	; 0xff
 8001a5a:	d104      	bne.n	8001a66 <KeyScan+0x4e>
			KeyStates[j] = 1;
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	4a0e      	ldr	r2, [pc, #56]	; (8001a98 <KeyScan+0x80>)
 8001a60:	2101      	movs	r1, #1
 8001a62:	54d1      	strb	r1, [r2, r3]
 8001a64:	e00b      	b.n	8001a7e <KeyScan+0x66>
		} else if ((KeyBuffer[j] | 0xf0) == 0xf0) {
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <KeyScan+0x7c>)
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	f063 030f 	orn	r3, r3, #15
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2bf0      	cmp	r3, #240	; 0xf0
 8001a74:	d103      	bne.n	8001a7e <KeyScan+0x66>
			KeyStates[j] = 0;
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4a07      	ldr	r2, [pc, #28]	; (8001a98 <KeyScan+0x80>)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < 4; j++) {
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	3301      	adds	r3, #1
 8001a82:	71fb      	strb	r3, [r7, #7]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d9cc      	bls.n	8001a24 <KeyScan+0xc>
		}
	}
}
 8001a8a:	bf00      	nop
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd90      	pop	{r4, r7, pc}
 8001a94:	200000a8 	.word	0x200000a8
 8001a98:	200000ac 	.word	0x200000ac

08001a9c <GetButton>:

bool GetButton(uint8_t buttonIndex) {
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	// To machine index
	buttonIndex--;
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	71fb      	strb	r3, [r7, #7]
	return KeyStates[buttonIndex];
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4a04      	ldr	r2, [pc, #16]	; (8001ac0 <GetButton+0x24>)
 8001ab0:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200000ac 	.word	0x200000ac

08001ac4 <GetButtonDown>:

bool GetButtonDown(uint8_t buttonIndex) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
	// To machine index
	buttonIndex--;
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	71fb      	strb	r3, [r7, #7]

	if(!KeyStates[buttonIndex]){
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <GetButtonDown+0x58>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	f083 0301 	eor.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <GetButtonDown+0x28>
		KeysUsedToBeLow[buttonIndex] = true;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <GetButtonDown+0x5c>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	54d1      	strb	r1, [r2, r3]
	}

	if (KeyStates[buttonIndex] && KeysUsedToBeLow[buttonIndex]) {
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <GetButtonDown+0x58>)
 8001af0:	5cd3      	ldrb	r3, [r2, r3]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <GetButtonDown+0x48>
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <GetButtonDown+0x5c>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <GetButtonDown+0x48>
		KeysUsedToBeLow[buttonIndex] = false;
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <GetButtonDown+0x5c>)
 8001b04:	2100      	movs	r1, #0
 8001b06:	54d1      	strb	r1, [r2, r3]
		return 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <GetButtonDown+0x4a>
	}
	return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	200000ac 	.word	0x200000ac
 8001b20:	200000b0 	.word	0x200000b0

08001b24 <GenerateGameBuffers>:

void RenderDino(GameObj *dino, uint8_t dinoState, bool isDead);
bool DinoGetsStuck();
void MeltPlants();

void GenerateGameBuffers() {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	dinoHeader = GenLoopBuf(1);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f001 f9d2 	bl	8002ed2 <GenLoopBuf>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <GenerateGameBuffers+0x5c>)
 8001b32:	6013      	str	r3, [r2, #0]
	fireHeader = GenLoopBuf(1);
 8001b34:	2001      	movs	r0, #1
 8001b36:	f001 f9cc 	bl	8002ed2 <GenLoopBuf>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <GenerateGameBuffers+0x60>)
 8001b3e:	6013      	str	r3, [r2, #0]
	lavaHeader = GenLoopBuf(2);
 8001b40:	2002      	movs	r0, #2
 8001b42:	f001 f9c6 	bl	8002ed2 <GenLoopBuf>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a0f      	ldr	r2, [pc, #60]	; (8001b88 <GenerateGameBuffers+0x64>)
 8001b4a:	6013      	str	r3, [r2, #0]
	cloudHeader = GenLoopBuf(2);
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f001 f9c0 	bl	8002ed2 <GenLoopBuf>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a0d      	ldr	r2, [pc, #52]	; (8001b8c <GenerateGameBuffers+0x68>)
 8001b56:	6013      	str	r3, [r2, #0]
	plantHeader = GenLoopBuf(4);
 8001b58:	2004      	movs	r0, #4
 8001b5a:	f001 f9ba 	bl	8002ed2 <GenLoopBuf>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <GenerateGameBuffers+0x6c>)
 8001b62:	6013      	str	r3, [r2, #0]
	dirtTexHeader = GenLoopBuf(12);
 8001b64:	200c      	movs	r0, #12
 8001b66:	f001 f9b4 	bl	8002ed2 <GenLoopBuf>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <GenerateGameBuffers+0x70>)
 8001b6e:	6013      	str	r3, [r2, #0]
	bumpAndDepressionHeader = GenLoopBuf(4);
 8001b70:	2004      	movs	r0, #4
 8001b72:	f001 f9ae 	bl	8002ed2 <GenLoopBuf>
 8001b76:	4603      	mov	r3, r0
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <GenerateGameBuffers+0x74>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	200000e8 	.word	0x200000e8
 8001b84:	200000ec 	.word	0x200000ec
 8001b88:	200000f0 	.word	0x200000f0
 8001b8c:	200000f4 	.word	0x200000f4
 8001b90:	200000f8 	.word	0x200000f8
 8001b94:	200000fc 	.word	0x200000fc
 8001b98:	20000100 	.word	0x20000100

08001b9c <GamePrep>:

void GamePrep(LS013B4DN04 *display) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	6078      	str	r0, [r7, #4]
	flipStatus = 0;
 8001ba4:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <GamePrep+0x1b8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]

	nextPlantTickDel = 0;
 8001baa:	4b6b      	ldr	r3, [pc, #428]	; (8001d58 <GamePrep+0x1bc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	801a      	strh	r2, [r3, #0]
	nextCloudTickDel = 0;
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <GamePrep+0x1c0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	801a      	strh	r2, [r3, #0]
	nextDirtTexTickDel = 0;
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <GamePrep+0x1c4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	801a      	strh	r2, [r3, #0]
	nextBumpOrDepressionTickDel = 0;
 8001bbc:	4b69      	ldr	r3, [pc, #420]	; (8001d64 <GamePrep+0x1c8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	801a      	strh	r2, [r3, #0]

	plantTick = 0;
 8001bc2:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <GamePrep+0x1cc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
	cloudTick = 0;
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <GamePrep+0x1d0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
	dirtTexTick = 0;
 8001bce:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <GamePrep+0x1d4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
	bumpOrDepressionTick = 0;
 8001bd4:	4b67      	ldr	r3, [pc, #412]	; (8001d74 <GamePrep+0x1d8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]

	groundLength = 29;
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <GamePrep+0x1dc>)
 8001bdc:	221d      	movs	r2, #29
 8001bde:	701a      	strb	r2, [r3, #0]
	tick = 0;
 8001be0:	4b66      	ldr	r3, [pc, #408]	; (8001d7c <GamePrep+0x1e0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
	overallSpeed = 1;
 8001be6:	4b66      	ldr	r3, [pc, #408]	; (8001d80 <GamePrep+0x1e4>)
 8001be8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001bec:	601a      	str	r2, [r3, #0]

	HeaderInit(dinoHeader, (uint8_t*) DinoAssets, 4, 22, 14);
 8001bee:	4b65      	ldr	r3, [pc, #404]	; (8001d84 <GamePrep+0x1e8>)
 8001bf0:	6818      	ldr	r0, [r3, #0]
 8001bf2:	230e      	movs	r3, #14
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2316      	movs	r3, #22
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	4963      	ldr	r1, [pc, #396]	; (8001d88 <GamePrep+0x1ec>)
 8001bfc:	f001 f99b 	bl	8002f36 <HeaderInit>
	HeaderInit(fireHeader, (uint8_t*) FireAssets, 9, 25, 2);
 8001c00:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <GamePrep+0x1f0>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	2302      	movs	r3, #2
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2319      	movs	r3, #25
 8001c0a:	2209      	movs	r2, #9
 8001c0c:	4960      	ldr	r1, [pc, #384]	; (8001d90 <GamePrep+0x1f4>)
 8001c0e:	f001 f992 	bl	8002f36 <HeaderInit>
	HeaderInit(cloudHeader, (uint8_t*) CloudAssets, 6, 14, 1);
 8001c12:	4b60      	ldr	r3, [pc, #384]	; (8001d94 <GamePrep+0x1f8>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	230e      	movs	r3, #14
 8001c1c:	2206      	movs	r2, #6
 8001c1e:	495e      	ldr	r1, [pc, #376]	; (8001d98 <GamePrep+0x1fc>)
 8001c20:	f001 f989 	bl	8002f36 <HeaderInit>
	HeaderInit(plantHeader, (uint8_t*) PlantAssets, 2, 22, 5);
 8001c24:	4b5d      	ldr	r3, [pc, #372]	; (8001d9c <GamePrep+0x200>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	2305      	movs	r3, #5
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2316      	movs	r3, #22
 8001c2e:	2202      	movs	r2, #2
 8001c30:	495b      	ldr	r1, [pc, #364]	; (8001da0 <GamePrep+0x204>)
 8001c32:	f001 f980 	bl	8002f36 <HeaderInit>
	HeaderInit(lavaHeader, (uint8_t*) LavaAssets, 9, 6, 4);
 8001c36:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <GamePrep+0x208>)
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2306      	movs	r3, #6
 8001c40:	2209      	movs	r2, #9
 8001c42:	4959      	ldr	r1, [pc, #356]	; (8001da8 <GamePrep+0x20c>)
 8001c44:	f001 f977 	bl	8002f36 <HeaderInit>
	HeaderInit(dirtTexHeader, (uint8_t*) DirtTextureAssets, 1, 1, 6);
 8001c48:	4b58      	ldr	r3, [pc, #352]	; (8001dac <GamePrep+0x210>)
 8001c4a:	6818      	ldr	r0, [r3, #0]
 8001c4c:	2306      	movs	r3, #6
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2301      	movs	r3, #1
 8001c52:	2201      	movs	r2, #1
 8001c54:	4956      	ldr	r1, [pc, #344]	; (8001db0 <GamePrep+0x214>)
 8001c56:	f001 f96e 	bl	8002f36 <HeaderInit>
	HeaderInit(bumpAndDepressionHeader, (uint8_t*) BumpAndDepressionAssets, 1,
 8001c5a:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <GamePrep+0x218>)
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2302      	movs	r3, #2
 8001c64:	2201      	movs	r2, #1
 8001c66:	4954      	ldr	r1, [pc, #336]	; (8001db8 <GamePrep+0x21c>)
 8001c68:	f001 f965 	bl	8002f36 <HeaderInit>
			2, 2);

	dinoHeader = Append(dinoHeader, DinoNormalStand, DinoXPosDefault,
 8001c6c:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <GamePrep+0x1e8>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	eddf 7a52 	vldr	s15, [pc, #328]	; 8001dbc <GamePrep+0x220>
 8001c74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c78:	ee17 3a90 	vmov	r3, s15
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	2204      	movs	r2, #4
 8001c80:	2100      	movs	r1, #0
 8001c82:	f001 f872 	bl	8002d6a <Append>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a3e      	ldr	r2, [pc, #248]	; (8001d84 <GamePrep+0x1e8>)
 8001c8a:	6013      	str	r3, [r2, #0]
			dinoGroundPos);
	fireHeader = Append(fireHeader, CloudNormal, 24, 52);
 8001c8c:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <GamePrep+0x1f0>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	2334      	movs	r3, #52	; 0x34
 8001c92:	2218      	movs	r2, #24
 8001c94:	2100      	movs	r1, #0
 8001c96:	f001 f868 	bl	8002d6a <Append>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a3b      	ldr	r2, [pc, #236]	; (8001d8c <GamePrep+0x1f0>)
 8001c9e:	6013      	str	r3, [r2, #0]

	LCD_Fill(flipStatus);
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <GamePrep+0x1b8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fde9 	bl	800187c <LCD_Fill>
	LCD_DrawLine(77, 0, 29, DRAWMODE_ADD, flipStatus);
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <GamePrep+0x1b8>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	221d      	movs	r2, #29
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	204d      	movs	r0, #77	; 0x4d
 8001cb8:	f7ff fcba 	bl	8001630 <LCD_DrawLine>
	LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 7, 10, DRAWMODE_CULL,
 8001cbc:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <GamePrep+0x1e8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cc4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8001cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cd0:	edc7 7a00 	vstr	s15, [r7]
 8001cd4:	783b      	ldrb	r3, [r7, #0]
 8001cd6:	b2d8      	uxtb	r0, r3
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <GamePrep+0x1e8>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ce0:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8001ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cec:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <GamePrep+0x1b8>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	220a      	movs	r2, #10
 8001cf6:	ee17 1a90 	vmov	r1, s15
 8001cfa:	f7ff fc99 	bl	8001630 <LCD_DrawLine>
			flipStatus);
	LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <GamePrep+0x1e8>)
 8001d00:	6818      	ldr	r0, [r3, #0]
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <GamePrep+0x1b8>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	f7ff fa91 	bl	8001230 <LCD_LoadObjs>

	LCD_Print("dev\tver.", 40, 85, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <GamePrep+0x1b8>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2300      	movs	r3, #0
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2255      	movs	r2, #85	; 0x55
 8001d1c:	2128      	movs	r1, #40	; 0x28
 8001d1e:	4828      	ldr	r0, [pc, #160]	; (8001dc0 <GamePrep+0x224>)
 8001d20:	f7ff fdc4 	bl	80018ac <LCD_Print>

	LCD_UpdateFull(display);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff f9b5 	bl	8001094 <LCD_UpdateFull>
	while (!GetButtonDown(JUMP_BUTTON))
 8001d2a:	bf00      	nop
 8001d2c:	2004      	movs	r0, #4
 8001d2e:	f7ff fec9 	bl	8001ac4 <GetButtonDown>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f6      	bne.n	8001d2c <GamePrep+0x190>
		;
	dinoVel = initVel;
 8001d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d42:	4b20      	ldr	r3, [pc, #128]	; (8001dc4 <GamePrep+0x228>)
 8001d44:	601a      	str	r2, [r3, #0]
	dinoState = JUMPING;
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <GamePrep+0x22c>)
 8001d48:	2203      	movs	r2, #3
 8001d4a:	701a      	strb	r2, [r3, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200000d0 	.word	0x200000d0
 8001d58:	200000d2 	.word	0x200000d2
 8001d5c:	200000d4 	.word	0x200000d4
 8001d60:	200000d8 	.word	0x200000d8
 8001d64:	200000d6 	.word	0x200000d6
 8001d68:	200000bc 	.word	0x200000bc
 8001d6c:	200000c0 	.word	0x200000c0
 8001d70:	200000cc 	.word	0x200000cc
 8001d74:	200000c8 	.word	0x200000c8
 8001d78:	200000db 	.word	0x200000db
 8001d7c:	200000b8 	.word	0x200000b8
 8001d80:	200000dc 	.word	0x200000dc
 8001d84:	200000e8 	.word	0x200000e8
 8001d88:	08006b60 	.word	0x08006b60
 8001d8c:	200000ec 	.word	0x200000ec
 8001d90:	08007030 	.word	0x08007030
 8001d94:	200000f4 	.word	0x200000f4
 8001d98:	08006a30 	.word	0x08006a30
 8001d9c:	200000f8 	.word	0x200000f8
 8001da0:	08006a84 	.word	0x08006a84
 8001da4:	200000f0 	.word	0x200000f0
 8001da8:	08007200 	.word	0x08007200
 8001dac:	200000fc 	.word	0x200000fc
 8001db0:	080071f8 	.word	0x080071f8
 8001db4:	20000100 	.word	0x20000100
 8001db8:	080071f4 	.word	0x080071f4
 8001dbc:	42680000 	.word	0x42680000
 8001dc0:	08006a20 	.word	0x08006a20
 8001dc4:	200000b4 	.word	0x200000b4
 8001dc8:	200000da 	.word	0x200000da
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <GameTick>:

uint8_t GameTick(LS013B4DN04 *display) {
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]

	// Day and night invertion
	flipStatus = ((tick / 800) % 3 == 2) ? 1 : 0;
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	; (8001f84 <GameTick+0x1b4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6a      	ldr	r2, [pc, #424]	; (8001f88 <GameTick+0x1b8>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0a19      	lsrs	r1, r3, #8
 8001de4:	4b69      	ldr	r3, [pc, #420]	; (8001f8c <GameTick+0x1bc>)
 8001de6:	fba3 2301 	umull	r2, r3, r3, r1
 8001dea:	085a      	lsrs	r2, r3, #1
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	1aca      	subs	r2, r1, r3
 8001df4:	2a02      	cmp	r2, #2
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b64      	ldr	r3, [pc, #400]	; (8001f90 <GameTick+0x1c0>)
 8001e00:	701a      	strb	r2, [r3, #0]
	LCD_Fill(flipStatus);
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <GameTick+0x1c0>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fd38 	bl	800187c <LCD_Fill>

	switch (dinoState) {
 8001e0c:	4b61      	ldr	r3, [pc, #388]	; (8001f94 <GameTick+0x1c4>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d877      	bhi.n	8001f06 <GameTick+0x136>
	case JUMPING:
	case GLIDING:
	case DODGING:
		// Dino above ground
		if (dinoHeader->y <= dinoGroundPos) {
 8001e16:	4b60      	ldr	r3, [pc, #384]	; (8001f98 <GameTick+0x1c8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e1e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001f9c <GameTick+0x1cc>
 8001e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2a:	d86c      	bhi.n	8001f06 <GameTick+0x136>

			dinoHeader->y -= dinoVel;
 8001e2c:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <GameTick+0x1c8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e34:	4b5a      	ldr	r3, [pc, #360]	; (8001fa0 <GameTick+0x1d0>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	4b57      	ldr	r3, [pc, #348]	; (8001f98 <GameTick+0x1c8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e42:	edc3 7a02 	vstr	s15, [r3, #8]
			if (GetButton(GLIDE_BUTTON) && dinoVel < 0) {
 8001e46:	2001      	movs	r0, #1
 8001e48:	f7ff fe28 	bl	8001a9c <GetButton>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d026      	beq.n	8001ea0 <GameTick+0xd0>
 8001e52:	4b53      	ldr	r3, [pc, #332]	; (8001fa0 <GameTick+0x1d0>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	d51e      	bpl.n	8001ea0 <GameTick+0xd0>
				dinoState = GLIDING;
 8001e62:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <GameTick+0x1c4>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	701a      	strb	r2, [r3, #0]
				dinoVel -= gravity;
 8001e68:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <GameTick+0x1d0>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001fa4 <GameTick+0x1d4>
 8001e72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e76:	4b4a      	ldr	r3, [pc, #296]	; (8001fa0 <GameTick+0x1d0>)
 8001e78:	edc3 7a00 	vstr	s15, [r3]
				dinoVel += -dinoVel * parachuteGrag;
 8001e7c:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <GameTick+0x1d0>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	eef1 7a67 	vneg.f32	s15, s15
 8001e86:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001fa8 <GameTick+0x1d8>
 8001e8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e8e:	4b44      	ldr	r3, [pc, #272]	; (8001fa0 <GameTick+0x1d0>)
 8001e90:	edd3 7a00 	vldr	s15, [r3]
 8001e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e98:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <GameTick+0x1d0>)
 8001e9a:	edc3 7a00 	vstr	s15, [r3]
				dinoState = JUMPING;
				dinoVel -=
						GetButton(JUMP_BUTTON) ?
								(gravity * longPressGravityMul) : gravity;
			}
			break;
 8001e9e:	e091      	b.n	8001fc4 <GameTick+0x1f4>
			} else if (GetButton(DODGE_BUTTON)) {
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f7ff fdfb 	bl	8001a9c <GetButton>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d011      	beq.n	8001ed0 <GameTick+0x100>
				dinoState = DODGING;
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <GameTick+0x1c4>)
 8001eae:	2205      	movs	r2, #5
 8001eb0:	701a      	strb	r2, [r3, #0]
				dinoVel -= gravity * dodgeGravityMul;
 8001eb2:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <GameTick+0x1d0>)
 8001eb4:	ed93 7a00 	vldr	s14, [r3]
 8001eb8:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001fa4 <GameTick+0x1d4>
 8001ebc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8001ec0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ec4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec8:	4b35      	ldr	r3, [pc, #212]	; (8001fa0 <GameTick+0x1d0>)
 8001eca:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001ece:	e079      	b.n	8001fc4 <GameTick+0x1f4>
				dinoState = JUMPING;
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <GameTick+0x1c4>)
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	701a      	strb	r2, [r3, #0]
						GetButton(JUMP_BUTTON) ?
 8001ed6:	2004      	movs	r0, #4
 8001ed8:	f7ff fde0 	bl	8001a9c <GetButton>
 8001edc:	4603      	mov	r3, r0
								(gravity * longPressGravityMul) : gravity;
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <GameTick+0x120>
 8001ee2:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001fa4 <GameTick+0x1d4>
 8001ee6:	eddf 7a31 	vldr	s15, [pc, #196]	; 8001fac <GameTick+0x1dc>
 8001eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eee:	e001      	b.n	8001ef4 <GameTick+0x124>
 8001ef0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8001fa4 <GameTick+0x1d4>
				dinoVel -=
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <GameTick+0x1d0>)
 8001ef6:	ed93 7a00 	vldr	s14, [r3]
 8001efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efe:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <GameTick+0x1d0>)
 8001f00:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001f04:	e05e      	b.n	8001fc4 <GameTick+0x1f4>
		}
		// First land continue

	default:
		dinoHeader->y = dinoGroundPos;
 8001f06:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <GameTick+0x1c8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a29      	ldr	r2, [pc, #164]	; (8001fb0 <GameTick+0x1e0>)
 8001f0c:	609a      	str	r2, [r3, #8]
		dinoVel = 0;
 8001f0e:	4b24      	ldr	r3, [pc, #144]	; (8001fa0 <GameTick+0x1d0>)
 8001f10:	f04f 0200 	mov.w	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

		if (GetButtonDown(JUMP_BUTTON)) {
 8001f16:	2004      	movs	r0, #4
 8001f18:	f7ff fdd4 	bl	8001ac4 <GetButtonDown>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <GameTick+0x162>
			dinoVel = initVel;
 8001f22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <GameTick+0x1d0>)
 8001f28:	601a      	str	r2, [r3, #0]
			dinoState = JUMPING;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <GameTick+0x1c4>)
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	701a      	strb	r2, [r3, #0]
			dinoState = FIRING;
		} else {
			dinoState = RUNNING;
		}

		break;
 8001f30:	e047      	b.n	8001fc2 <GameTick+0x1f2>
		} else if (GetButton(DODGE_BUTTON)) {
 8001f32:	2002      	movs	r0, #2
 8001f34:	f7ff fdb2 	bl	8001a9c <GetButton>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <GameTick+0x176>
			dinoState = DODGING;
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <GameTick+0x1c4>)
 8001f40:	2205      	movs	r2, #5
 8001f42:	701a      	strb	r2, [r3, #0]
		break;
 8001f44:	e03d      	b.n	8001fc2 <GameTick+0x1f2>
		} else if (GetButtonDown(FIRE_BUTTON)) {
 8001f46:	2003      	movs	r0, #3
 8001f48:	f7ff fdbc 	bl	8001ac4 <GetButtonDown>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00e      	beq.n	8001f70 <GameTick+0x1a0>
			fireTick = fireTickLength;
 8001f52:	2314      	movs	r3, #20
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <GameTick+0x1e4>)
 8001f58:	601a      	str	r2, [r3, #0]
			lavaHeader = Append(lavaHeader, 0, 57, 71);
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <GameTick+0x1e8>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	2347      	movs	r3, #71	; 0x47
 8001f60:	2239      	movs	r2, #57	; 0x39
 8001f62:	2100      	movs	r1, #0
 8001f64:	f000 ff01 	bl	8002d6a <Append>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4a13      	ldr	r2, [pc, #76]	; (8001fb8 <GameTick+0x1e8>)
 8001f6c:	6013      	str	r3, [r2, #0]
		break;
 8001f6e:	e028      	b.n	8001fc2 <GameTick+0x1f2>
		} else if (GetButton(FIRE_BUTTON)) {
 8001f70:	2003      	movs	r0, #3
 8001f72:	f7ff fd93 	bl	8001a9c <GetButton>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01f      	beq.n	8001fbc <GameTick+0x1ec>
			dinoState = FIRING;
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <GameTick+0x1c4>)
 8001f7e:	2202      	movs	r2, #2
 8001f80:	701a      	strb	r2, [r3, #0]
		break;
 8001f82:	e01e      	b.n	8001fc2 <GameTick+0x1f2>
 8001f84:	200000b8 	.word	0x200000b8
 8001f88:	51eb851f 	.word	0x51eb851f
 8001f8c:	aaaaaaab 	.word	0xaaaaaaab
 8001f90:	200000d0 	.word	0x200000d0
 8001f94:	200000da 	.word	0x200000da
 8001f98:	200000e8 	.word	0x200000e8
 8001f9c:	42680000 	.word	0x42680000
 8001fa0:	200000b4 	.word	0x200000b4
 8001fa4:	3da3d70a 	.word	0x3da3d70a
 8001fa8:	3e99999a 	.word	0x3e99999a
 8001fac:	3f19999a 	.word	0x3f19999a
 8001fb0:	42680000 	.word	0x42680000
 8001fb4:	200000c4 	.word	0x200000c4
 8001fb8:	200000f0 	.word	0x200000f0
			dinoState = RUNNING;
 8001fbc:	4ba8      	ldr	r3, [pc, #672]	; (8002260 <GameTick+0x490>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
		break;
 8001fc2:	bf00      	nop
	}

	// Plant generation
	if (tick - softStartTickLength - plantTick == nextPlantTickDel) {
 8001fc4:	4ba7      	ldr	r3, [pc, #668]	; (8002264 <GameTick+0x494>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	22c8      	movs	r2, #200	; 0xc8
 8001fca:	1a9a      	subs	r2, r3, r2
 8001fcc:	4ba6      	ldr	r3, [pc, #664]	; (8002268 <GameTick+0x498>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	4aa6      	ldr	r2, [pc, #664]	; (800226c <GameTick+0x49c>)
 8001fd4:	8812      	ldrh	r2, [r2, #0]
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11b      	bne.n	8002012 <GameTick+0x242>
		plantHeader = Append(plantHeader, PlantNormal, 96, 59);
 8001fda:	4ba5      	ldr	r3, [pc, #660]	; (8002270 <GameTick+0x4a0>)
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	233b      	movs	r3, #59	; 0x3b
 8001fe0:	2260      	movs	r2, #96	; 0x60
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	f000 fec1 	bl	8002d6a <Append>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4aa1      	ldr	r2, [pc, #644]	; (8002270 <GameTick+0x4a0>)
 8001fec:	6013      	str	r3, [r2, #0]
		nextPlantTickDel = Random(tick, 80, 330);
 8001fee:	4b9d      	ldr	r3, [pc, #628]	; (8002264 <GameTick+0x494>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001ff6:	2150      	movs	r1, #80	; 0x50
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 f844 	bl	8003086 <Random>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b29a      	uxth	r2, r3
 8002002:	4b9a      	ldr	r3, [pc, #616]	; (800226c <GameTick+0x49c>)
 8002004:	801a      	strh	r2, [r3, #0]
		plantTick = tick - softStartTickLength;
 8002006:	4b97      	ldr	r3, [pc, #604]	; (8002264 <GameTick+0x494>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	22c8      	movs	r2, #200	; 0xc8
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	4a96      	ldr	r2, [pc, #600]	; (8002268 <GameTick+0x498>)
 8002010:	6013      	str	r3, [r2, #0]
	}
	// Cloud generation
	if (tick - softStartTickLength - cloudTick == nextCloudTickDel) {
 8002012:	4b94      	ldr	r3, [pc, #592]	; (8002264 <GameTick+0x494>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	22c8      	movs	r2, #200	; 0xc8
 8002018:	1a9a      	subs	r2, r3, r2
 800201a:	4b96      	ldr	r3, [pc, #600]	; (8002274 <GameTick+0x4a4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a95      	ldr	r2, [pc, #596]	; (8002278 <GameTick+0x4a8>)
 8002022:	8812      	ldrh	r2, [r2, #0]
 8002024:	4293      	cmp	r3, r2
 8002026:	d124      	bne.n	8002072 <GameTick+0x2a2>
		cloudHeader = Append(cloudHeader, CloudNormal, 96,
 8002028:	4b94      	ldr	r3, [pc, #592]	; (800227c <GameTick+0x4ac>)
 800202a:	681c      	ldr	r4, [r3, #0]
 800202c:	4b8d      	ldr	r3, [pc, #564]	; (8002264 <GameTick+0x494>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2214      	movs	r2, #20
 8002032:	210c      	movs	r1, #12
 8002034:	4618      	mov	r0, r3
 8002036:	f001 f826 	bl	8003086 <Random>
 800203a:	4603      	mov	r3, r0
 800203c:	2260      	movs	r2, #96	; 0x60
 800203e:	2100      	movs	r1, #0
 8002040:	4620      	mov	r0, r4
 8002042:	f000 fe92 	bl	8002d6a <Append>
 8002046:	4603      	mov	r3, r0
 8002048:	4a8c      	ldr	r2, [pc, #560]	; (800227c <GameTick+0x4ac>)
 800204a:	6013      	str	r3, [r2, #0]
				Random(tick, 12, 20));
		nextCloudTickDel = Random(tick, 1200, 2000);
 800204c:	4b85      	ldr	r3, [pc, #532]	; (8002264 <GameTick+0x494>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002054:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f814 	bl	8003086 <Random>
 800205e:	4603      	mov	r3, r0
 8002060:	b29a      	uxth	r2, r3
 8002062:	4b85      	ldr	r3, [pc, #532]	; (8002278 <GameTick+0x4a8>)
 8002064:	801a      	strh	r2, [r3, #0]
		cloudTick = tick - softStartTickLength;
 8002066:	4b7f      	ldr	r3, [pc, #508]	; (8002264 <GameTick+0x494>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	22c8      	movs	r2, #200	; 0xc8
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	4a81      	ldr	r2, [pc, #516]	; (8002274 <GameTick+0x4a4>)
 8002070:	6013      	str	r3, [r2, #0]
	}
	// Dirt texture generation
	if (tick - softStartTickLength - dirtTexTick == nextDirtTexTickDel) {
 8002072:	4b7c      	ldr	r3, [pc, #496]	; (8002264 <GameTick+0x494>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	22c8      	movs	r2, #200	; 0xc8
 8002078:	1a9a      	subs	r2, r3, r2
 800207a:	4b81      	ldr	r3, [pc, #516]	; (8002280 <GameTick+0x4b0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	4a80      	ldr	r2, [pc, #512]	; (8002284 <GameTick+0x4b4>)
 8002082:	8812      	ldrh	r2, [r2, #0]
 8002084:	4293      	cmp	r3, r2
 8002086:	d12b      	bne.n	80020e0 <GameTick+0x310>

		dirtTexHeader = Append(dirtTexHeader, Random(tick, 2, 6), 96,
 8002088:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <GameTick+0x4b8>)
 800208a:	681c      	ldr	r4, [r3, #0]
 800208c:	4b75      	ldr	r3, [pc, #468]	; (8002264 <GameTick+0x494>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2206      	movs	r2, #6
 8002092:	2102      	movs	r1, #2
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fff6 	bl	8003086 <Random>
 800209a:	4603      	mov	r3, r0
 800209c:	b2dd      	uxtb	r5, r3
 800209e:	4b71      	ldr	r3, [pc, #452]	; (8002264 <GameTick+0x494>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2257      	movs	r2, #87	; 0x57
 80020a4:	2153      	movs	r1, #83	; 0x53
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 ffed 	bl	8003086 <Random>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2260      	movs	r2, #96	; 0x60
 80020b0:	4629      	mov	r1, r5
 80020b2:	4620      	mov	r0, r4
 80020b4:	f000 fe59 	bl	8002d6a <Append>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4a73      	ldr	r2, [pc, #460]	; (8002288 <GameTick+0x4b8>)
 80020bc:	6013      	str	r3, [r2, #0]
				Random(tick, 83, 87));

		nextDirtTexTickDel = Random(tick, 8, 30);
 80020be:	4b69      	ldr	r3, [pc, #420]	; (8002264 <GameTick+0x494>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	221e      	movs	r2, #30
 80020c4:	2108      	movs	r1, #8
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ffdd 	bl	8003086 <Random>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b6c      	ldr	r3, [pc, #432]	; (8002284 <GameTick+0x4b4>)
 80020d2:	801a      	strh	r2, [r3, #0]
		dirtTexTick = tick - softStartTickLength;
 80020d4:	4b63      	ldr	r3, [pc, #396]	; (8002264 <GameTick+0x494>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	22c8      	movs	r2, #200	; 0xc8
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	4a68      	ldr	r2, [pc, #416]	; (8002280 <GameTick+0x4b0>)
 80020de:	6013      	str	r3, [r2, #0]
	}
	// Bumps and depressions generation
	if (tick - softStartTickLength - bumpOrDepressionTick
 80020e0:	4b60      	ldr	r3, [pc, #384]	; (8002264 <GameTick+0x494>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	22c8      	movs	r2, #200	; 0xc8
 80020e6:	1a9a      	subs	r2, r3, r2
 80020e8:	4b68      	ldr	r3, [pc, #416]	; (800228c <GameTick+0x4bc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	1ad3      	subs	r3, r2, r3
			== nextBumpOrDepressionTickDel) {
 80020ee:	4a68      	ldr	r2, [pc, #416]	; (8002290 <GameTick+0x4c0>)
 80020f0:	8812      	ldrh	r2, [r2, #0]
	if (tick - softStartTickLength - bumpOrDepressionTick
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12f      	bne.n	8002156 <GameTick+0x386>
		if (Random(tick, 0, 1)) {
 80020f6:	4b5b      	ldr	r3, [pc, #364]	; (8002264 <GameTick+0x494>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 ffc1 	bl	8003086 <Random>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <GameTick+0x350>
			bumpAndDepressionHeader = Append(bumpAndDepressionHeader,
 800210a:	4b62      	ldr	r3, [pc, #392]	; (8002294 <GameTick+0x4c4>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	234b      	movs	r3, #75	; 0x4b
 8002110:	2260      	movs	r2, #96	; 0x60
 8002112:	2100      	movs	r1, #0
 8002114:	f000 fe29 	bl	8002d6a <Append>
 8002118:	4603      	mov	r3, r0
 800211a:	4a5e      	ldr	r2, [pc, #376]	; (8002294 <GameTick+0x4c4>)
 800211c:	6013      	str	r3, [r2, #0]
 800211e:	e009      	b.n	8002134 <GameTick+0x364>
			Bump, 96, 75);
		} else {
			bumpAndDepressionHeader = Append(bumpAndDepressionHeader,
 8002120:	4b5c      	ldr	r3, [pc, #368]	; (8002294 <GameTick+0x4c4>)
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	234e      	movs	r3, #78	; 0x4e
 8002126:	2260      	movs	r2, #96	; 0x60
 8002128:	2101      	movs	r1, #1
 800212a:	f000 fe1e 	bl	8002d6a <Append>
 800212e:	4603      	mov	r3, r0
 8002130:	4a58      	ldr	r2, [pc, #352]	; (8002294 <GameTick+0x4c4>)
 8002132:	6013      	str	r3, [r2, #0]
			Depression, 96, 78);
		}

		nextBumpOrDepressionTickDel = Random(tick, 20, 150);
 8002134:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <GameTick+0x494>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2296      	movs	r2, #150	; 0x96
 800213a:	2114      	movs	r1, #20
 800213c:	4618      	mov	r0, r3
 800213e:	f000 ffa2 	bl	8003086 <Random>
 8002142:	4603      	mov	r3, r0
 8002144:	b29a      	uxth	r2, r3
 8002146:	4b52      	ldr	r3, [pc, #328]	; (8002290 <GameTick+0x4c0>)
 8002148:	801a      	strh	r2, [r3, #0]
		bumpOrDepressionTick = tick - softStartTickLength;
 800214a:	4b46      	ldr	r3, [pc, #280]	; (8002264 <GameTick+0x494>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	22c8      	movs	r2, #200	; 0xc8
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	4a4e      	ldr	r2, [pc, #312]	; (800228c <GameTick+0x4bc>)
 8002154:	6013      	str	r3, [r2, #0]
	}

	// Roll ground plane
	if (groundLength < 96) {
 8002156:	4b50      	ldr	r3, [pc, #320]	; (8002298 <GameTick+0x4c8>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b5f      	cmp	r3, #95	; 0x5f
 800215c:	d810      	bhi.n	8002180 <GameTick+0x3b0>

		LCD_DrawLine(77, 0, groundLength, DRAWMODE_ADD, flipStatus);
 800215e:	4b4e      	ldr	r3, [pc, #312]	; (8002298 <GameTick+0x4c8>)
 8002160:	781a      	ldrb	r2, [r3, #0]
 8002162:	4b4e      	ldr	r3, [pc, #312]	; (800229c <GameTick+0x4cc>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2300      	movs	r3, #0
 800216a:	2100      	movs	r1, #0
 800216c:	204d      	movs	r0, #77	; 0x4d
 800216e:	f7ff fa5f 	bl	8001630 <LCD_DrawLine>
		groundLength++;
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <GameTick+0x4c8>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	3301      	adds	r3, #1
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4b47      	ldr	r3, [pc, #284]	; (8002298 <GameTick+0x4c8>)
 800217c:	701a      	strb	r2, [r3, #0]
 800217e:	e008      	b.n	8002192 <GameTick+0x3c2>
	} else {

		// Still ground plane
		LCD_DrawLine(77, 0, 96, DRAWMODE_ADD, flipStatus);
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <GameTick+0x4cc>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	2260      	movs	r2, #96	; 0x60
 800218a:	2100      	movs	r1, #0
 800218c:	204d      	movs	r0, #77	; 0x4d
 800218e:	f7ff fa4f 	bl	8001630 <LCD_DrawLine>
	}

	// Ground objs shift
	plantHeader = ShiftX(plantHeader, -1 * overallSpeed);
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <GameTick+0x4a0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a42      	ldr	r2, [pc, #264]	; (80022a0 <GameTick+0x4d0>)
 8002198:	edd2 7a00 	vldr	s15, [r2]
 800219c:	eef1 7a67 	vneg.f32	s15, s15
 80021a0:	eeb0 0a67 	vmov.f32	s0, s15
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fef5 	bl	8002f94 <ShiftX>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4a30      	ldr	r2, [pc, #192]	; (8002270 <GameTick+0x4a0>)
 80021ae:	6013      	str	r3, [r2, #0]
	lavaHeader = ShiftX(lavaHeader, -1 * overallSpeed);
 80021b0:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <GameTick+0x4d4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <GameTick+0x4d0>)
 80021b6:	edd2 7a00 	vldr	s15, [r2]
 80021ba:	eef1 7a67 	vneg.f32	s15, s15
 80021be:	eeb0 0a67 	vmov.f32	s0, s15
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fee6 	bl	8002f94 <ShiftX>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a36      	ldr	r2, [pc, #216]	; (80022a4 <GameTick+0x4d4>)
 80021cc:	6013      	str	r3, [r2, #0]
	dirtTexHeader = ShiftX(dirtTexHeader, -1 * overallSpeed);
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <GameTick+0x4b8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a33      	ldr	r2, [pc, #204]	; (80022a0 <GameTick+0x4d0>)
 80021d4:	edd2 7a00 	vldr	s15, [r2]
 80021d8:	eef1 7a67 	vneg.f32	s15, s15
 80021dc:	eeb0 0a67 	vmov.f32	s0, s15
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fed7 	bl	8002f94 <ShiftX>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4a27      	ldr	r2, [pc, #156]	; (8002288 <GameTick+0x4b8>)
 80021ea:	6013      	str	r3, [r2, #0]
	bumpAndDepressionHeader = ShiftX(bumpAndDepressionHeader,
 80021ec:	4b29      	ldr	r3, [pc, #164]	; (8002294 <GameTick+0x4c4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a2b      	ldr	r2, [pc, #172]	; (80022a0 <GameTick+0x4d0>)
 80021f2:	edd2 7a00 	vldr	s15, [r2]
 80021f6:	eef1 7a67 	vneg.f32	s15, s15
 80021fa:	eeb0 0a67 	vmov.f32	s0, s15
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fec8 	bl	8002f94 <ShiftX>
 8002204:	4603      	mov	r3, r0
 8002206:	4a23      	ldr	r2, [pc, #140]	; (8002294 <GameTick+0x4c4>)
 8002208:	6013      	str	r3, [r2, #0]
			-1 * overallSpeed);

	// Air objs shift
	cloudHeader = ShiftX(cloudHeader, -0.1 * overallSpeed);
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <GameTick+0x4ac>)
 800220c:	681c      	ldr	r4, [r3, #0]
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <GameTick+0x4d0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe f9a0 	bl	8000558 <__aeabi_f2d>
 8002218:	a30f      	add	r3, pc, #60	; (adr r3, 8002258 <GameTick+0x488>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f7fe f9f3 	bl	8000608 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f7fe fccf 	bl	8000bcc <__aeabi_d2f>
 800222e:	4603      	mov	r3, r0
 8002230:	ee00 3a10 	vmov	s0, r3
 8002234:	4620      	mov	r0, r4
 8002236:	f000 fead 	bl	8002f94 <ShiftX>
 800223a:	4603      	mov	r3, r0
 800223c:	4a0f      	ldr	r2, [pc, #60]	; (800227c <GameTick+0x4ac>)
 800223e:	6013      	str	r3, [r2, #0]

	// Cull plant
	ptr = plantHeader;
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <GameTick+0x4a0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <GameTick+0x4d8>)
 8002246:	6013      	str	r3, [r2, #0]
	for (;;) {
		if (ptr->full) {
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <GameTick+0x4d8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	7c1b      	ldrb	r3, [r3, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d046      	beq.n	80022e0 <GameTick+0x510>
			for (uint8_t y = 71; y <= 77; y++) {
 8002252:	2347      	movs	r3, #71	; 0x47
 8002254:	73fb      	strb	r3, [r7, #15]
 8002256:	e040      	b.n	80022da <GameTick+0x50a>
 8002258:	9999999a 	.word	0x9999999a
 800225c:	bfb99999 	.word	0xbfb99999
 8002260:	200000da 	.word	0x200000da
 8002264:	200000b8 	.word	0x200000b8
 8002268:	200000bc 	.word	0x200000bc
 800226c:	200000d2 	.word	0x200000d2
 8002270:	200000f8 	.word	0x200000f8
 8002274:	200000c0 	.word	0x200000c0
 8002278:	200000d4 	.word	0x200000d4
 800227c:	200000f4 	.word	0x200000f4
 8002280:	200000cc 	.word	0x200000cc
 8002284:	200000d8 	.word	0x200000d8
 8002288:	200000fc 	.word	0x200000fc
 800228c:	200000c8 	.word	0x200000c8
 8002290:	200000d6 	.word	0x200000d6
 8002294:	20000100 	.word	0x20000100
 8002298:	200000db 	.word	0x200000db
 800229c:	200000d0 	.word	0x200000d0
 80022a0:	200000dc 	.word	0x200000dc
 80022a4:	200000f0 	.word	0x200000f0
 80022a8:	200000e0 	.word	0x200000e0
				LCD_DrawLine(y, ptr->x + 2, 6, DRAWMODE_CULL, flipStatus);
 80022ac:	4ba6      	ldr	r3, [pc, #664]	; (8002548 <GameTick+0x778>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80022b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80022b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c0:	4ba2      	ldr	r3, [pc, #648]	; (800254c <GameTick+0x77c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	7bf8      	ldrb	r0, [r7, #15]
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	2301      	movs	r3, #1
 80022ca:	2206      	movs	r2, #6
 80022cc:	ee17 1a90 	vmov	r1, s15
 80022d0:	f7ff f9ae 	bl	8001630 <LCD_DrawLine>
			for (uint8_t y = 71; y <= 77; y++) {
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	3301      	adds	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	2b4d      	cmp	r3, #77	; 0x4d
 80022de:	d9e5      	bls.n	80022ac <GameTick+0x4dc>
			}
		}
		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == plantHeader)
 80022e0:	4b99      	ldr	r3, [pc, #612]	; (8002548 <GameTick+0x778>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	7c1b      	ldrb	r3, [r3, #16]
 80022e8:	f083 0301 	eor.w	r3, r3, #1
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <GameTick+0x53c>
 80022f2:	4b95      	ldr	r3, [pc, #596]	; (8002548 <GameTick+0x778>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	4b95      	ldr	r3, [pc, #596]	; (8002550 <GameTick+0x780>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d005      	beq.n	800230c <GameTick+0x53c>
			break;

		ptr = ptr->next;
 8002300:	4b91      	ldr	r3, [pc, #580]	; (8002548 <GameTick+0x778>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <GameTick+0x778>)
 8002308:	6013      	str	r3, [r2, #0]
		if (ptr->full) {
 800230a:	e79d      	b.n	8002248 <GameTick+0x478>
	}

	// Cull bumps
	ptr = bumpAndDepressionHeader;
 800230c:	4b91      	ldr	r3, [pc, #580]	; (8002554 <GameTick+0x784>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a8d      	ldr	r2, [pc, #564]	; (8002548 <GameTick+0x778>)
 8002312:	6013      	str	r3, [r2, #0]
	for (;;) {
		if (ptr->full) {
 8002314:	4b8c      	ldr	r3, [pc, #560]	; (8002548 <GameTick+0x778>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	7c1b      	ldrb	r3, [r3, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d013      	beq.n	8002346 <GameTick+0x576>

			LCD_DrawLine(77, ptr->x + 1, 6, DRAWMODE_CULL, flipStatus);
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <GameTick+0x778>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	edd3 7a01 	vldr	s15, [r3, #4]
 8002326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800232a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800232e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002332:	4b86      	ldr	r3, [pc, #536]	; (800254c <GameTick+0x77c>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	2301      	movs	r3, #1
 800233a:	2206      	movs	r2, #6
 800233c:	ee17 1a90 	vmov	r1, s15
 8002340:	204d      	movs	r0, #77	; 0x4d
 8002342:	f7ff f975 	bl	8001630 <LCD_DrawLine>
		}
		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == bumpAndDepressionHeader)
 8002346:	4b80      	ldr	r3, [pc, #512]	; (8002548 <GameTick+0x778>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	7c1b      	ldrb	r3, [r3, #16]
 800234e:	f083 0301 	eor.w	r3, r3, #1
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d10c      	bne.n	8002372 <GameTick+0x5a2>
 8002358:	4b7b      	ldr	r3, [pc, #492]	; (8002548 <GameTick+0x778>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	4b7d      	ldr	r3, [pc, #500]	; (8002554 <GameTick+0x784>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d005      	beq.n	8002372 <GameTick+0x5a2>
			break;

		ptr = ptr->next;
 8002366:	4b78      	ldr	r3, [pc, #480]	; (8002548 <GameTick+0x778>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	4a76      	ldr	r2, [pc, #472]	; (8002548 <GameTick+0x778>)
 800236e:	6013      	str	r3, [r2, #0]
		if (ptr->full) {
 8002370:	e7d0      	b.n	8002314 <GameTick+0x544>
	}

	// Cull dino
	LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 7, 10, DRAWMODE_CULL,
 8002372:	4b79      	ldr	r3, [pc, #484]	; (8002558 <GameTick+0x788>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	edd3 7a02 	vldr	s15, [r3, #8]
 800237a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800237e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002386:	edc7 7a00 	vstr	s15, [r7]
 800238a:	783b      	ldrb	r3, [r7, #0]
 800238c:	b2d8      	uxtb	r0, r3
 800238e:	4b72      	ldr	r3, [pc, #456]	; (8002558 <GameTick+0x788>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	edd3 7a01 	vldr	s15, [r3, #4]
 8002396:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 800239a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800239e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a2:	4b6a      	ldr	r3, [pc, #424]	; (800254c <GameTick+0x77c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2301      	movs	r3, #1
 80023aa:	220a      	movs	r2, #10
 80023ac:	ee17 1a90 	vmov	r1, s15
 80023b0:	f7ff f93e 	bl	8001630 <LCD_DrawLine>
			flipStatus);

	if (fireTick > 0) {
 80023b4:	4b69      	ldr	r3, [pc, #420]	; (800255c <GameTick+0x78c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d028      	beq.n	800240e <GameTick+0x63e>
		fireTick--;
 80023bc:	4b67      	ldr	r3, [pc, #412]	; (800255c <GameTick+0x78c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	4a66      	ldr	r2, [pc, #408]	; (800255c <GameTick+0x78c>)
 80023c4:	6013      	str	r3, [r2, #0]

		UpdateHeaderBmpIndex(fireHeader,
 80023c6:	4b66      	ldr	r3, [pc, #408]	; (8002560 <GameTick+0x790>)
 80023c8:	681a      	ldr	r2, [r3, #0]
				((fireTickLength - fireTick) / (int) (12 / overallSpeed)) % 2);
 80023ca:	2314      	movs	r3, #20
 80023cc:	4619      	mov	r1, r3
 80023ce:	4b63      	ldr	r3, [pc, #396]	; (800255c <GameTick+0x78c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	1acb      	subs	r3, r1, r3
 80023d4:	4963      	ldr	r1, [pc, #396]	; (8002564 <GameTick+0x794>)
 80023d6:	ed91 7a00 	vldr	s14, [r1]
 80023da:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80023de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e6:	ee17 1a90 	vmov	r1, s15
 80023ea:	fbb3 f3f1 	udiv	r3, r3, r1
		UpdateHeaderBmpIndex(fireHeader,
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f000 fd2b 	bl	8002e54 <UpdateHeaderBmpIndex>
		LCD_LoadObjs(fireHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 80023fe:	4b58      	ldr	r3, [pc, #352]	; (8002560 <GameTick+0x790>)
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	4b52      	ldr	r3, [pc, #328]	; (800254c <GameTick+0x77c>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	f7fe ff11 	bl	8001230 <LCD_LoadObjs>

	}

	UpdateAllBmpIndexs(lavaHeader, (tick / (int) (16 / overallSpeed)) % 4);
 800240e:	4b56      	ldr	r3, [pc, #344]	; (8002568 <GameTick+0x798>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <GameTick+0x79c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4953      	ldr	r1, [pc, #332]	; (8002564 <GameTick+0x794>)
 8002418:	ed91 7a00 	vldr	s14, [r1]
 800241c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002420:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002424:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002428:	ee17 1a90 	vmov	r1, s15
 800242c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002430:	b2db      	uxtb	r3, r3
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f000 fd19 	bl	8002e72 <UpdateAllBmpIndexs>

	LCD_LoadObjs(lavaHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8002440:	4b49      	ldr	r3, [pc, #292]	; (8002568 <GameTick+0x798>)
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <GameTick+0x77c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	f7fe fef0 	bl	8001230 <LCD_LoadObjs>

	LCD_LoadObjs(plantHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <GameTick+0x780>)
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <GameTick+0x77c>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	f7fe fee8 	bl	8001230 <LCD_LoadObjs>
	LCD_LoadObjs(cloudHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8002460:	4b43      	ldr	r3, [pc, #268]	; (8002570 <GameTick+0x7a0>)
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	4b39      	ldr	r3, [pc, #228]	; (800254c <GameTick+0x77c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	f7fe fee0 	bl	8001230 <LCD_LoadObjs>
	LCD_LoadObjs(dirtTexHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8002470:	4b40      	ldr	r3, [pc, #256]	; (8002574 <GameTick+0x7a4>)
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	4b35      	ldr	r3, [pc, #212]	; (800254c <GameTick+0x77c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	f7fe fed8 	bl	8001230 <LCD_LoadObjs>
	LCD_LoadObjs(bumpAndDepressionHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 8002480:	4b34      	ldr	r3, [pc, #208]	; (8002554 <GameTick+0x784>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	4b31      	ldr	r3, [pc, #196]	; (800254c <GameTick+0x77c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	f7fe fed0 	bl	8001230 <LCD_LoadObjs>
			flipStatus);

	MeltPlants();
 8002490:	f000 fb52 	bl	8002b38 <MeltPlants>

	if (DinoGetsStuck())
 8002494:	f000 f9fa 	bl	800288c <DinoGetsStuck>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d111      	bne.n	80024c2 <GameTick+0x6f2>
		goto Dead;

	RenderDino(dinoHeader, dinoState, 0);
 800249e:	4b2e      	ldr	r3, [pc, #184]	; (8002558 <GameTick+0x788>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a35      	ldr	r2, [pc, #212]	; (8002578 <GameTick+0x7a8>)
 80024a4:	7811      	ldrb	r1, [r2, #0]
 80024a6:	2200      	movs	r2, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 f909 	bl	80026c0 <RenderDino>

	tick++;
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <GameTick+0x79c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	4a2d      	ldr	r2, [pc, #180]	; (800256c <GameTick+0x79c>)
 80024b6:	6013      	str	r3, [r2, #0]
	LCD_UpdateFull(display);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe fdeb 	bl	8001094 <LCD_UpdateFull>
	return DINO_IS_ALIVE;
 80024be:	2300      	movs	r3, #0
 80024c0:	e0ef      	b.n	80026a2 <GameTick+0x8d2>
		goto Dead;
 80024c2:	bf00      	nop

	Dead: LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 7, 10,
 80024c4:	4b24      	ldr	r3, [pc, #144]	; (8002558 <GameTick+0x788>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80024cc:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80024d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d8:	edc7 7a00 	vstr	s15, [r7]
 80024dc:	783b      	ldrb	r3, [r7, #0]
 80024de:	b2d8      	uxtb	r0, r3
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <GameTick+0x788>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024e8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80024ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <GameTick+0x77c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2301      	movs	r3, #1
 80024fc:	220a      	movs	r2, #10
 80024fe:	ee17 1a90 	vmov	r1, s15
 8002502:	f7ff f895 	bl	8001630 <LCD_DrawLine>
	DRAWMODE_CULL, flipStatus);

	RenderDino(dinoHeader, dinoState, 1);
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <GameTick+0x788>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <GameTick+0x7a8>)
 800250c:	7811      	ldrb	r1, [r2, #0]
 800250e:	2201      	movs	r2, #1
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f8d5 	bl	80026c0 <RenderDino>

	LCD_UpdateFull(display);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7fe fdbc 	bl	8001094 <LCD_UpdateFull>

	HAL_Delay(200);
 800251c:	20c8      	movs	r0, #200	; 0xc8
 800251e:	f001 fa97 	bl	8003a50 <HAL_Delay>

	// Flip screen
	for (uint8_t i = 0; i < 2; i++) {
 8002522:	2300      	movs	r3, #0
 8002524:	73bb      	strb	r3, [r7, #14]
 8002526:	e00a      	b.n	800253e <GameTick+0x76e>
		HAL_Delay(80);
 8002528:	2050      	movs	r0, #80	; 0x50
 800252a:	f001 fa91 	bl	8003a50 <HAL_Delay>
		LCD_Invert();
 800252e:	f7ff f983 	bl	8001838 <LCD_Invert>
		LCD_UpdateFull(display);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fdae 	bl	8001094 <LCD_UpdateFull>
	for (uint8_t i = 0; i < 2; i++) {
 8002538:	7bbb      	ldrb	r3, [r7, #14]
 800253a:	3301      	adds	r3, #1
 800253c:	73bb      	strb	r3, [r7, #14]
 800253e:	7bbb      	ldrb	r3, [r7, #14]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d9f1      	bls.n	8002528 <GameTick+0x758>
	}

	// Redraw Dino
	while (dinoHeader->y < dinoGroundPos) {
 8002544:	e05e      	b.n	8002604 <GameTick+0x834>
 8002546:	bf00      	nop
 8002548:	200000e0 	.word	0x200000e0
 800254c:	200000d0 	.word	0x200000d0
 8002550:	200000f8 	.word	0x200000f8
 8002554:	20000100 	.word	0x20000100
 8002558:	200000e8 	.word	0x200000e8
 800255c:	200000c4 	.word	0x200000c4
 8002560:	200000ec 	.word	0x200000ec
 8002564:	200000dc 	.word	0x200000dc
 8002568:	200000f0 	.word	0x200000f0
 800256c:	200000b8 	.word	0x200000b8
 8002570:	200000f4 	.word	0x200000f4
 8002574:	200000fc 	.word	0x200000fc
 8002578:	200000da 	.word	0x200000da
		LCD_Fill(flipStatus);
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <GameTick+0x8dc>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f97b 	bl	800187c <LCD_Fill>
		LCD_DrawLine(77, 0, 96, DRAWMODE_ADD, flipStatus);
 8002586:	4b49      	ldr	r3, [pc, #292]	; (80026ac <GameTick+0x8dc>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2300      	movs	r3, #0
 800258e:	2260      	movs	r2, #96	; 0x60
 8002590:	2100      	movs	r1, #0
 8002592:	204d      	movs	r0, #77	; 0x4d
 8002594:	f7ff f84c 	bl	8001630 <LCD_DrawLine>
		dinoHeader->y++;
 8002598:	4b45      	ldr	r3, [pc, #276]	; (80026b0 <GameTick+0x8e0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	edd3 7a02 	vldr	s15, [r3, #8]
 80025a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025a8:	edc3 7a02 	vstr	s15, [r3, #8]
		LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10,
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <GameTick+0x8e0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025b4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80025b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025c0:	edc7 7a00 	vstr	s15, [r7]
 80025c4:	783b      	ldrb	r3, [r7, #0]
 80025c6:	b2d8      	uxtb	r0, r3
 80025c8:	4b39      	ldr	r3, [pc, #228]	; (80026b0 <GameTick+0x8e0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80025d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80025d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025dc:	4b33      	ldr	r3, [pc, #204]	; (80026ac <GameTick+0x8dc>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2301      	movs	r3, #1
 80025e4:	220a      	movs	r2, #10
 80025e6:	ee17 1a90 	vmov	r1, s15
 80025ea:	f7ff f821 	bl	8001630 <LCD_DrawLine>
		DRAWMODE_CULL, flipStatus);
		RenderDino(dinoHeader, dinoState, 1);
 80025ee:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <GameTick+0x8e0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a30      	ldr	r2, [pc, #192]	; (80026b4 <GameTick+0x8e4>)
 80025f4:	7811      	ldrb	r1, [r2, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 f861 	bl	80026c0 <RenderDino>
		LCD_UpdateFull(display);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fd48 	bl	8001094 <LCD_UpdateFull>
	while (dinoHeader->y < dinoGroundPos) {
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <GameTick+0x8e0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	edd3 7a02 	vldr	s15, [r3, #8]
 800260c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80026b8 <GameTick+0x8e8>
 8002610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	d4b0      	bmi.n	800257c <GameTick+0x7ac>
	}

	for (uint8_t l = 96; l > 28; l--) {
 800261a:	2360      	movs	r3, #96	; 0x60
 800261c:	737b      	strb	r3, [r7, #13]
 800261e:	e03a      	b.n	8002696 <GameTick+0x8c6>
		uint8_t delayTime = ceil((float) (96 - l) * 8 / 67);
 8002620:	7b7b      	ldrb	r3, [r7, #13]
 8002622:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800262e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002636:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80026bc <GameTick+0x8ec>
 800263a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800263e:	ee16 0a90 	vmov	r0, s13
 8002642:	f7fd ff89 	bl	8000558 <__aeabi_f2d>
 8002646:	4602      	mov	r2, r0
 8002648:	460b      	mov	r3, r1
 800264a:	ec43 2b10 	vmov	d0, r2, r3
 800264e:	f004 f8d7 	bl	8006800 <ceil>
 8002652:	ec53 2b10 	vmov	r2, r3, d0
 8002656:	4610      	mov	r0, r2
 8002658:	4619      	mov	r1, r3
 800265a:	f7fe fa97 	bl	8000b8c <__aeabi_d2uiz>
 800265e:	4603      	mov	r3, r0
 8002660:	733b      	strb	r3, [r7, #12]
		LCD_DrawLine(77, l, 1, DRAWMODE_CULL, flipStatus);
 8002662:	7b79      	ldrb	r1, [r7, #13]
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <GameTick+0x8dc>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2301      	movs	r3, #1
 800266c:	2201      	movs	r2, #1
 800266e:	204d      	movs	r0, #77	; 0x4d
 8002670:	f7fe ffde 	bl	8001630 <LCD_DrawLine>
		LCD_UpdateLine(display, 77);
 8002674:	214d      	movs	r1, #77	; 0x4d
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fd7e 	bl	8001178 <LCD_UpdateLine>
		HAL_Delay(delayTime);
 800267c:	7b3b      	ldrb	r3, [r7, #12]
 800267e:	4618      	mov	r0, r3
 8002680:	f001 f9e6 	bl	8003a50 <HAL_Delay>
		if (GetButtonDown(JUMP_BUTTON))
 8002684:	2004      	movs	r0, #4
 8002686:	f7ff fa1d 	bl	8001ac4 <GetButtonDown>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d106      	bne.n	800269e <GameTick+0x8ce>
	for (uint8_t l = 96; l > 28; l--) {
 8002690:	7b7b      	ldrb	r3, [r7, #13]
 8002692:	3b01      	subs	r3, #1
 8002694:	737b      	strb	r3, [r7, #13]
 8002696:	7b7b      	ldrb	r3, [r7, #13]
 8002698:	2b1c      	cmp	r3, #28
 800269a:	d8c1      	bhi.n	8002620 <GameTick+0x850>
 800269c:	e000      	b.n	80026a0 <GameTick+0x8d0>
			break;
 800269e:	bf00      	nop
	}
	return DINO_IS_DEAD;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	200000d0 	.word	0x200000d0
 80026b0:	200000e8 	.word	0x200000e8
 80026b4:	200000da 	.word	0x200000da
 80026b8:	42680000 	.word	0x42680000
 80026bc:	42860000 	.word	0x42860000

080026c0 <RenderDino>:

void RenderDino(GameObj *dino, uint8_t dinoState, bool isDead) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
 80026cc:	4613      	mov	r3, r2
 80026ce:	70bb      	strb	r3, [r7, #2]
	if (!isDead) {
 80026d0:	78bb      	ldrb	r3, [r7, #2]
 80026d2:	f083 0301 	eor.w	r3, r3, #1
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8084 	beq.w	80027e6 <RenderDino+0x126>
		switch (dinoState) {
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	f200 80bd 	bhi.w	8002862 <RenderDino+0x1a2>
 80026e8:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <RenderDino+0x30>)
 80026ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ee:	bf00      	nop
 80026f0:	08002705 	.word	0x08002705
 80026f4:	080027a9 	.word	0x080027a9
 80026f8:	08002743 	.word	0x08002743
 80026fc:	08002757 	.word	0x08002757
 8002700:	0800276b 	.word	0x0800276b
		case RUNNING:
			UpdateHeaderBmpIndex(dino,
					(tick / (int) (12 / overallSpeed)) % 2 + 1);
 8002704:	4b5d      	ldr	r3, [pc, #372]	; (800287c <RenderDino+0x1bc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5d      	ldr	r2, [pc, #372]	; (8002880 <RenderDino+0x1c0>)
 800270a:	ed92 7a00 	vldr	s14, [r2]
 800270e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271a:	ee17 2a90 	vmov	r2, s15
 800271e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
			UpdateHeaderBmpIndex(dino,
 800272a:	3301      	adds	r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 fb8f 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 8002736:	4b53      	ldr	r3, [pc, #332]	; (8002884 <RenderDino+0x1c4>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800273e:	605a      	str	r2, [r3, #4]
			break;
 8002740:	e08f      	b.n	8002862 <RenderDino+0x1a2>
		case JUMPING:
			UpdateHeaderBmpIndex(dino, DinoNormalStand);
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fb85 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 800274a:	4b4e      	ldr	r3, [pc, #312]	; (8002884 <RenderDino+0x1c4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002752:	605a      	str	r2, [r3, #4]
			break;
 8002754:	e085      	b.n	8002862 <RenderDino+0x1a2>
		case GLIDING:
			UpdateHeaderBmpIndex(dino, DinoGliding);
 8002756:	210c      	movs	r1, #12
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fb7b 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosWhenGliding;
 800275e:	4b49      	ldr	r3, [pc, #292]	; (8002884 <RenderDino+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002766:	605a      	str	r2, [r3, #4]
			break;
 8002768:	e07b      	b.n	8002862 <RenderDino+0x1a2>
		case DODGING:
			UpdateHeaderBmpIndex(dino,
			DinoDodgingL + (tick / (int) (12 / overallSpeed)) % 2);
 800276a:	4b44      	ldr	r3, [pc, #272]	; (800287c <RenderDino+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a44      	ldr	r2, [pc, #272]	; (8002880 <RenderDino+0x1c0>)
 8002770:	ed92 7a00 	vldr	s14, [r2]
 8002774:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002780:	ee17 2a90 	vmov	r2, s15
 8002784:	fbb3 f3f2 	udiv	r3, r3, r2
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
			UpdateHeaderBmpIndex(dino,
 8002790:	3309      	adds	r3, #9
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 fb5c 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosWhenDodging;
 800279c:	4b39      	ldr	r3, [pc, #228]	; (8002884 <RenderDino+0x1c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a4:	605a      	str	r2, [r3, #4]
			break;
 80027a6:	e05c      	b.n	8002862 <RenderDino+0x1a2>
		case FIRING:
			UpdateHeaderBmpIndex(dino,
			DinoFiringL + (tick / (int) (12 / overallSpeed)) % 2);
 80027a8:	4b34      	ldr	r3, [pc, #208]	; (800287c <RenderDino+0x1bc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a34      	ldr	r2, [pc, #208]	; (8002880 <RenderDino+0x1c0>)
 80027ae:	ed92 7a00 	vldr	s14, [r2]
 80027b2:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80027b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027be:	ee17 2a90 	vmov	r2, s15
 80027c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f003 0301 	and.w	r3, r3, #1
 80027cc:	b2db      	uxtb	r3, r3
			UpdateHeaderBmpIndex(dino,
 80027ce:	3305      	adds	r3, #5
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	4619      	mov	r1, r3
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fb3d 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <RenderDino+0x1c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 80027e2:	605a      	str	r2, [r3, #4]
			break;
 80027e4:	e03d      	b.n	8002862 <RenderDino+0x1a2>
		}
	} else if (isDead) {
 80027e6:	78bb      	ldrb	r3, [r7, #2]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d039      	beq.n	8002860 <RenderDino+0x1a0>
		switch (dinoState) {
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d836      	bhi.n	8002862 <RenderDino+0x1a2>
 80027f4:	a201      	add	r2, pc, #4	; (adr r2, 80027fc <RenderDino+0x13c>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	08002811 	.word	0x08002811
 8002800:	0800284d 	.word	0x0800284d
 8002804:	08002811 	.word	0x08002811
 8002808:	08002825 	.word	0x08002825
 800280c:	08002839 	.word	0x08002839
		case RUNNING:
		case JUMPING:
			UpdateHeaderBmpIndex(dino, DinoNormalDead);
 8002810:	2103      	movs	r1, #3
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fb1e 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <RenderDino+0x1c4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8002820:	605a      	str	r2, [r3, #4]
			break;
 8002822:	e01e      	b.n	8002862 <RenderDino+0x1a2>
		case GLIDING:
			UpdateHeaderBmpIndex(dino, DinoGlidingDead);
 8002824:	210d      	movs	r1, #13
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fb14 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosWhenGliding;
 800282c:	4b15      	ldr	r3, [pc, #84]	; (8002884 <RenderDino+0x1c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002834:	605a      	str	r2, [r3, #4]
			break;
 8002836:	e014      	b.n	8002862 <RenderDino+0x1a2>
		case DODGING:
			UpdateHeaderBmpIndex(dino, DinoDodgingDead);
 8002838:	210b      	movs	r1, #11
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 fb0a 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosWhenDodging;
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <RenderDino+0x1c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002848:	605a      	str	r2, [r3, #4]
			break;
 800284a:	e00a      	b.n	8002862 <RenderDino+0x1a2>
		case FIRING:
			UpdateHeaderBmpIndex(dino, DinoFiringDead);
 800284c:	2107      	movs	r1, #7
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fb00 	bl	8002e54 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <RenderDino+0x1c4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 800285c:	605a      	str	r2, [r3, #4]
			break;
 800285e:	e000      	b.n	8002862 <RenderDino+0x1a2>
		}
	}
 8002860:	bf00      	nop

	LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <RenderDino+0x1c4>)
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <RenderDino+0x1c8>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	2100      	movs	r1, #0
 800286e:	f7fe fcdf 	bl	8001230 <LCD_LoadObjs>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200000b8 	.word	0x200000b8
 8002880:	200000dc 	.word	0x200000dc
 8002884:	200000e8 	.word	0x200000e8
 8002888:	200000d0 	.word	0x200000d0

0800288c <DinoGetsStuck>:

bool DinoGetsStuck() {
 800288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800288e:	b085      	sub	sp, #20
 8002890:	af04      	add	r7, sp, #16
	// Loop through plants, check death
	ptr = plantHeader;
 8002892:	4ba5      	ldr	r3, [pc, #660]	; (8002b28 <DinoGetsStuck+0x29c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4aa5      	ldr	r2, [pc, #660]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002898:	6013      	str	r3, [r2, #0]
	for (;;) {
		if (ptr->full && ptr->index == PlantNormal) {
 800289a:	4ba4      	ldr	r3, [pc, #656]	; (8002b2c <DinoGetsStuck+0x2a0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	7c1b      	ldrb	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 811f 	beq.w	8002ae4 <DinoGetsStuck+0x258>
 80028a6:	4ba1      	ldr	r3, [pc, #644]	; (8002b2c <DinoGetsStuck+0x2a0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	7bdb      	ldrb	r3, [r3, #15]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 8119 	bne.w	8002ae4 <DinoGetsStuck+0x258>
			switch (dinoState) {
 80028b2:	4b9f      	ldr	r3, [pc, #636]	; (8002b30 <DinoGetsStuck+0x2a4>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	f300 811b 	bgt.w	8002af2 <DinoGetsStuck+0x266>
 80028bc:	2b04      	cmp	r3, #4
 80028be:	da5f      	bge.n	8002980 <DinoGetsStuck+0xf4>
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d003      	beq.n	80028cc <DinoGetsStuck+0x40>
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f000 80b4 	beq.w	8002a32 <DinoGetsStuck+0x1a6>
 80028ca:	e112      	b.n	8002af2 <DinoGetsStuck+0x266>
			case RUNNING:
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 80028cc:	4b99      	ldr	r3, [pc, #612]	; (8002b34 <DinoGetsStuck+0x2a8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80028d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e0:	ee17 3a90 	vmov	r3, s15
 80028e4:	b218      	sxth	r0, r3
 80028e6:	4b93      	ldr	r3, [pc, #588]	; (8002b34 <DinoGetsStuck+0x2a8>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80028ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80028f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028fa:	ee17 3a90 	vmov	r3, s15
 80028fe:	b219      	sxth	r1, r3
						dinoHeader->x + 17, dinoHeader->y + 17, ptr->x, 59,
 8002900:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <DinoGetsStuck+0x2a8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	edd3 7a01 	vldr	s15, [r3, #4]
 8002908:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 800290c:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002910:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002914:	ee17 3a90 	vmov	r3, s15
 8002918:	b21c      	sxth	r4, r3
						dinoHeader->x + 17, dinoHeader->y + 17, ptr->x, 59,
 800291a:	4b86      	ldr	r3, [pc, #536]	; (8002b34 <DinoGetsStuck+0x2a8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002922:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002926:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 800292a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800292e:	ee17 3a90 	vmov	r3, s15
 8002932:	b21d      	sxth	r5, r3
						dinoHeader->x + 17, dinoHeader->y + 17, ptr->x, 59,
 8002934:	4b7d      	ldr	r3, [pc, #500]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	edd3 7a01 	vldr	s15, [r3, #4]
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 800293c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002940:	ee17 3a90 	vmov	r3, s15
 8002944:	b21b      	sxth	r3, r3
						ptr->x + 9, 59 + 21)) {
 8002946:	4a79      	ldr	r2, [pc, #484]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	edd2 7a01 	vldr	s15, [r2, #4]
 800294e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002952:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295a:	ee17 2a90 	vmov	r2, s15
 800295e:	b212      	sxth	r2, r2
 8002960:	2650      	movs	r6, #80	; 0x50
 8002962:	9603      	str	r6, [sp, #12]
 8002964:	9202      	str	r2, [sp, #8]
 8002966:	223b      	movs	r2, #59	; 0x3b
 8002968:	9201      	str	r2, [sp, #4]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	462b      	mov	r3, r5
 800296e:	4622      	mov	r2, r4
 8002970:	f000 f9ae 	bl	8002cd0 <IsOverlapping>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 80b6 	beq.w	8002ae8 <DinoGetsStuck+0x25c>
					return 1;
 800297c:	2301      	movs	r3, #1
 800297e:	e0cf      	b.n	8002b20 <DinoGetsStuck+0x294>
				}
				break;

			case GLIDING:
			case DODGING:
				if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002980:	4b6c      	ldr	r3, [pc, #432]	; (8002b34 <DinoGetsStuck+0x2a8>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	edd3 7a01 	vldr	s15, [r3, #4]
 8002988:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800298c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002994:	ee17 3a90 	vmov	r3, s15
 8002998:	b218      	sxth	r0, r3
 800299a:	4b66      	ldr	r3, [pc, #408]	; (8002b34 <DinoGetsStuck+0x2a8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	edd3 7a02 	vldr	s15, [r3, #8]
 80029a2:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80029a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029ae:	ee17 3a90 	vmov	r3, s15
 80029b2:	b219      	sxth	r1, r3
						dinoHeader->x + 30, dinoHeader->y + 17, ptr->x, 59,
 80029b4:	4b5f      	ldr	r3, [pc, #380]	; (8002b34 <DinoGetsStuck+0x2a8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80029bc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80029c0:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 80029c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c8:	ee17 3a90 	vmov	r3, s15
 80029cc:	b21c      	sxth	r4, r3
						dinoHeader->x + 30, dinoHeader->y + 17, ptr->x, 59,
 80029ce:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <DinoGetsStuck+0x2a8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80029d6:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 80029da:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 80029de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029e2:	ee17 3a90 	vmov	r3, s15
 80029e6:	b21d      	sxth	r5, r3
						dinoHeader->x + 30, dinoHeader->y + 17, ptr->x, 59,
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <DinoGetsStuck+0x2a0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	edd3 7a01 	vldr	s15, [r3, #4]
				if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 80029f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f4:	ee17 3a90 	vmov	r3, s15
 80029f8:	b21b      	sxth	r3, r3
						ptr->x + 9, 59 + 21)) {
 80029fa:	4a4c      	ldr	r2, [pc, #304]	; (8002b2c <DinoGetsStuck+0x2a0>)
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	edd2 7a01 	vldr	s15, [r2, #4]
 8002a02:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002a06:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a0e:	ee17 2a90 	vmov	r2, s15
 8002a12:	b212      	sxth	r2, r2
 8002a14:	2650      	movs	r6, #80	; 0x50
 8002a16:	9603      	str	r6, [sp, #12]
 8002a18:	9202      	str	r2, [sp, #8]
 8002a1a:	223b      	movs	r2, #59	; 0x3b
 8002a1c:	9201      	str	r2, [sp, #4]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	462b      	mov	r3, r5
 8002a22:	4622      	mov	r2, r4
 8002a24:	f000 f954 	bl	8002cd0 <IsOverlapping>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d05e      	beq.n	8002aec <DinoGetsStuck+0x260>
					return 1;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e076      	b.n	8002b20 <DinoGetsStuck+0x294>
				}
				break;

			case FIRING:
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002a32:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <DinoGetsStuck+0x2a8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002a3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a46:	ee17 3a90 	vmov	r3, s15
 8002a4a:	b218      	sxth	r0, r3
 8002a4c:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <DinoGetsStuck+0x2a8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a60:	ee17 3a90 	vmov	r3, s15
 8002a64:	b219      	sxth	r1, r3
						dinoHeader->x + 18, dinoHeader->y + 17, ptr->x, 59,
 8002a66:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <DinoGetsStuck+0x2a8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a6e:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8002a72:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a7a:	ee17 3a90 	vmov	r3, s15
 8002a7e:	b21c      	sxth	r4, r3
						dinoHeader->x + 18, dinoHeader->y + 17, ptr->x, 59,
 8002a80:	4b2c      	ldr	r3, [pc, #176]	; (8002b34 <DinoGetsStuck+0x2a8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a88:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002a8c:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002a90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a94:	ee17 3a90 	vmov	r3, s15
 8002a98:	b21d      	sxth	r5, r3
						dinoHeader->x + 18, dinoHeader->y + 17, ptr->x, 59,
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	edd3 7a01 	vldr	s15, [r3, #4]
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aa6:	ee17 3a90 	vmov	r3, s15
 8002aaa:	b21b      	sxth	r3, r3
						ptr->x + 9, 59 + 21)) {
 8002aac:	4a1f      	ldr	r2, [pc, #124]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	edd2 7a01 	vldr	s15, [r2, #4]
 8002ab4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002ab8:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002abc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ac0:	ee17 2a90 	vmov	r2, s15
 8002ac4:	b212      	sxth	r2, r2
 8002ac6:	2650      	movs	r6, #80	; 0x50
 8002ac8:	9603      	str	r6, [sp, #12]
 8002aca:	9202      	str	r2, [sp, #8]
 8002acc:	223b      	movs	r2, #59	; 0x3b
 8002ace:	9201      	str	r2, [sp, #4]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	4622      	mov	r2, r4
 8002ad6:	f000 f8fb 	bl	8002cd0 <IsOverlapping>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d007      	beq.n	8002af0 <DinoGetsStuck+0x264>
					return 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e01d      	b.n	8002b20 <DinoGetsStuck+0x294>
				}
				break;
			}

		}
 8002ae4:	bf00      	nop
 8002ae6:	e004      	b.n	8002af2 <DinoGetsStuck+0x266>
				break;
 8002ae8:	bf00      	nop
 8002aea:	e002      	b.n	8002af2 <DinoGetsStuck+0x266>
				break;
 8002aec:	bf00      	nop
 8002aee:	e000      	b.n	8002af2 <DinoGetsStuck+0x266>
				break;
 8002af0:	bf00      	nop
		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == plantHeader) {
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	7c1b      	ldrb	r3, [r3, #16]
 8002afa:	f083 0301 	eor.w	r3, r3, #1
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10c      	bne.n	8002b1e <DinoGetsStuck+0x292>
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <DinoGetsStuck+0x29c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d005      	beq.n	8002b1e <DinoGetsStuck+0x292>
			break;
		}
		ptr = ptr->next;
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <DinoGetsStuck+0x2a0>)
 8002b1a:	6013      	str	r3, [r2, #0]
		if (ptr->full && ptr->index == PlantNormal) {
 8002b1c:	e6bd      	b.n	800289a <DinoGetsStuck+0xe>
	}

	return 0;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3704      	adds	r7, #4
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b28:	200000f8 	.word	0x200000f8
 8002b2c:	200000e0 	.word	0x200000e0
 8002b30:	200000da 	.word	0x200000da
 8002b34:	200000e8 	.word	0x200000e8

08002b38 <MeltPlants>:

void MeltPlants() {
 8002b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af04      	add	r7, sp, #16
	// Loop through GroundFires and Plants, shrink plants
	ptr = lavaHeader;
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	; (8002cb4 <MeltPlants+0x17c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a5d      	ldr	r2, [pc, #372]	; (8002cb8 <MeltPlants+0x180>)
 8002b44:	6013      	str	r3, [r2, #0]
	ptr2 = plantHeader;
 8002b46:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <MeltPlants+0x184>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a5d      	ldr	r2, [pc, #372]	; (8002cc0 <MeltPlants+0x188>)
 8002b4c:	6013      	str	r3, [r2, #0]
	for (;;) {
		for (;;) {
			if (ptr->full && ptr2->full) {
 8002b4e:	4b5a      	ldr	r3, [pc, #360]	; (8002cb8 <MeltPlants+0x180>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	7c1b      	ldrb	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d07d      	beq.n	8002c54 <MeltPlants+0x11c>
 8002b58:	4b59      	ldr	r3, [pc, #356]	; (8002cc0 <MeltPlants+0x188>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	7c1b      	ldrb	r3, [r3, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d078      	beq.n	8002c54 <MeltPlants+0x11c>
				if (IsOverlapping(ptr->x, ptr->y, ptr->x + 72, ptr->y + 25,
 8002b62:	4b55      	ldr	r3, [pc, #340]	; (8002cb8 <MeltPlants+0x180>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6e:	ee17 3a90 	vmov	r3, s15
 8002b72:	b21c      	sxth	r4, r3
 8002b74:	4b50      	ldr	r3, [pc, #320]	; (8002cb8 <MeltPlants+0x180>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b80:	ee17 3a90 	vmov	r3, s15
 8002b84:	b21d      	sxth	r5, r3
 8002b86:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <MeltPlants+0x180>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b8e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8002cc4 <MeltPlants+0x18c>
 8002b92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9a:	ee17 3a90 	vmov	r3, s15
 8002b9e:	b21e      	sxth	r6, r3
 8002ba0:	4b45      	ldr	r3, [pc, #276]	; (8002cb8 <MeltPlants+0x180>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ba8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002bac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb4:	ee17 3a90 	vmov	r3, s15
 8002bb8:	fa0f fc83 	sxth.w	ip, r3
						ptr2->x, ptr2->y, ptr2->x + 9, ptr2->y + 21)) {
 8002bbc:	4b40      	ldr	r3, [pc, #256]	; (8002cc0 <MeltPlants+0x188>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	edd3 7a01 	vldr	s15, [r3, #4]
				if (IsOverlapping(ptr->x, ptr->y, ptr->x + 72, ptr->y + 25,
 8002bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bc8:	ee17 3a90 	vmov	r3, s15
 8002bcc:	b21b      	sxth	r3, r3
						ptr2->x, ptr2->y, ptr2->x + 9, ptr2->y + 21)) {
 8002bce:	4a3c      	ldr	r2, [pc, #240]	; (8002cc0 <MeltPlants+0x188>)
 8002bd0:	6812      	ldr	r2, [r2, #0]
 8002bd2:	edd2 7a02 	vldr	s15, [r2, #8]
				if (IsOverlapping(ptr->x, ptr->y, ptr->x + 72, ptr->y + 25,
 8002bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bda:	ee17 2a90 	vmov	r2, s15
 8002bde:	b212      	sxth	r2, r2
						ptr2->x, ptr2->y, ptr2->x + 9, ptr2->y + 21)) {
 8002be0:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <MeltPlants+0x188>)
 8002be2:	6809      	ldr	r1, [r1, #0]
 8002be4:	edd1 7a01 	vldr	s15, [r1, #4]
 8002be8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002bec:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(ptr->x, ptr->y, ptr->x + 72, ptr->y + 25,
 8002bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf4:	ee17 1a90 	vmov	r1, s15
 8002bf8:	b209      	sxth	r1, r1
						ptr2->x, ptr2->y, ptr2->x + 9, ptr2->y + 21)) {
 8002bfa:	4831      	ldr	r0, [pc, #196]	; (8002cc0 <MeltPlants+0x188>)
 8002bfc:	6800      	ldr	r0, [r0, #0]
 8002bfe:	edd0 7a02 	vldr	s15, [r0, #8]
 8002c02:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8002c06:	ee77 7a87 	vadd.f32	s15, s15, s14
				if (IsOverlapping(ptr->x, ptr->y, ptr->x + 72, ptr->y + 25,
 8002c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c0e:	ee17 0a90 	vmov	r0, s15
 8002c12:	b200      	sxth	r0, r0
 8002c14:	9003      	str	r0, [sp, #12]
 8002c16:	9102      	str	r1, [sp, #8]
 8002c18:	9201      	str	r2, [sp, #4]
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4663      	mov	r3, ip
 8002c1e:	4632      	mov	r2, r6
 8002c20:	4629      	mov	r1, r5
 8002c22:	4620      	mov	r0, r4
 8002c24:	f000 f854 	bl	8002cd0 <IsOverlapping>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d012      	beq.n	8002c54 <MeltPlants+0x11c>
					if (tick % 10 == 0) {
 8002c2e:	4b26      	ldr	r3, [pc, #152]	; (8002cc8 <MeltPlants+0x190>)
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <MeltPlants+0x194>)
 8002c34:	fba3 2301 	umull	r2, r3, r3, r1
 8002c38:	08da      	lsrs	r2, r3, #3
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	1aca      	subs	r2, r1, r3
 8002c44:	2a00      	cmp	r2, #0
 8002c46:	d105      	bne.n	8002c54 <MeltPlants+0x11c>
						ImgIndexRightShift(ptr2, 1);
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <MeltPlants+0x188>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f9f8 	bl	8003044 <ImgIndexRightShift>
					}
				}
			}
			// If looped through all / next buffer is empty
			if (!ptr2->next->full || ptr2->next == plantHeader) {
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <MeltPlants+0x188>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	7c1b      	ldrb	r3, [r3, #16]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <MeltPlants+0x148>
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <MeltPlants+0x188>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695a      	ldr	r2, [r3, #20]
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <MeltPlants+0x184>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d005      	beq.n	8002c80 <MeltPlants+0x148>
				break;
			}
			ptr2 = ptr2->next;
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <MeltPlants+0x188>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <MeltPlants+0x188>)
 8002c7c:	6013      	str	r3, [r2, #0]
			if (ptr->full && ptr2->full) {
 8002c7e:	e766      	b.n	8002b4e <MeltPlants+0x16>
		}
		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == lavaHeader) {
 8002c80:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <MeltPlants+0x180>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	7c1b      	ldrb	r3, [r3, #16]
 8002c88:	f083 0301 	eor.w	r3, r3, #1
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10c      	bne.n	8002cac <MeltPlants+0x174>
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <MeltPlants+0x180>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MeltPlants+0x17c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d005      	beq.n	8002cac <MeltPlants+0x174>
			break;
		}
		ptr = ptr->next;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <MeltPlants+0x180>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <MeltPlants+0x180>)
 8002ca8:	6013      	str	r3, [r2, #0]
	for (;;) {
 8002caa:	e750      	b.n	8002b4e <MeltPlants+0x16>
	}
}
 8002cac:	bf00      	nop
 8002cae:	3704      	adds	r7, #4
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb4:	200000f0 	.word	0x200000f0
 8002cb8:	200000e0 	.word	0x200000e0
 8002cbc:	200000f8 	.word	0x200000f8
 8002cc0:	200000e4 	.word	0x200000e4
 8002cc4:	42900000 	.word	0x42900000
 8002cc8:	200000b8 	.word	0x200000b8
 8002ccc:	cccccccd 	.word	0xcccccccd

08002cd0 <IsOverlapping>:
 */

#include "game_utilities.h"

bool IsOverlapping(short x1, short y1, short x2, short y2, short x3, short y3,
		short x4, short y4) {
 8002cd0:	b490      	push	{r4, r7}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4623      	mov	r3, r4
 8002ce0:	80fb      	strh	r3, [r7, #6]
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	80bb      	strh	r3, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	807b      	strh	r3, [r7, #2]
 8002cea:	4613      	mov	r3, r2
 8002cec:	803b      	strh	r3, [r7, #0]
	if (x1 > x4 || x3 > x2 || y1 > y4 || y3 > y2) {
 8002cee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cf2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	dc11      	bgt.n	8002d1e <IsOverlapping+0x4e>
 8002cfa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002cfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	dc0b      	bgt.n	8002d1e <IsOverlapping+0x4e>
 8002d06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	dc05      	bgt.n	8002d1e <IsOverlapping+0x4e>
 8002d12:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002d16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	dd01      	ble.n	8002d22 <IsOverlapping+0x52>
		return false;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e000      	b.n	8002d24 <IsOverlapping+0x54>
	}
	return true;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc90      	pop	{r4, r7}
 8002d2c:	4770      	bx	lr

08002d2e <IsFadedOutOfScene>:

bool IsFadedOutOfScene(GameObj *obj) {
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
	if (obj->x + obj->width * 8 < 0) {
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7b1b      	ldrb	r3, [r3, #12]
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d56:	d501      	bpl.n	8002d5c <IsFadedOutOfScene+0x2e>
		return true;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <IsFadedOutOfScene+0x30>
	} else {
		return false;
 8002d5c:	2300      	movs	r3, #0
	}
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <Append>:

// Append buffer in loop, if buffers are all occupied, use the first buffer
GameObj* Append(GameObj *header, uint8_t index, short xPos, short yPos) {
 8002d6a:	b480      	push	{r7}
 8002d6c:	b087      	sub	sp, #28
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	4608      	mov	r0, r1
 8002d74:	4611      	mov	r1, r2
 8002d76:	461a      	mov	r2, r3
 8002d78:	4603      	mov	r3, r0
 8002d7a:	72fb      	strb	r3, [r7, #11]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	813b      	strh	r3, [r7, #8]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
	GameObj *ptr = header;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	617b      	str	r3, [r7, #20]

	// If the current pointer is occupied, look for the next pos
	while (ptr->full) {
 8002d88:	e031      	b.n	8002dee <Append+0x84>
		ptr = ptr->next;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	617b      	str	r3, [r7, #20]
		// Have cycled for a whole loop
		if (ptr == header) {
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d12a      	bne.n	8002dee <Append+0x84>
			ptr->bmpAsset = header->bmpAsset;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	601a      	str	r2, [r3, #0]
			ptr->x = xPos;
 8002da0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	edc3 7a01 	vstr	s15, [r3, #4]
			ptr->y = yPos;
 8002db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	edc3 7a02 	vstr	s15, [r3, #8]
			ptr->width = header->width;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	7b1a      	ldrb	r2, [r3, #12]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	731a      	strb	r2, [r3, #12]
			ptr->height = header->height;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	7b5a      	ldrb	r2, [r3, #13]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	735a      	strb	r2, [r3, #13]
			ptr->assetSize = header->assetSize;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	7b9a      	ldrb	r2, [r3, #14]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	739a      	strb	r2, [r3, #14]
			ptr->index = index;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	7afa      	ldrb	r2, [r7, #11]
 8002de0:	73da      	strb	r2, [r3, #15]
			ptr->full = 1;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2201      	movs	r2, #1
 8002de6:	741a      	strb	r2, [r3, #16]
			return header->next;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	e02c      	b.n	8002e48 <Append+0xde>
	while (ptr->full) {
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	7c1b      	ldrb	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1c9      	bne.n	8002d8a <Append+0x20>
		}
	}

	ptr->bmpAsset = header->bmpAsset;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	601a      	str	r2, [r3, #0]
	ptr->x = xPos;
 8002dfe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	edc3 7a01 	vstr	s15, [r3, #4]
	ptr->y = yPos;
 8002e10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	edc3 7a02 	vstr	s15, [r3, #8]
	ptr->width = header->width;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	7b1a      	ldrb	r2, [r3, #12]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	731a      	strb	r2, [r3, #12]
	ptr->height = header->height;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	7b5a      	ldrb	r2, [r3, #13]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	735a      	strb	r2, [r3, #13]
	ptr->assetSize = header->assetSize;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	7b9a      	ldrb	r2, [r3, #14]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	739a      	strb	r2, [r3, #14]
	ptr->index = index;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	7afa      	ldrb	r2, [r7, #11]
 8002e3e:	73da      	strb	r2, [r3, #15]
	ptr->full = 1;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2201      	movs	r2, #1
 8002e44:	741a      	strb	r2, [r3, #16]
	return header;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <UpdateHeaderBmpIndex>:

void UpdateHeaderBmpIndex(GameObj *header, uint8_t index) {
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	70fb      	strb	r3, [r7, #3]
	header->index = index;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	73da      	strb	r2, [r3, #15]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <UpdateAllBmpIndexs>:

void UpdateAllBmpIndexs(GameObj *header, uint8_t index) {
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	70fb      	strb	r3, [r7, #3]
	GameObj *ptr = header;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	60fb      	str	r3, [r7, #12]

	// If the current pointer is occupied, look for the next pos
	for (;;) {
		ptr->index = index;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	73da      	strb	r2, [r3, #15]
		ptr = ptr->next;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	60fb      	str	r3, [r7, #12]

		// Have cycled for a whole loop
		if (ptr == header)
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d000      	beq.n	8002e98 <UpdateAllBmpIndexs+0x26>
		ptr->index = index;
 8002e96:	e7f4      	b.n	8002e82 <UpdateAllBmpIndexs+0x10>
			return;
 8002e98:	bf00      	nop
	}
}
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <DisableAll>:

// Set all buffers to empty
void DisableAll(GameObj *header) {
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	GameObj *ptr = header;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	60fb      	str	r3, [r7, #12]

	// If the current pointer is occupied, look for the next pos
	for (;;) {
		ptr->full = 0;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	741a      	strb	r2, [r3, #16]
		ptr = ptr->next;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	60fb      	str	r3, [r7, #12]

		// Have cycled for a whole loop
		if (ptr == header)
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d000      	beq.n	8002ec6 <DisableAll+0x22>
		ptr->full = 0;
 8002ec4:	e7f4      	b.n	8002eb0 <DisableAll+0xc>
			return;
 8002ec6:	bf00      	nop
	}
}
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <GenLoopBuf>:

// Generate loop buffer given certain size
GameObj* GenLoopBuf(uint8_t size) {
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	71fb      	strb	r3, [r7, #7]
	GameObj *head = NULL, *cyclic = NULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
	head = (GameObj*) malloc(sizeof(GameObj));
 8002ee4:	2018      	movs	r0, #24
 8002ee6:	f002 fc1d 	bl	8005724 <malloc>
 8002eea:	4603      	mov	r3, r0
 8002eec:	60fb      	str	r3, [r7, #12]
	head->full = 0;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	741a      	strb	r2, [r3, #16]
	cyclic = head;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	e00f      	b.n	8002f1e <GenLoopBuf+0x4c>
		GameObj *body = (GameObj*) malloc(sizeof(GameObj));
 8002efe:	2018      	movs	r0, #24
 8002f00:	f002 fc10 	bl	8005724 <malloc>
 8002f04:	4603      	mov	r3, r0
 8002f06:	60bb      	str	r3, [r7, #8]
		body->full = 0;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	741a      	strb	r2, [r3, #16]
		cyclic->next = body;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	615a      	str	r2, [r3, #20]
		cyclic = body;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	dbeb      	blt.n	8002efe <GenLoopBuf+0x2c>
	}
	cyclic->next = head;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	615a      	str	r2, [r3, #20]
	return head;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HeaderInit>:

// Initializes the head pointer with the given values, n resets other buffers
void HeaderInit(GameObj *header, uint8_t *bmpAsset, uint8_t width,
		uint8_t height, uint8_t assetSize) {
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b086      	sub	sp, #24
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	4611      	mov	r1, r2
 8002f42:	461a      	mov	r2, r3
 8002f44:	460b      	mov	r3, r1
 8002f46:	71fb      	strb	r3, [r7, #7]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	71bb      	strb	r3, [r7, #6]
	GameObj *ptr = header;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	617b      	str	r3, [r7, #20]

	ptr->bmpAsset = bmpAsset;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	601a      	str	r2, [r3, #0]
	ptr->x = 0;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	605a      	str	r2, [r3, #4]
	ptr->y = 0;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
	ptr->width = width;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	79fa      	ldrb	r2, [r7, #7]
 8002f6a:	731a      	strb	r2, [r3, #12]
	ptr->height = height;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	79ba      	ldrb	r2, [r7, #6]
 8002f70:	735a      	strb	r2, [r3, #13]
	ptr->assetSize = assetSize;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002f78:	739a      	strb	r2, [r3, #14]
	ptr->index = 0;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	73da      	strb	r2, [r3, #15]
	ptr->full = 0;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2200      	movs	r2, #0
 8002f84:	741a      	strb	r2, [r3, #16]

	DisableAll(ptr);
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f7ff ff8c 	bl	8002ea4 <DisableAll>
}
 8002f8c:	bf00      	nop
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <ShiftX>:

// Shift all buffers and return the first active pointer
GameObj* ShiftX(GameObj *header, float byX) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	ed87 0a00 	vstr	s0, [r7]
	GameObj *ptr = header;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]

	// Cycle through all valid buffers once and apply the drift
	for (;;) {
		if (ptr->full) {
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	7c1b      	ldrb	r3, [r3, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d009      	beq.n	8002fc0 <ShiftX+0x2c>
			ptr->x += byX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fb2:	edd7 7a00 	vldr	s15, [r7]
 8002fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		// Have cycled through the buffer
		if (!ptr->next->full || ptr->next == header)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	7c1b      	ldrb	r3, [r3, #16]
 8002fc6:	f083 0301 	eor.w	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d108      	bne.n	8002fe2 <ShiftX+0x4e>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d003      	beq.n	8002fe2 <ShiftX+0x4e>
			break;
		ptr = ptr->next;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	60fb      	str	r3, [r7, #12]
		if (ptr->full) {
 8002fe0:	e7e0      	b.n	8002fa4 <ShiftX+0x10>
	}

	ptr = header;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	60fb      	str	r3, [r7, #12]
	// Return the first available buffer, if no buf is available, return header
	while (IsFadedOutOfScene(ptr)) {
 8002fe6:	e012      	b.n	800300e <ShiftX+0x7a>
		ptr->full = 0;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	741a      	strb	r2, [r3, #16]
		if (!ptr->next->full || ptr->next == header) {
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	7c1b      	ldrb	r3, [r3, #16]
 8002ff4:	f083 0301 	eor.w	r3, r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10d      	bne.n	800301a <ShiftX+0x86>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d008      	beq.n	800301a <ShiftX+0x86>
			break;
		}
		ptr = ptr->next;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	60fb      	str	r3, [r7, #12]
	while (IsFadedOutOfScene(ptr)) {
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff fe8d 	bl	8002d2e <IsFadedOutOfScene>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1e6      	bne.n	8002fe8 <ShiftX+0x54>
	}
	return ptr;
 800301a:	68fb      	ldr	r3, [r7, #12]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <DisableCurrent>:

GameObj* DisableCurrent(GameObj *header) {
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	GameObj *ptr = header;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	60fb      	str	r3, [r7, #12]
	ptr->full = 0;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	741a      	strb	r2, [r3, #16]

//	while (!ptr->next->full) {
//		ptr = ptr->next;
//	}

	return ptr;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <ImgIndexRightShift>:

void ImgIndexRightShift(GameObj *header, bool disableWhenEnd) {
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	70fb      	strb	r3, [r7, #3]
	if (header->index < header->assetSize - 1) {
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7bdb      	ldrb	r3, [r3, #15]
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	7b9b      	ldrb	r3, [r3, #14]
 800305a:	3b01      	subs	r3, #1
 800305c:	429a      	cmp	r2, r3
 800305e:	da06      	bge.n	800306e <ImgIndexRightShift+0x2a>
		header->index++;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	7bdb      	ldrb	r3, [r3, #15]
 8003064:	3301      	adds	r3, #1
 8003066:	b2da      	uxtb	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	73da      	strb	r2, [r3, #15]
		return;
 800306c:	e008      	b.n	8003080 <ImgIndexRightShift+0x3c>
	}
	if (disableWhenEnd) {
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <ImgIndexRightShift+0x3c>
		header->index = 0;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	73da      	strb	r2, [r3, #15]
		DisableCurrent(header);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ffd2 	bl	8003024 <DisableCurrent>
	}

}
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <Random>:

short Random(unsigned long seed, short lowerLim, short upperLim) {
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	460b      	mov	r3, r1
 8003090:	807b      	strh	r3, [r7, #2]
 8003092:	4613      	mov	r3, r2
 8003094:	803b      	strh	r3, [r7, #0]
	srand(seed);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f002 fc34 	bl	8005904 <srand>
	return rand() % (upperLim - lowerLim + 1) + lowerLim;
 800309c:	f002 fc60 	bl	8005960 <rand>
 80030a0:	4602      	mov	r2, r0
 80030a2:	f9b7 1000 	ldrsh.w	r1, [r7]
 80030a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030aa:	1acb      	subs	r3, r1, r3
 80030ac:	3301      	adds	r3, #1
 80030ae:	fb92 f1f3 	sdiv	r1, r2, r3
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	4413      	add	r3, r2
 80030be:	b29b      	uxth	r3, r3
 80030c0:	b21b      	sxth	r3, r3
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80030d0:	f000 fc4c 	bl	800396c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80030d4:	f000 f82c 	bl	8003130 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80030d8:	f000 f968 	bl	80033ac <MX_GPIO_Init>
	MX_SPI1_Init();
 80030dc:	f000 f892 	bl	8003204 <MX_SPI1_Init>
	MX_TIM1_Init();
 80030e0:	f000 f8c6 	bl	8003270 <MX_TIM1_Init>
	MX_TIM2_Init();
 80030e4:	f000 f916 	bl	8003314 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80030e8:	480c      	ldr	r0, [pc, #48]	; (800311c <main+0x50>)
 80030ea:	f001 fefb 	bl	8004ee4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 80030ee:	480c      	ldr	r0, [pc, #48]	; (8003120 <main+0x54>)
 80030f0:	f001 fef8 	bl	8004ee4 <HAL_TIM_Base_Start_IT>

	// ALL GPIO AND BUSES MUST BE INITED BEFORE CALL THIS FUNCTION
	LCD_Init(&MemDisp, &hspi1, GPIOA, CS_Pin);
 80030f4:	2310      	movs	r3, #16
 80030f6:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <main+0x58>)
 80030f8:	490b      	ldr	r1, [pc, #44]	; (8003128 <main+0x5c>)
 80030fa:	480c      	ldr	r0, [pc, #48]	; (800312c <main+0x60>)
 80030fc:	f7fd ff68 	bl	8000fd0 <LCD_Init>
	GenerateGameBuffers();
 8003100:	f7fe fd10 	bl	8001b24 <GenerateGameBuffers>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		GamePrep(&MemDisp);
 8003104:	4809      	ldr	r0, [pc, #36]	; (800312c <main+0x60>)
 8003106:	f7fe fd49 	bl	8001b9c <GamePrep>

		while (1) {
			if (GameTick(&MemDisp) == DINO_IS_DEAD)
 800310a:	4808      	ldr	r0, [pc, #32]	; (800312c <main+0x60>)
 800310c:	f7fe fe60 	bl	8001dd0 <GameTick>
 8003110:	4603      	mov	r3, r0
 8003112:	2b01      	cmp	r3, #1
 8003114:	d000      	beq.n	8003118 <main+0x4c>
 8003116:	e7f8      	b.n	800310a <main+0x3e>
				break;
 8003118:	bf00      	nop
		GamePrep(&MemDisp);
 800311a:	e7f3      	b.n	8003104 <main+0x38>
 800311c:	2000015c 	.word	0x2000015c
 8003120:	200001a4 	.word	0x200001a4
 8003124:	40020000 	.word	0x40020000
 8003128:	20000104 	.word	0x20000104
 800312c:	200001ec 	.word	0x200001ec

08003130 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b094      	sub	sp, #80	; 0x50
 8003134:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003136:	f107 0320 	add.w	r3, r7, #32
 800313a:	2230      	movs	r2, #48	; 0x30
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f002 faf8 	bl	8005734 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003154:	2300      	movs	r3, #0
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	4b28      	ldr	r3, [pc, #160]	; (80031fc <SystemClock_Config+0xcc>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <SystemClock_Config+0xcc>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003162:	6413      	str	r3, [r2, #64]	; 0x40
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <SystemClock_Config+0xcc>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <SystemClock_Config+0xd0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <SystemClock_Config+0xd0>)
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <SystemClock_Config+0xd0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003190:	2302      	movs	r3, #2
 8003192:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003194:	2301      	movs	r3, #1
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003198:	2310      	movs	r3, #16
 800319a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800319c:	2302      	movs	r3, #2
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031a0:	2300      	movs	r3, #0
 80031a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80031a4:	2308      	movs	r3, #8
 80031a6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80031a8:	2348      	movs	r3, #72	; 0x48
 80031aa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031ac:	2302      	movs	r3, #2
 80031ae:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80031b0:	2304      	movs	r3, #4
 80031b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80031b4:	f107 0320 	add.w	r3, r7, #32
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 ff4f 	bl	800405c <HAL_RCC_OscConfig>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <SystemClock_Config+0x98>
		Error_Handler();
 80031c4:	f000 f990 	bl	80034e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80031c8:	230f      	movs	r3, #15
 80031ca:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031cc:	2302      	movs	r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	2101      	movs	r1, #1
 80031e4:	4618      	mov	r0, r3
 80031e6:	f001 f9b1 	bl	800454c <HAL_RCC_ClockConfig>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <SystemClock_Config+0xc4>
		Error_Handler();
 80031f0:	f000 f97a 	bl	80034e8 <Error_Handler>
	}
}
 80031f4:	bf00      	nop
 80031f6:	3750      	adds	r7, #80	; 0x50
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40023800 	.word	0x40023800
 8003200:	40007000 	.word	0x40007000

08003204 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <MX_SPI1_Init+0x64>)
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <MX_SPI1_Init+0x68>)
 800320c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <MX_SPI1_Init+0x64>)
 8003210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003214:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003216:	4b14      	ldr	r3, [pc, #80]	; (8003268 <MX_SPI1_Init+0x64>)
 8003218:	2200      	movs	r2, #0
 800321a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <MX_SPI1_Init+0x64>)
 800321e:	2200      	movs	r2, #0
 8003220:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <MX_SPI1_Init+0x64>)
 8003224:	2200      	movs	r2, #0
 8003226:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003228:	4b0f      	ldr	r3, [pc, #60]	; (8003268 <MX_SPI1_Init+0x64>)
 800322a:	2200      	movs	r2, #0
 800322c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <MX_SPI1_Init+0x64>)
 8003230:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003234:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <MX_SPI1_Init+0x64>)
 8003238:	2218      	movs	r2, #24
 800323a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <MX_SPI1_Init+0x64>)
 800323e:	2200      	movs	r2, #0
 8003240:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <MX_SPI1_Init+0x64>)
 8003244:	2200      	movs	r2, #0
 8003246:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003248:	4b07      	ldr	r3, [pc, #28]	; (8003268 <MX_SPI1_Init+0x64>)
 800324a:	2200      	movs	r2, #0
 800324c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800324e:	4b06      	ldr	r3, [pc, #24]	; (8003268 <MX_SPI1_Init+0x64>)
 8003250:	220a      	movs	r2, #10
 8003252:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8003254:	4804      	ldr	r0, [pc, #16]	; (8003268 <MX_SPI1_Init+0x64>)
 8003256:	f001 fb65 	bl	8004924 <HAL_SPI_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_SPI1_Init+0x60>
		Error_Handler();
 8003260:	f000 f942 	bl	80034e8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003264:	bf00      	nop
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000104 	.word	0x20000104
 800326c:	40013000 	.word	0x40013000

08003270 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003284:	463b      	mov	r3, r7
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800328c:	4b1f      	ldr	r3, [pc, #124]	; (800330c <MX_TIM1_Init+0x9c>)
 800328e:	4a20      	ldr	r2, [pc, #128]	; (8003310 <MX_TIM1_Init+0xa0>)
 8003290:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 36000 - 1;
 8003292:	4b1e      	ldr	r3, [pc, #120]	; (800330c <MX_TIM1_Init+0x9c>)
 8003294:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8003298:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	4b1c      	ldr	r3, [pc, #112]	; (800330c <MX_TIM1_Init+0x9c>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <MX_TIM1_Init+0x9c>)
 80032a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80032a6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a8:	4b18      	ldr	r3, [pc, #96]	; (800330c <MX_TIM1_Init+0x9c>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80032ae:	4b17      	ldr	r3, [pc, #92]	; (800330c <MX_TIM1_Init+0x9c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <MX_TIM1_Init+0x9c>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80032ba:	4814      	ldr	r0, [pc, #80]	; (800330c <MX_TIM1_Init+0x9c>)
 80032bc:	f001 fdc2 	bl	8004e44 <HAL_TIM_Base_Init>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM1_Init+0x5a>
		Error_Handler();
 80032c6:	f000 f90f 	bl	80034e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ce:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80032d0:	f107 0308 	add.w	r3, r7, #8
 80032d4:	4619      	mov	r1, r3
 80032d6:	480d      	ldr	r0, [pc, #52]	; (800330c <MX_TIM1_Init+0x9c>)
 80032d8:	f001 ff6e 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <MX_TIM1_Init+0x76>
		Error_Handler();
 80032e2:	f000 f901 	bl	80034e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80032ee:	463b      	mov	r3, r7
 80032f0:	4619      	mov	r1, r3
 80032f2:	4806      	ldr	r0, [pc, #24]	; (800330c <MX_TIM1_Init+0x9c>)
 80032f4:	f002 f96a 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 80032fe:	f000 f8f3 	bl	80034e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2000015c 	.word	0x2000015c
 8003310:	40010000 	.word	0x40010000

08003314 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800331a:	f107 0308 	add.w	r3, r7, #8
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	605a      	str	r2, [r3, #4]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003328:	463b      	mov	r3, r7
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <MX_TIM2_Init+0x94>)
 8003332:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003336:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000 - 1;
 8003338:	4b1b      	ldr	r3, [pc, #108]	; (80033a8 <MX_TIM2_Init+0x94>)
 800333a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800333e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <MX_TIM2_Init+0x94>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100 - 1;
 8003346:	4b18      	ldr	r3, [pc, #96]	; (80033a8 <MX_TIM2_Init+0x94>)
 8003348:	2263      	movs	r2, #99	; 0x63
 800334a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800334c:	4b16      	ldr	r3, [pc, #88]	; (80033a8 <MX_TIM2_Init+0x94>)
 800334e:	2200      	movs	r2, #0
 8003350:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003352:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <MX_TIM2_Init+0x94>)
 8003354:	2200      	movs	r2, #0
 8003356:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003358:	4813      	ldr	r0, [pc, #76]	; (80033a8 <MX_TIM2_Init+0x94>)
 800335a:	f001 fd73 	bl	8004e44 <HAL_TIM_Base_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <MX_TIM2_Init+0x54>
		Error_Handler();
 8003364:	f000 f8c0 	bl	80034e8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800336c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800336e:	f107 0308 	add.w	r3, r7, #8
 8003372:	4619      	mov	r1, r3
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <MX_TIM2_Init+0x94>)
 8003376:	f001 ff1f 	bl	80051b8 <HAL_TIM_ConfigClockSource>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <MX_TIM2_Init+0x70>
		Error_Handler();
 8003380:	f000 f8b2 	bl	80034e8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003384:	2300      	movs	r3, #0
 8003386:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003388:	2300      	movs	r3, #0
 800338a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800338c:	463b      	mov	r3, r7
 800338e:	4619      	mov	r1, r3
 8003390:	4805      	ldr	r0, [pc, #20]	; (80033a8 <MX_TIM2_Init+0x94>)
 8003392:	f002 f91b 	bl	80055cc <HAL_TIMEx_MasterConfigSynchronization>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 800339c:	f000 f8a4 	bl	80034e8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80033a0:	bf00      	nop
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	200001a4 	.word	0x200001a4

080033ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	609a      	str	r2, [r3, #8]
 80033be:	60da      	str	r2, [r3, #12]
 80033c0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	4b33      	ldr	r3, [pc, #204]	; (8003494 <MX_GPIO_Init+0xe8>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a32      	ldr	r2, [pc, #200]	; (8003494 <MX_GPIO_Init+0xe8>)
 80033cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b30      	ldr	r3, [pc, #192]	; (8003494 <MX_GPIO_Init+0xe8>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <MX_GPIO_Init+0xe8>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a2b      	ldr	r2, [pc, #172]	; (8003494 <MX_GPIO_Init+0xe8>)
 80033e8:	f043 0304 	orr.w	r3, r3, #4
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <MX_GPIO_Init+0xe8>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	603b      	str	r3, [r7, #0]
 80033fe:	4b25      	ldr	r3, [pc, #148]	; (8003494 <MX_GPIO_Init+0xe8>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a24      	ldr	r2, [pc, #144]	; (8003494 <MX_GPIO_Init+0xe8>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b22      	ldr	r3, [pc, #136]	; (8003494 <MX_GPIO_Init+0xe8>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_Pin | COMM_Pin, GPIO_PIN_RESET);
 8003416:	2200      	movs	r2, #0
 8003418:	f44f 7188 	mov.w	r1, #272	; 0x110
 800341c:	481e      	ldr	r0, [pc, #120]	; (8003498 <MX_GPIO_Init+0xec>)
 800341e:	f000 fde9 	bl	8003ff4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_GPIO_Port, DISP_Pin, GPIO_PIN_SET);
 8003422:	2201      	movs	r2, #1
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	481c      	ldr	r0, [pc, #112]	; (8003498 <MX_GPIO_Init+0xec>)
 8003428:	f000 fde4 	bl	8003ff4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 800342c:	2201      	movs	r2, #1
 800342e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8003432:	481a      	ldr	r0, [pc, #104]	; (800349c <MX_GPIO_Init+0xf0>)
 8003434:	f000 fdde 	bl	8003ff4 <HAL_GPIO_WritePin>
	KEY1_LED_Pin | KEY2_LED_Pin | KEY3_LED_Pin | KEY4_LED_Pin, GPIO_PIN_SET);

	/*Configure GPIO pins : KEY1_Pin KEY2_Pin KEY3_Pin KEY4_Pin */
	GPIO_InitStruct.Pin = KEY1_Pin | KEY2_Pin | KEY3_Pin | KEY4_Pin;
 8003438:	230f      	movs	r3, #15
 800343a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	4619      	mov	r1, r3
 800344a:	4814      	ldr	r0, [pc, #80]	; (800349c <MX_GPIO_Init+0xf0>)
 800344c:	f000 fc36 	bl	8003cbc <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin DISP_Pin COMM_Pin */
	GPIO_InitStruct.Pin = CS_Pin | DISP_Pin | COMM_Pin;
 8003450:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003454:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003456:	2301      	movs	r3, #1
 8003458:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	f107 030c 	add.w	r3, r7, #12
 8003466:	4619      	mov	r1, r3
 8003468:	480b      	ldr	r0, [pc, #44]	; (8003498 <MX_GPIO_Init+0xec>)
 800346a:	f000 fc27 	bl	8003cbc <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY1_LED_Pin KEY2_LED_Pin KEY3_LED_Pin KEY4_LED_Pin */
	GPIO_InitStruct.Pin = KEY1_LED_Pin | KEY2_LED_Pin | KEY3_LED_Pin
 800346e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003472:	60fb      	str	r3, [r7, #12]
			| KEY4_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003474:	2301      	movs	r3, #1
 8003476:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347c:	2300      	movs	r3, #0
 800347e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	4619      	mov	r1, r3
 8003486:	4805      	ldr	r0, [pc, #20]	; (800349c <MX_GPIO_Init+0xf0>)
 8003488:	f000 fc18 	bl	8003cbc <HAL_GPIO_Init>

}
 800348c:	bf00      	nop
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	40023800 	.word	0x40023800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020800 	.word	0x40020800

080034a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d104      	bne.n	80034ba <HAL_TIM_PeriodElapsedCallback+0x1a>
		// fCom = 0.5Hz (min val)
		COMM_TOGGLE;
 80034b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034b4:	4809      	ldr	r0, [pc, #36]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80034b6:	f000 fdb6 	bl	8004026 <HAL_GPIO_TogglePin>
	}
	if (htim == &htim2) {
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a08      	ldr	r2, [pc, #32]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d105      	bne.n	80034ce <HAL_TIM_PeriodElapsedCallback+0x2e>
		KEY2_LED_TOGGLE;
 80034c2:	2180      	movs	r1, #128	; 0x80
 80034c4:	4807      	ldr	r0, [pc, #28]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80034c6:	f000 fdae 	bl	8004026 <HAL_GPIO_TogglePin>
		KeyScan();
 80034ca:	f7fe faa5 	bl	8001a18 <KeyScan>
	}
}
 80034ce:	bf00      	nop
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	2000015c 	.word	0x2000015c
 80034dc:	40020000 	.word	0x40020000
 80034e0:	200001a4 	.word	0x200001a4
 80034e4:	40020800 	.word	0x40020800

080034e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80034ec:	b672      	cpsid	i
}
 80034ee:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80034f0:	e7fe      	b.n	80034f0 <Error_Handler+0x8>
	...

080034f4 <FetchText>:
		0x0c, 0x60, 0x92, 0x00, 0xfe, 0x14, 0xc6, 0x38, 0x38, 0xc6, 0x0c, 0x10,
		0x7c, 0x30, 0xc6, 0x18, 0x00, 0xc6, 0x00, 0x10, 0x38, 0x70, 0xc6, 0x18,
		0x38, 0x7c, 0x00, 0x10, 0x10, 0x20, 0x7c, 0x18, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, };

void FetchText(uint8_t *TextBuf, char chr) {
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
	uint8_t charSerialNum = -1;
 8003500:	23ff      	movs	r3, #255	; 0xff
 8003502:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 96; i++) {
 8003504:	2300      	movs	r3, #0
 8003506:	73bb      	strb	r3, [r7, #14]
 8003508:	e00b      	b.n	8003522 <FetchText+0x2e>
		if (chr == CharList[i]) {
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	4a1b      	ldr	r2, [pc, #108]	; (800357c <FetchText+0x88>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	429a      	cmp	r2, r3
 8003514:	d102      	bne.n	800351c <FetchText+0x28>
			charSerialNum = i;
 8003516:	7bbb      	ldrb	r3, [r7, #14]
 8003518:	73fb      	strb	r3, [r7, #15]
			break;
 800351a:	e005      	b.n	8003528 <FetchText+0x34>
	for (uint8_t i = 0; i < 96; i++) {
 800351c:	7bbb      	ldrb	r3, [r7, #14]
 800351e:	3301      	adds	r3, #1
 8003520:	73bb      	strb	r3, [r7, #14]
 8003522:	7bbb      	ldrb	r3, [r7, #14]
 8003524:	2b5f      	cmp	r3, #95	; 0x5f
 8003526:	d9f0      	bls.n	800350a <FetchText+0x16>
	if (charSerialNum == -1) {
		memset(TextBuf, 0x00, 8);
		return;
	}

	uint8_t charLookupX = charSerialNum % 8;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	72fb      	strb	r3, [r7, #11]
	uint8_t charLookupY = 8 * (charSerialNum / 8);
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	08db      	lsrs	r3, r3, #3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	72bb      	strb	r3, [r7, #10]
	uint8_t n = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	737b      	strb	r3, [r7, #13]

	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 800353e:	7abb      	ldrb	r3, [r7, #10]
 8003540:	733b      	strb	r3, [r7, #12]
 8003542:	e011      	b.n	8003568 <FetchText+0x74>
		TextBuf[n] = *((uint8_t*) PressStartStandard96 + y * 8 + charLookupX);
 8003544:	7b3b      	ldrb	r3, [r7, #12]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	461a      	mov	r2, r3
 800354a:	7afb      	ldrb	r3, [r7, #11]
 800354c:	4413      	add	r3, r2
 800354e:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <FetchText+0x8c>)
 8003550:	441a      	add	r2, r3
 8003552:	7b7b      	ldrb	r3, [r7, #13]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	440b      	add	r3, r1
 8003558:	7812      	ldrb	r2, [r2, #0]
 800355a:	701a      	strb	r2, [r3, #0]
		n++;
 800355c:	7b7b      	ldrb	r3, [r7, #13]
 800355e:	3301      	adds	r3, #1
 8003560:	737b      	strb	r3, [r7, #13]
	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 8003562:	7b3b      	ldrb	r3, [r7, #12]
 8003564:	3301      	adds	r3, #1
 8003566:	733b      	strb	r3, [r7, #12]
 8003568:	7abb      	ldrb	r3, [r7, #10]
 800356a:	1dda      	adds	r2, r3, #7
 800356c:	7b3b      	ldrb	r3, [r7, #12]
 800356e:	429a      	cmp	r2, r3
 8003570:	dae8      	bge.n	8003544 <FetchText+0x50>
	}
}
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	080072d8 	.word	0x080072d8
 8003580:	08007338 	.word	0x08007338

08003584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <HAL_MspInit+0x4c>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	4a0f      	ldr	r2, [pc, #60]	; (80035d0 <HAL_MspInit+0x4c>)
 8003594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003598:	6453      	str	r3, [r2, #68]	; 0x44
 800359a:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_MspInit+0x4c>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_MspInit+0x4c>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	4a08      	ldr	r2, [pc, #32]	; (80035d0 <HAL_MspInit+0x4c>)
 80035b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035b4:	6413      	str	r3, [r2, #64]	; 0x40
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_MspInit+0x4c>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035be:	603b      	str	r3, [r7, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800

080035d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_SPI_MspInit+0x84>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d12b      	bne.n	800364e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <HAL_SPI_MspInit+0x88>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	4a17      	ldr	r2, [pc, #92]	; (800365c <HAL_SPI_MspInit+0x88>)
 8003600:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003604:	6453      	str	r3, [r2, #68]	; 0x44
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_SPI_MspInit+0x88>)
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	4b11      	ldr	r3, [pc, #68]	; (800365c <HAL_SPI_MspInit+0x88>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a10      	ldr	r2, [pc, #64]	; (800365c <HAL_SPI_MspInit+0x88>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b0e      	ldr	r3, [pc, #56]	; (800365c <HAL_SPI_MspInit+0x88>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800362e:	23a0      	movs	r3, #160	; 0xa0
 8003630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003636:	2300      	movs	r3, #0
 8003638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800363e:	2305      	movs	r3, #5
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	f107 0314 	add.w	r3, r7, #20
 8003646:	4619      	mov	r1, r3
 8003648:	4805      	ldr	r0, [pc, #20]	; (8003660 <HAL_SPI_MspInit+0x8c>)
 800364a:	f000 fb37 	bl	8003cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800364e:	bf00      	nop
 8003650:	3728      	adds	r7, #40	; 0x28
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40013000 	.word	0x40013000
 800365c:	40023800 	.word	0x40023800
 8003660:	40020000 	.word	0x40020000

08003664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <HAL_TIM_Base_MspInit+0x80>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d116      	bne.n	80036a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_TIM_Base_MspInit+0x84>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_TIM_Base_MspInit+0x84>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6453      	str	r3, [r2, #68]	; 0x44
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_TIM_Base_MspInit+0x84>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	2100      	movs	r1, #0
 8003696:	2019      	movs	r0, #25
 8003698:	f000 fad9 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800369c:	2019      	movs	r0, #25
 800369e:	f000 faf2 	bl	8003c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036a2:	e01a      	b.n	80036da <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ac:	d115      	bne.n	80036da <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_TIM_Base_MspInit+0x84>)
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	4a0c      	ldr	r2, [pc, #48]	; (80036e8 <HAL_TIM_Base_MspInit+0x84>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6413      	str	r3, [r2, #64]	; 0x40
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_TIM_Base_MspInit+0x84>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80036ca:	2200      	movs	r2, #0
 80036cc:	2100      	movs	r1, #0
 80036ce:	201c      	movs	r0, #28
 80036d0:	f000 fabd 	bl	8003c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80036d4:	201c      	movs	r0, #28
 80036d6:	f000 fad6 	bl	8003c86 <HAL_NVIC_EnableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40023800 	.word	0x40023800

080036ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036f0:	e7fe      	b.n	80036f0 <NMI_Handler+0x4>

080036f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f2:	b480      	push	{r7}
 80036f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036f6:	e7fe      	b.n	80036f6 <HardFault_Handler+0x4>

080036f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036fc:	e7fe      	b.n	80036fc <MemManage_Handler+0x4>

080036fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036fe:	b480      	push	{r7}
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003702:	e7fe      	b.n	8003702 <BusFault_Handler+0x4>

08003704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003708:	e7fe      	b.n	8003708 <UsageFault_Handler+0x4>

0800370a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800370a:	b480      	push	{r7}
 800370c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003738:	f000 f96a 	bl	8003a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800373c:	bf00      	nop
 800373e:	bd80      	pop	{r7, pc}

08003740 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003744:	4802      	ldr	r0, [pc, #8]	; (8003750 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003746:	f001 fc2f 	bl	8004fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800374a:	bf00      	nop
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2000015c 	.word	0x2000015c

08003754 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <TIM2_IRQHandler+0x10>)
 800375a:	f001 fc25 	bl	8004fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200001a4 	.word	0x200001a4

08003768 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
	return 1;
 800376c:	2301      	movs	r3, #1
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <_kill>:

int _kill(int pid, int sig)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003782:	f001 ffa5 	bl	80056d0 <__errno>
 8003786:	4603      	mov	r3, r0
 8003788:	2216      	movs	r2, #22
 800378a:	601a      	str	r2, [r3, #0]
	return -1;
 800378c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003790:	4618      	mov	r0, r3
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_exit>:

void _exit (int status)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80037a0:	f04f 31ff 	mov.w	r1, #4294967295
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffe7 	bl	8003778 <_kill>
	while (1) {}		/* Make sure we hang here */
 80037aa:	e7fe      	b.n	80037aa <_exit+0x12>

080037ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	e00a      	b.n	80037d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037be:	f3af 8000 	nop.w
 80037c2:	4601      	mov	r1, r0
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	60ba      	str	r2, [r7, #8]
 80037ca:	b2ca      	uxtb	r2, r1
 80037cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3301      	adds	r3, #1
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	dbf0      	blt.n	80037be <_read+0x12>
	}

return len;
 80037dc:	687b      	ldr	r3, [r7, #4]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b086      	sub	sp, #24
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	e009      	b.n	800380c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	1c5a      	adds	r2, r3, #1
 80037fc:	60ba      	str	r2, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	3301      	adds	r3, #1
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	dbf1      	blt.n	80037f8 <_write+0x12>
	}
	return len;
 8003814:	687b      	ldr	r3, [r7, #4]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <_close>:

int _close(int file)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
	return -1;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800382a:	4618      	mov	r0, r3
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003846:	605a      	str	r2, [r3, #4]
	return 0;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <_isatty>:

int _isatty(int file)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
	return 1;
 800385e:	2301      	movs	r3, #1
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
	return 0;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003890:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <_sbrk+0x5c>)
 8003892:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <_sbrk+0x60>)
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800389c:	4b13      	ldr	r3, [pc, #76]	; (80038ec <_sbrk+0x64>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d102      	bne.n	80038aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a4:	4b11      	ldr	r3, [pc, #68]	; (80038ec <_sbrk+0x64>)
 80038a6:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <_sbrk+0x68>)
 80038a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038aa:	4b10      	ldr	r3, [pc, #64]	; (80038ec <_sbrk+0x64>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d207      	bcs.n	80038c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038b8:	f001 ff0a 	bl	80056d0 <__errno>
 80038bc:	4603      	mov	r3, r0
 80038be:	220c      	movs	r2, #12
 80038c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038c2:	f04f 33ff 	mov.w	r3, #4294967295
 80038c6:	e009      	b.n	80038dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038c8:	4b08      	ldr	r3, [pc, #32]	; (80038ec <_sbrk+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <_sbrk+0x64>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	4a05      	ldr	r2, [pc, #20]	; (80038ec <_sbrk+0x64>)
 80038d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038da:	68fb      	ldr	r3, [r7, #12]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20010000 	.word	0x20010000
 80038e8:	00000400 	.word	0x00000400
 80038ec:	200001f8 	.word	0x200001f8
 80038f0:	20000210 	.word	0x20000210

080038f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <SystemInit+0x20>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <SystemInit+0x20>)
 8003900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <Reset_Handler>:
 8003918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003950 <LoopFillZerobss+0x12>
 800391c:	480d      	ldr	r0, [pc, #52]	; (8003954 <LoopFillZerobss+0x16>)
 800391e:	490e      	ldr	r1, [pc, #56]	; (8003958 <LoopFillZerobss+0x1a>)
 8003920:	4a0e      	ldr	r2, [pc, #56]	; (800395c <LoopFillZerobss+0x1e>)
 8003922:	2300      	movs	r3, #0
 8003924:	e002      	b.n	800392c <LoopCopyDataInit>

08003926 <CopyDataInit>:
 8003926:	58d4      	ldr	r4, [r2, r3]
 8003928:	50c4      	str	r4, [r0, r3]
 800392a:	3304      	adds	r3, #4

0800392c <LoopCopyDataInit>:
 800392c:	18c4      	adds	r4, r0, r3
 800392e:	428c      	cmp	r4, r1
 8003930:	d3f9      	bcc.n	8003926 <CopyDataInit>
 8003932:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <LoopFillZerobss+0x22>)
 8003934:	4c0b      	ldr	r4, [pc, #44]	; (8003964 <LoopFillZerobss+0x26>)
 8003936:	2300      	movs	r3, #0
 8003938:	e001      	b.n	800393e <LoopFillZerobss>

0800393a <FillZerobss>:
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	3204      	adds	r2, #4

0800393e <LoopFillZerobss>:
 800393e:	42a2      	cmp	r2, r4
 8003940:	d3fb      	bcc.n	800393a <FillZerobss>
 8003942:	f7ff ffd7 	bl	80038f4 <SystemInit>
 8003946:	f001 fec9 	bl	80056dc <__libc_init_array>
 800394a:	f7ff fbbf 	bl	80030cc <main>
 800394e:	4770      	bx	lr
 8003950:	20010000 	.word	0x20010000
 8003954:	20000000 	.word	0x20000000
 8003958:	20000078 	.word	0x20000078
 800395c:	080077a0 	.word	0x080077a0
 8003960:	20000078 	.word	0x20000078
 8003964:	20000210 	.word	0x20000210

08003968 <ADC_IRQHandler>:
 8003968:	e7fe      	b.n	8003968 <ADC_IRQHandler>
	...

0800396c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <HAL_Init+0x40>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <HAL_Init+0x40>)
 8003976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800397a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_Init+0x40>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <HAL_Init+0x40>)
 8003982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_Init+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <HAL_Init+0x40>)
 800398e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003994:	2003      	movs	r0, #3
 8003996:	f000 f94f 	bl	8003c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800399a:	200f      	movs	r0, #15
 800399c:	f000 f808 	bl	80039b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039a0:	f7ff fdf0 	bl	8003584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023c00 	.word	0x40023c00

080039b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039b8:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <HAL_InitTick+0x54>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_InitTick+0x58>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f967 	bl	8003ca2 <HAL_SYSTICK_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e00e      	b.n	80039fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b0f      	cmp	r3, #15
 80039e2:	d80a      	bhi.n	80039fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e4:	2200      	movs	r2, #0
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	f000 f92f 	bl	8003c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <HAL_InitTick+0x5c>)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
 80039f8:	e000      	b.n	80039fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000008 	.word	0x20000008
 8003a08:	20000010 	.word	0x20000010
 8003a0c:	2000000c 	.word	0x2000000c

08003a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_IncTick+0x20>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_IncTick+0x24>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a04      	ldr	r2, [pc, #16]	; (8003a34 <HAL_IncTick+0x24>)
 8003a22:	6013      	str	r3, [r2, #0]
}
 8003a24:	bf00      	nop
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000010 	.word	0x20000010
 8003a34:	200001fc 	.word	0x200001fc

08003a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a3c:	4b03      	ldr	r3, [pc, #12]	; (8003a4c <HAL_GetTick+0x14>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	200001fc 	.word	0x200001fc

08003a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a58:	f7ff ffee 	bl	8003a38 <HAL_GetTick>
 8003a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d005      	beq.n	8003a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_Delay+0x44>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4413      	add	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a76:	bf00      	nop
 8003a78:	f7ff ffde 	bl	8003a38 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d8f7      	bhi.n	8003a78 <HAL_Delay+0x28>
  {
  }
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000010 	.word	0x20000010

08003a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aca:	4a04      	ldr	r2, [pc, #16]	; (8003adc <__NVIC_SetPriorityGrouping+0x44>)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	60d3      	str	r3, [r2, #12]
}
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	e000ed00 	.word	0xe000ed00

08003ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	0a1b      	lsrs	r3, r3, #8
 8003aea:	f003 0307 	and.w	r3, r3, #7
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	db0b      	blt.n	8003b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	f003 021f 	and.w	r2, r3, #31
 8003b14:	4907      	ldr	r1, [pc, #28]	; (8003b34 <__NVIC_EnableIRQ+0x38>)
 8003b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2001      	movs	r0, #1
 8003b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	e000e100 	.word	0xe000e100

08003b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db0a      	blt.n	8003b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	490c      	ldr	r1, [pc, #48]	; (8003b84 <__NVIC_SetPriority+0x4c>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b60:	e00a      	b.n	8003b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4908      	ldr	r1, [pc, #32]	; (8003b88 <__NVIC_SetPriority+0x50>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	0112      	lsls	r2, r2, #4
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	440b      	add	r3, r1
 8003b76:	761a      	strb	r2, [r3, #24]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b089      	sub	sp, #36	; 0x24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f1c3 0307 	rsb	r3, r3, #7
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	bf28      	it	cs
 8003baa:	2304      	movcs	r3, #4
 8003bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	2b06      	cmp	r3, #6
 8003bb4:	d902      	bls.n	8003bbc <NVIC_EncodePriority+0x30>
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3b03      	subs	r3, #3
 8003bba:	e000      	b.n	8003bbe <NVIC_EncodePriority+0x32>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	43da      	mvns	r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	401a      	ands	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	43d9      	mvns	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be4:	4313      	orrs	r3, r2
         );
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3724      	adds	r7, #36	; 0x24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c04:	d301      	bcc.n	8003c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c06:	2301      	movs	r3, #1
 8003c08:	e00f      	b.n	8003c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c0a:	4a0a      	ldr	r2, [pc, #40]	; (8003c34 <SysTick_Config+0x40>)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c12:	210f      	movs	r1, #15
 8003c14:	f04f 30ff 	mov.w	r0, #4294967295
 8003c18:	f7ff ff8e 	bl	8003b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <SysTick_Config+0x40>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c22:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <SysTick_Config+0x40>)
 8003c24:	2207      	movs	r2, #7
 8003c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	e000e010 	.word	0xe000e010

08003c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ff29 	bl	8003a98 <__NVIC_SetPriorityGrouping>
}
 8003c46:	bf00      	nop
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	4603      	mov	r3, r0
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c60:	f7ff ff3e 	bl	8003ae0 <__NVIC_GetPriorityGrouping>
 8003c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68b9      	ldr	r1, [r7, #8]
 8003c6a:	6978      	ldr	r0, [r7, #20]
 8003c6c:	f7ff ff8e 	bl	8003b8c <NVIC_EncodePriority>
 8003c70:	4602      	mov	r2, r0
 8003c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff5d 	bl	8003b38 <__NVIC_SetPriority>
}
 8003c7e:	bf00      	nop
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff ff31 	bl	8003afc <__NVIC_EnableIRQ>
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ffa2 	bl	8003bf4 <SysTick_Config>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e159      	b.n	8003f8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cd8:	2201      	movs	r2, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	f040 8148 	bne.w	8003f86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d005      	beq.n	8003d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d130      	bne.n	8003d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	2203      	movs	r2, #3
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d44:	2201      	movs	r2, #1
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 0201 	and.w	r2, r3, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d017      	beq.n	8003dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2203      	movs	r2, #3
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d123      	bne.n	8003e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	08da      	lsrs	r2, r3, #3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3208      	adds	r2, #8
 8003dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	220f      	movs	r2, #15
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691a      	ldr	r2, [r3, #16]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	08da      	lsrs	r2, r3, #3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3208      	adds	r2, #8
 8003dfa:	69b9      	ldr	r1, [r7, #24]
 8003dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a2 	beq.w	8003f86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	4b57      	ldr	r3, [pc, #348]	; (8003fa4 <HAL_GPIO_Init+0x2e8>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	4a56      	ldr	r2, [pc, #344]	; (8003fa4 <HAL_GPIO_Init+0x2e8>)
 8003e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e50:	6453      	str	r3, [r2, #68]	; 0x44
 8003e52:	4b54      	ldr	r3, [pc, #336]	; (8003fa4 <HAL_GPIO_Init+0x2e8>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e5e:	4a52      	ldr	r2, [pc, #328]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	3302      	adds	r3, #2
 8003e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	220f      	movs	r2, #15
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a49      	ldr	r2, [pc, #292]	; (8003fac <HAL_GPIO_Init+0x2f0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d019      	beq.n	8003ebe <HAL_GPIO_Init+0x202>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a48      	ldr	r2, [pc, #288]	; (8003fb0 <HAL_GPIO_Init+0x2f4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_GPIO_Init+0x1fe>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a47      	ldr	r2, [pc, #284]	; (8003fb4 <HAL_GPIO_Init+0x2f8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d00d      	beq.n	8003eb6 <HAL_GPIO_Init+0x1fa>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a46      	ldr	r2, [pc, #280]	; (8003fb8 <HAL_GPIO_Init+0x2fc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d007      	beq.n	8003eb2 <HAL_GPIO_Init+0x1f6>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a45      	ldr	r2, [pc, #276]	; (8003fbc <HAL_GPIO_Init+0x300>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d101      	bne.n	8003eae <HAL_GPIO_Init+0x1f2>
 8003eaa:	2304      	movs	r3, #4
 8003eac:	e008      	b.n	8003ec0 <HAL_GPIO_Init+0x204>
 8003eae:	2307      	movs	r3, #7
 8003eb0:	e006      	b.n	8003ec0 <HAL_GPIO_Init+0x204>
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e004      	b.n	8003ec0 <HAL_GPIO_Init+0x204>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e002      	b.n	8003ec0 <HAL_GPIO_Init+0x204>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_GPIO_Init+0x204>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	f002 0203 	and.w	r2, r2, #3
 8003ec6:	0092      	lsls	r2, r2, #2
 8003ec8:	4093      	lsls	r3, r2
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ed0:	4935      	ldr	r1, [pc, #212]	; (8003fa8 <HAL_GPIO_Init+0x2ec>)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	089b      	lsrs	r3, r3, #2
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f02:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f08:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f2c:	4a24      	ldr	r2, [pc, #144]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f32:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f56:	4a1a      	ldr	r2, [pc, #104]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <HAL_GPIO_Init+0x304>)
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3301      	adds	r3, #1
 8003f8a:	61fb      	str	r3, [r7, #28]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b0f      	cmp	r3, #15
 8003f90:	f67f aea2 	bls.w	8003cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3724      	adds	r7, #36	; 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	40013800 	.word	0x40013800
 8003fac:	40020000 	.word	0x40020000
 8003fb0:	40020400 	.word	0x40020400
 8003fb4:	40020800 	.word	0x40020800
 8003fb8:	40020c00 	.word	0x40020c00
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40013c00 	.word	0x40013c00

08003fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	e001      	b.n	8003fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004010:	e003      	b.n	800401a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	041a      	lsls	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	619a      	str	r2, [r3, #24]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004038:	887a      	ldrh	r2, [r7, #2]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4013      	ands	r3, r2
 800403e:	041a      	lsls	r2, r3, #16
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	43d9      	mvns	r1, r3
 8004044:	887b      	ldrh	r3, [r7, #2]
 8004046:	400b      	ands	r3, r1
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	619a      	str	r2, [r3, #24]
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e267      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d075      	beq.n	8004166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407a:	4b88      	ldr	r3, [pc, #544]	; (800429c <HAL_RCC_OscConfig+0x240>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b04      	cmp	r3, #4
 8004084:	d00c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4b85      	ldr	r3, [pc, #532]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800408e:	2b08      	cmp	r3, #8
 8004090:	d112      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004092:	4b82      	ldr	r3, [pc, #520]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409e:	d10b      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	4b7e      	ldr	r3, [pc, #504]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05b      	beq.n	8004164 <HAL_RCC_OscConfig+0x108>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d157      	bne.n	8004164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e242      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d106      	bne.n	80040d0 <HAL_RCC_OscConfig+0x74>
 80040c2:	4b76      	ldr	r3, [pc, #472]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a75      	ldr	r2, [pc, #468]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0xb0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x98>
 80040da:	4b70      	ldr	r3, [pc, #448]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a6f      	ldr	r2, [pc, #444]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b6d      	ldr	r3, [pc, #436]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a6c      	ldr	r2, [pc, #432]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0xb0>
 80040f4:	4b69      	ldr	r3, [pc, #420]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a68      	ldr	r2, [pc, #416]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b66      	ldr	r3, [pc, #408]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a65      	ldr	r2, [pc, #404]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7ff fc90 	bl	8003a38 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800411c:	f7ff fc8c 	bl	8003a38 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e207      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b5b      	ldr	r3, [pc, #364]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xc0>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7ff fc7c 	bl	8003a38 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004144:	f7ff fc78 	bl	8003a38 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1f3      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	4b51      	ldr	r3, [pc, #324]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0xe8>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004172:	4b4a      	ldr	r3, [pc, #296]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417e:	4b47      	ldr	r3, [pc, #284]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004186:	2b08      	cmp	r3, #8
 8004188:	d11c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418a:	4b44      	ldr	r3, [pc, #272]	; (800429c <HAL_RCC_OscConfig+0x240>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d116      	bne.n	80041c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	4b41      	ldr	r3, [pc, #260]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x152>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e1c7      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b3b      	ldr	r3, [pc, #236]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4937      	ldr	r1, [pc, #220]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	e03a      	b.n	800423a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041cc:	4b34      	ldr	r3, [pc, #208]	; (80042a0 <HAL_RCC_OscConfig+0x244>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7ff fc31 	bl	8003a38 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041da:	f7ff fc2d 	bl	8003a38 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e1a8      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	4b2b      	ldr	r3, [pc, #172]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b28      	ldr	r3, [pc, #160]	; (800429c <HAL_RCC_OscConfig+0x240>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4925      	ldr	r1, [pc, #148]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <HAL_RCC_OscConfig+0x244>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7ff fc10 	bl	8003a38 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421c:	f7ff fc0c 	bl	8003a38 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e187      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	4b1b      	ldr	r3, [pc, #108]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d036      	beq.n	80042b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d016      	beq.n	800427c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b15      	ldr	r3, [pc, #84]	; (80042a4 <HAL_RCC_OscConfig+0x248>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7ff fbf0 	bl	8003a38 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425c:	f7ff fbec 	bl	8003a38 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e167      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <HAL_RCC_OscConfig+0x240>)
 8004270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x200>
 800427a:	e01b      	b.n	80042b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCC_OscConfig+0x248>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004282:	f7ff fbd9 	bl	8003a38 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	e00e      	b.n	80042a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428a:	f7ff fbd5 	bl	8003a38 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d907      	bls.n	80042a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e150      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
 800429c:	40023800 	.word	0x40023800
 80042a0:	42470000 	.word	0x42470000
 80042a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042a8:	4b88      	ldr	r3, [pc, #544]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1ea      	bne.n	800428a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 8097 	beq.w	80043f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042c2:	2300      	movs	r3, #0
 80042c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042c6:	4b81      	ldr	r3, [pc, #516]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	4b7d      	ldr	r3, [pc, #500]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4a7c      	ldr	r2, [pc, #496]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6413      	str	r3, [r2, #64]	; 0x40
 80042e2:	4b7a      	ldr	r3, [pc, #488]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f2:	4b77      	ldr	r3, [pc, #476]	; (80044d0 <HAL_RCC_OscConfig+0x474>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d118      	bne.n	8004330 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042fe:	4b74      	ldr	r3, [pc, #464]	; (80044d0 <HAL_RCC_OscConfig+0x474>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a73      	ldr	r2, [pc, #460]	; (80044d0 <HAL_RCC_OscConfig+0x474>)
 8004304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800430a:	f7ff fb95 	bl	8003a38 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004312:	f7ff fb91 	bl	8003a38 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e10c      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004324:	4b6a      	ldr	r3, [pc, #424]	; (80044d0 <HAL_RCC_OscConfig+0x474>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f0      	beq.n	8004312 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d106      	bne.n	8004346 <HAL_RCC_OscConfig+0x2ea>
 8004338:	4b64      	ldr	r3, [pc, #400]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	4a63      	ldr	r2, [pc, #396]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6713      	str	r3, [r2, #112]	; 0x70
 8004344:	e01c      	b.n	8004380 <HAL_RCC_OscConfig+0x324>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b05      	cmp	r3, #5
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0x30c>
 800434e:	4b5f      	ldr	r3, [pc, #380]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004352:	4a5e      	ldr	r2, [pc, #376]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004354:	f043 0304 	orr.w	r3, r3, #4
 8004358:	6713      	str	r3, [r2, #112]	; 0x70
 800435a:	4b5c      	ldr	r3, [pc, #368]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	4a5b      	ldr	r2, [pc, #364]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6713      	str	r3, [r2, #112]	; 0x70
 8004366:	e00b      	b.n	8004380 <HAL_RCC_OscConfig+0x324>
 8004368:	4b58      	ldr	r3, [pc, #352]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4a57      	ldr	r2, [pc, #348]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	6713      	str	r3, [r2, #112]	; 0x70
 8004374:	4b55      	ldr	r3, [pc, #340]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a54      	ldr	r2, [pc, #336]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 800437a:	f023 0304 	bic.w	r3, r3, #4
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d015      	beq.n	80043b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7ff fb56 	bl	8003a38 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004390:	f7ff fb52 	bl	8003a38 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e0cb      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043a6:	4b49      	ldr	r3, [pc, #292]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ee      	beq.n	8004390 <HAL_RCC_OscConfig+0x334>
 80043b2:	e014      	b.n	80043de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b4:	f7ff fb40 	bl	8003a38 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ba:	e00a      	b.n	80043d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043bc:	f7ff fb3c 	bl	8003a38 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e0b5      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d2:	4b3e      	ldr	r3, [pc, #248]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1ee      	bne.n	80043bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d105      	bne.n	80043f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043e4:	4b39      	ldr	r3, [pc, #228]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	4a38      	ldr	r2, [pc, #224]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a1 	beq.w	800453c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043fa:	4b34      	ldr	r3, [pc, #208]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b08      	cmp	r3, #8
 8004404:	d05c      	beq.n	80044c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d141      	bne.n	8004492 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440e:	4b31      	ldr	r3, [pc, #196]	; (80044d4 <HAL_RCC_OscConfig+0x478>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7ff fb10 	bl	8003a38 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7ff fb0c 	bl	8003a38 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e087      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	4b27      	ldr	r3, [pc, #156]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69da      	ldr	r2, [r3, #28]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	019b      	lsls	r3, r3, #6
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	085b      	lsrs	r3, r3, #1
 8004452:	3b01      	subs	r3, #1
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	061b      	lsls	r3, r3, #24
 800445e:	491b      	ldr	r1, [pc, #108]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004460:	4313      	orrs	r3, r2
 8004462:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_RCC_OscConfig+0x478>)
 8004466:	2201      	movs	r2, #1
 8004468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446a:	f7ff fae5 	bl	8003a38 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004470:	e008      	b.n	8004484 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004472:	f7ff fae1 	bl	8003a38 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e05c      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004484:	4b11      	ldr	r3, [pc, #68]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f0      	beq.n	8004472 <HAL_RCC_OscConfig+0x416>
 8004490:	e054      	b.n	800453c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b10      	ldr	r3, [pc, #64]	; (80044d4 <HAL_RCC_OscConfig+0x478>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7ff face 	bl	8003a38 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a0:	f7ff faca 	bl	8003a38 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e045      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_RCC_OscConfig+0x470>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x444>
 80044be:	e03d      	b.n	800453c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e038      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000
 80044d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044d8:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_RCC_OscConfig+0x4ec>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d028      	beq.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d121      	bne.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	429a      	cmp	r2, r3
 8004500:	d11a      	bne.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800450e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004510:	4293      	cmp	r3, r2
 8004512:	d111      	bne.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	085b      	lsrs	r3, r3, #1
 8004520:	3b01      	subs	r3, #1
 8004522:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004524:	429a      	cmp	r2, r3
 8004526:	d107      	bne.n	8004538 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004532:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40023800 	.word	0x40023800

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0cc      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004560:	4b68      	ldr	r3, [pc, #416]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d90c      	bls.n	8004588 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b65      	ldr	r3, [pc, #404]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b63      	ldr	r3, [pc, #396]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0307 	and.w	r3, r3, #7
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0b8      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d020      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045a0:	4b59      	ldr	r3, [pc, #356]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	4a58      	ldr	r2, [pc, #352]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0308 	and.w	r3, r3, #8
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b8:	4b53      	ldr	r3, [pc, #332]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	4a52      	ldr	r2, [pc, #328]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c4:	4b50      	ldr	r3, [pc, #320]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	494d      	ldr	r1, [pc, #308]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d044      	beq.n	800466c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d119      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e07f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d003      	beq.n	800460a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004606:	2b03      	cmp	r3, #3
 8004608:	d107      	bne.n	800461a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460a:	4b3f      	ldr	r3, [pc, #252]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e06f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e067      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800462a:	4b37      	ldr	r3, [pc, #220]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f023 0203 	bic.w	r2, r3, #3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4934      	ldr	r1, [pc, #208]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800463c:	f7ff f9fc 	bl	8003a38 <HAL_GetTick>
 8004640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004642:	e00a      	b.n	800465a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004644:	f7ff f9f8 	bl	8003a38 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e04f      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465a:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 020c 	and.w	r2, r3, #12
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	429a      	cmp	r2, r3
 800466a:	d1eb      	bne.n	8004644 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	429a      	cmp	r2, r3
 8004678:	d20c      	bcs.n	8004694 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0307 	and.w	r3, r3, #7
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	429a      	cmp	r2, r3
 800468e:	d001      	beq.n	8004694 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e032      	b.n	80046fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046a0:	4b19      	ldr	r3, [pc, #100]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4916      	ldr	r1, [pc, #88]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d009      	beq.n	80046d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	490e      	ldr	r1, [pc, #56]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046d2:	f000 f821 	bl	8004718 <HAL_RCC_GetSysClockFreq>
 80046d6:	4602      	mov	r2, r0
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	490a      	ldr	r1, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x1c0>)
 80046e4:	5ccb      	ldrb	r3, [r1, r3]
 80046e6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_ClockConfig+0x1c8>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff f95c 	bl	80039b0 <HAL_InitTick>

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023c00 	.word	0x40023c00
 8004708:	40023800 	.word	0x40023800
 800470c:	08007638 	.word	0x08007638
 8004710:	20000008 	.word	0x20000008
 8004714:	2000000c 	.word	0x2000000c

08004718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b094      	sub	sp, #80	; 0x50
 800471e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	647b      	str	r3, [r7, #68]	; 0x44
 8004724:	2300      	movs	r3, #0
 8004726:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004728:	2300      	movs	r3, #0
 800472a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004730:	4b79      	ldr	r3, [pc, #484]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b08      	cmp	r3, #8
 800473a:	d00d      	beq.n	8004758 <HAL_RCC_GetSysClockFreq+0x40>
 800473c:	2b08      	cmp	r3, #8
 800473e:	f200 80e1 	bhi.w	8004904 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_RCC_GetSysClockFreq+0x34>
 8004746:	2b04      	cmp	r3, #4
 8004748:	d003      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x3a>
 800474a:	e0db      	b.n	8004904 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800474c:	4b73      	ldr	r3, [pc, #460]	; (800491c <HAL_RCC_GetSysClockFreq+0x204>)
 800474e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004750:	e0db      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004752:	4b73      	ldr	r3, [pc, #460]	; (8004920 <HAL_RCC_GetSysClockFreq+0x208>)
 8004754:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004756:	e0d8      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004758:	4b6f      	ldr	r3, [pc, #444]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004762:	4b6d      	ldr	r3, [pc, #436]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d063      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800476e:	4b6a      	ldr	r3, [pc, #424]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	099b      	lsrs	r3, r3, #6
 8004774:	2200      	movs	r2, #0
 8004776:	63bb      	str	r3, [r7, #56]	; 0x38
 8004778:	63fa      	str	r2, [r7, #60]	; 0x3c
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004780:	633b      	str	r3, [r7, #48]	; 0x30
 8004782:	2300      	movs	r3, #0
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
 8004786:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800478a:	4622      	mov	r2, r4
 800478c:	462b      	mov	r3, r5
 800478e:	f04f 0000 	mov.w	r0, #0
 8004792:	f04f 0100 	mov.w	r1, #0
 8004796:	0159      	lsls	r1, r3, #5
 8004798:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800479c:	0150      	lsls	r0, r2, #5
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4621      	mov	r1, r4
 80047a4:	1a51      	subs	r1, r2, r1
 80047a6:	6139      	str	r1, [r7, #16]
 80047a8:	4629      	mov	r1, r5
 80047aa:	eb63 0301 	sbc.w	r3, r3, r1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047bc:	4659      	mov	r1, fp
 80047be:	018b      	lsls	r3, r1, #6
 80047c0:	4651      	mov	r1, sl
 80047c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047c6:	4651      	mov	r1, sl
 80047c8:	018a      	lsls	r2, r1, #6
 80047ca:	4651      	mov	r1, sl
 80047cc:	ebb2 0801 	subs.w	r8, r2, r1
 80047d0:	4659      	mov	r1, fp
 80047d2:	eb63 0901 	sbc.w	r9, r3, r1
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047ea:	4690      	mov	r8, r2
 80047ec:	4699      	mov	r9, r3
 80047ee:	4623      	mov	r3, r4
 80047f0:	eb18 0303 	adds.w	r3, r8, r3
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	462b      	mov	r3, r5
 80047f8:	eb49 0303 	adc.w	r3, r9, r3
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800480a:	4629      	mov	r1, r5
 800480c:	024b      	lsls	r3, r1, #9
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004814:	4621      	mov	r1, r4
 8004816:	024a      	lsls	r2, r1, #9
 8004818:	4610      	mov	r0, r2
 800481a:	4619      	mov	r1, r3
 800481c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800481e:	2200      	movs	r2, #0
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
 8004822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004824:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004828:	f7fc fa20 	bl	8000c6c <__aeabi_uldivmod>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4613      	mov	r3, r2
 8004832:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004834:	e058      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004836:	4b38      	ldr	r3, [pc, #224]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	099b      	lsrs	r3, r3, #6
 800483c:	2200      	movs	r2, #0
 800483e:	4618      	mov	r0, r3
 8004840:	4611      	mov	r1, r2
 8004842:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004846:	623b      	str	r3, [r7, #32]
 8004848:	2300      	movs	r3, #0
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
 800484c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004850:	4642      	mov	r2, r8
 8004852:	464b      	mov	r3, r9
 8004854:	f04f 0000 	mov.w	r0, #0
 8004858:	f04f 0100 	mov.w	r1, #0
 800485c:	0159      	lsls	r1, r3, #5
 800485e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004862:	0150      	lsls	r0, r2, #5
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	4641      	mov	r1, r8
 800486a:	ebb2 0a01 	subs.w	sl, r2, r1
 800486e:	4649      	mov	r1, r9
 8004870:	eb63 0b01 	sbc.w	fp, r3, r1
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004880:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004884:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004888:	ebb2 040a 	subs.w	r4, r2, sl
 800488c:	eb63 050b 	sbc.w	r5, r3, fp
 8004890:	f04f 0200 	mov.w	r2, #0
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	00eb      	lsls	r3, r5, #3
 800489a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800489e:	00e2      	lsls	r2, r4, #3
 80048a0:	4614      	mov	r4, r2
 80048a2:	461d      	mov	r5, r3
 80048a4:	4643      	mov	r3, r8
 80048a6:	18e3      	adds	r3, r4, r3
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	464b      	mov	r3, r9
 80048ac:	eb45 0303 	adc.w	r3, r5, r3
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048be:	4629      	mov	r1, r5
 80048c0:	028b      	lsls	r3, r1, #10
 80048c2:	4621      	mov	r1, r4
 80048c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048c8:	4621      	mov	r1, r4
 80048ca:	028a      	lsls	r2, r1, #10
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048d2:	2200      	movs	r2, #0
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	61fa      	str	r2, [r7, #28]
 80048d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048dc:	f7fc f9c6 	bl	8000c6c <__aeabi_uldivmod>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4613      	mov	r3, r2
 80048e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048e8:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	0c1b      	lsrs	r3, r3, #16
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	3301      	adds	r3, #1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004902:	e002      	b.n	800490a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_RCC_GetSysClockFreq+0x204>)
 8004906:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800490a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800490c:	4618      	mov	r0, r3
 800490e:	3750      	adds	r7, #80	; 0x50
 8004910:	46bd      	mov	sp, r7
 8004912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800
 800491c:	00f42400 	.word	0x00f42400
 8004920:	007a1200 	.word	0x007a1200

08004924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e07b      	b.n	8004a2e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004946:	d009      	beq.n	800495c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
 800494e:	e005      	b.n	800495c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d106      	bne.n	800497c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f7fe fe2c 	bl	80035d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	ea42 0103 	orr.w	r1, r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0104 	and.w	r1, r3, #4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0210 	and.w	r2, r3, #16
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69da      	ldr	r2, [r3, #28]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b088      	sub	sp, #32
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_SPI_Transmit+0x22>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e126      	b.n	8004ca6 <HAL_SPI_Transmit+0x270>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a60:	f7fe ffea 	bl	8003a38 <HAL_GetTick>
 8004a64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a76:	2302      	movs	r3, #2
 8004a78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a7a:	e10b      	b.n	8004c94 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d002      	beq.n	8004a88 <HAL_SPI_Transmit+0x52>
 8004a82:	88fb      	ldrh	r3, [r7, #6]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a8c:	e102      	b.n	8004c94 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2203      	movs	r2, #3
 8004a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	88fa      	ldrh	r2, [r7, #6]
 8004aa6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad4:	d10f      	bne.n	8004af6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004af4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b00:	2b40      	cmp	r3, #64	; 0x40
 8004b02:	d007      	beq.n	8004b14 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b1c:	d14b      	bne.n	8004bb6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Transmit+0xf6>
 8004b26:	8afb      	ldrh	r3, [r7, #22]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d13e      	bne.n	8004baa <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b30:	881a      	ldrh	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	1c9a      	adds	r2, r3, #2
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b50:	e02b      	b.n	8004baa <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d112      	bne.n	8004b86 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	881a      	ldrh	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	1c9a      	adds	r2, r3, #2
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b84:	e011      	b.n	8004baa <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b86:	f7fe ff57 	bl	8003a38 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d803      	bhi.n	8004b9e <HAL_SPI_Transmit+0x168>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d102      	bne.n	8004ba4 <HAL_SPI_Transmit+0x16e>
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ba8:	e074      	b.n	8004c94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1ce      	bne.n	8004b52 <HAL_SPI_Transmit+0x11c>
 8004bb4:	e04c      	b.n	8004c50 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_SPI_Transmit+0x18e>
 8004bbe:	8afb      	ldrh	r3, [r7, #22]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d140      	bne.n	8004c46 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004bea:	e02c      	b.n	8004c46 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d113      	bne.n	8004c22 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c20:	e011      	b.n	8004c46 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c22:	f7fe ff09 	bl	8003a38 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d803      	bhi.n	8004c3a <HAL_SPI_Transmit+0x204>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c38:	d102      	bne.n	8004c40 <HAL_SPI_Transmit+0x20a>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c44:	e026      	b.n	8004c94 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1cd      	bne.n	8004bec <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	6839      	ldr	r1, [r7, #0]
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f8b3 	bl	8004dc0 <SPI_EndRxTxTransaction>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d002      	beq.n	8004c66 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2220      	movs	r2, #32
 8004c64:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e000      	b.n	8004c94 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ca4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004cc0:	f7fe feba 	bl	8003a38 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cd0:	f7fe feb2 	bl	8003a38 <HAL_GetTick>
 8004cd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cd6:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	015b      	lsls	r3, r3, #5
 8004cdc:	0d1b      	lsrs	r3, r3, #20
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	fb02 f303 	mul.w	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ce6:	e054      	b.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cee:	d050      	beq.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cf0:	f7fe fea2 	bl	8003a38 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d902      	bls.n	8004d06 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d13d      	bne.n	8004d82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d1e:	d111      	bne.n	8004d44 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d28:	d004      	beq.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d107      	bne.n	8004d44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4c:	d10f      	bne.n	8004d6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e017      	b.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	bf0c      	ite	eq
 8004da2:	2301      	moveq	r3, #1
 8004da4:	2300      	movne	r3, #0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	461a      	mov	r2, r3
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d19b      	bne.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000008 	.word	0x20000008

08004dc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <SPI_EndRxTxTransaction+0x7c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <SPI_EndRxTxTransaction+0x80>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	0d5b      	lsrs	r3, r3, #21
 8004dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ddc:	fb02 f303 	mul.w	r3, r2, r3
 8004de0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dea:	d112      	bne.n	8004e12 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2200      	movs	r2, #0
 8004df4:	2180      	movs	r1, #128	; 0x80
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f7ff ff5a 	bl	8004cb0 <SPI_WaitFlagStateUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f043 0220 	orr.w	r2, r3, #32
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e00f      	b.n	8004e32 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e28:	2b80      	cmp	r3, #128	; 0x80
 8004e2a:	d0f2      	beq.n	8004e12 <SPI_EndRxTxTransaction+0x52>
 8004e2c:	e000      	b.n	8004e30 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e2e:	bf00      	nop
  }

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000008 	.word	0x20000008
 8004e40:	165e9f81 	.word	0x165e9f81

08004e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e041      	b.n	8004eda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fe fbfa 	bl	8003664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f000 fa88 	bl	8005398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d001      	beq.n	8004efc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e044      	b.n	8004f86 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0201 	orr.w	r2, r2, #1
 8004f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d018      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d013      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00e      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <HAL_TIM_Base_Start_IT+0xb8>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d009      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a17      	ldr	r2, [pc, #92]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x6c>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d111      	bne.n	8004f74 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d010      	beq.n	8004f84 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	e007      	b.n	8004f84 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	40014000 	.word	0x40014000

08004fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d122      	bne.n	8005004 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d11b      	bne.n	8005004 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0202 	mvn.w	r2, #2
 8004fd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f9b5 	bl	800535a <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f9a7 	bl	8005346 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f9b8 	bl	800536e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b04      	cmp	r3, #4
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b04      	cmp	r3, #4
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0204 	mvn.w	r2, #4
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2202      	movs	r2, #2
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f98b 	bl	800535a <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f97d 	bl	8005346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f98e 	bl	800536e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b08      	cmp	r3, #8
 8005064:	d122      	bne.n	80050ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b08      	cmp	r3, #8
 8005072:	d11b      	bne.n	80050ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0208 	mvn.w	r2, #8
 800507c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2204      	movs	r2, #4
 8005082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f961 	bl	800535a <HAL_TIM_IC_CaptureCallback>
 8005098:	e005      	b.n	80050a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f953 	bl	8005346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f964 	bl	800536e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b10      	cmp	r3, #16
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0210 	mvn.w	r2, #16
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2208      	movs	r2, #8
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f937 	bl	800535a <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f929 	bl	8005346 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f93a 	bl	800536e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b01      	cmp	r3, #1
 800510c:	d10e      	bne.n	800512c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d107      	bne.n	800512c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0201 	mvn.w	r2, #1
 8005124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fe f9ba 	bl	80034a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005136:	2b80      	cmp	r3, #128	; 0x80
 8005138:	d10e      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	d107      	bne.n	8005158 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fab2 	bl	80056bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005162:	2b40      	cmp	r3, #64	; 0x40
 8005164:	d10e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005170:	2b40      	cmp	r3, #64	; 0x40
 8005172:	d107      	bne.n	8005184 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8ff 	bl	8005382 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b20      	cmp	r3, #32
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b20      	cmp	r3, #32
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0220 	mvn.w	r2, #32
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa7c 	bl	80056a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_TIM_ConfigClockSource+0x1c>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e0b4      	b.n	800533e <HAL_TIM_ConfigClockSource+0x186>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520c:	d03e      	beq.n	800528c <HAL_TIM_ConfigClockSource+0xd4>
 800520e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005212:	f200 8087 	bhi.w	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521a:	f000 8086 	beq.w	800532a <HAL_TIM_ConfigClockSource+0x172>
 800521e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005222:	d87f      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005224:	2b70      	cmp	r3, #112	; 0x70
 8005226:	d01a      	beq.n	800525e <HAL_TIM_ConfigClockSource+0xa6>
 8005228:	2b70      	cmp	r3, #112	; 0x70
 800522a:	d87b      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b60      	cmp	r3, #96	; 0x60
 800522e:	d050      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x11a>
 8005230:	2b60      	cmp	r3, #96	; 0x60
 8005232:	d877      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b50      	cmp	r3, #80	; 0x50
 8005236:	d03c      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0xfa>
 8005238:	2b50      	cmp	r3, #80	; 0x50
 800523a:	d873      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	d058      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x13a>
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d86f      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b30      	cmp	r3, #48	; 0x30
 8005246:	d064      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x15a>
 8005248:	2b30      	cmp	r3, #48	; 0x30
 800524a:	d86b      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b20      	cmp	r3, #32
 800524e:	d060      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x15a>
 8005250:	2b20      	cmp	r3, #32
 8005252:	d867      	bhi.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d05c      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x15a>
 8005258:	2b10      	cmp	r3, #16
 800525a:	d05a      	beq.n	8005312 <HAL_TIM_ConfigClockSource+0x15a>
 800525c:	e062      	b.n	8005324 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6899      	ldr	r1, [r3, #8]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f000 f98d 	bl	800558c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005280:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	609a      	str	r2, [r3, #8]
      break;
 800528a:	e04f      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	6899      	ldr	r1, [r3, #8]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f000 f976 	bl	800558c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ae:	609a      	str	r2, [r3, #8]
      break;
 80052b0:	e03c      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 f8ea 	bl	8005498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2150      	movs	r1, #80	; 0x50
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f943 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 80052d0:	e02c      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 f909 	bl	80054f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2160      	movs	r1, #96	; 0x60
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f933 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 80052f0:	e01c      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6818      	ldr	r0, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6859      	ldr	r1, [r3, #4]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	461a      	mov	r2, r3
 8005300:	f000 f8ca 	bl	8005498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2140      	movs	r1, #64	; 0x40
 800530a:	4618      	mov	r0, r3
 800530c:	f000 f923 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 8005310:	e00c      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f000 f91a 	bl	8005556 <TIM_ITRx_SetConfig>
      break;
 8005322:	e003      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	73fb      	strb	r3, [r7, #15]
      break;
 8005328:	e000      	b.n	800532c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800532a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
	...

08005398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a34      	ldr	r2, [pc, #208]	; (800547c <TIM_Base_SetConfig+0xe4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00f      	beq.n	80053d0 <TIM_Base_SetConfig+0x38>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b6:	d00b      	beq.n	80053d0 <TIM_Base_SetConfig+0x38>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a31      	ldr	r2, [pc, #196]	; (8005480 <TIM_Base_SetConfig+0xe8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d007      	beq.n	80053d0 <TIM_Base_SetConfig+0x38>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a30      	ldr	r2, [pc, #192]	; (8005484 <TIM_Base_SetConfig+0xec>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_Base_SetConfig+0x38>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a2f      	ldr	r2, [pc, #188]	; (8005488 <TIM_Base_SetConfig+0xf0>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d108      	bne.n	80053e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a25      	ldr	r2, [pc, #148]	; (800547c <TIM_Base_SetConfig+0xe4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01b      	beq.n	8005422 <TIM_Base_SetConfig+0x8a>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f0:	d017      	beq.n	8005422 <TIM_Base_SetConfig+0x8a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <TIM_Base_SetConfig+0xe8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <TIM_Base_SetConfig+0x8a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a21      	ldr	r2, [pc, #132]	; (8005484 <TIM_Base_SetConfig+0xec>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00f      	beq.n	8005422 <TIM_Base_SetConfig+0x8a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a20      	ldr	r2, [pc, #128]	; (8005488 <TIM_Base_SetConfig+0xf0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00b      	beq.n	8005422 <TIM_Base_SetConfig+0x8a>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1f      	ldr	r2, [pc, #124]	; (800548c <TIM_Base_SetConfig+0xf4>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d007      	beq.n	8005422 <TIM_Base_SetConfig+0x8a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1e      	ldr	r2, [pc, #120]	; (8005490 <TIM_Base_SetConfig+0xf8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d003      	beq.n	8005422 <TIM_Base_SetConfig+0x8a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <TIM_Base_SetConfig+0xfc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d108      	bne.n	8005434 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4313      	orrs	r3, r2
 8005432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a08      	ldr	r2, [pc, #32]	; (800547c <TIM_Base_SetConfig+0xe4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d103      	bne.n	8005468 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	615a      	str	r2, [r3, #20]
}
 800546e:	bf00      	nop
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	40010000 	.word	0x40010000
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40014000 	.word	0x40014000
 8005490:	40014400 	.word	0x40014400
 8005494:	40014800 	.word	0x40014800

08005498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 030a 	bic.w	r3, r3, #10
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b087      	sub	sp, #28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f023 0210 	bic.w	r2, r3, #16
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	031b      	lsls	r3, r3, #12
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005556:	b480      	push	{r7}
 8005558:	b085      	sub	sp, #20
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
 800555e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800556c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	f043 0307 	orr.w	r3, r3, #7
 8005578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b087      	sub	sp, #28
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	021a      	lsls	r2, r3, #8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	609a      	str	r2, [r3, #8]
}
 80055c0:	bf00      	nop
 80055c2:	371c      	adds	r7, #28
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e050      	b.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1c      	ldr	r2, [pc, #112]	; (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d018      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005630:	d013      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a18      	ldr	r2, [pc, #96]	; (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a13      	ldr	r2, [pc, #76]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10c      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40014000 	.word	0x40014000

080056a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <__errno>:
 80056d0:	4b01      	ldr	r3, [pc, #4]	; (80056d8 <__errno+0x8>)
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000014 	.word	0x20000014

080056dc <__libc_init_array>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4d0d      	ldr	r5, [pc, #52]	; (8005714 <__libc_init_array+0x38>)
 80056e0:	4c0d      	ldr	r4, [pc, #52]	; (8005718 <__libc_init_array+0x3c>)
 80056e2:	1b64      	subs	r4, r4, r5
 80056e4:	10a4      	asrs	r4, r4, #2
 80056e6:	2600      	movs	r6, #0
 80056e8:	42a6      	cmp	r6, r4
 80056ea:	d109      	bne.n	8005700 <__libc_init_array+0x24>
 80056ec:	4d0b      	ldr	r5, [pc, #44]	; (800571c <__libc_init_array+0x40>)
 80056ee:	4c0c      	ldr	r4, [pc, #48]	; (8005720 <__libc_init_array+0x44>)
 80056f0:	f001 f98a 	bl	8006a08 <_init>
 80056f4:	1b64      	subs	r4, r4, r5
 80056f6:	10a4      	asrs	r4, r4, #2
 80056f8:	2600      	movs	r6, #0
 80056fa:	42a6      	cmp	r6, r4
 80056fc:	d105      	bne.n	800570a <__libc_init_array+0x2e>
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
 8005700:	f855 3b04 	ldr.w	r3, [r5], #4
 8005704:	4798      	blx	r3
 8005706:	3601      	adds	r6, #1
 8005708:	e7ee      	b.n	80056e8 <__libc_init_array+0xc>
 800570a:	f855 3b04 	ldr.w	r3, [r5], #4
 800570e:	4798      	blx	r3
 8005710:	3601      	adds	r6, #1
 8005712:	e7f2      	b.n	80056fa <__libc_init_array+0x1e>
 8005714:	08007798 	.word	0x08007798
 8005718:	08007798 	.word	0x08007798
 800571c:	08007798 	.word	0x08007798
 8005720:	0800779c 	.word	0x0800779c

08005724 <malloc>:
 8005724:	4b02      	ldr	r3, [pc, #8]	; (8005730 <malloc+0xc>)
 8005726:	4601      	mov	r1, r0
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	f000 b877 	b.w	800581c <_malloc_r>
 800572e:	bf00      	nop
 8005730:	20000014 	.word	0x20000014

08005734 <memset>:
 8005734:	4402      	add	r2, r0
 8005736:	4603      	mov	r3, r0
 8005738:	4293      	cmp	r3, r2
 800573a:	d100      	bne.n	800573e <memset+0xa>
 800573c:	4770      	bx	lr
 800573e:	f803 1b01 	strb.w	r1, [r3], #1
 8005742:	e7f9      	b.n	8005738 <memset+0x4>

08005744 <_free_r>:
 8005744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005746:	2900      	cmp	r1, #0
 8005748:	d044      	beq.n	80057d4 <_free_r+0x90>
 800574a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800574e:	9001      	str	r0, [sp, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f1a1 0404 	sub.w	r4, r1, #4
 8005756:	bfb8      	it	lt
 8005758:	18e4      	addlt	r4, r4, r3
 800575a:	f000 f97f 	bl	8005a5c <__malloc_lock>
 800575e:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <_free_r+0x94>)
 8005760:	9801      	ldr	r0, [sp, #4]
 8005762:	6813      	ldr	r3, [r2, #0]
 8005764:	b933      	cbnz	r3, 8005774 <_free_r+0x30>
 8005766:	6063      	str	r3, [r4, #4]
 8005768:	6014      	str	r4, [r2, #0]
 800576a:	b003      	add	sp, #12
 800576c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005770:	f000 b97a 	b.w	8005a68 <__malloc_unlock>
 8005774:	42a3      	cmp	r3, r4
 8005776:	d908      	bls.n	800578a <_free_r+0x46>
 8005778:	6825      	ldr	r5, [r4, #0]
 800577a:	1961      	adds	r1, r4, r5
 800577c:	428b      	cmp	r3, r1
 800577e:	bf01      	itttt	eq
 8005780:	6819      	ldreq	r1, [r3, #0]
 8005782:	685b      	ldreq	r3, [r3, #4]
 8005784:	1949      	addeq	r1, r1, r5
 8005786:	6021      	streq	r1, [r4, #0]
 8005788:	e7ed      	b.n	8005766 <_free_r+0x22>
 800578a:	461a      	mov	r2, r3
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	b10b      	cbz	r3, 8005794 <_free_r+0x50>
 8005790:	42a3      	cmp	r3, r4
 8005792:	d9fa      	bls.n	800578a <_free_r+0x46>
 8005794:	6811      	ldr	r1, [r2, #0]
 8005796:	1855      	adds	r5, r2, r1
 8005798:	42a5      	cmp	r5, r4
 800579a:	d10b      	bne.n	80057b4 <_free_r+0x70>
 800579c:	6824      	ldr	r4, [r4, #0]
 800579e:	4421      	add	r1, r4
 80057a0:	1854      	adds	r4, r2, r1
 80057a2:	42a3      	cmp	r3, r4
 80057a4:	6011      	str	r1, [r2, #0]
 80057a6:	d1e0      	bne.n	800576a <_free_r+0x26>
 80057a8:	681c      	ldr	r4, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	6053      	str	r3, [r2, #4]
 80057ae:	4421      	add	r1, r4
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	e7da      	b.n	800576a <_free_r+0x26>
 80057b4:	d902      	bls.n	80057bc <_free_r+0x78>
 80057b6:	230c      	movs	r3, #12
 80057b8:	6003      	str	r3, [r0, #0]
 80057ba:	e7d6      	b.n	800576a <_free_r+0x26>
 80057bc:	6825      	ldr	r5, [r4, #0]
 80057be:	1961      	adds	r1, r4, r5
 80057c0:	428b      	cmp	r3, r1
 80057c2:	bf04      	itt	eq
 80057c4:	6819      	ldreq	r1, [r3, #0]
 80057c6:	685b      	ldreq	r3, [r3, #4]
 80057c8:	6063      	str	r3, [r4, #4]
 80057ca:	bf04      	itt	eq
 80057cc:	1949      	addeq	r1, r1, r5
 80057ce:	6021      	streq	r1, [r4, #0]
 80057d0:	6054      	str	r4, [r2, #4]
 80057d2:	e7ca      	b.n	800576a <_free_r+0x26>
 80057d4:	b003      	add	sp, #12
 80057d6:	bd30      	pop	{r4, r5, pc}
 80057d8:	20000200 	.word	0x20000200

080057dc <sbrk_aligned>:
 80057dc:	b570      	push	{r4, r5, r6, lr}
 80057de:	4e0e      	ldr	r6, [pc, #56]	; (8005818 <sbrk_aligned+0x3c>)
 80057e0:	460c      	mov	r4, r1
 80057e2:	6831      	ldr	r1, [r6, #0]
 80057e4:	4605      	mov	r5, r0
 80057e6:	b911      	cbnz	r1, 80057ee <sbrk_aligned+0x12>
 80057e8:	f000 f8f8 	bl	80059dc <_sbrk_r>
 80057ec:	6030      	str	r0, [r6, #0]
 80057ee:	4621      	mov	r1, r4
 80057f0:	4628      	mov	r0, r5
 80057f2:	f000 f8f3 	bl	80059dc <_sbrk_r>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	d00a      	beq.n	8005810 <sbrk_aligned+0x34>
 80057fa:	1cc4      	adds	r4, r0, #3
 80057fc:	f024 0403 	bic.w	r4, r4, #3
 8005800:	42a0      	cmp	r0, r4
 8005802:	d007      	beq.n	8005814 <sbrk_aligned+0x38>
 8005804:	1a21      	subs	r1, r4, r0
 8005806:	4628      	mov	r0, r5
 8005808:	f000 f8e8 	bl	80059dc <_sbrk_r>
 800580c:	3001      	adds	r0, #1
 800580e:	d101      	bne.n	8005814 <sbrk_aligned+0x38>
 8005810:	f04f 34ff 	mov.w	r4, #4294967295
 8005814:	4620      	mov	r0, r4
 8005816:	bd70      	pop	{r4, r5, r6, pc}
 8005818:	20000204 	.word	0x20000204

0800581c <_malloc_r>:
 800581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005820:	1ccd      	adds	r5, r1, #3
 8005822:	f025 0503 	bic.w	r5, r5, #3
 8005826:	3508      	adds	r5, #8
 8005828:	2d0c      	cmp	r5, #12
 800582a:	bf38      	it	cc
 800582c:	250c      	movcc	r5, #12
 800582e:	2d00      	cmp	r5, #0
 8005830:	4607      	mov	r7, r0
 8005832:	db01      	blt.n	8005838 <_malloc_r+0x1c>
 8005834:	42a9      	cmp	r1, r5
 8005836:	d905      	bls.n	8005844 <_malloc_r+0x28>
 8005838:	230c      	movs	r3, #12
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	2600      	movs	r6, #0
 800583e:	4630      	mov	r0, r6
 8005840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005844:	4e2e      	ldr	r6, [pc, #184]	; (8005900 <_malloc_r+0xe4>)
 8005846:	f000 f909 	bl	8005a5c <__malloc_lock>
 800584a:	6833      	ldr	r3, [r6, #0]
 800584c:	461c      	mov	r4, r3
 800584e:	bb34      	cbnz	r4, 800589e <_malloc_r+0x82>
 8005850:	4629      	mov	r1, r5
 8005852:	4638      	mov	r0, r7
 8005854:	f7ff ffc2 	bl	80057dc <sbrk_aligned>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	4604      	mov	r4, r0
 800585c:	d14d      	bne.n	80058fa <_malloc_r+0xde>
 800585e:	6834      	ldr	r4, [r6, #0]
 8005860:	4626      	mov	r6, r4
 8005862:	2e00      	cmp	r6, #0
 8005864:	d140      	bne.n	80058e8 <_malloc_r+0xcc>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	4631      	mov	r1, r6
 800586a:	4638      	mov	r0, r7
 800586c:	eb04 0803 	add.w	r8, r4, r3
 8005870:	f000 f8b4 	bl	80059dc <_sbrk_r>
 8005874:	4580      	cmp	r8, r0
 8005876:	d13a      	bne.n	80058ee <_malloc_r+0xd2>
 8005878:	6821      	ldr	r1, [r4, #0]
 800587a:	3503      	adds	r5, #3
 800587c:	1a6d      	subs	r5, r5, r1
 800587e:	f025 0503 	bic.w	r5, r5, #3
 8005882:	3508      	adds	r5, #8
 8005884:	2d0c      	cmp	r5, #12
 8005886:	bf38      	it	cc
 8005888:	250c      	movcc	r5, #12
 800588a:	4629      	mov	r1, r5
 800588c:	4638      	mov	r0, r7
 800588e:	f7ff ffa5 	bl	80057dc <sbrk_aligned>
 8005892:	3001      	adds	r0, #1
 8005894:	d02b      	beq.n	80058ee <_malloc_r+0xd2>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	442b      	add	r3, r5
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	e00e      	b.n	80058bc <_malloc_r+0xa0>
 800589e:	6822      	ldr	r2, [r4, #0]
 80058a0:	1b52      	subs	r2, r2, r5
 80058a2:	d41e      	bmi.n	80058e2 <_malloc_r+0xc6>
 80058a4:	2a0b      	cmp	r2, #11
 80058a6:	d916      	bls.n	80058d6 <_malloc_r+0xba>
 80058a8:	1961      	adds	r1, r4, r5
 80058aa:	42a3      	cmp	r3, r4
 80058ac:	6025      	str	r5, [r4, #0]
 80058ae:	bf18      	it	ne
 80058b0:	6059      	strne	r1, [r3, #4]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	bf08      	it	eq
 80058b6:	6031      	streq	r1, [r6, #0]
 80058b8:	5162      	str	r2, [r4, r5]
 80058ba:	604b      	str	r3, [r1, #4]
 80058bc:	4638      	mov	r0, r7
 80058be:	f104 060b 	add.w	r6, r4, #11
 80058c2:	f000 f8d1 	bl	8005a68 <__malloc_unlock>
 80058c6:	f026 0607 	bic.w	r6, r6, #7
 80058ca:	1d23      	adds	r3, r4, #4
 80058cc:	1af2      	subs	r2, r6, r3
 80058ce:	d0b6      	beq.n	800583e <_malloc_r+0x22>
 80058d0:	1b9b      	subs	r3, r3, r6
 80058d2:	50a3      	str	r3, [r4, r2]
 80058d4:	e7b3      	b.n	800583e <_malloc_r+0x22>
 80058d6:	6862      	ldr	r2, [r4, #4]
 80058d8:	42a3      	cmp	r3, r4
 80058da:	bf0c      	ite	eq
 80058dc:	6032      	streq	r2, [r6, #0]
 80058de:	605a      	strne	r2, [r3, #4]
 80058e0:	e7ec      	b.n	80058bc <_malloc_r+0xa0>
 80058e2:	4623      	mov	r3, r4
 80058e4:	6864      	ldr	r4, [r4, #4]
 80058e6:	e7b2      	b.n	800584e <_malloc_r+0x32>
 80058e8:	4634      	mov	r4, r6
 80058ea:	6876      	ldr	r6, [r6, #4]
 80058ec:	e7b9      	b.n	8005862 <_malloc_r+0x46>
 80058ee:	230c      	movs	r3, #12
 80058f0:	603b      	str	r3, [r7, #0]
 80058f2:	4638      	mov	r0, r7
 80058f4:	f000 f8b8 	bl	8005a68 <__malloc_unlock>
 80058f8:	e7a1      	b.n	800583e <_malloc_r+0x22>
 80058fa:	6025      	str	r5, [r4, #0]
 80058fc:	e7de      	b.n	80058bc <_malloc_r+0xa0>
 80058fe:	bf00      	nop
 8005900:	20000200 	.word	0x20000200

08005904 <srand>:
 8005904:	b538      	push	{r3, r4, r5, lr}
 8005906:	4b10      	ldr	r3, [pc, #64]	; (8005948 <srand+0x44>)
 8005908:	681d      	ldr	r5, [r3, #0]
 800590a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800590c:	4604      	mov	r4, r0
 800590e:	b9b3      	cbnz	r3, 800593e <srand+0x3a>
 8005910:	2018      	movs	r0, #24
 8005912:	f7ff ff07 	bl	8005724 <malloc>
 8005916:	4602      	mov	r2, r0
 8005918:	63a8      	str	r0, [r5, #56]	; 0x38
 800591a:	b920      	cbnz	r0, 8005926 <srand+0x22>
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <srand+0x48>)
 800591e:	480c      	ldr	r0, [pc, #48]	; (8005950 <srand+0x4c>)
 8005920:	2142      	movs	r1, #66	; 0x42
 8005922:	f000 f86b 	bl	80059fc <__assert_func>
 8005926:	490b      	ldr	r1, [pc, #44]	; (8005954 <srand+0x50>)
 8005928:	4b0b      	ldr	r3, [pc, #44]	; (8005958 <srand+0x54>)
 800592a:	e9c0 1300 	strd	r1, r3, [r0]
 800592e:	4b0b      	ldr	r3, [pc, #44]	; (800595c <srand+0x58>)
 8005930:	6083      	str	r3, [r0, #8]
 8005932:	230b      	movs	r3, #11
 8005934:	8183      	strh	r3, [r0, #12]
 8005936:	2100      	movs	r1, #0
 8005938:	2001      	movs	r0, #1
 800593a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800593e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005940:	2200      	movs	r2, #0
 8005942:	611c      	str	r4, [r3, #16]
 8005944:	615a      	str	r2, [r3, #20]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000014 	.word	0x20000014
 800594c:	0800764c 	.word	0x0800764c
 8005950:	08007663 	.word	0x08007663
 8005954:	abcd330e 	.word	0xabcd330e
 8005958:	e66d1234 	.word	0xe66d1234
 800595c:	0005deec 	.word	0x0005deec

08005960 <rand>:
 8005960:	4b16      	ldr	r3, [pc, #88]	; (80059bc <rand+0x5c>)
 8005962:	b510      	push	{r4, lr}
 8005964:	681c      	ldr	r4, [r3, #0]
 8005966:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005968:	b9b3      	cbnz	r3, 8005998 <rand+0x38>
 800596a:	2018      	movs	r0, #24
 800596c:	f7ff feda 	bl	8005724 <malloc>
 8005970:	63a0      	str	r0, [r4, #56]	; 0x38
 8005972:	b928      	cbnz	r0, 8005980 <rand+0x20>
 8005974:	4602      	mov	r2, r0
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <rand+0x60>)
 8005978:	4812      	ldr	r0, [pc, #72]	; (80059c4 <rand+0x64>)
 800597a:	214e      	movs	r1, #78	; 0x4e
 800597c:	f000 f83e 	bl	80059fc <__assert_func>
 8005980:	4a11      	ldr	r2, [pc, #68]	; (80059c8 <rand+0x68>)
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <rand+0x6c>)
 8005984:	e9c0 2300 	strd	r2, r3, [r0]
 8005988:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <rand+0x70>)
 800598a:	6083      	str	r3, [r0, #8]
 800598c:	230b      	movs	r3, #11
 800598e:	8183      	strh	r3, [r0, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	2300      	movs	r3, #0
 8005994:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005998:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800599a:	4a0e      	ldr	r2, [pc, #56]	; (80059d4 <rand+0x74>)
 800599c:	6920      	ldr	r0, [r4, #16]
 800599e:	6963      	ldr	r3, [r4, #20]
 80059a0:	490d      	ldr	r1, [pc, #52]	; (80059d8 <rand+0x78>)
 80059a2:	4342      	muls	r2, r0
 80059a4:	fb01 2203 	mla	r2, r1, r3, r2
 80059a8:	fba0 0101 	umull	r0, r1, r0, r1
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	eb42 0001 	adc.w	r0, r2, r1
 80059b2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80059b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80059ba:	bd10      	pop	{r4, pc}
 80059bc:	20000014 	.word	0x20000014
 80059c0:	0800764c 	.word	0x0800764c
 80059c4:	08007663 	.word	0x08007663
 80059c8:	abcd330e 	.word	0xabcd330e
 80059cc:	e66d1234 	.word	0xe66d1234
 80059d0:	0005deec 	.word	0x0005deec
 80059d4:	5851f42d 	.word	0x5851f42d
 80059d8:	4c957f2d 	.word	0x4c957f2d

080059dc <_sbrk_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	4d06      	ldr	r5, [pc, #24]	; (80059f8 <_sbrk_r+0x1c>)
 80059e0:	2300      	movs	r3, #0
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	f7fd ff4e 	bl	8003888 <_sbrk>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_sbrk_r+0x1a>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_sbrk_r+0x1a>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20000208 	.word	0x20000208

080059fc <__assert_func>:
 80059fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059fe:	4614      	mov	r4, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <__assert_func+0x2c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4605      	mov	r5, r0
 8005a08:	68d8      	ldr	r0, [r3, #12]
 8005a0a:	b14c      	cbz	r4, 8005a20 <__assert_func+0x24>
 8005a0c:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <__assert_func+0x30>)
 8005a0e:	9100      	str	r1, [sp, #0]
 8005a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a14:	4906      	ldr	r1, [pc, #24]	; (8005a30 <__assert_func+0x34>)
 8005a16:	462b      	mov	r3, r5
 8005a18:	f000 f80e 	bl	8005a38 <fiprintf>
 8005a1c:	f000 fbd8 	bl	80061d0 <abort>
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <__assert_func+0x38>)
 8005a22:	461c      	mov	r4, r3
 8005a24:	e7f3      	b.n	8005a0e <__assert_func+0x12>
 8005a26:	bf00      	nop
 8005a28:	20000014 	.word	0x20000014
 8005a2c:	080076be 	.word	0x080076be
 8005a30:	080076cb 	.word	0x080076cb
 8005a34:	080076f9 	.word	0x080076f9

08005a38 <fiprintf>:
 8005a38:	b40e      	push	{r1, r2, r3}
 8005a3a:	b503      	push	{r0, r1, lr}
 8005a3c:	4601      	mov	r1, r0
 8005a3e:	ab03      	add	r3, sp, #12
 8005a40:	4805      	ldr	r0, [pc, #20]	; (8005a58 <fiprintf+0x20>)
 8005a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a46:	6800      	ldr	r0, [r0, #0]
 8005a48:	9301      	str	r3, [sp, #4]
 8005a4a:	f000 f83d 	bl	8005ac8 <_vfiprintf_r>
 8005a4e:	b002      	add	sp, #8
 8005a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a54:	b003      	add	sp, #12
 8005a56:	4770      	bx	lr
 8005a58:	20000014 	.word	0x20000014

08005a5c <__malloc_lock>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	; (8005a64 <__malloc_lock+0x8>)
 8005a5e:	f000 bd77 	b.w	8006550 <__retarget_lock_acquire_recursive>
 8005a62:	bf00      	nop
 8005a64:	2000020c 	.word	0x2000020c

08005a68 <__malloc_unlock>:
 8005a68:	4801      	ldr	r0, [pc, #4]	; (8005a70 <__malloc_unlock+0x8>)
 8005a6a:	f000 bd72 	b.w	8006552 <__retarget_lock_release_recursive>
 8005a6e:	bf00      	nop
 8005a70:	2000020c 	.word	0x2000020c

08005a74 <__sfputc_r>:
 8005a74:	6893      	ldr	r3, [r2, #8]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	b410      	push	{r4}
 8005a7c:	6093      	str	r3, [r2, #8]
 8005a7e:	da08      	bge.n	8005a92 <__sfputc_r+0x1e>
 8005a80:	6994      	ldr	r4, [r2, #24]
 8005a82:	42a3      	cmp	r3, r4
 8005a84:	db01      	blt.n	8005a8a <__sfputc_r+0x16>
 8005a86:	290a      	cmp	r1, #10
 8005a88:	d103      	bne.n	8005a92 <__sfputc_r+0x1e>
 8005a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a8e:	f000 badf 	b.w	8006050 <__swbuf_r>
 8005a92:	6813      	ldr	r3, [r2, #0]
 8005a94:	1c58      	adds	r0, r3, #1
 8005a96:	6010      	str	r0, [r2, #0]
 8005a98:	7019      	strb	r1, [r3, #0]
 8005a9a:	4608      	mov	r0, r1
 8005a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <__sfputs_r>:
 8005aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460f      	mov	r7, r1
 8005aa8:	4614      	mov	r4, r2
 8005aaa:	18d5      	adds	r5, r2, r3
 8005aac:	42ac      	cmp	r4, r5
 8005aae:	d101      	bne.n	8005ab4 <__sfputs_r+0x12>
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e007      	b.n	8005ac4 <__sfputs_r+0x22>
 8005ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ab8:	463a      	mov	r2, r7
 8005aba:	4630      	mov	r0, r6
 8005abc:	f7ff ffda 	bl	8005a74 <__sfputc_r>
 8005ac0:	1c43      	adds	r3, r0, #1
 8005ac2:	d1f3      	bne.n	8005aac <__sfputs_r+0xa>
 8005ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ac8 <_vfiprintf_r>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	460d      	mov	r5, r1
 8005ace:	b09d      	sub	sp, #116	; 0x74
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	4698      	mov	r8, r3
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	b118      	cbz	r0, 8005ae0 <_vfiprintf_r+0x18>
 8005ad8:	6983      	ldr	r3, [r0, #24]
 8005ada:	b90b      	cbnz	r3, 8005ae0 <_vfiprintf_r+0x18>
 8005adc:	f000 fc9a 	bl	8006414 <__sinit>
 8005ae0:	4b89      	ldr	r3, [pc, #548]	; (8005d08 <_vfiprintf_r+0x240>)
 8005ae2:	429d      	cmp	r5, r3
 8005ae4:	d11b      	bne.n	8005b1e <_vfiprintf_r+0x56>
 8005ae6:	6875      	ldr	r5, [r6, #4]
 8005ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aea:	07d9      	lsls	r1, r3, #31
 8005aec:	d405      	bmi.n	8005afa <_vfiprintf_r+0x32>
 8005aee:	89ab      	ldrh	r3, [r5, #12]
 8005af0:	059a      	lsls	r2, r3, #22
 8005af2:	d402      	bmi.n	8005afa <_vfiprintf_r+0x32>
 8005af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005af6:	f000 fd2b 	bl	8006550 <__retarget_lock_acquire_recursive>
 8005afa:	89ab      	ldrh	r3, [r5, #12]
 8005afc:	071b      	lsls	r3, r3, #28
 8005afe:	d501      	bpl.n	8005b04 <_vfiprintf_r+0x3c>
 8005b00:	692b      	ldr	r3, [r5, #16]
 8005b02:	b9eb      	cbnz	r3, 8005b40 <_vfiprintf_r+0x78>
 8005b04:	4629      	mov	r1, r5
 8005b06:	4630      	mov	r0, r6
 8005b08:	f000 faf4 	bl	80060f4 <__swsetup_r>
 8005b0c:	b1c0      	cbz	r0, 8005b40 <_vfiprintf_r+0x78>
 8005b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b10:	07dc      	lsls	r4, r3, #31
 8005b12:	d50e      	bpl.n	8005b32 <_vfiprintf_r+0x6a>
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	b01d      	add	sp, #116	; 0x74
 8005b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b1e:	4b7b      	ldr	r3, [pc, #492]	; (8005d0c <_vfiprintf_r+0x244>)
 8005b20:	429d      	cmp	r5, r3
 8005b22:	d101      	bne.n	8005b28 <_vfiprintf_r+0x60>
 8005b24:	68b5      	ldr	r5, [r6, #8]
 8005b26:	e7df      	b.n	8005ae8 <_vfiprintf_r+0x20>
 8005b28:	4b79      	ldr	r3, [pc, #484]	; (8005d10 <_vfiprintf_r+0x248>)
 8005b2a:	429d      	cmp	r5, r3
 8005b2c:	bf08      	it	eq
 8005b2e:	68f5      	ldreq	r5, [r6, #12]
 8005b30:	e7da      	b.n	8005ae8 <_vfiprintf_r+0x20>
 8005b32:	89ab      	ldrh	r3, [r5, #12]
 8005b34:	0598      	lsls	r0, r3, #22
 8005b36:	d4ed      	bmi.n	8005b14 <_vfiprintf_r+0x4c>
 8005b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b3a:	f000 fd0a 	bl	8006552 <__retarget_lock_release_recursive>
 8005b3e:	e7e9      	b.n	8005b14 <_vfiprintf_r+0x4c>
 8005b40:	2300      	movs	r3, #0
 8005b42:	9309      	str	r3, [sp, #36]	; 0x24
 8005b44:	2320      	movs	r3, #32
 8005b46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b4e:	2330      	movs	r3, #48	; 0x30
 8005b50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d14 <_vfiprintf_r+0x24c>
 8005b54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b58:	f04f 0901 	mov.w	r9, #1
 8005b5c:	4623      	mov	r3, r4
 8005b5e:	469a      	mov	sl, r3
 8005b60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b64:	b10a      	cbz	r2, 8005b6a <_vfiprintf_r+0xa2>
 8005b66:	2a25      	cmp	r2, #37	; 0x25
 8005b68:	d1f9      	bne.n	8005b5e <_vfiprintf_r+0x96>
 8005b6a:	ebba 0b04 	subs.w	fp, sl, r4
 8005b6e:	d00b      	beq.n	8005b88 <_vfiprintf_r+0xc0>
 8005b70:	465b      	mov	r3, fp
 8005b72:	4622      	mov	r2, r4
 8005b74:	4629      	mov	r1, r5
 8005b76:	4630      	mov	r0, r6
 8005b78:	f7ff ff93 	bl	8005aa2 <__sfputs_r>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	f000 80aa 	beq.w	8005cd6 <_vfiprintf_r+0x20e>
 8005b82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b84:	445a      	add	r2, fp
 8005b86:	9209      	str	r2, [sp, #36]	; 0x24
 8005b88:	f89a 3000 	ldrb.w	r3, [sl]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 80a2 	beq.w	8005cd6 <_vfiprintf_r+0x20e>
 8005b92:	2300      	movs	r3, #0
 8005b94:	f04f 32ff 	mov.w	r2, #4294967295
 8005b98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b9c:	f10a 0a01 	add.w	sl, sl, #1
 8005ba0:	9304      	str	r3, [sp, #16]
 8005ba2:	9307      	str	r3, [sp, #28]
 8005ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8005baa:	4654      	mov	r4, sl
 8005bac:	2205      	movs	r2, #5
 8005bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb2:	4858      	ldr	r0, [pc, #352]	; (8005d14 <_vfiprintf_r+0x24c>)
 8005bb4:	f7fa fb1c 	bl	80001f0 <memchr>
 8005bb8:	9a04      	ldr	r2, [sp, #16]
 8005bba:	b9d8      	cbnz	r0, 8005bf4 <_vfiprintf_r+0x12c>
 8005bbc:	06d1      	lsls	r1, r2, #27
 8005bbe:	bf44      	itt	mi
 8005bc0:	2320      	movmi	r3, #32
 8005bc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bc6:	0713      	lsls	r3, r2, #28
 8005bc8:	bf44      	itt	mi
 8005bca:	232b      	movmi	r3, #43	; 0x2b
 8005bcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd6:	d015      	beq.n	8005c04 <_vfiprintf_r+0x13c>
 8005bd8:	9a07      	ldr	r2, [sp, #28]
 8005bda:	4654      	mov	r4, sl
 8005bdc:	2000      	movs	r0, #0
 8005bde:	f04f 0c0a 	mov.w	ip, #10
 8005be2:	4621      	mov	r1, r4
 8005be4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005be8:	3b30      	subs	r3, #48	; 0x30
 8005bea:	2b09      	cmp	r3, #9
 8005bec:	d94e      	bls.n	8005c8c <_vfiprintf_r+0x1c4>
 8005bee:	b1b0      	cbz	r0, 8005c1e <_vfiprintf_r+0x156>
 8005bf0:	9207      	str	r2, [sp, #28]
 8005bf2:	e014      	b.n	8005c1e <_vfiprintf_r+0x156>
 8005bf4:	eba0 0308 	sub.w	r3, r0, r8
 8005bf8:	fa09 f303 	lsl.w	r3, r9, r3
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	9304      	str	r3, [sp, #16]
 8005c00:	46a2      	mov	sl, r4
 8005c02:	e7d2      	b.n	8005baa <_vfiprintf_r+0xe2>
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	1d19      	adds	r1, r3, #4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	9103      	str	r1, [sp, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bfbb      	ittet	lt
 8005c10:	425b      	neglt	r3, r3
 8005c12:	f042 0202 	orrlt.w	r2, r2, #2
 8005c16:	9307      	strge	r3, [sp, #28]
 8005c18:	9307      	strlt	r3, [sp, #28]
 8005c1a:	bfb8      	it	lt
 8005c1c:	9204      	strlt	r2, [sp, #16]
 8005c1e:	7823      	ldrb	r3, [r4, #0]
 8005c20:	2b2e      	cmp	r3, #46	; 0x2e
 8005c22:	d10c      	bne.n	8005c3e <_vfiprintf_r+0x176>
 8005c24:	7863      	ldrb	r3, [r4, #1]
 8005c26:	2b2a      	cmp	r3, #42	; 0x2a
 8005c28:	d135      	bne.n	8005c96 <_vfiprintf_r+0x1ce>
 8005c2a:	9b03      	ldr	r3, [sp, #12]
 8005c2c:	1d1a      	adds	r2, r3, #4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	9203      	str	r2, [sp, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	bfb8      	it	lt
 8005c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c3a:	3402      	adds	r4, #2
 8005c3c:	9305      	str	r3, [sp, #20]
 8005c3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d24 <_vfiprintf_r+0x25c>
 8005c42:	7821      	ldrb	r1, [r4, #0]
 8005c44:	2203      	movs	r2, #3
 8005c46:	4650      	mov	r0, sl
 8005c48:	f7fa fad2 	bl	80001f0 <memchr>
 8005c4c:	b140      	cbz	r0, 8005c60 <_vfiprintf_r+0x198>
 8005c4e:	2340      	movs	r3, #64	; 0x40
 8005c50:	eba0 000a 	sub.w	r0, r0, sl
 8005c54:	fa03 f000 	lsl.w	r0, r3, r0
 8005c58:	9b04      	ldr	r3, [sp, #16]
 8005c5a:	4303      	orrs	r3, r0
 8005c5c:	3401      	adds	r4, #1
 8005c5e:	9304      	str	r3, [sp, #16]
 8005c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c64:	482c      	ldr	r0, [pc, #176]	; (8005d18 <_vfiprintf_r+0x250>)
 8005c66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c6a:	2206      	movs	r2, #6
 8005c6c:	f7fa fac0 	bl	80001f0 <memchr>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	d03f      	beq.n	8005cf4 <_vfiprintf_r+0x22c>
 8005c74:	4b29      	ldr	r3, [pc, #164]	; (8005d1c <_vfiprintf_r+0x254>)
 8005c76:	bb1b      	cbnz	r3, 8005cc0 <_vfiprintf_r+0x1f8>
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	3307      	adds	r3, #7
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	3308      	adds	r3, #8
 8005c82:	9303      	str	r3, [sp, #12]
 8005c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c86:	443b      	add	r3, r7
 8005c88:	9309      	str	r3, [sp, #36]	; 0x24
 8005c8a:	e767      	b.n	8005b5c <_vfiprintf_r+0x94>
 8005c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c90:	460c      	mov	r4, r1
 8005c92:	2001      	movs	r0, #1
 8005c94:	e7a5      	b.n	8005be2 <_vfiprintf_r+0x11a>
 8005c96:	2300      	movs	r3, #0
 8005c98:	3401      	adds	r4, #1
 8005c9a:	9305      	str	r3, [sp, #20]
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	f04f 0c0a 	mov.w	ip, #10
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ca8:	3a30      	subs	r2, #48	; 0x30
 8005caa:	2a09      	cmp	r2, #9
 8005cac:	d903      	bls.n	8005cb6 <_vfiprintf_r+0x1ee>
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0c5      	beq.n	8005c3e <_vfiprintf_r+0x176>
 8005cb2:	9105      	str	r1, [sp, #20]
 8005cb4:	e7c3      	b.n	8005c3e <_vfiprintf_r+0x176>
 8005cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cba:	4604      	mov	r4, r0
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e7f0      	b.n	8005ca2 <_vfiprintf_r+0x1da>
 8005cc0:	ab03      	add	r3, sp, #12
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	462a      	mov	r2, r5
 8005cc6:	4b16      	ldr	r3, [pc, #88]	; (8005d20 <_vfiprintf_r+0x258>)
 8005cc8:	a904      	add	r1, sp, #16
 8005cca:	4630      	mov	r0, r6
 8005ccc:	f3af 8000 	nop.w
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	1c78      	adds	r0, r7, #1
 8005cd4:	d1d6      	bne.n	8005c84 <_vfiprintf_r+0x1bc>
 8005cd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cd8:	07d9      	lsls	r1, r3, #31
 8005cda:	d405      	bmi.n	8005ce8 <_vfiprintf_r+0x220>
 8005cdc:	89ab      	ldrh	r3, [r5, #12]
 8005cde:	059a      	lsls	r2, r3, #22
 8005ce0:	d402      	bmi.n	8005ce8 <_vfiprintf_r+0x220>
 8005ce2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ce4:	f000 fc35 	bl	8006552 <__retarget_lock_release_recursive>
 8005ce8:	89ab      	ldrh	r3, [r5, #12]
 8005cea:	065b      	lsls	r3, r3, #25
 8005cec:	f53f af12 	bmi.w	8005b14 <_vfiprintf_r+0x4c>
 8005cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cf2:	e711      	b.n	8005b18 <_vfiprintf_r+0x50>
 8005cf4:	ab03      	add	r3, sp, #12
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <_vfiprintf_r+0x258>)
 8005cfc:	a904      	add	r1, sp, #16
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f000 f880 	bl	8005e04 <_printf_i>
 8005d04:	e7e4      	b.n	8005cd0 <_vfiprintf_r+0x208>
 8005d06:	bf00      	nop
 8005d08:	08007750 	.word	0x08007750
 8005d0c:	08007770 	.word	0x08007770
 8005d10:	08007730 	.word	0x08007730
 8005d14:	080076fa 	.word	0x080076fa
 8005d18:	08007704 	.word	0x08007704
 8005d1c:	00000000 	.word	0x00000000
 8005d20:	08005aa3 	.word	0x08005aa3
 8005d24:	08007700 	.word	0x08007700

08005d28 <_printf_common>:
 8005d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d2c:	4616      	mov	r6, r2
 8005d2e:	4699      	mov	r9, r3
 8005d30:	688a      	ldr	r2, [r1, #8]
 8005d32:	690b      	ldr	r3, [r1, #16]
 8005d34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	bfb8      	it	lt
 8005d3c:	4613      	movlt	r3, r2
 8005d3e:	6033      	str	r3, [r6, #0]
 8005d40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d44:	4607      	mov	r7, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	b10a      	cbz	r2, 8005d4e <_printf_common+0x26>
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	6033      	str	r3, [r6, #0]
 8005d4e:	6823      	ldr	r3, [r4, #0]
 8005d50:	0699      	lsls	r1, r3, #26
 8005d52:	bf42      	ittt	mi
 8005d54:	6833      	ldrmi	r3, [r6, #0]
 8005d56:	3302      	addmi	r3, #2
 8005d58:	6033      	strmi	r3, [r6, #0]
 8005d5a:	6825      	ldr	r5, [r4, #0]
 8005d5c:	f015 0506 	ands.w	r5, r5, #6
 8005d60:	d106      	bne.n	8005d70 <_printf_common+0x48>
 8005d62:	f104 0a19 	add.w	sl, r4, #25
 8005d66:	68e3      	ldr	r3, [r4, #12]
 8005d68:	6832      	ldr	r2, [r6, #0]
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	42ab      	cmp	r3, r5
 8005d6e:	dc26      	bgt.n	8005dbe <_printf_common+0x96>
 8005d70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d74:	1e13      	subs	r3, r2, #0
 8005d76:	6822      	ldr	r2, [r4, #0]
 8005d78:	bf18      	it	ne
 8005d7a:	2301      	movne	r3, #1
 8005d7c:	0692      	lsls	r2, r2, #26
 8005d7e:	d42b      	bmi.n	8005dd8 <_printf_common+0xb0>
 8005d80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d84:	4649      	mov	r1, r9
 8005d86:	4638      	mov	r0, r7
 8005d88:	47c0      	blx	r8
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d01e      	beq.n	8005dcc <_printf_common+0xa4>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	68e5      	ldr	r5, [r4, #12]
 8005d92:	6832      	ldr	r2, [r6, #0]
 8005d94:	f003 0306 	and.w	r3, r3, #6
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	bf08      	it	eq
 8005d9c:	1aad      	subeq	r5, r5, r2
 8005d9e:	68a3      	ldr	r3, [r4, #8]
 8005da0:	6922      	ldr	r2, [r4, #16]
 8005da2:	bf0c      	ite	eq
 8005da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da8:	2500      	movne	r5, #0
 8005daa:	4293      	cmp	r3, r2
 8005dac:	bfc4      	itt	gt
 8005dae:	1a9b      	subgt	r3, r3, r2
 8005db0:	18ed      	addgt	r5, r5, r3
 8005db2:	2600      	movs	r6, #0
 8005db4:	341a      	adds	r4, #26
 8005db6:	42b5      	cmp	r5, r6
 8005db8:	d11a      	bne.n	8005df0 <_printf_common+0xc8>
 8005dba:	2000      	movs	r0, #0
 8005dbc:	e008      	b.n	8005dd0 <_printf_common+0xa8>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4652      	mov	r2, sl
 8005dc2:	4649      	mov	r1, r9
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	47c0      	blx	r8
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d103      	bne.n	8005dd4 <_printf_common+0xac>
 8005dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	e7c6      	b.n	8005d66 <_printf_common+0x3e>
 8005dd8:	18e1      	adds	r1, r4, r3
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	2030      	movs	r0, #48	; 0x30
 8005dde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005de2:	4422      	add	r2, r4
 8005de4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005de8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dec:	3302      	adds	r3, #2
 8005dee:	e7c7      	b.n	8005d80 <_printf_common+0x58>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4622      	mov	r2, r4
 8005df4:	4649      	mov	r1, r9
 8005df6:	4638      	mov	r0, r7
 8005df8:	47c0      	blx	r8
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d0e6      	beq.n	8005dcc <_printf_common+0xa4>
 8005dfe:	3601      	adds	r6, #1
 8005e00:	e7d9      	b.n	8005db6 <_printf_common+0x8e>
	...

08005e04 <_printf_i>:
 8005e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e08:	7e0f      	ldrb	r7, [r1, #24]
 8005e0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e0c:	2f78      	cmp	r7, #120	; 0x78
 8005e0e:	4691      	mov	r9, r2
 8005e10:	4680      	mov	r8, r0
 8005e12:	460c      	mov	r4, r1
 8005e14:	469a      	mov	sl, r3
 8005e16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e1a:	d807      	bhi.n	8005e2c <_printf_i+0x28>
 8005e1c:	2f62      	cmp	r7, #98	; 0x62
 8005e1e:	d80a      	bhi.n	8005e36 <_printf_i+0x32>
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	f000 80d8 	beq.w	8005fd6 <_printf_i+0x1d2>
 8005e26:	2f58      	cmp	r7, #88	; 0x58
 8005e28:	f000 80a3 	beq.w	8005f72 <_printf_i+0x16e>
 8005e2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e34:	e03a      	b.n	8005eac <_printf_i+0xa8>
 8005e36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e3a:	2b15      	cmp	r3, #21
 8005e3c:	d8f6      	bhi.n	8005e2c <_printf_i+0x28>
 8005e3e:	a101      	add	r1, pc, #4	; (adr r1, 8005e44 <_printf_i+0x40>)
 8005e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e44:	08005e9d 	.word	0x08005e9d
 8005e48:	08005eb1 	.word	0x08005eb1
 8005e4c:	08005e2d 	.word	0x08005e2d
 8005e50:	08005e2d 	.word	0x08005e2d
 8005e54:	08005e2d 	.word	0x08005e2d
 8005e58:	08005e2d 	.word	0x08005e2d
 8005e5c:	08005eb1 	.word	0x08005eb1
 8005e60:	08005e2d 	.word	0x08005e2d
 8005e64:	08005e2d 	.word	0x08005e2d
 8005e68:	08005e2d 	.word	0x08005e2d
 8005e6c:	08005e2d 	.word	0x08005e2d
 8005e70:	08005fbd 	.word	0x08005fbd
 8005e74:	08005ee1 	.word	0x08005ee1
 8005e78:	08005f9f 	.word	0x08005f9f
 8005e7c:	08005e2d 	.word	0x08005e2d
 8005e80:	08005e2d 	.word	0x08005e2d
 8005e84:	08005fdf 	.word	0x08005fdf
 8005e88:	08005e2d 	.word	0x08005e2d
 8005e8c:	08005ee1 	.word	0x08005ee1
 8005e90:	08005e2d 	.word	0x08005e2d
 8005e94:	08005e2d 	.word	0x08005e2d
 8005e98:	08005fa7 	.word	0x08005fa7
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	1d1a      	adds	r2, r3, #4
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	602a      	str	r2, [r5, #0]
 8005ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0a3      	b.n	8005ff8 <_printf_i+0x1f4>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	6829      	ldr	r1, [r5, #0]
 8005eb4:	0606      	lsls	r6, r0, #24
 8005eb6:	f101 0304 	add.w	r3, r1, #4
 8005eba:	d50a      	bpl.n	8005ed2 <_printf_i+0xce>
 8005ebc:	680e      	ldr	r6, [r1, #0]
 8005ebe:	602b      	str	r3, [r5, #0]
 8005ec0:	2e00      	cmp	r6, #0
 8005ec2:	da03      	bge.n	8005ecc <_printf_i+0xc8>
 8005ec4:	232d      	movs	r3, #45	; 0x2d
 8005ec6:	4276      	negs	r6, r6
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ecc:	485e      	ldr	r0, [pc, #376]	; (8006048 <_printf_i+0x244>)
 8005ece:	230a      	movs	r3, #10
 8005ed0:	e019      	b.n	8005f06 <_printf_i+0x102>
 8005ed2:	680e      	ldr	r6, [r1, #0]
 8005ed4:	602b      	str	r3, [r5, #0]
 8005ed6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eda:	bf18      	it	ne
 8005edc:	b236      	sxthne	r6, r6
 8005ede:	e7ef      	b.n	8005ec0 <_printf_i+0xbc>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	6820      	ldr	r0, [r4, #0]
 8005ee4:	1d19      	adds	r1, r3, #4
 8005ee6:	6029      	str	r1, [r5, #0]
 8005ee8:	0601      	lsls	r1, r0, #24
 8005eea:	d501      	bpl.n	8005ef0 <_printf_i+0xec>
 8005eec:	681e      	ldr	r6, [r3, #0]
 8005eee:	e002      	b.n	8005ef6 <_printf_i+0xf2>
 8005ef0:	0646      	lsls	r6, r0, #25
 8005ef2:	d5fb      	bpl.n	8005eec <_printf_i+0xe8>
 8005ef4:	881e      	ldrh	r6, [r3, #0]
 8005ef6:	4854      	ldr	r0, [pc, #336]	; (8006048 <_printf_i+0x244>)
 8005ef8:	2f6f      	cmp	r7, #111	; 0x6f
 8005efa:	bf0c      	ite	eq
 8005efc:	2308      	moveq	r3, #8
 8005efe:	230a      	movne	r3, #10
 8005f00:	2100      	movs	r1, #0
 8005f02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f06:	6865      	ldr	r5, [r4, #4]
 8005f08:	60a5      	str	r5, [r4, #8]
 8005f0a:	2d00      	cmp	r5, #0
 8005f0c:	bfa2      	ittt	ge
 8005f0e:	6821      	ldrge	r1, [r4, #0]
 8005f10:	f021 0104 	bicge.w	r1, r1, #4
 8005f14:	6021      	strge	r1, [r4, #0]
 8005f16:	b90e      	cbnz	r6, 8005f1c <_printf_i+0x118>
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	d04d      	beq.n	8005fb8 <_printf_i+0x1b4>
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f22:	fb03 6711 	mls	r7, r3, r1, r6
 8005f26:	5dc7      	ldrb	r7, [r0, r7]
 8005f28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f2c:	4637      	mov	r7, r6
 8005f2e:	42bb      	cmp	r3, r7
 8005f30:	460e      	mov	r6, r1
 8005f32:	d9f4      	bls.n	8005f1e <_printf_i+0x11a>
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d10b      	bne.n	8005f50 <_printf_i+0x14c>
 8005f38:	6823      	ldr	r3, [r4, #0]
 8005f3a:	07de      	lsls	r6, r3, #31
 8005f3c:	d508      	bpl.n	8005f50 <_printf_i+0x14c>
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	6861      	ldr	r1, [r4, #4]
 8005f42:	4299      	cmp	r1, r3
 8005f44:	bfde      	ittt	le
 8005f46:	2330      	movle	r3, #48	; 0x30
 8005f48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f50:	1b52      	subs	r2, r2, r5
 8005f52:	6122      	str	r2, [r4, #16]
 8005f54:	f8cd a000 	str.w	sl, [sp]
 8005f58:	464b      	mov	r3, r9
 8005f5a:	aa03      	add	r2, sp, #12
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	4640      	mov	r0, r8
 8005f60:	f7ff fee2 	bl	8005d28 <_printf_common>
 8005f64:	3001      	adds	r0, #1
 8005f66:	d14c      	bne.n	8006002 <_printf_i+0x1fe>
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	b004      	add	sp, #16
 8005f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f72:	4835      	ldr	r0, [pc, #212]	; (8006048 <_printf_i+0x244>)
 8005f74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f78:	6829      	ldr	r1, [r5, #0]
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f80:	6029      	str	r1, [r5, #0]
 8005f82:	061d      	lsls	r5, r3, #24
 8005f84:	d514      	bpl.n	8005fb0 <_printf_i+0x1ac>
 8005f86:	07df      	lsls	r7, r3, #31
 8005f88:	bf44      	itt	mi
 8005f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f8e:	6023      	strmi	r3, [r4, #0]
 8005f90:	b91e      	cbnz	r6, 8005f9a <_printf_i+0x196>
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f023 0320 	bic.w	r3, r3, #32
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	e7b0      	b.n	8005f00 <_printf_i+0xfc>
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	f043 0320 	orr.w	r3, r3, #32
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	2378      	movs	r3, #120	; 0x78
 8005fa8:	4828      	ldr	r0, [pc, #160]	; (800604c <_printf_i+0x248>)
 8005faa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fae:	e7e3      	b.n	8005f78 <_printf_i+0x174>
 8005fb0:	0659      	lsls	r1, r3, #25
 8005fb2:	bf48      	it	mi
 8005fb4:	b2b6      	uxthmi	r6, r6
 8005fb6:	e7e6      	b.n	8005f86 <_printf_i+0x182>
 8005fb8:	4615      	mov	r5, r2
 8005fba:	e7bb      	b.n	8005f34 <_printf_i+0x130>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	6826      	ldr	r6, [r4, #0]
 8005fc0:	6961      	ldr	r1, [r4, #20]
 8005fc2:	1d18      	adds	r0, r3, #4
 8005fc4:	6028      	str	r0, [r5, #0]
 8005fc6:	0635      	lsls	r5, r6, #24
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	d501      	bpl.n	8005fd0 <_printf_i+0x1cc>
 8005fcc:	6019      	str	r1, [r3, #0]
 8005fce:	e002      	b.n	8005fd6 <_printf_i+0x1d2>
 8005fd0:	0670      	lsls	r0, r6, #25
 8005fd2:	d5fb      	bpl.n	8005fcc <_printf_i+0x1c8>
 8005fd4:	8019      	strh	r1, [r3, #0]
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	6123      	str	r3, [r4, #16]
 8005fda:	4615      	mov	r5, r2
 8005fdc:	e7ba      	b.n	8005f54 <_printf_i+0x150>
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	1d1a      	adds	r2, r3, #4
 8005fe2:	602a      	str	r2, [r5, #0]
 8005fe4:	681d      	ldr	r5, [r3, #0]
 8005fe6:	6862      	ldr	r2, [r4, #4]
 8005fe8:	2100      	movs	r1, #0
 8005fea:	4628      	mov	r0, r5
 8005fec:	f7fa f900 	bl	80001f0 <memchr>
 8005ff0:	b108      	cbz	r0, 8005ff6 <_printf_i+0x1f2>
 8005ff2:	1b40      	subs	r0, r0, r5
 8005ff4:	6060      	str	r0, [r4, #4]
 8005ff6:	6863      	ldr	r3, [r4, #4]
 8005ff8:	6123      	str	r3, [r4, #16]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006000:	e7a8      	b.n	8005f54 <_printf_i+0x150>
 8006002:	6923      	ldr	r3, [r4, #16]
 8006004:	462a      	mov	r2, r5
 8006006:	4649      	mov	r1, r9
 8006008:	4640      	mov	r0, r8
 800600a:	47d0      	blx	sl
 800600c:	3001      	adds	r0, #1
 800600e:	d0ab      	beq.n	8005f68 <_printf_i+0x164>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	079b      	lsls	r3, r3, #30
 8006014:	d413      	bmi.n	800603e <_printf_i+0x23a>
 8006016:	68e0      	ldr	r0, [r4, #12]
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	4298      	cmp	r0, r3
 800601c:	bfb8      	it	lt
 800601e:	4618      	movlt	r0, r3
 8006020:	e7a4      	b.n	8005f6c <_printf_i+0x168>
 8006022:	2301      	movs	r3, #1
 8006024:	4632      	mov	r2, r6
 8006026:	4649      	mov	r1, r9
 8006028:	4640      	mov	r0, r8
 800602a:	47d0      	blx	sl
 800602c:	3001      	adds	r0, #1
 800602e:	d09b      	beq.n	8005f68 <_printf_i+0x164>
 8006030:	3501      	adds	r5, #1
 8006032:	68e3      	ldr	r3, [r4, #12]
 8006034:	9903      	ldr	r1, [sp, #12]
 8006036:	1a5b      	subs	r3, r3, r1
 8006038:	42ab      	cmp	r3, r5
 800603a:	dcf2      	bgt.n	8006022 <_printf_i+0x21e>
 800603c:	e7eb      	b.n	8006016 <_printf_i+0x212>
 800603e:	2500      	movs	r5, #0
 8006040:	f104 0619 	add.w	r6, r4, #25
 8006044:	e7f5      	b.n	8006032 <_printf_i+0x22e>
 8006046:	bf00      	nop
 8006048:	0800770b 	.word	0x0800770b
 800604c:	0800771c 	.word	0x0800771c

08006050 <__swbuf_r>:
 8006050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006052:	460e      	mov	r6, r1
 8006054:	4614      	mov	r4, r2
 8006056:	4605      	mov	r5, r0
 8006058:	b118      	cbz	r0, 8006062 <__swbuf_r+0x12>
 800605a:	6983      	ldr	r3, [r0, #24]
 800605c:	b90b      	cbnz	r3, 8006062 <__swbuf_r+0x12>
 800605e:	f000 f9d9 	bl	8006414 <__sinit>
 8006062:	4b21      	ldr	r3, [pc, #132]	; (80060e8 <__swbuf_r+0x98>)
 8006064:	429c      	cmp	r4, r3
 8006066:	d12b      	bne.n	80060c0 <__swbuf_r+0x70>
 8006068:	686c      	ldr	r4, [r5, #4]
 800606a:	69a3      	ldr	r3, [r4, #24]
 800606c:	60a3      	str	r3, [r4, #8]
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	071a      	lsls	r2, r3, #28
 8006072:	d52f      	bpl.n	80060d4 <__swbuf_r+0x84>
 8006074:	6923      	ldr	r3, [r4, #16]
 8006076:	b36b      	cbz	r3, 80060d4 <__swbuf_r+0x84>
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	1ac0      	subs	r0, r0, r3
 800607e:	6963      	ldr	r3, [r4, #20]
 8006080:	b2f6      	uxtb	r6, r6
 8006082:	4283      	cmp	r3, r0
 8006084:	4637      	mov	r7, r6
 8006086:	dc04      	bgt.n	8006092 <__swbuf_r+0x42>
 8006088:	4621      	mov	r1, r4
 800608a:	4628      	mov	r0, r5
 800608c:	f000 f92e 	bl	80062ec <_fflush_r>
 8006090:	bb30      	cbnz	r0, 80060e0 <__swbuf_r+0x90>
 8006092:	68a3      	ldr	r3, [r4, #8]
 8006094:	3b01      	subs	r3, #1
 8006096:	60a3      	str	r3, [r4, #8]
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	6022      	str	r2, [r4, #0]
 800609e:	701e      	strb	r6, [r3, #0]
 80060a0:	6963      	ldr	r3, [r4, #20]
 80060a2:	3001      	adds	r0, #1
 80060a4:	4283      	cmp	r3, r0
 80060a6:	d004      	beq.n	80060b2 <__swbuf_r+0x62>
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	07db      	lsls	r3, r3, #31
 80060ac:	d506      	bpl.n	80060bc <__swbuf_r+0x6c>
 80060ae:	2e0a      	cmp	r6, #10
 80060b0:	d104      	bne.n	80060bc <__swbuf_r+0x6c>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f919 	bl	80062ec <_fflush_r>
 80060ba:	b988      	cbnz	r0, 80060e0 <__swbuf_r+0x90>
 80060bc:	4638      	mov	r0, r7
 80060be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <__swbuf_r+0x9c>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	d101      	bne.n	80060ca <__swbuf_r+0x7a>
 80060c6:	68ac      	ldr	r4, [r5, #8]
 80060c8:	e7cf      	b.n	800606a <__swbuf_r+0x1a>
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <__swbuf_r+0xa0>)
 80060cc:	429c      	cmp	r4, r3
 80060ce:	bf08      	it	eq
 80060d0:	68ec      	ldreq	r4, [r5, #12]
 80060d2:	e7ca      	b.n	800606a <__swbuf_r+0x1a>
 80060d4:	4621      	mov	r1, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	f000 f80c 	bl	80060f4 <__swsetup_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d0cb      	beq.n	8006078 <__swbuf_r+0x28>
 80060e0:	f04f 37ff 	mov.w	r7, #4294967295
 80060e4:	e7ea      	b.n	80060bc <__swbuf_r+0x6c>
 80060e6:	bf00      	nop
 80060e8:	08007750 	.word	0x08007750
 80060ec:	08007770 	.word	0x08007770
 80060f0:	08007730 	.word	0x08007730

080060f4 <__swsetup_r>:
 80060f4:	4b32      	ldr	r3, [pc, #200]	; (80061c0 <__swsetup_r+0xcc>)
 80060f6:	b570      	push	{r4, r5, r6, lr}
 80060f8:	681d      	ldr	r5, [r3, #0]
 80060fa:	4606      	mov	r6, r0
 80060fc:	460c      	mov	r4, r1
 80060fe:	b125      	cbz	r5, 800610a <__swsetup_r+0x16>
 8006100:	69ab      	ldr	r3, [r5, #24]
 8006102:	b913      	cbnz	r3, 800610a <__swsetup_r+0x16>
 8006104:	4628      	mov	r0, r5
 8006106:	f000 f985 	bl	8006414 <__sinit>
 800610a:	4b2e      	ldr	r3, [pc, #184]	; (80061c4 <__swsetup_r+0xd0>)
 800610c:	429c      	cmp	r4, r3
 800610e:	d10f      	bne.n	8006130 <__swsetup_r+0x3c>
 8006110:	686c      	ldr	r4, [r5, #4]
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006118:	0719      	lsls	r1, r3, #28
 800611a:	d42c      	bmi.n	8006176 <__swsetup_r+0x82>
 800611c:	06dd      	lsls	r5, r3, #27
 800611e:	d411      	bmi.n	8006144 <__swsetup_r+0x50>
 8006120:	2309      	movs	r3, #9
 8006122:	6033      	str	r3, [r6, #0]
 8006124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	f04f 30ff 	mov.w	r0, #4294967295
 800612e:	e03e      	b.n	80061ae <__swsetup_r+0xba>
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <__swsetup_r+0xd4>)
 8006132:	429c      	cmp	r4, r3
 8006134:	d101      	bne.n	800613a <__swsetup_r+0x46>
 8006136:	68ac      	ldr	r4, [r5, #8]
 8006138:	e7eb      	b.n	8006112 <__swsetup_r+0x1e>
 800613a:	4b24      	ldr	r3, [pc, #144]	; (80061cc <__swsetup_r+0xd8>)
 800613c:	429c      	cmp	r4, r3
 800613e:	bf08      	it	eq
 8006140:	68ec      	ldreq	r4, [r5, #12]
 8006142:	e7e6      	b.n	8006112 <__swsetup_r+0x1e>
 8006144:	0758      	lsls	r0, r3, #29
 8006146:	d512      	bpl.n	800616e <__swsetup_r+0x7a>
 8006148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800614a:	b141      	cbz	r1, 800615e <__swsetup_r+0x6a>
 800614c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006150:	4299      	cmp	r1, r3
 8006152:	d002      	beq.n	800615a <__swsetup_r+0x66>
 8006154:	4630      	mov	r0, r6
 8006156:	f7ff faf5 	bl	8005744 <_free_r>
 800615a:	2300      	movs	r3, #0
 800615c:	6363      	str	r3, [r4, #52]	; 0x34
 800615e:	89a3      	ldrh	r3, [r4, #12]
 8006160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	2300      	movs	r3, #0
 8006168:	6063      	str	r3, [r4, #4]
 800616a:	6923      	ldr	r3, [r4, #16]
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	89a3      	ldrh	r3, [r4, #12]
 8006170:	f043 0308 	orr.w	r3, r3, #8
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	b94b      	cbnz	r3, 800618e <__swsetup_r+0x9a>
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006184:	d003      	beq.n	800618e <__swsetup_r+0x9a>
 8006186:	4621      	mov	r1, r4
 8006188:	4630      	mov	r0, r6
 800618a:	f000 fa09 	bl	80065a0 <__smakebuf_r>
 800618e:	89a0      	ldrh	r0, [r4, #12]
 8006190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006194:	f010 0301 	ands.w	r3, r0, #1
 8006198:	d00a      	beq.n	80061b0 <__swsetup_r+0xbc>
 800619a:	2300      	movs	r3, #0
 800619c:	60a3      	str	r3, [r4, #8]
 800619e:	6963      	ldr	r3, [r4, #20]
 80061a0:	425b      	negs	r3, r3
 80061a2:	61a3      	str	r3, [r4, #24]
 80061a4:	6923      	ldr	r3, [r4, #16]
 80061a6:	b943      	cbnz	r3, 80061ba <__swsetup_r+0xc6>
 80061a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061ac:	d1ba      	bne.n	8006124 <__swsetup_r+0x30>
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	0781      	lsls	r1, r0, #30
 80061b2:	bf58      	it	pl
 80061b4:	6963      	ldrpl	r3, [r4, #20]
 80061b6:	60a3      	str	r3, [r4, #8]
 80061b8:	e7f4      	b.n	80061a4 <__swsetup_r+0xb0>
 80061ba:	2000      	movs	r0, #0
 80061bc:	e7f7      	b.n	80061ae <__swsetup_r+0xba>
 80061be:	bf00      	nop
 80061c0:	20000014 	.word	0x20000014
 80061c4:	08007750 	.word	0x08007750
 80061c8:	08007770 	.word	0x08007770
 80061cc:	08007730 	.word	0x08007730

080061d0 <abort>:
 80061d0:	b508      	push	{r3, lr}
 80061d2:	2006      	movs	r0, #6
 80061d4:	f000 fa4c 	bl	8006670 <raise>
 80061d8:	2001      	movs	r0, #1
 80061da:	f7fd fadd 	bl	8003798 <_exit>
	...

080061e0 <__sflush_r>:
 80061e0:	898a      	ldrh	r2, [r1, #12]
 80061e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e6:	4605      	mov	r5, r0
 80061e8:	0710      	lsls	r0, r2, #28
 80061ea:	460c      	mov	r4, r1
 80061ec:	d458      	bmi.n	80062a0 <__sflush_r+0xc0>
 80061ee:	684b      	ldr	r3, [r1, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	dc05      	bgt.n	8006200 <__sflush_r+0x20>
 80061f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dc02      	bgt.n	8006200 <__sflush_r+0x20>
 80061fa:	2000      	movs	r0, #0
 80061fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006202:	2e00      	cmp	r6, #0
 8006204:	d0f9      	beq.n	80061fa <__sflush_r+0x1a>
 8006206:	2300      	movs	r3, #0
 8006208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800620c:	682f      	ldr	r7, [r5, #0]
 800620e:	602b      	str	r3, [r5, #0]
 8006210:	d032      	beq.n	8006278 <__sflush_r+0x98>
 8006212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	075a      	lsls	r2, r3, #29
 8006218:	d505      	bpl.n	8006226 <__sflush_r+0x46>
 800621a:	6863      	ldr	r3, [r4, #4]
 800621c:	1ac0      	subs	r0, r0, r3
 800621e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006220:	b10b      	cbz	r3, 8006226 <__sflush_r+0x46>
 8006222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006224:	1ac0      	subs	r0, r0, r3
 8006226:	2300      	movs	r3, #0
 8006228:	4602      	mov	r2, r0
 800622a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800622c:	6a21      	ldr	r1, [r4, #32]
 800622e:	4628      	mov	r0, r5
 8006230:	47b0      	blx	r6
 8006232:	1c43      	adds	r3, r0, #1
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	d106      	bne.n	8006246 <__sflush_r+0x66>
 8006238:	6829      	ldr	r1, [r5, #0]
 800623a:	291d      	cmp	r1, #29
 800623c:	d82c      	bhi.n	8006298 <__sflush_r+0xb8>
 800623e:	4a2a      	ldr	r2, [pc, #168]	; (80062e8 <__sflush_r+0x108>)
 8006240:	40ca      	lsrs	r2, r1
 8006242:	07d6      	lsls	r6, r2, #31
 8006244:	d528      	bpl.n	8006298 <__sflush_r+0xb8>
 8006246:	2200      	movs	r2, #0
 8006248:	6062      	str	r2, [r4, #4]
 800624a:	04d9      	lsls	r1, r3, #19
 800624c:	6922      	ldr	r2, [r4, #16]
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	d504      	bpl.n	800625c <__sflush_r+0x7c>
 8006252:	1c42      	adds	r2, r0, #1
 8006254:	d101      	bne.n	800625a <__sflush_r+0x7a>
 8006256:	682b      	ldr	r3, [r5, #0]
 8006258:	b903      	cbnz	r3, 800625c <__sflush_r+0x7c>
 800625a:	6560      	str	r0, [r4, #84]	; 0x54
 800625c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800625e:	602f      	str	r7, [r5, #0]
 8006260:	2900      	cmp	r1, #0
 8006262:	d0ca      	beq.n	80061fa <__sflush_r+0x1a>
 8006264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006268:	4299      	cmp	r1, r3
 800626a:	d002      	beq.n	8006272 <__sflush_r+0x92>
 800626c:	4628      	mov	r0, r5
 800626e:	f7ff fa69 	bl	8005744 <_free_r>
 8006272:	2000      	movs	r0, #0
 8006274:	6360      	str	r0, [r4, #52]	; 0x34
 8006276:	e7c1      	b.n	80061fc <__sflush_r+0x1c>
 8006278:	6a21      	ldr	r1, [r4, #32]
 800627a:	2301      	movs	r3, #1
 800627c:	4628      	mov	r0, r5
 800627e:	47b0      	blx	r6
 8006280:	1c41      	adds	r1, r0, #1
 8006282:	d1c7      	bne.n	8006214 <__sflush_r+0x34>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d0c4      	beq.n	8006214 <__sflush_r+0x34>
 800628a:	2b1d      	cmp	r3, #29
 800628c:	d001      	beq.n	8006292 <__sflush_r+0xb2>
 800628e:	2b16      	cmp	r3, #22
 8006290:	d101      	bne.n	8006296 <__sflush_r+0xb6>
 8006292:	602f      	str	r7, [r5, #0]
 8006294:	e7b1      	b.n	80061fa <__sflush_r+0x1a>
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629c:	81a3      	strh	r3, [r4, #12]
 800629e:	e7ad      	b.n	80061fc <__sflush_r+0x1c>
 80062a0:	690f      	ldr	r7, [r1, #16]
 80062a2:	2f00      	cmp	r7, #0
 80062a4:	d0a9      	beq.n	80061fa <__sflush_r+0x1a>
 80062a6:	0793      	lsls	r3, r2, #30
 80062a8:	680e      	ldr	r6, [r1, #0]
 80062aa:	bf08      	it	eq
 80062ac:	694b      	ldreq	r3, [r1, #20]
 80062ae:	600f      	str	r7, [r1, #0]
 80062b0:	bf18      	it	ne
 80062b2:	2300      	movne	r3, #0
 80062b4:	eba6 0807 	sub.w	r8, r6, r7
 80062b8:	608b      	str	r3, [r1, #8]
 80062ba:	f1b8 0f00 	cmp.w	r8, #0
 80062be:	dd9c      	ble.n	80061fa <__sflush_r+0x1a>
 80062c0:	6a21      	ldr	r1, [r4, #32]
 80062c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80062c4:	4643      	mov	r3, r8
 80062c6:	463a      	mov	r2, r7
 80062c8:	4628      	mov	r0, r5
 80062ca:	47b0      	blx	r6
 80062cc:	2800      	cmp	r0, #0
 80062ce:	dc06      	bgt.n	80062de <__sflush_r+0xfe>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	e78e      	b.n	80061fc <__sflush_r+0x1c>
 80062de:	4407      	add	r7, r0
 80062e0:	eba8 0800 	sub.w	r8, r8, r0
 80062e4:	e7e9      	b.n	80062ba <__sflush_r+0xda>
 80062e6:	bf00      	nop
 80062e8:	20400001 	.word	0x20400001

080062ec <_fflush_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	690b      	ldr	r3, [r1, #16]
 80062f0:	4605      	mov	r5, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	b913      	cbnz	r3, 80062fc <_fflush_r+0x10>
 80062f6:	2500      	movs	r5, #0
 80062f8:	4628      	mov	r0, r5
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	b118      	cbz	r0, 8006306 <_fflush_r+0x1a>
 80062fe:	6983      	ldr	r3, [r0, #24]
 8006300:	b90b      	cbnz	r3, 8006306 <_fflush_r+0x1a>
 8006302:	f000 f887 	bl	8006414 <__sinit>
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <_fflush_r+0x6c>)
 8006308:	429c      	cmp	r4, r3
 800630a:	d11b      	bne.n	8006344 <_fflush_r+0x58>
 800630c:	686c      	ldr	r4, [r5, #4]
 800630e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0ef      	beq.n	80062f6 <_fflush_r+0xa>
 8006316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006318:	07d0      	lsls	r0, r2, #31
 800631a:	d404      	bmi.n	8006326 <_fflush_r+0x3a>
 800631c:	0599      	lsls	r1, r3, #22
 800631e:	d402      	bmi.n	8006326 <_fflush_r+0x3a>
 8006320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006322:	f000 f915 	bl	8006550 <__retarget_lock_acquire_recursive>
 8006326:	4628      	mov	r0, r5
 8006328:	4621      	mov	r1, r4
 800632a:	f7ff ff59 	bl	80061e0 <__sflush_r>
 800632e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006330:	07da      	lsls	r2, r3, #31
 8006332:	4605      	mov	r5, r0
 8006334:	d4e0      	bmi.n	80062f8 <_fflush_r+0xc>
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	059b      	lsls	r3, r3, #22
 800633a:	d4dd      	bmi.n	80062f8 <_fflush_r+0xc>
 800633c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800633e:	f000 f908 	bl	8006552 <__retarget_lock_release_recursive>
 8006342:	e7d9      	b.n	80062f8 <_fflush_r+0xc>
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <_fflush_r+0x70>)
 8006346:	429c      	cmp	r4, r3
 8006348:	d101      	bne.n	800634e <_fflush_r+0x62>
 800634a:	68ac      	ldr	r4, [r5, #8]
 800634c:	e7df      	b.n	800630e <_fflush_r+0x22>
 800634e:	4b04      	ldr	r3, [pc, #16]	; (8006360 <_fflush_r+0x74>)
 8006350:	429c      	cmp	r4, r3
 8006352:	bf08      	it	eq
 8006354:	68ec      	ldreq	r4, [r5, #12]
 8006356:	e7da      	b.n	800630e <_fflush_r+0x22>
 8006358:	08007750 	.word	0x08007750
 800635c:	08007770 	.word	0x08007770
 8006360:	08007730 	.word	0x08007730

08006364 <std>:
 8006364:	2300      	movs	r3, #0
 8006366:	b510      	push	{r4, lr}
 8006368:	4604      	mov	r4, r0
 800636a:	e9c0 3300 	strd	r3, r3, [r0]
 800636e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006372:	6083      	str	r3, [r0, #8]
 8006374:	8181      	strh	r1, [r0, #12]
 8006376:	6643      	str	r3, [r0, #100]	; 0x64
 8006378:	81c2      	strh	r2, [r0, #14]
 800637a:	6183      	str	r3, [r0, #24]
 800637c:	4619      	mov	r1, r3
 800637e:	2208      	movs	r2, #8
 8006380:	305c      	adds	r0, #92	; 0x5c
 8006382:	f7ff f9d7 	bl	8005734 <memset>
 8006386:	4b05      	ldr	r3, [pc, #20]	; (800639c <std+0x38>)
 8006388:	6263      	str	r3, [r4, #36]	; 0x24
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <std+0x3c>)
 800638c:	62a3      	str	r3, [r4, #40]	; 0x28
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <std+0x40>)
 8006390:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006392:	4b05      	ldr	r3, [pc, #20]	; (80063a8 <std+0x44>)
 8006394:	6224      	str	r4, [r4, #32]
 8006396:	6323      	str	r3, [r4, #48]	; 0x30
 8006398:	bd10      	pop	{r4, pc}
 800639a:	bf00      	nop
 800639c:	080066a9 	.word	0x080066a9
 80063a0:	080066cb 	.word	0x080066cb
 80063a4:	08006703 	.word	0x08006703
 80063a8:	08006727 	.word	0x08006727

080063ac <_cleanup_r>:
 80063ac:	4901      	ldr	r1, [pc, #4]	; (80063b4 <_cleanup_r+0x8>)
 80063ae:	f000 b8af 	b.w	8006510 <_fwalk_reent>
 80063b2:	bf00      	nop
 80063b4:	080062ed 	.word	0x080062ed

080063b8 <__sfmoreglue>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	2268      	movs	r2, #104	; 0x68
 80063bc:	1e4d      	subs	r5, r1, #1
 80063be:	4355      	muls	r5, r2
 80063c0:	460e      	mov	r6, r1
 80063c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80063c6:	f7ff fa29 	bl	800581c <_malloc_r>
 80063ca:	4604      	mov	r4, r0
 80063cc:	b140      	cbz	r0, 80063e0 <__sfmoreglue+0x28>
 80063ce:	2100      	movs	r1, #0
 80063d0:	e9c0 1600 	strd	r1, r6, [r0]
 80063d4:	300c      	adds	r0, #12
 80063d6:	60a0      	str	r0, [r4, #8]
 80063d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063dc:	f7ff f9aa 	bl	8005734 <memset>
 80063e0:	4620      	mov	r0, r4
 80063e2:	bd70      	pop	{r4, r5, r6, pc}

080063e4 <__sfp_lock_acquire>:
 80063e4:	4801      	ldr	r0, [pc, #4]	; (80063ec <__sfp_lock_acquire+0x8>)
 80063e6:	f000 b8b3 	b.w	8006550 <__retarget_lock_acquire_recursive>
 80063ea:	bf00      	nop
 80063ec:	2000020d 	.word	0x2000020d

080063f0 <__sfp_lock_release>:
 80063f0:	4801      	ldr	r0, [pc, #4]	; (80063f8 <__sfp_lock_release+0x8>)
 80063f2:	f000 b8ae 	b.w	8006552 <__retarget_lock_release_recursive>
 80063f6:	bf00      	nop
 80063f8:	2000020d 	.word	0x2000020d

080063fc <__sinit_lock_acquire>:
 80063fc:	4801      	ldr	r0, [pc, #4]	; (8006404 <__sinit_lock_acquire+0x8>)
 80063fe:	f000 b8a7 	b.w	8006550 <__retarget_lock_acquire_recursive>
 8006402:	bf00      	nop
 8006404:	2000020e 	.word	0x2000020e

08006408 <__sinit_lock_release>:
 8006408:	4801      	ldr	r0, [pc, #4]	; (8006410 <__sinit_lock_release+0x8>)
 800640a:	f000 b8a2 	b.w	8006552 <__retarget_lock_release_recursive>
 800640e:	bf00      	nop
 8006410:	2000020e 	.word	0x2000020e

08006414 <__sinit>:
 8006414:	b510      	push	{r4, lr}
 8006416:	4604      	mov	r4, r0
 8006418:	f7ff fff0 	bl	80063fc <__sinit_lock_acquire>
 800641c:	69a3      	ldr	r3, [r4, #24]
 800641e:	b11b      	cbz	r3, 8006428 <__sinit+0x14>
 8006420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006424:	f7ff bff0 	b.w	8006408 <__sinit_lock_release>
 8006428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800642c:	6523      	str	r3, [r4, #80]	; 0x50
 800642e:	4b13      	ldr	r3, [pc, #76]	; (800647c <__sinit+0x68>)
 8006430:	4a13      	ldr	r2, [pc, #76]	; (8006480 <__sinit+0x6c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	62a2      	str	r2, [r4, #40]	; 0x28
 8006436:	42a3      	cmp	r3, r4
 8006438:	bf04      	itt	eq
 800643a:	2301      	moveq	r3, #1
 800643c:	61a3      	streq	r3, [r4, #24]
 800643e:	4620      	mov	r0, r4
 8006440:	f000 f820 	bl	8006484 <__sfp>
 8006444:	6060      	str	r0, [r4, #4]
 8006446:	4620      	mov	r0, r4
 8006448:	f000 f81c 	bl	8006484 <__sfp>
 800644c:	60a0      	str	r0, [r4, #8]
 800644e:	4620      	mov	r0, r4
 8006450:	f000 f818 	bl	8006484 <__sfp>
 8006454:	2200      	movs	r2, #0
 8006456:	60e0      	str	r0, [r4, #12]
 8006458:	2104      	movs	r1, #4
 800645a:	6860      	ldr	r0, [r4, #4]
 800645c:	f7ff ff82 	bl	8006364 <std>
 8006460:	68a0      	ldr	r0, [r4, #8]
 8006462:	2201      	movs	r2, #1
 8006464:	2109      	movs	r1, #9
 8006466:	f7ff ff7d 	bl	8006364 <std>
 800646a:	68e0      	ldr	r0, [r4, #12]
 800646c:	2202      	movs	r2, #2
 800646e:	2112      	movs	r1, #18
 8006470:	f7ff ff78 	bl	8006364 <std>
 8006474:	2301      	movs	r3, #1
 8006476:	61a3      	str	r3, [r4, #24]
 8006478:	e7d2      	b.n	8006420 <__sinit+0xc>
 800647a:	bf00      	nop
 800647c:	08007648 	.word	0x08007648
 8006480:	080063ad 	.word	0x080063ad

08006484 <__sfp>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	4607      	mov	r7, r0
 8006488:	f7ff ffac 	bl	80063e4 <__sfp_lock_acquire>
 800648c:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <__sfp+0x84>)
 800648e:	681e      	ldr	r6, [r3, #0]
 8006490:	69b3      	ldr	r3, [r6, #24]
 8006492:	b913      	cbnz	r3, 800649a <__sfp+0x16>
 8006494:	4630      	mov	r0, r6
 8006496:	f7ff ffbd 	bl	8006414 <__sinit>
 800649a:	3648      	adds	r6, #72	; 0x48
 800649c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	d503      	bpl.n	80064ac <__sfp+0x28>
 80064a4:	6833      	ldr	r3, [r6, #0]
 80064a6:	b30b      	cbz	r3, 80064ec <__sfp+0x68>
 80064a8:	6836      	ldr	r6, [r6, #0]
 80064aa:	e7f7      	b.n	800649c <__sfp+0x18>
 80064ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80064b0:	b9d5      	cbnz	r5, 80064e8 <__sfp+0x64>
 80064b2:	4b16      	ldr	r3, [pc, #88]	; (800650c <__sfp+0x88>)
 80064b4:	60e3      	str	r3, [r4, #12]
 80064b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80064ba:	6665      	str	r5, [r4, #100]	; 0x64
 80064bc:	f000 f847 	bl	800654e <__retarget_lock_init_recursive>
 80064c0:	f7ff ff96 	bl	80063f0 <__sfp_lock_release>
 80064c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80064c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80064cc:	6025      	str	r5, [r4, #0]
 80064ce:	61a5      	str	r5, [r4, #24]
 80064d0:	2208      	movs	r2, #8
 80064d2:	4629      	mov	r1, r5
 80064d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80064d8:	f7ff f92c 	bl	8005734 <memset>
 80064dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064e4:	4620      	mov	r0, r4
 80064e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064e8:	3468      	adds	r4, #104	; 0x68
 80064ea:	e7d9      	b.n	80064a0 <__sfp+0x1c>
 80064ec:	2104      	movs	r1, #4
 80064ee:	4638      	mov	r0, r7
 80064f0:	f7ff ff62 	bl	80063b8 <__sfmoreglue>
 80064f4:	4604      	mov	r4, r0
 80064f6:	6030      	str	r0, [r6, #0]
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d1d5      	bne.n	80064a8 <__sfp+0x24>
 80064fc:	f7ff ff78 	bl	80063f0 <__sfp_lock_release>
 8006500:	230c      	movs	r3, #12
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	e7ee      	b.n	80064e4 <__sfp+0x60>
 8006506:	bf00      	nop
 8006508:	08007648 	.word	0x08007648
 800650c:	ffff0001 	.word	0xffff0001

08006510 <_fwalk_reent>:
 8006510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006514:	4606      	mov	r6, r0
 8006516:	4688      	mov	r8, r1
 8006518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800651c:	2700      	movs	r7, #0
 800651e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006522:	f1b9 0901 	subs.w	r9, r9, #1
 8006526:	d505      	bpl.n	8006534 <_fwalk_reent+0x24>
 8006528:	6824      	ldr	r4, [r4, #0]
 800652a:	2c00      	cmp	r4, #0
 800652c:	d1f7      	bne.n	800651e <_fwalk_reent+0xe>
 800652e:	4638      	mov	r0, r7
 8006530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006534:	89ab      	ldrh	r3, [r5, #12]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d907      	bls.n	800654a <_fwalk_reent+0x3a>
 800653a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800653e:	3301      	adds	r3, #1
 8006540:	d003      	beq.n	800654a <_fwalk_reent+0x3a>
 8006542:	4629      	mov	r1, r5
 8006544:	4630      	mov	r0, r6
 8006546:	47c0      	blx	r8
 8006548:	4307      	orrs	r7, r0
 800654a:	3568      	adds	r5, #104	; 0x68
 800654c:	e7e9      	b.n	8006522 <_fwalk_reent+0x12>

0800654e <__retarget_lock_init_recursive>:
 800654e:	4770      	bx	lr

08006550 <__retarget_lock_acquire_recursive>:
 8006550:	4770      	bx	lr

08006552 <__retarget_lock_release_recursive>:
 8006552:	4770      	bx	lr

08006554 <__swhatbuf_r>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	460e      	mov	r6, r1
 8006558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800655c:	2900      	cmp	r1, #0
 800655e:	b096      	sub	sp, #88	; 0x58
 8006560:	4614      	mov	r4, r2
 8006562:	461d      	mov	r5, r3
 8006564:	da08      	bge.n	8006578 <__swhatbuf_r+0x24>
 8006566:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	602a      	str	r2, [r5, #0]
 800656e:	061a      	lsls	r2, r3, #24
 8006570:	d410      	bmi.n	8006594 <__swhatbuf_r+0x40>
 8006572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006576:	e00e      	b.n	8006596 <__swhatbuf_r+0x42>
 8006578:	466a      	mov	r2, sp
 800657a:	f000 f8fb 	bl	8006774 <_fstat_r>
 800657e:	2800      	cmp	r0, #0
 8006580:	dbf1      	blt.n	8006566 <__swhatbuf_r+0x12>
 8006582:	9a01      	ldr	r2, [sp, #4]
 8006584:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006588:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800658c:	425a      	negs	r2, r3
 800658e:	415a      	adcs	r2, r3
 8006590:	602a      	str	r2, [r5, #0]
 8006592:	e7ee      	b.n	8006572 <__swhatbuf_r+0x1e>
 8006594:	2340      	movs	r3, #64	; 0x40
 8006596:	2000      	movs	r0, #0
 8006598:	6023      	str	r3, [r4, #0]
 800659a:	b016      	add	sp, #88	; 0x58
 800659c:	bd70      	pop	{r4, r5, r6, pc}
	...

080065a0 <__smakebuf_r>:
 80065a0:	898b      	ldrh	r3, [r1, #12]
 80065a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065a4:	079d      	lsls	r5, r3, #30
 80065a6:	4606      	mov	r6, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	d507      	bpl.n	80065bc <__smakebuf_r+0x1c>
 80065ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065b0:	6023      	str	r3, [r4, #0]
 80065b2:	6123      	str	r3, [r4, #16]
 80065b4:	2301      	movs	r3, #1
 80065b6:	6163      	str	r3, [r4, #20]
 80065b8:	b002      	add	sp, #8
 80065ba:	bd70      	pop	{r4, r5, r6, pc}
 80065bc:	ab01      	add	r3, sp, #4
 80065be:	466a      	mov	r2, sp
 80065c0:	f7ff ffc8 	bl	8006554 <__swhatbuf_r>
 80065c4:	9900      	ldr	r1, [sp, #0]
 80065c6:	4605      	mov	r5, r0
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7ff f927 	bl	800581c <_malloc_r>
 80065ce:	b948      	cbnz	r0, 80065e4 <__smakebuf_r+0x44>
 80065d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065d4:	059a      	lsls	r2, r3, #22
 80065d6:	d4ef      	bmi.n	80065b8 <__smakebuf_r+0x18>
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	f043 0302 	orr.w	r3, r3, #2
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	e7e3      	b.n	80065ac <__smakebuf_r+0xc>
 80065e4:	4b0d      	ldr	r3, [pc, #52]	; (800661c <__smakebuf_r+0x7c>)
 80065e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	6020      	str	r0, [r4, #0]
 80065ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	9b00      	ldr	r3, [sp, #0]
 80065f4:	6163      	str	r3, [r4, #20]
 80065f6:	9b01      	ldr	r3, [sp, #4]
 80065f8:	6120      	str	r0, [r4, #16]
 80065fa:	b15b      	cbz	r3, 8006614 <__smakebuf_r+0x74>
 80065fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006600:	4630      	mov	r0, r6
 8006602:	f000 f8c9 	bl	8006798 <_isatty_r>
 8006606:	b128      	cbz	r0, 8006614 <__smakebuf_r+0x74>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	f023 0303 	bic.w	r3, r3, #3
 800660e:	f043 0301 	orr.w	r3, r3, #1
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	89a0      	ldrh	r0, [r4, #12]
 8006616:	4305      	orrs	r5, r0
 8006618:	81a5      	strh	r5, [r4, #12]
 800661a:	e7cd      	b.n	80065b8 <__smakebuf_r+0x18>
 800661c:	080063ad 	.word	0x080063ad

08006620 <_raise_r>:
 8006620:	291f      	cmp	r1, #31
 8006622:	b538      	push	{r3, r4, r5, lr}
 8006624:	4604      	mov	r4, r0
 8006626:	460d      	mov	r5, r1
 8006628:	d904      	bls.n	8006634 <_raise_r+0x14>
 800662a:	2316      	movs	r3, #22
 800662c:	6003      	str	r3, [r0, #0]
 800662e:	f04f 30ff 	mov.w	r0, #4294967295
 8006632:	bd38      	pop	{r3, r4, r5, pc}
 8006634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006636:	b112      	cbz	r2, 800663e <_raise_r+0x1e>
 8006638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800663c:	b94b      	cbnz	r3, 8006652 <_raise_r+0x32>
 800663e:	4620      	mov	r0, r4
 8006640:	f000 f830 	bl	80066a4 <_getpid_r>
 8006644:	462a      	mov	r2, r5
 8006646:	4601      	mov	r1, r0
 8006648:	4620      	mov	r0, r4
 800664a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800664e:	f000 b817 	b.w	8006680 <_kill_r>
 8006652:	2b01      	cmp	r3, #1
 8006654:	d00a      	beq.n	800666c <_raise_r+0x4c>
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	d103      	bne.n	8006662 <_raise_r+0x42>
 800665a:	2316      	movs	r3, #22
 800665c:	6003      	str	r3, [r0, #0]
 800665e:	2001      	movs	r0, #1
 8006660:	e7e7      	b.n	8006632 <_raise_r+0x12>
 8006662:	2400      	movs	r4, #0
 8006664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006668:	4628      	mov	r0, r5
 800666a:	4798      	blx	r3
 800666c:	2000      	movs	r0, #0
 800666e:	e7e0      	b.n	8006632 <_raise_r+0x12>

08006670 <raise>:
 8006670:	4b02      	ldr	r3, [pc, #8]	; (800667c <raise+0xc>)
 8006672:	4601      	mov	r1, r0
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	f7ff bfd3 	b.w	8006620 <_raise_r>
 800667a:	bf00      	nop
 800667c:	20000014 	.word	0x20000014

08006680 <_kill_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4d07      	ldr	r5, [pc, #28]	; (80066a0 <_kill_r+0x20>)
 8006684:	2300      	movs	r3, #0
 8006686:	4604      	mov	r4, r0
 8006688:	4608      	mov	r0, r1
 800668a:	4611      	mov	r1, r2
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	f7fd f873 	bl	8003778 <_kill>
 8006692:	1c43      	adds	r3, r0, #1
 8006694:	d102      	bne.n	800669c <_kill_r+0x1c>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	b103      	cbz	r3, 800669c <_kill_r+0x1c>
 800669a:	6023      	str	r3, [r4, #0]
 800669c:	bd38      	pop	{r3, r4, r5, pc}
 800669e:	bf00      	nop
 80066a0:	20000208 	.word	0x20000208

080066a4 <_getpid_r>:
 80066a4:	f7fd b860 	b.w	8003768 <_getpid>

080066a8 <__sread>:
 80066a8:	b510      	push	{r4, lr}
 80066aa:	460c      	mov	r4, r1
 80066ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b0:	f000 f894 	bl	80067dc <_read_r>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	bfab      	itete	ge
 80066b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80066ba:	89a3      	ldrhlt	r3, [r4, #12]
 80066bc:	181b      	addge	r3, r3, r0
 80066be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80066c2:	bfac      	ite	ge
 80066c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80066c6:	81a3      	strhlt	r3, [r4, #12]
 80066c8:	bd10      	pop	{r4, pc}

080066ca <__swrite>:
 80066ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ce:	461f      	mov	r7, r3
 80066d0:	898b      	ldrh	r3, [r1, #12]
 80066d2:	05db      	lsls	r3, r3, #23
 80066d4:	4605      	mov	r5, r0
 80066d6:	460c      	mov	r4, r1
 80066d8:	4616      	mov	r6, r2
 80066da:	d505      	bpl.n	80066e8 <__swrite+0x1e>
 80066dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e0:	2302      	movs	r3, #2
 80066e2:	2200      	movs	r2, #0
 80066e4:	f000 f868 	bl	80067b8 <_lseek_r>
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066f2:	81a3      	strh	r3, [r4, #12]
 80066f4:	4632      	mov	r2, r6
 80066f6:	463b      	mov	r3, r7
 80066f8:	4628      	mov	r0, r5
 80066fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066fe:	f000 b817 	b.w	8006730 <_write_r>

08006702 <__sseek>:
 8006702:	b510      	push	{r4, lr}
 8006704:	460c      	mov	r4, r1
 8006706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800670a:	f000 f855 	bl	80067b8 <_lseek_r>
 800670e:	1c43      	adds	r3, r0, #1
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	bf15      	itete	ne
 8006714:	6560      	strne	r0, [r4, #84]	; 0x54
 8006716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800671a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800671e:	81a3      	strheq	r3, [r4, #12]
 8006720:	bf18      	it	ne
 8006722:	81a3      	strhne	r3, [r4, #12]
 8006724:	bd10      	pop	{r4, pc}

08006726 <__sclose>:
 8006726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800672a:	f000 b813 	b.w	8006754 <_close_r>
	...

08006730 <_write_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	4d07      	ldr	r5, [pc, #28]	; (8006750 <_write_r+0x20>)
 8006734:	4604      	mov	r4, r0
 8006736:	4608      	mov	r0, r1
 8006738:	4611      	mov	r1, r2
 800673a:	2200      	movs	r2, #0
 800673c:	602a      	str	r2, [r5, #0]
 800673e:	461a      	mov	r2, r3
 8006740:	f7fd f851 	bl	80037e6 <_write>
 8006744:	1c43      	adds	r3, r0, #1
 8006746:	d102      	bne.n	800674e <_write_r+0x1e>
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	b103      	cbz	r3, 800674e <_write_r+0x1e>
 800674c:	6023      	str	r3, [r4, #0]
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20000208 	.word	0x20000208

08006754 <_close_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	4d06      	ldr	r5, [pc, #24]	; (8006770 <_close_r+0x1c>)
 8006758:	2300      	movs	r3, #0
 800675a:	4604      	mov	r4, r0
 800675c:	4608      	mov	r0, r1
 800675e:	602b      	str	r3, [r5, #0]
 8006760:	f7fd f85d 	bl	800381e <_close>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_close_r+0x1a>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_close_r+0x1a>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	20000208 	.word	0x20000208

08006774 <_fstat_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d07      	ldr	r5, [pc, #28]	; (8006794 <_fstat_r+0x20>)
 8006778:	2300      	movs	r3, #0
 800677a:	4604      	mov	r4, r0
 800677c:	4608      	mov	r0, r1
 800677e:	4611      	mov	r1, r2
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	f7fd f858 	bl	8003836 <_fstat>
 8006786:	1c43      	adds	r3, r0, #1
 8006788:	d102      	bne.n	8006790 <_fstat_r+0x1c>
 800678a:	682b      	ldr	r3, [r5, #0]
 800678c:	b103      	cbz	r3, 8006790 <_fstat_r+0x1c>
 800678e:	6023      	str	r3, [r4, #0]
 8006790:	bd38      	pop	{r3, r4, r5, pc}
 8006792:	bf00      	nop
 8006794:	20000208 	.word	0x20000208

08006798 <_isatty_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	4d06      	ldr	r5, [pc, #24]	; (80067b4 <_isatty_r+0x1c>)
 800679c:	2300      	movs	r3, #0
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	602b      	str	r3, [r5, #0]
 80067a4:	f7fd f857 	bl	8003856 <_isatty>
 80067a8:	1c43      	adds	r3, r0, #1
 80067aa:	d102      	bne.n	80067b2 <_isatty_r+0x1a>
 80067ac:	682b      	ldr	r3, [r5, #0]
 80067ae:	b103      	cbz	r3, 80067b2 <_isatty_r+0x1a>
 80067b0:	6023      	str	r3, [r4, #0]
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	20000208 	.word	0x20000208

080067b8 <_lseek_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d07      	ldr	r5, [pc, #28]	; (80067d8 <_lseek_r+0x20>)
 80067bc:	4604      	mov	r4, r0
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	2200      	movs	r2, #0
 80067c4:	602a      	str	r2, [r5, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	f7fd f850 	bl	800386c <_lseek>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d102      	bne.n	80067d6 <_lseek_r+0x1e>
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	b103      	cbz	r3, 80067d6 <_lseek_r+0x1e>
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	bd38      	pop	{r3, r4, r5, pc}
 80067d8:	20000208 	.word	0x20000208

080067dc <_read_r>:
 80067dc:	b538      	push	{r3, r4, r5, lr}
 80067de:	4d07      	ldr	r5, [pc, #28]	; (80067fc <_read_r+0x20>)
 80067e0:	4604      	mov	r4, r0
 80067e2:	4608      	mov	r0, r1
 80067e4:	4611      	mov	r1, r2
 80067e6:	2200      	movs	r2, #0
 80067e8:	602a      	str	r2, [r5, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	f7fc ffde 	bl	80037ac <_read>
 80067f0:	1c43      	adds	r3, r0, #1
 80067f2:	d102      	bne.n	80067fa <_read_r+0x1e>
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	b103      	cbz	r3, 80067fa <_read_r+0x1e>
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	bd38      	pop	{r3, r4, r5, pc}
 80067fc:	20000208 	.word	0x20000208

08006800 <ceil>:
 8006800:	ec51 0b10 	vmov	r0, r1, d0
 8006804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006808:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800680c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006810:	2e13      	cmp	r6, #19
 8006812:	ee10 5a10 	vmov	r5, s0
 8006816:	ee10 8a10 	vmov	r8, s0
 800681a:	460c      	mov	r4, r1
 800681c:	dc30      	bgt.n	8006880 <ceil+0x80>
 800681e:	2e00      	cmp	r6, #0
 8006820:	da12      	bge.n	8006848 <ceil+0x48>
 8006822:	a335      	add	r3, pc, #212	; (adr r3, 80068f8 <ceil+0xf8>)
 8006824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006828:	f7f9 fd38 	bl	800029c <__adddf3>
 800682c:	2200      	movs	r2, #0
 800682e:	2300      	movs	r3, #0
 8006830:	f7fa f97a 	bl	8000b28 <__aeabi_dcmpgt>
 8006834:	b128      	cbz	r0, 8006842 <ceil+0x42>
 8006836:	2c00      	cmp	r4, #0
 8006838:	db55      	blt.n	80068e6 <ceil+0xe6>
 800683a:	432c      	orrs	r4, r5
 800683c:	d057      	beq.n	80068ee <ceil+0xee>
 800683e:	4c30      	ldr	r4, [pc, #192]	; (8006900 <ceil+0x100>)
 8006840:	2500      	movs	r5, #0
 8006842:	4621      	mov	r1, r4
 8006844:	4628      	mov	r0, r5
 8006846:	e025      	b.n	8006894 <ceil+0x94>
 8006848:	4f2e      	ldr	r7, [pc, #184]	; (8006904 <ceil+0x104>)
 800684a:	4137      	asrs	r7, r6
 800684c:	ea01 0307 	and.w	r3, r1, r7
 8006850:	4303      	orrs	r3, r0
 8006852:	d01f      	beq.n	8006894 <ceil+0x94>
 8006854:	a328      	add	r3, pc, #160	; (adr r3, 80068f8 <ceil+0xf8>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7f9 fd1f 	bl	800029c <__adddf3>
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	f7fa f961 	bl	8000b28 <__aeabi_dcmpgt>
 8006866:	2800      	cmp	r0, #0
 8006868:	d0eb      	beq.n	8006842 <ceil+0x42>
 800686a:	2c00      	cmp	r4, #0
 800686c:	bfc2      	ittt	gt
 800686e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8006872:	fa43 f606 	asrgt.w	r6, r3, r6
 8006876:	19a4      	addgt	r4, r4, r6
 8006878:	ea24 0407 	bic.w	r4, r4, r7
 800687c:	2500      	movs	r5, #0
 800687e:	e7e0      	b.n	8006842 <ceil+0x42>
 8006880:	2e33      	cmp	r6, #51	; 0x33
 8006882:	dd0b      	ble.n	800689c <ceil+0x9c>
 8006884:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006888:	d104      	bne.n	8006894 <ceil+0x94>
 800688a:	ee10 2a10 	vmov	r2, s0
 800688e:	460b      	mov	r3, r1
 8006890:	f7f9 fd04 	bl	800029c <__adddf3>
 8006894:	ec41 0b10 	vmov	d0, r0, r1
 8006898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800689c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80068a0:	f04f 33ff 	mov.w	r3, #4294967295
 80068a4:	fa23 f707 	lsr.w	r7, r3, r7
 80068a8:	4207      	tst	r7, r0
 80068aa:	d0f3      	beq.n	8006894 <ceil+0x94>
 80068ac:	a312      	add	r3, pc, #72	; (adr r3, 80068f8 <ceil+0xf8>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f7f9 fcf3 	bl	800029c <__adddf3>
 80068b6:	2200      	movs	r2, #0
 80068b8:	2300      	movs	r3, #0
 80068ba:	f7fa f935 	bl	8000b28 <__aeabi_dcmpgt>
 80068be:	2800      	cmp	r0, #0
 80068c0:	d0bf      	beq.n	8006842 <ceil+0x42>
 80068c2:	2c00      	cmp	r4, #0
 80068c4:	dd02      	ble.n	80068cc <ceil+0xcc>
 80068c6:	2e14      	cmp	r6, #20
 80068c8:	d103      	bne.n	80068d2 <ceil+0xd2>
 80068ca:	3401      	adds	r4, #1
 80068cc:	ea25 0507 	bic.w	r5, r5, r7
 80068d0:	e7b7      	b.n	8006842 <ceil+0x42>
 80068d2:	2301      	movs	r3, #1
 80068d4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80068d8:	fa03 f606 	lsl.w	r6, r3, r6
 80068dc:	4435      	add	r5, r6
 80068de:	4545      	cmp	r5, r8
 80068e0:	bf38      	it	cc
 80068e2:	18e4      	addcc	r4, r4, r3
 80068e4:	e7f2      	b.n	80068cc <ceil+0xcc>
 80068e6:	2500      	movs	r5, #0
 80068e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80068ec:	e7a9      	b.n	8006842 <ceil+0x42>
 80068ee:	4625      	mov	r5, r4
 80068f0:	e7a7      	b.n	8006842 <ceil+0x42>
 80068f2:	bf00      	nop
 80068f4:	f3af 8000 	nop.w
 80068f8:	8800759c 	.word	0x8800759c
 80068fc:	7e37e43c 	.word	0x7e37e43c
 8006900:	3ff00000 	.word	0x3ff00000
 8006904:	000fffff 	.word	0x000fffff

08006908 <floor>:
 8006908:	ec51 0b10 	vmov	r0, r1, d0
 800690c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006910:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006914:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006918:	2e13      	cmp	r6, #19
 800691a:	ee10 5a10 	vmov	r5, s0
 800691e:	ee10 8a10 	vmov	r8, s0
 8006922:	460c      	mov	r4, r1
 8006924:	dc32      	bgt.n	800698c <floor+0x84>
 8006926:	2e00      	cmp	r6, #0
 8006928:	da14      	bge.n	8006954 <floor+0x4c>
 800692a:	a333      	add	r3, pc, #204	; (adr r3, 80069f8 <floor+0xf0>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fcb4 	bl	800029c <__adddf3>
 8006934:	2200      	movs	r2, #0
 8006936:	2300      	movs	r3, #0
 8006938:	f7fa f8f6 	bl	8000b28 <__aeabi_dcmpgt>
 800693c:	b138      	cbz	r0, 800694e <floor+0x46>
 800693e:	2c00      	cmp	r4, #0
 8006940:	da57      	bge.n	80069f2 <floor+0xea>
 8006942:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006946:	431d      	orrs	r5, r3
 8006948:	d001      	beq.n	800694e <floor+0x46>
 800694a:	4c2d      	ldr	r4, [pc, #180]	; (8006a00 <floor+0xf8>)
 800694c:	2500      	movs	r5, #0
 800694e:	4621      	mov	r1, r4
 8006950:	4628      	mov	r0, r5
 8006952:	e025      	b.n	80069a0 <floor+0x98>
 8006954:	4f2b      	ldr	r7, [pc, #172]	; (8006a04 <floor+0xfc>)
 8006956:	4137      	asrs	r7, r6
 8006958:	ea01 0307 	and.w	r3, r1, r7
 800695c:	4303      	orrs	r3, r0
 800695e:	d01f      	beq.n	80069a0 <floor+0x98>
 8006960:	a325      	add	r3, pc, #148	; (adr r3, 80069f8 <floor+0xf0>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f7f9 fc99 	bl	800029c <__adddf3>
 800696a:	2200      	movs	r2, #0
 800696c:	2300      	movs	r3, #0
 800696e:	f7fa f8db 	bl	8000b28 <__aeabi_dcmpgt>
 8006972:	2800      	cmp	r0, #0
 8006974:	d0eb      	beq.n	800694e <floor+0x46>
 8006976:	2c00      	cmp	r4, #0
 8006978:	bfbe      	ittt	lt
 800697a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800697e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006982:	19a4      	addlt	r4, r4, r6
 8006984:	ea24 0407 	bic.w	r4, r4, r7
 8006988:	2500      	movs	r5, #0
 800698a:	e7e0      	b.n	800694e <floor+0x46>
 800698c:	2e33      	cmp	r6, #51	; 0x33
 800698e:	dd0b      	ble.n	80069a8 <floor+0xa0>
 8006990:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006994:	d104      	bne.n	80069a0 <floor+0x98>
 8006996:	ee10 2a10 	vmov	r2, s0
 800699a:	460b      	mov	r3, r1
 800699c:	f7f9 fc7e 	bl	800029c <__adddf3>
 80069a0:	ec41 0b10 	vmov	d0, r0, r1
 80069a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80069ac:	f04f 33ff 	mov.w	r3, #4294967295
 80069b0:	fa23 f707 	lsr.w	r7, r3, r7
 80069b4:	4207      	tst	r7, r0
 80069b6:	d0f3      	beq.n	80069a0 <floor+0x98>
 80069b8:	a30f      	add	r3, pc, #60	; (adr r3, 80069f8 <floor+0xf0>)
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	f7f9 fc6d 	bl	800029c <__adddf3>
 80069c2:	2200      	movs	r2, #0
 80069c4:	2300      	movs	r3, #0
 80069c6:	f7fa f8af 	bl	8000b28 <__aeabi_dcmpgt>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d0bf      	beq.n	800694e <floor+0x46>
 80069ce:	2c00      	cmp	r4, #0
 80069d0:	da02      	bge.n	80069d8 <floor+0xd0>
 80069d2:	2e14      	cmp	r6, #20
 80069d4:	d103      	bne.n	80069de <floor+0xd6>
 80069d6:	3401      	adds	r4, #1
 80069d8:	ea25 0507 	bic.w	r5, r5, r7
 80069dc:	e7b7      	b.n	800694e <floor+0x46>
 80069de:	2301      	movs	r3, #1
 80069e0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80069e4:	fa03 f606 	lsl.w	r6, r3, r6
 80069e8:	4435      	add	r5, r6
 80069ea:	4545      	cmp	r5, r8
 80069ec:	bf38      	it	cc
 80069ee:	18e4      	addcc	r4, r4, r3
 80069f0:	e7f2      	b.n	80069d8 <floor+0xd0>
 80069f2:	2500      	movs	r5, #0
 80069f4:	462c      	mov	r4, r5
 80069f6:	e7aa      	b.n	800694e <floor+0x46>
 80069f8:	8800759c 	.word	0x8800759c
 80069fc:	7e37e43c 	.word	0x7e37e43c
 8006a00:	bff00000 	.word	0xbff00000
 8006a04:	000fffff 	.word	0x000fffff

08006a08 <_init>:
 8006a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a0a:	bf00      	nop
 8006a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0e:	bc08      	pop	{r3}
 8006a10:	469e      	mov	lr, r3
 8006a12:	4770      	bx	lr

08006a14 <_fini>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr
