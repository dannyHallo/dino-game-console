
Gameing101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d20  08006d88  08006d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007aa8  08007aa8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007aa8  08007aa8  00017aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ab0  08007ab0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ab0  08007ab0  00017ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ab4  08007ab4  00017ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000078  08007b30  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08007b30  00020214  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e171  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002505  00000000  00000000  0002e219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  00030720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d16  00000000  00000000  000321d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8ba  00000000  00000000  00049ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f67f  00000000  00000000  000597a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8e1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004588  00000000  00000000  000e8e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d70 	.word	0x08006d70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08006d70 	.word	0x08006d70

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b974 	b.w	8000f6c <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468e      	mov	lr, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d14d      	bne.n	8000d46 <__udivmoddi4+0xaa>
 8000caa:	428a      	cmp	r2, r1
 8000cac:	4694      	mov	ip, r2
 8000cae:	d969      	bls.n	8000d84 <__udivmoddi4+0xe8>
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	b152      	cbz	r2, 8000ccc <__udivmoddi4+0x30>
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	f1c2 0120 	rsb	r1, r2, #32
 8000cbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cca:	4094      	lsls	r4, r2
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	0c21      	lsrs	r1, r4, #16
 8000cd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd6:	fa1f f78c 	uxth.w	r7, ip
 8000cda:	fb08 e316 	mls	r3, r8, r6, lr
 8000cde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ce2:	fb06 f107 	mul.w	r1, r6, r7
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	d90a      	bls.n	8000d00 <__udivmoddi4+0x64>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf2:	f080 811f 	bcs.w	8000f34 <__udivmoddi4+0x298>
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	f240 811c 	bls.w	8000f34 <__udivmoddi4+0x298>
 8000cfc:	3e02      	subs	r6, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d08:	fb08 3310 	mls	r3, r8, r0, r3
 8000d0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d10:	fb00 f707 	mul.w	r7, r0, r7
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x92>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d20:	f080 810a 	bcs.w	8000f38 <__udivmoddi4+0x29c>
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	f240 8107 	bls.w	8000f38 <__udivmoddi4+0x29c>
 8000d2a:	4464      	add	r4, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	1be4      	subs	r4, r4, r7
 8000d34:	2600      	movs	r6, #0
 8000d36:	b11d      	cbz	r5, 8000d40 <__udivmoddi4+0xa4>
 8000d38:	40d4      	lsrs	r4, r2
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0xc2>
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	f000 80ef 	beq.w	8000f2e <__udivmoddi4+0x292>
 8000d50:	2600      	movs	r6, #0
 8000d52:	e9c5 0100 	strd	r0, r1, [r5]
 8000d56:	4630      	mov	r0, r6
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	fab3 f683 	clz	r6, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d14a      	bne.n	8000dfc <__udivmoddi4+0x160>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xd4>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 80f9 	bhi.w	8000f62 <__udivmoddi4+0x2c6>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb61 0303 	sbc.w	r3, r1, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	469e      	mov	lr, r3
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e0      	beq.n	8000d40 <__udivmoddi4+0xa4>
 8000d7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d82:	e7dd      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000d84:	b902      	cbnz	r2, 8000d88 <__udivmoddi4+0xec>
 8000d86:	deff      	udf	#255	; 0xff
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	f040 8092 	bne.w	8000eb6 <__udivmoddi4+0x21a>
 8000d92:	eba1 010c 	sub.w	r1, r1, ip
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	2601      	movs	r6, #1
 8000da0:	0c20      	lsrs	r0, r4, #16
 8000da2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da6:	fb07 1113 	mls	r1, r7, r3, r1
 8000daa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dae:	fb0e f003 	mul.w	r0, lr, r3
 8000db2:	4288      	cmp	r0, r1
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x12c>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x12a>
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	f200 80cb 	bhi.w	8000f5c <__udivmoddi4+0x2c0>
 8000dc6:	4643      	mov	r3, r8
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x156>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x154>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f200 80bb 	bhi.w	8000f66 <__udivmoddi4+0x2ca>
 8000df0:	4608      	mov	r0, r1
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x9a>
 8000dfc:	f1c6 0720 	rsb	r7, r6, #32
 8000e00:	40b3      	lsls	r3, r6
 8000e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e12:	431c      	orrs	r4, r3
 8000e14:	40f9      	lsrs	r1, r7
 8000e16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e22:	0c20      	lsrs	r0, r4, #16
 8000e24:	fa1f fe8c 	uxth.w	lr, ip
 8000e28:	fb09 1118 	mls	r1, r9, r8, r1
 8000e2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e30:	fb08 f00e 	mul.w	r0, r8, lr
 8000e34:	4288      	cmp	r0, r1
 8000e36:	fa02 f206 	lsl.w	r2, r2, r6
 8000e3a:	d90b      	bls.n	8000e54 <__udivmoddi4+0x1b8>
 8000e3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e44:	f080 8088 	bcs.w	8000f58 <__udivmoddi4+0x2bc>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f240 8085 	bls.w	8000f58 <__udivmoddi4+0x2bc>
 8000e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e52:	4461      	add	r1, ip
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e68:	458e      	cmp	lr, r1
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x1e2>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e74:	d26c      	bcs.n	8000f50 <__udivmoddi4+0x2b4>
 8000e76:	458e      	cmp	lr, r1
 8000e78:	d96a      	bls.n	8000f50 <__udivmoddi4+0x2b4>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4461      	add	r1, ip
 8000e7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e82:	fba0 9402 	umull	r9, r4, r0, r2
 8000e86:	eba1 010e 	sub.w	r1, r1, lr
 8000e8a:	42a1      	cmp	r1, r4
 8000e8c:	46c8      	mov	r8, r9
 8000e8e:	46a6      	mov	lr, r4
 8000e90:	d356      	bcc.n	8000f40 <__udivmoddi4+0x2a4>
 8000e92:	d053      	beq.n	8000f3c <__udivmoddi4+0x2a0>
 8000e94:	b15d      	cbz	r5, 8000eae <__udivmoddi4+0x212>
 8000e96:	ebb3 0208 	subs.w	r2, r3, r8
 8000e9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ea2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea6:	40f1      	lsrs	r1, r6
 8000ea8:	431f      	orrs	r7, r3
 8000eaa:	e9c5 7100 	strd	r7, r1, [r5]
 8000eae:	2600      	movs	r6, #0
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	f1c2 0320 	rsb	r3, r2, #32
 8000eba:	40d8      	lsrs	r0, r3
 8000ebc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec4:	4091      	lsls	r1, r2
 8000ec6:	4301      	orrs	r1, r0
 8000ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed8:	0c0b      	lsrs	r3, r1, #16
 8000eda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ede:	fb00 f60e 	mul.w	r6, r0, lr
 8000ee2:	429e      	cmp	r6, r3
 8000ee4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x260>
 8000eea:	eb1c 0303 	adds.w	r3, ip, r3
 8000eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef2:	d22f      	bcs.n	8000f54 <__udivmoddi4+0x2b8>
 8000ef4:	429e      	cmp	r6, r3
 8000ef6:	d92d      	bls.n	8000f54 <__udivmoddi4+0x2b8>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4463      	add	r3, ip
 8000efc:	1b9b      	subs	r3, r3, r6
 8000efe:	b289      	uxth	r1, r1
 8000f00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f04:	fb07 3316 	mls	r3, r7, r6, r3
 8000f08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x28a>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f1c:	d216      	bcs.n	8000f4c <__udivmoddi4+0x2b0>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d914      	bls.n	8000f4c <__udivmoddi4+0x2b0>
 8000f22:	3e02      	subs	r6, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f2c:	e738      	b.n	8000da0 <__udivmoddi4+0x104>
 8000f2e:	462e      	mov	r6, r5
 8000f30:	4628      	mov	r0, r5
 8000f32:	e705      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000f34:	4606      	mov	r6, r0
 8000f36:	e6e3      	b.n	8000d00 <__udivmoddi4+0x64>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6f8      	b.n	8000d2e <__udivmoddi4+0x92>
 8000f3c:	454b      	cmp	r3, r9
 8000f3e:	d2a9      	bcs.n	8000e94 <__udivmoddi4+0x1f8>
 8000f40:	ebb9 0802 	subs.w	r8, r9, r2
 8000f44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f48:	3801      	subs	r0, #1
 8000f4a:	e7a3      	b.n	8000e94 <__udivmoddi4+0x1f8>
 8000f4c:	4646      	mov	r6, r8
 8000f4e:	e7ea      	b.n	8000f26 <__udivmoddi4+0x28a>
 8000f50:	4620      	mov	r0, r4
 8000f52:	e794      	b.n	8000e7e <__udivmoddi4+0x1e2>
 8000f54:	4640      	mov	r0, r8
 8000f56:	e7d1      	b.n	8000efc <__udivmoddi4+0x260>
 8000f58:	46d0      	mov	r8, sl
 8000f5a:	e77b      	b.n	8000e54 <__udivmoddi4+0x1b8>
 8000f5c:	3b02      	subs	r3, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	e732      	b.n	8000dc8 <__udivmoddi4+0x12c>
 8000f62:	4630      	mov	r0, r6
 8000f64:	e709      	b.n	8000d7a <__udivmoddi4+0xde>
 8000f66:	4464      	add	r4, ip
 8000f68:	3802      	subs	r0, #2
 8000f6a:	e742      	b.n	8000df2 <__udivmoddi4+0x156>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <smallRbit>:
static uint8_t SendBuf[2];

//This buffer holds 1 Character bitmap image (8x8)
//static uint8_t chBuf[8];

uint8_t smallRbit(uint8_t re) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	return (uint8_t) (__RBIT(re) >> 24);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	0e1b      	lsrs	r3, r3, #24
 8000f8a:	b2db      	uxtb	r3, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <modulo>:

int modulo(int x, int N) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	return (x % N + N) % N;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	fb93 f2f2 	sdiv	r2, r3, r2
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	fb01 f202 	mul.w	r2, r1, r2
 8000fb0:	1a9a      	subs	r2, r3, r2
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	fb93 f2f2 	sdiv	r2, r3, r2
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	fb01 f202 	mul.w	r2, r1, r2
 8000fc2:	1a9b      	subs	r3, r3, r2
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LCD_Init>:

// Display Initialization
void LCD_Init(LS013B4DN04 *MemDisp, SPI_HandleTypeDef *Bus,
		GPIO_TypeDef *dispGPIO, uint16_t LCDcs) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	807b      	strh	r3, [r7, #2]

	//Store params into our struct
	MemDisp->Bus = Bus;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	601a      	str	r2, [r3, #0]
	MemDisp->dispGPIO = dispGPIO;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
	MemDisp->LCDcs = LCDcs;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	811a      	strh	r2, [r3, #8]

	DispBuf = malloc(1152);
 8000ff0:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8000ff4:	f004 fd3c 	bl	8005a70 <malloc>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <LCD_Init+0xb4>)
 8000ffe:	601a      	str	r2, [r3, #0]
	DispBuf2 = malloc(1152);
 8001000:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8001004:	f004 fd34 	bl	8005a70 <malloc>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <LCD_Init+0xb8>)
 800100e:	601a      	str	r2, [r3, #0]
	TextBuf = malloc(8);
 8001010:	2008      	movs	r0, #8
 8001012:	f004 fd2d 	bl	8005a70 <malloc>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <LCD_Init+0xbc>)
 800101c:	601a      	str	r2, [r3, #0]

	memset(DispBuf, 0x00, 1152);
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <LCD_Init+0xb4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f004 fd37 	bl	8005a9c <memset>
	memset(DispBuf2, 0x00, 1152);
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <LCD_Init+0xb8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f004 fd2f 	bl	8005a9c <memset>
	memset(TextBuf, 0x00, 1152);
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <LCD_Init+0xbc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f004 fd27 	bl	8005a9c <memset>

	//At lease 3 + 13 clock is needed for Display clear (16 Clock = 8x2 bit = 2 byte)
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6858      	ldr	r0, [r3, #4]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	891b      	ldrh	r3, [r3, #8]
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	f003 f971 	bl	8004340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to data sheet
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	2396      	movs	r3, #150	; 0x96
 8001064:	2202      	movs	r2, #2
 8001066:	490a      	ldr	r1, [pc, #40]	; (8001090 <LCD_Init+0xc0>)
 8001068:	f003 fe8b 	bl	8004d82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6858      	ldr	r0, [r3, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	891b      	ldrh	r3, [r3, #8]
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	f003 f962 	bl	8004340 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000098 	.word	0x20000098
 8001088:	2000009c 	.word	0x2000009c
 800108c:	200000a0 	.word	0x200000a0
 8001090:	20000000 	.word	0x20000000

08001094 <LCD_UpdateFull>:

// Display update (Transmit data)
void LCD_UpdateFull(LS013B4DN04 *MemDisp) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <LCD_UpdateFull+0xd0>)
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <LCD_UpdateFull+0xd4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010aa:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010b8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	891b      	ldrh	r3, [r3, #8]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	f003 f93b 	bl	8004340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	2396      	movs	r3, #150	; 0x96
 80010d0:	2201      	movs	r2, #1
 80010d2:	4924      	ldr	r1, [pc, #144]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010d4:	f003 fe55 	bl	8004d82 <HAL_SPI_Transmit>

	for (uint8_t row = 0; row < 96; row++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e02b      	b.n	8001136 <LCD_UpdateFull+0xa2>
		SendBuf[1] = smallRbit(row + 1); // counting from row number 1 to row number 96
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff43 	bl	8000f70 <smallRbit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010f0:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	491d      	ldr	r1, [pc, #116]	; (800116c <LCD_UpdateFull+0xd8>)
 80010f8:	2396      	movs	r3, #150	; 0x96
 80010fa:	2201      	movs	r2, #1
 80010fc:	f003 fe41 	bl	8004d82 <HAL_SPI_Transmit>

		uint16_t offset = row * 12;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	0052      	lsls	r2, r2, #1
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	81bb      	strh	r3, [r7, #12]
		HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <LCD_UpdateFull+0xdc>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	18d1      	adds	r1, r2, r3
 800111a:	2396      	movs	r3, #150	; 0x96
 800111c:	220c      	movs	r2, #12
 800111e:	f003 fe30 	bl	8004d82 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	2396      	movs	r3, #150	; 0x96
 8001128:	2201      	movs	r2, #1
 800112a:	4912      	ldr	r1, [pc, #72]	; (8001174 <LCD_UpdateFull+0xe0>)
 800112c:	f003 fe29 	bl	8004d82 <HAL_SPI_Transmit>
	for (uint8_t row = 0; row < 96; row++) {
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3301      	adds	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b5f      	cmp	r3, #95	; 0x5f
 800113a:	d9d0      	bls.n	80010de <LCD_UpdateFull+0x4a>
	}

	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	2396      	movs	r3, #150	; 0x96
 8001142:	2201      	movs	r2, #1
 8001144:	490b      	ldr	r1, [pc, #44]	; (8001174 <LCD_UpdateFull+0xe0>)
 8001146:	f003 fe1c 	bl	8004d82 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6858      	ldr	r0, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	891b      	ldrh	r3, [r3, #8]
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	f003 f8f3 	bl	8004340 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000a4 	.word	0x200000a4
 8001168:	20000004 	.word	0x20000004
 800116c:	200000a5 	.word	0x200000a5
 8001170:	20000098 	.word	0x20000098
 8001174:	20000094 	.word	0x20000094

08001178 <LCD_UpdateLine>:

// Display update (Transmit data)
void LCD_UpdateLine(LS013B4DN04 *MemDisp, uint8_t lineNum) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <LCD_UpdateLine+0xa4>)
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <LCD_UpdateLine+0xa8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4313      	orrs	r3, r2
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <LCD_UpdateLine+0xa4>)
 8001192:	701a      	strb	r2, [r3, #0]
//	SendBuf[0] ^= 1 << 6;

	// CS On
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6858      	ldr	r0, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	891b      	ldrh	r3, [r3, #8]
 800119c:	2201      	movs	r2, #1
 800119e:	4619      	mov	r1, r3
 80011a0:	f003 f8ce 	bl	8004340 <HAL_GPIO_WritePin>

	// Command
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	2396      	movs	r3, #150	; 0x96
 80011aa:	2201      	movs	r2, #1
 80011ac:	491b      	ldr	r1, [pc, #108]	; (800121c <LCD_UpdateLine+0xa4>)
 80011ae:	f003 fde8 	bl	8004d82 <HAL_SPI_Transmit>

	// Line num
	SendBuf[1] = smallRbit(lineNum + 1); // counting from row number 1 to row number 96
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	3301      	adds	r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fed9 	bl	8000f70 <smallRbit>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <LCD_UpdateLine+0xa4>)
 80011c4:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	4916      	ldr	r1, [pc, #88]	; (8001224 <LCD_UpdateLine+0xac>)
 80011cc:	2396      	movs	r3, #150	; 0x96
 80011ce:	2201      	movs	r2, #1
 80011d0:	f003 fdd7 	bl	8004d82 <HAL_SPI_Transmit>

	uint16_t offset = lineNum * 12;
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	0052      	lsls	r2, r2, #1
 80011dc:	4413      	add	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6818      	ldr	r0, [r3, #0]
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <LCD_UpdateLine+0xb0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	18d1      	adds	r1, r2, r3
 80011ee:	2396      	movs	r3, #150	; 0x96
 80011f0:	220c      	movs	r2, #12
 80011f2:	f003 fdc6 	bl	8004d82 <HAL_SPI_Transmit>

	// Trailer
	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 2, 150);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6818      	ldr	r0, [r3, #0]
 80011fa:	2396      	movs	r3, #150	; 0x96
 80011fc:	2202      	movs	r2, #2
 80011fe:	490b      	ldr	r1, [pc, #44]	; (800122c <LCD_UpdateLine+0xb4>)
 8001200:	f003 fdbf 	bl	8004d82 <HAL_SPI_Transmit>

	// Cs Off
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6858      	ldr	r0, [r3, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	891b      	ldrh	r3, [r3, #8]
 800120c:	2200      	movs	r2, #0
 800120e:	4619      	mov	r1, r3
 8001210:	f003 f896 	bl	8004340 <HAL_GPIO_WritePin>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200000a4 	.word	0x200000a4
 8001220:	20000004 	.word	0x20000004
 8001224:	200000a5 	.word	0x200000a5
 8001228:	20000098 	.word	0x20000098
 800122c:	20000094 	.word	0x20000094

08001230 <LCD_SaveBuf>:
// Load full pic
void LCD_LoadFull(uint8_t *BMP) {
	memcpy(DispBuf, BMP, 1152);
}

void LCD_SaveBuf() {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	memcpy(DispBuf2, DispBuf, 1152);
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <LCD_SaveBuf+0x1c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a05      	ldr	r2, [pc, #20]	; (8001250 <LCD_SaveBuf+0x20>)
 800123a:	6811      	ldr	r1, [r2, #0]
 800123c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001240:	4618      	mov	r0, r3
 8001242:	f004 fc1d 	bl	8005a80 <memcpy>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000009c 	.word	0x2000009c
 8001250:	20000098 	.word	0x20000098

08001254 <LCD_LoadBuf>:

// Load full pic
void LCD_LoadBuf() {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	memcpy(DispBuf, DispBuf2, 1152);
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <LCD_LoadBuf+0x1c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a05      	ldr	r2, [pc, #20]	; (8001274 <LCD_LoadBuf+0x20>)
 800125e:	6811      	ldr	r1, [r2, #0]
 8001260:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001264:	4618      	mov	r0, r3
 8001266:	f004 fc0b 	bl	8005a80 <memcpy>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000098 	.word	0x20000098
 8001274:	2000009c 	.word	0x2000009c

08001278 <LCD_LoadObjs>:

void LCD_LoadObjs(GameObj *header, uint8_t drawMode, uint8_t repeatMode,
		bool flip) {
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af04      	add	r7, sp, #16
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	4608      	mov	r0, r1
 8001282:	4611      	mov	r1, r2
 8001284:	461a      	mov	r2, r3
 8001286:	4603      	mov	r3, r0
 8001288:	70fb      	strb	r3, [r7, #3]
 800128a:	460b      	mov	r3, r1
 800128c:	70bb      	strb	r3, [r7, #2]
 800128e:	4613      	mov	r3, r2
 8001290:	707b      	strb	r3, [r7, #1]
	GameObj *ptr = header;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

	if (!ptr->full)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	7c1b      	ldrb	r3, [r3, #16]
 800129a:	f083 0301 	eor.w	r3, r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d12c      	bne.n	80012fe <LCD_LoadObjs+0x86>
		return;

	for (;;) {
		LCD_LoadObj(ptr->bmpAsset, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	ed93 7a02 	vldr	s14, [r3, #8]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	7b19      	ldrb	r1, [r3, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	7b5c      	ldrb	r4, [r3, #13]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7bdb      	ldrb	r3, [r3, #15]
 80012c0:	78fd      	ldrb	r5, [r7, #3]
 80012c2:	787a      	ldrb	r2, [r7, #1]
 80012c4:	9202      	str	r2, [sp, #8]
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	78bb      	ldrb	r3, [r7, #2]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	462b      	mov	r3, r5
 80012ce:	4622      	mov	r2, r4
 80012d0:	eef0 0a47 	vmov.f32	s1, s14
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	f000 f818 	bl	800130c <LCD_LoadObj>
				repeatMode, ptr->index, flip);

		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == header)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	7c1b      	ldrb	r3, [r3, #16]
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10a      	bne.n	8001302 <LCD_LoadObjs+0x8a>
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d005      	beq.n	8001302 <LCD_LoadObjs+0x8a>
			return;
		ptr = ptr->next;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	60fb      	str	r3, [r7, #12]
		LCD_LoadObj(ptr->bmpAsset, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 80012fc:	e7d2      	b.n	80012a4 <LCD_LoadObjs+0x2c>
		return;
 80012fe:	bf00      	nop
 8001300:	e000      	b.n	8001304 <LCD_LoadObjs+0x8c>
			return;
 8001302:	bf00      	nop
	}
}
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800130c <LCD_LoadObj>:

void LCD_LoadObj(uint8_t *bmpAsset, float posX, float posY, uint8_t width,
		uint8_t height, uint8_t drawMode, uint8_t repeatMode, uint8_t index,
		bool flip) {
 800130c:	b5b0      	push	{r4, r5, r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	ed87 0a02 	vstr	s0, [r7, #8]
 8001318:	edc7 0a01 	vstr	s1, [r7, #4]
 800131c:	4608      	mov	r0, r1
 800131e:	4611      	mov	r1, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4603      	mov	r3, r0
 8001324:	70fb      	strb	r3, [r7, #3]
 8001326:	460b      	mov	r3, r1
 8001328:	70bb      	strb	r3, [r7, #2]
 800132a:	4613      	mov	r3, r2
 800132c:	707b      	strb	r3, [r7, #1]
	short displayRow;
	short displayRowOffset;

	//Counting from Y origin point to bmpH using for loop
	for (uint8_t y = 0; y < height; y++) {
 800132e:	2300      	movs	r3, #0
 8001330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001334:	e18e      	b.n	8001654 <LCD_LoadObj+0x348>
		displayRow = modulo(floor(posY) + y, 96);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff f90e 	bl	8000558 <__aeabi_f2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	ec43 2b10 	vmov	d0, r2, r3
 8001344:	f005 fc94 	bl	8006c70 <floor>
 8001348:	ec55 4b10 	vmov	r4, r5, d0
 800134c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8ef 	bl	8000534 <__aeabi_i2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ff9d 	bl	800029c <__adddf3>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f7ff fbe7 	bl	8000b3c <__aeabi_d2iz>
 800136e:	4603      	mov	r3, r0
 8001370:	2160      	movs	r1, #96	; 0x60
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff fe10 	bl	8000f98 <modulo>
 8001378:	4603      	mov	r3, r0
 800137a:	847b      	strh	r3, [r7, #34]	; 0x22

		if ((repeatMode == REPEATMODE_NONE)
 800137c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001380:	2b00      	cmp	r3, #0
 8001382:	d109      	bne.n	8001398 <LCD_LoadObj+0x8c>
				&& (displayRow < 0 || displayRow >= 96)) {
 8001384:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001388:	2b00      	cmp	r3, #0
 800138a:	f2c0 815d 	blt.w	8001648 <LCD_LoadObj+0x33c>
 800138e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001392:	2b5f      	cmp	r3, #95	; 0x5f
 8001394:	f300 8158 	bgt.w	8001648 <LCD_LoadObj+0x33c>
			continue;
		}

		displayRowOffset = displayRow * 12;
 8001398:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800139a:	461a      	mov	r2, r3
 800139c:	0052      	lsls	r2, r2, #1
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	843b      	strh	r3, [r7, #32]

		int firstXByte = floor(floor(posX) / 8);
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	f7ff f8d6 	bl	8000558 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	ec43 2b10 	vmov	d0, r2, r3
 80013b4:	f005 fc5c 	bl	8006c70 <floor>
 80013b8:	ec51 0b10 	vmov	r0, r1, d0
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4baa      	ldr	r3, [pc, #680]	; (800166c <LCD_LoadObj+0x360>)
 80013c2:	f7ff fa4b 	bl	800085c <__aeabi_ddiv>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	ec43 2b17 	vmov	d7, r2, r3
 80013ce:	eeb0 0a47 	vmov.f32	s0, s14
 80013d2:	eef0 0a67 	vmov.f32	s1, s15
 80013d6:	f005 fc4b 	bl	8006c70 <floor>
 80013da:	ec53 2b10 	vmov	r2, r3, d0
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fbab 	bl	8000b3c <__aeabi_d2iz>
 80013e6:	4603      	mov	r3, r0
 80013e8:	61fb      	str	r3, [r7, #28]
		uint8_t leftOffset = modulo(floor(posX), 8);
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f7ff f8b4 	bl	8000558 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	ec43 2b10 	vmov	d0, r2, r3
 80013f8:	f005 fc3a 	bl	8006c70 <floor>
 80013fc:	ec53 2b10 	vmov	r2, r3, d0
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb9a 	bl	8000b3c <__aeabi_d2iz>
 8001408:	4603      	mov	r3, r0
 800140a:	2108      	movs	r1, #8
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fdc3 	bl	8000f98 <modulo>
 8001412:	4603      	mov	r3, r0
 8001414:	76fb      	strb	r3, [r7, #27]

		uint8_t v1 = 0x00, v2 = 0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800141c:	2300      	movs	r3, #0
 800141e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t *currentEditingBuf;

		for (uint8_t j = 0; j < width + 1; j++) {
 8001422:	2300      	movs	r3, #0
 8001424:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001428:	e107      	b.n	800163a <LCD_LoadObj+0x32e>
			if (j == width)
 800142a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800142e:	78fb      	ldrb	r3, [r7, #3]
 8001430:	429a      	cmp	r2, r3
 8001432:	d103      	bne.n	800143c <LCD_LoadObj+0x130>
				v2 = 0x00;
 8001434:	2300      	movs	r3, #0
 8001436:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800143a:	e016      	b.n	800146a <LCD_LoadObj+0x15e>
			else
				v2 = *(bmpAsset + width * y + j + index * (height * width));
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800144c:	78ba      	ldrb	r2, [r7, #2]
 800144e:	78f9      	ldrb	r1, [r7, #3]
 8001450:	fb01 f202 	mul.w	r2, r1, r2
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	18c2      	adds	r2, r0, r3
 800145a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800145e:	4413      	add	r3, r2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			if (repeatMode == REPEATMODE_NONE
 800146a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800146e:	2b00      	cmp	r3, #0
 8001470:	d110      	bne.n	8001494 <LCD_LoadObj+0x188>
					&& (firstXByte + j < 0 || firstXByte + j > 11)) {
 8001472:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	4413      	add	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	db05      	blt.n	800148a <LCD_LoadObj+0x17e>
 800147e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	4413      	add	r3, r2
 8001486:	2b0b      	cmp	r3, #11
 8001488:	dd04      	ble.n	8001494 <LCD_LoadObj+0x188>
				v1 = v2;
 800148a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800148e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				continue;
 8001492:	e0cd      	b.n	8001630 <LCD_LoadObj+0x324>
			}

			currentEditingBuf = DispBuf + displayRowOffset
					+ (firstXByte + j) % 12;
 8001494:	4b76      	ldr	r3, [pc, #472]	; (8001670 <LCD_LoadObj+0x364>)
 8001496:	6818      	ldr	r0, [r3, #0]
 8001498:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800149c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	441a      	add	r2, r3
 80014a4:	4b73      	ldr	r3, [pc, #460]	; (8001674 <LCD_LoadObj+0x368>)
 80014a6:	fb83 1302 	smull	r1, r3, r3, r2
 80014aa:	1059      	asrs	r1, r3, #1
 80014ac:	17d3      	asrs	r3, r2, #31
 80014ae:	1ac9      	subs	r1, r1, r3
 80014b0:	460b      	mov	r3, r1
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	440b      	add	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	1ad1      	subs	r1, r2, r3
 80014ba:	460b      	mov	r3, r1
 80014bc:	4423      	add	r3, r4
			currentEditingBuf = DispBuf + displayRowOffset
 80014be:	4403      	add	r3, r0
 80014c0:	617b      	str	r3, [r7, #20]

			if (flip) {
 80014c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d057      	beq.n	800157a <LCD_LoadObj+0x26e>
				switch (drawMode) {
 80014ca:	787b      	ldrb	r3, [r7, #1]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d03b      	beq.n	8001548 <LCD_LoadObj+0x23c>
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	f300 80a9 	bgt.w	8001628 <LCD_LoadObj+0x31c>
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <LCD_LoadObj+0x1d4>
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d01b      	beq.n	8001516 <LCD_LoadObj+0x20a>
 80014de:	e0a3      	b.n	8001628 <LCD_LoadObj+0x31c>
				case DRAWMODE_ADD:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25a      	sxtb	r2, r3
 80014e6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80014ea:	7efb      	ldrb	r3, [r7, #27]
 80014ec:	f1c3 0308 	rsb	r3, r3, #8
 80014f0:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80014f4:	b259      	sxtb	r1, r3
 80014f6:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80014fa:	7efb      	ldrb	r3, [r7, #27]
 80014fc:	fa40 f303 	asr.w	r3, r0, r3
 8001500:	b25b      	sxtb	r3, r3
 8001502:	430b      	orrs	r3, r1
 8001504:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001506:	43db      	mvns	r3, r3
 8001508:	b25b      	sxtb	r3, r3
 800150a:	4013      	ands	r3, r2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	b2da      	uxtb	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	701a      	strb	r2, [r3, #0]
					break;
 8001514:	e088      	b.n	8001628 <LCD_LoadObj+0x31c>
				case DRAWMODE_CULL:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25a      	sxtb	r2, r3
 800151c:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001520:	7efb      	ldrb	r3, [r7, #27]
 8001522:	f1c3 0308 	rsb	r3, r3, #8
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 800152a:	b259      	sxtb	r1, r3
 800152c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001530:	7efb      	ldrb	r3, [r7, #27]
 8001532:	fa40 f303 	asr.w	r3, r0, r3
 8001536:	b25b      	sxtb	r3, r3
 8001538:	430b      	orrs	r3, r1
 800153a:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 800153c:	4313      	orrs	r3, r2
 800153e:	b25b      	sxtb	r3, r3
 8001540:	b2da      	uxtb	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	701a      	strb	r2, [r3, #0]
					break;
 8001546:	e06f      	b.n	8001628 <LCD_LoadObj+0x31c>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b25a      	sxtb	r2, r3
 800154e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001552:	7efb      	ldrb	r3, [r7, #27]
 8001554:	f1c3 0308 	rsb	r3, r3, #8
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 800155c:	b259      	sxtb	r1, r3
 800155e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001562:	7efb      	ldrb	r3, [r7, #27]
 8001564:	fa40 f303 	asr.w	r3, r0, r3
 8001568:	b25b      	sxtb	r3, r3
 800156a:	430b      	orrs	r3, r1
 800156c:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 800156e:	4053      	eors	r3, r2
 8001570:	b25b      	sxtb	r3, r3
 8001572:	b2da      	uxtb	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	701a      	strb	r2, [r3, #0]
					break;
 8001578:	e056      	b.n	8001628 <LCD_LoadObj+0x31c>
				}
			} else {
				switch (drawMode) {
 800157a:	787b      	ldrb	r3, [r7, #1]
 800157c:	2b02      	cmp	r3, #2
 800157e:	d03a      	beq.n	80015f6 <LCD_LoadObj+0x2ea>
 8001580:	2b02      	cmp	r3, #2
 8001582:	dc51      	bgt.n	8001628 <LCD_LoadObj+0x31c>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <LCD_LoadObj+0x282>
 8001588:	2b01      	cmp	r3, #1
 800158a:	d019      	beq.n	80015c0 <LCD_LoadObj+0x2b4>
 800158c:	e04c      	b.n	8001628 <LCD_LoadObj+0x31c>
				case DRAWMODE_ADD:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b25a      	sxtb	r2, r3
 8001594:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001598:	7efb      	ldrb	r3, [r7, #27]
 800159a:	f1c3 0308 	rsb	r3, r3, #8
 800159e:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80015a2:	b259      	sxtb	r1, r3
 80015a4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80015a8:	7efb      	ldrb	r3, [r7, #27]
 80015aa:	fa40 f303 	asr.w	r3, r0, r3
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	430b      	orrs	r3, r1
 80015b2:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	701a      	strb	r2, [r3, #0]
					break;
 80015be:	e033      	b.n	8001628 <LCD_LoadObj+0x31c>
				case DRAWMODE_CULL:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b25a      	sxtb	r2, r3
 80015c6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80015ca:	7efb      	ldrb	r3, [r7, #27]
 80015cc:	f1c3 0308 	rsb	r3, r3, #8
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80015d4:	b259      	sxtb	r1, r3
 80015d6:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80015da:	7efb      	ldrb	r3, [r7, #27]
 80015dc:	fa40 f303 	asr.w	r3, r0, r3
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	430b      	orrs	r3, r1
 80015e4:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80015e6:	43db      	mvns	r3, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4013      	ands	r3, r2
 80015ec:	b25b      	sxtb	r3, r3
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	701a      	strb	r2, [r3, #0]
					break;
 80015f4:	e018      	b.n	8001628 <LCD_LoadObj+0x31c>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b25a      	sxtb	r2, r3
 80015fc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001600:	7efb      	ldrb	r3, [r7, #27]
 8001602:	f1c3 0308 	rsb	r3, r3, #8
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 800160a:	b259      	sxtb	r1, r3
 800160c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001610:	7efb      	ldrb	r3, [r7, #27]
 8001612:	fa40 f303 	asr.w	r3, r0, r3
 8001616:	b25b      	sxtb	r3, r3
 8001618:	430b      	orrs	r3, r1
 800161a:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 800161c:	4053      	eors	r3, r2
 800161e:	b25b      	sxtb	r3, r3
 8001620:	b2da      	uxtb	r2, r3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	701a      	strb	r2, [r3, #0]
					break;
 8001626:	bf00      	nop
				}
			}

			v1 = v2;
 8001628:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800162c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t j = 0; j < width + 1; j++) {
 8001630:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800163a:	78fa      	ldrb	r2, [r7, #3]
 800163c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001640:	429a      	cmp	r2, r3
 8001642:	f4bf aef2 	bcs.w	800142a <LCD_LoadObj+0x11e>
 8001646:	e000      	b.n	800164a <LCD_LoadObj+0x33e>
			continue;
 8001648:	bf00      	nop
	for (uint8_t y = 0; y < height; y++) {
 800164a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800164e:	3301      	adds	r3, #1
 8001650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001654:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001658:	78bb      	ldrb	r3, [r7, #2]
 800165a:	429a      	cmp	r2, r3
 800165c:	f4ff ae6b 	bcc.w	8001336 <LCD_LoadObj+0x2a>
		}
	}
}
 8001660:	bf00      	nop
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bdb0      	pop	{r4, r5, r7, pc}
 800166a:	bf00      	nop
 800166c:	40200000 	.word	0x40200000
 8001670:	20000098 	.word	0x20000098
 8001674:	2aaaaaab 	.word	0x2aaaaaab

08001678 <LCD_DrawLine>:

void LCD_DrawLine(uint8_t startingRow, int startingPoint, uint8_t length,
		uint8_t drawMode, bool flip) {
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6039      	str	r1, [r7, #0]
 8001680:	4611      	mov	r1, r2
 8001682:	461a      	mov	r2, r3
 8001684:	4603      	mov	r3, r0
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	460b      	mov	r3, r1
 800168a:	71bb      	strb	r3, [r7, #6]
 800168c:	4613      	mov	r3, r2
 800168e:	717b      	strb	r3, [r7, #5]
	uint16_t rowOffset = (startingRow % 96) * 12;
 8001690:	79fa      	ldrb	r2, [r7, #7]
 8001692:	4b78      	ldr	r3, [pc, #480]	; (8001874 <LCD_DrawLine+0x1fc>)
 8001694:	fba3 1302 	umull	r1, r3, r3, r2
 8001698:	0999      	lsrs	r1, r3, #6
 800169a:	460b      	mov	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	440b      	add	r3, r1
 80016a0:	015b      	lsls	r3, r3, #5
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	0052      	lsls	r2, r2, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	82bb      	strh	r3, [r7, #20]

	for (uint8_t j = 0; j < length; j++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]
 80016b6:	e0d1      	b.n	800185c <LCD_DrawLine+0x1e4>
		if (startingPoint + j < 0 || startingPoint + j > 95)
 80016b8:	7dfa      	ldrb	r2, [r7, #23]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f2c0 80c8 	blt.w	8001854 <LCD_DrawLine+0x1dc>
 80016c4:	7dfa      	ldrb	r2, [r7, #23]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	4413      	add	r3, r2
 80016ca:	2b5f      	cmp	r3, #95	; 0x5f
 80016cc:	f300 80c2 	bgt.w	8001854 <LCD_DrawLine+0x1dc>
			continue;
		uint8_t additionalOffset = ((startingPoint + j) % 96) / 8;
 80016d0:	7dfa      	ldrb	r2, [r7, #23]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	441a      	add	r2, r3
 80016d6:	4b68      	ldr	r3, [pc, #416]	; (8001878 <LCD_DrawLine+0x200>)
 80016d8:	fb83 1302 	smull	r1, r3, r3, r2
 80016dc:	1119      	asrs	r1, r3, #4
 80016de:	17d3      	asrs	r3, r2, #31
 80016e0:	1ac9      	subs	r1, r1, r3
 80016e2:	460b      	mov	r3, r1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	440b      	add	r3, r1
 80016e8:	015b      	lsls	r3, r3, #5
 80016ea:	1ad1      	subs	r1, r2, r3
 80016ec:	460b      	mov	r3, r1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	da00      	bge.n	80016f4 <LCD_DrawLine+0x7c>
 80016f2:	3307      	adds	r3, #7
 80016f4:	10db      	asrs	r3, r3, #3
 80016f6:	74fb      	strb	r3, [r7, #19]

		uint8_t *currentEditingBuf = DispBuf + rowOffset + additionalOffset;
 80016f8:	4b60      	ldr	r3, [pc, #384]	; (800187c <LCD_DrawLine+0x204>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	8ab9      	ldrh	r1, [r7, #20]
 80016fe:	7cfb      	ldrb	r3, [r7, #19]
 8001700:	440b      	add	r3, r1
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
		if (flip) {
 8001706:	f897 3020 	ldrb.w	r3, [r7, #32]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d051      	beq.n	80017b2 <LCD_DrawLine+0x13a>
			switch (drawMode) {
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d037      	beq.n	8001784 <LCD_DrawLine+0x10c>
 8001714:	2b02      	cmp	r3, #2
 8001716:	f300 809e 	bgt.w	8001856 <LCD_DrawLine+0x1de>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <LCD_DrawLine+0xac>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d019      	beq.n	8001756 <LCD_DrawLine+0xde>
 8001722:	e098      	b.n	8001856 <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25a      	sxtb	r2, r3
 800172a:	7df9      	ldrb	r1, [r7, #23]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	440b      	add	r3, r1
 8001730:	4259      	negs	r1, r3
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	f001 0107 	and.w	r1, r1, #7
 800173a:	bf58      	it	pl
 800173c:	424b      	negpl	r3, r1
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	fa41 f303 	asr.w	r3, r1, r3
 8001744:	b25b      	sxtb	r3, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	b25b      	sxtb	r3, r3
 800174a:	4013      	ands	r3, r2
 800174c:	b25b      	sxtb	r3, r3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	701a      	strb	r2, [r3, #0]
				break;
 8001754:	e07f      	b.n	8001856 <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b25a      	sxtb	r2, r3
 800175c:	7df9      	ldrb	r1, [r7, #23]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	440b      	add	r3, r1
 8001762:	4259      	negs	r1, r3
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	f001 0107 	and.w	r1, r1, #7
 800176c:	bf58      	it	pl
 800176e:	424b      	negpl	r3, r1
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	fa41 f303 	asr.w	r3, r1, r3
 8001776:	b25b      	sxtb	r3, r3
 8001778:	4313      	orrs	r3, r2
 800177a:	b25b      	sxtb	r3, r3
 800177c:	b2da      	uxtb	r2, r3
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	701a      	strb	r2, [r3, #0]
				break;
 8001782:	e068      	b.n	8001856 <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b25a      	sxtb	r2, r3
 800178a:	7df9      	ldrb	r1, [r7, #23]
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	440b      	add	r3, r1
 8001790:	4259      	negs	r1, r3
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	f001 0107 	and.w	r1, r1, #7
 800179a:	bf58      	it	pl
 800179c:	424b      	negpl	r3, r1
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	fa41 f303 	asr.w	r3, r1, r3
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	4053      	eors	r3, r2
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	701a      	strb	r2, [r3, #0]
				break;
 80017b0:	e051      	b.n	8001856 <LCD_DrawLine+0x1de>
			}
		} else {
			switch (drawMode) {
 80017b2:	797b      	ldrb	r3, [r7, #5]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d036      	beq.n	8001826 <LCD_DrawLine+0x1ae>
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	dc4c      	bgt.n	8001856 <LCD_DrawLine+0x1de>
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <LCD_DrawLine+0x14e>
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d017      	beq.n	80017f4 <LCD_DrawLine+0x17c>
 80017c4:	e047      	b.n	8001856 <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	7df9      	ldrb	r1, [r7, #23]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	440b      	add	r3, r1
 80017d2:	4259      	negs	r1, r3
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	f001 0107 	and.w	r1, r1, #7
 80017dc:	bf58      	it	pl
 80017de:	424b      	negpl	r3, r1
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	fa41 f303 	asr.w	r3, r1, r3
 80017e6:	b25b      	sxtb	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b25b      	sxtb	r3, r3
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	701a      	strb	r2, [r3, #0]
				break;
 80017f2:	e030      	b.n	8001856 <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	b25a      	sxtb	r2, r3
 80017fa:	7df9      	ldrb	r1, [r7, #23]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	440b      	add	r3, r1
 8001800:	4259      	negs	r1, r3
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	f001 0107 	and.w	r1, r1, #7
 800180a:	bf58      	it	pl
 800180c:	424b      	negpl	r3, r1
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	fa41 f303 	asr.w	r3, r1, r3
 8001814:	b25b      	sxtb	r3, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4013      	ands	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	701a      	strb	r2, [r3, #0]
				break;
 8001824:	e017      	b.n	8001856 <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b25a      	sxtb	r2, r3
 800182c:	7df9      	ldrb	r1, [r7, #23]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	440b      	add	r3, r1
 8001832:	4259      	negs	r1, r3
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	f001 0107 	and.w	r1, r1, #7
 800183c:	bf58      	it	pl
 800183e:	424b      	negpl	r3, r1
 8001840:	2180      	movs	r1, #128	; 0x80
 8001842:	fa41 f303 	asr.w	r3, r1, r3
 8001846:	b25b      	sxtb	r3, r3
 8001848:	4053      	eors	r3, r2
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2da      	uxtb	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	701a      	strb	r2, [r3, #0]
				break;
 8001852:	e000      	b.n	8001856 <LCD_DrawLine+0x1de>
			continue;
 8001854:	bf00      	nop
	for (uint8_t j = 0; j < length; j++) {
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	3301      	adds	r3, #1
 800185a:	75fb      	strb	r3, [r7, #23]
 800185c:	7dfa      	ldrb	r2, [r7, #23]
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	429a      	cmp	r2, r3
 8001862:	f4ff af29 	bcc.w	80016b8 <LCD_DrawLine+0x40>
			}
		}

	}
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	aaaaaaab 	.word	0xaaaaaaab
 8001878:	2aaaaaab 	.word	0x2aaaaaab
 800187c:	20000098 	.word	0x20000098

08001880 <LCD_Invert>:

// Inverts color, WILL CAUSE PERFORMANCE LOSS
void LCD_Invert(void) {
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	uint16_t invt = 1152;
 8001886:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800188a:	80fb      	strh	r3, [r7, #6]
	do {
		invt--;
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	3b01      	subs	r3, #1
 8001890:	80fb      	strh	r3, [r7, #6]
		DispBuf[invt] = ~DispBuf[invt];
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <LCD_Invert+0x40>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	4413      	add	r3, r2
 800189a:	781a      	ldrb	r2, [r3, #0]
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LCD_Invert+0x40>)
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	440b      	add	r3, r1
 80018a4:	43d2      	mvns	r2, r2
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]
	} while (invt);
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1ed      	bne.n	800188c <LCD_Invert+0xc>
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000098 	.word	0x20000098

080018c4 <LCD_Fill>:

//Fill screen with either black or white color
void LCD_Fill(bool flip) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	memset(DispBuf, (flip ? 0xFF : 0x00), 1152);
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <LCD_Fill+0x2c>)
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <LCD_Fill+0x18>
 80018d8:	23ff      	movs	r3, #255	; 0xff
 80018da:	e000      	b.n	80018de <LCD_Fill+0x1a>
 80018dc:	2300      	movs	r3, #0
 80018de:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80018e2:	4619      	mov	r1, r3
 80018e4:	f004 f8da 	bl	8005a9c <memset>
}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000098 	.word	0x20000098

080018f4 <LCD_Print>:
	}

}

void LCD_Print(char *str, short xPos, short yPos, uint8_t drawMode,
		uint8_t repeatMode, bool flip) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	; 0x30
 80018f8:	af04      	add	r7, sp, #16
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4603      	mov	r3, r0
 8001904:	817b      	strh	r3, [r7, #10]
 8001906:	460b      	mov	r3, r1
 8001908:	813b      	strh	r3, [r7, #8]
 800190a:	4613      	mov	r3, r2
 800190c:	71fb      	strb	r3, [r7, #7]
	short strLength = strlen(str);
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7fe fc66 	bl	80001e0 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	833b      	strh	r3, [r7, #24]
	short lineSpacing = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	82fb      	strh	r3, [r7, #22]
	short charSpacing = -1;
 800191c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001920:	82bb      	strh	r3, [r7, #20]
	short spaceSpacing = 1;
 8001922:	2301      	movs	r3, #1
 8001924:	827b      	strh	r3, [r7, #18]
	short tabSpacing = 8 + charSpacing;
 8001926:	8abb      	ldrh	r3, [r7, #20]
 8001928:	3308      	adds	r3, #8
 800192a:	b29b      	uxth	r3, r3
 800192c:	823b      	strh	r3, [r7, #16]

	short lineOff = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	83fb      	strh	r3, [r7, #30]
	short charOff = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	83bb      	strh	r3, [r7, #28]

	for (short i = 0; i < strLength; i++) {
 8001936:	2300      	movs	r3, #0
 8001938:	837b      	strh	r3, [r7, #26]
 800193a:	e067      	b.n	8001a0c <LCD_Print+0x118>
		if (str[i] == '\n') {
 800193c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b0a      	cmp	r3, #10
 8001948:	d109      	bne.n	800195e <LCD_Print+0x6a>
			lineOff += (8 + lineSpacing);
 800194a:	8afa      	ldrh	r2, [r7, #22]
 800194c:	8bfb      	ldrh	r3, [r7, #30]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	3308      	adds	r3, #8
 8001954:	b29b      	uxth	r3, r3
 8001956:	83fb      	strh	r3, [r7, #30]
			charOff = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	83bb      	strh	r3, [r7, #28]
			continue;
 800195c:	e050      	b.n	8001a00 <LCD_Print+0x10c>
		}
		if (str[i] == ' ') {
 800195e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	4413      	add	r3, r2
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b20      	cmp	r3, #32
 800196a:	d105      	bne.n	8001978 <LCD_Print+0x84>
			charOff += spaceSpacing;
 800196c:	8bba      	ldrh	r2, [r7, #28]
 800196e:	8a7b      	ldrh	r3, [r7, #18]
 8001970:	4413      	add	r3, r2
 8001972:	b29b      	uxth	r3, r3
 8001974:	83bb      	strh	r3, [r7, #28]
			continue;
 8001976:	e043      	b.n	8001a00 <LCD_Print+0x10c>
		}
		if (str[i] == '\t') {
 8001978:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b09      	cmp	r3, #9
 8001984:	d105      	bne.n	8001992 <LCD_Print+0x9e>
			charOff += tabSpacing;
 8001986:	8bba      	ldrh	r2, [r7, #28]
 8001988:	8a3b      	ldrh	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	b29b      	uxth	r3, r3
 800198e:	83bb      	strh	r3, [r7, #28]
			continue;
 8001990:	e036      	b.n	8001a00 <LCD_Print+0x10c>
		}

		FetchText(TextBuf, str[i]);
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <LCD_Print+0x130>)
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4413      	add	r3, r2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4619      	mov	r1, r3
 80019a2:	f001 ff4d 	bl	8003840 <FetchText>
		LCD_LoadObj(TextBuf, xPos + charOff, yPos + lineOff, 1, 8, drawMode,
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <LCD_Print+0x130>)
 80019a8:	6818      	ldr	r0, [r3, #0]
 80019aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80019ae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b2:	4413      	add	r3, r2
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80019c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019c4:	4413      	add	r3, r2
 80019c6:	ee07 3a10 	vmov	s14, r3
 80019ca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80019ce:	79fa      	ldrb	r2, [r7, #7]
 80019d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019d4:	9302      	str	r3, [sp, #8]
 80019d6:	2300      	movs	r3, #0
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	2208      	movs	r2, #8
 80019e4:	2101      	movs	r1, #1
 80019e6:	eef0 0a47 	vmov.f32	s1, s14
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	f7ff fc8d 	bl	800130c <LCD_LoadObj>
				repeatMode, 0, flip);
		charOff += (8 + charSpacing);
 80019f2:	8aba      	ldrh	r2, [r7, #20]
 80019f4:	8bbb      	ldrh	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	3308      	adds	r3, #8
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	83bb      	strh	r3, [r7, #28]
	for (short i = 0; i < strLength; i++) {
 8001a00:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	3301      	adds	r3, #1
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	837b      	strh	r3, [r7, #26]
 8001a0c:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001a10:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	db91      	blt.n	800193c <LCD_Print+0x48>
	}
}
 8001a18:	bf00      	nop
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200000a0 	.word	0x200000a0

08001a28 <LookupKeyState>:
static uint8_t KeysUsedToBeHigh[4] = { 0, 0, 0, 0 };

static uint16_t KeyCounters[4] = { 0, 0, 0, 0 };
static uint16_t KeyCounterOverflowEdge[4] = { 0, 0, 0, 0 };

uint8_t LookupKeyState(uint8_t n) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(KEYS_GPIO_Port, KeyPins[n])) {
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <LookupKeyState+0x30>)
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4807      	ldr	r0, [pc, #28]	; (8001a5c <LookupKeyState+0x34>)
 8001a3e:	f002 fc67 	bl	8004310 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <LookupKeyState+0x24>
		return 0xff;
 8001a48:	23ff      	movs	r3, #255	; 0xff
 8001a4a:	e000      	b.n	8001a4e <LookupKeyState+0x26>
	}
	return 0x00;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	08006d98 	.word	0x08006d98
 8001a5c:	40020800 	.word	0x40020800

08001a60 <KeyScan>:

void KeyScan() {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
	for (uint8_t j = 0; j < 4; j++) {
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	e02f      	b.n	8001acc <KeyScan+0x6c>
		KeyBuffer[j] = ((KeyBuffer[j] << 1) | (LookupKeyState(j) & 0x01));
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	4a1b      	ldr	r2, [pc, #108]	; (8001adc <KeyScan+0x7c>)
 8001a70:	5cd3      	ldrb	r3, [r2, r3]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	b25c      	sxtb	r4, r3
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ffd5 	bl	8001a28 <LookupKeyState>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b25b      	sxtb	r3, r3
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	b25b      	sxtb	r3, r3
 8001a88:	4323      	orrs	r3, r4
 8001a8a:	b25a      	sxtb	r2, r3
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	b2d1      	uxtb	r1, r2
 8001a90:	4a12      	ldr	r2, [pc, #72]	; (8001adc <KeyScan+0x7c>)
 8001a92:	54d1      	strb	r1, [r2, r3]

		if ((KeyBuffer[j] | 0xf0) == 0xff) {
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	4a11      	ldr	r2, [pc, #68]	; (8001adc <KeyScan+0x7c>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	f063 030f 	orn	r3, r3, #15
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2bff      	cmp	r3, #255	; 0xff
 8001aa2:	d104      	bne.n	8001aae <KeyScan+0x4e>
			KeyStates[j] = 1;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <KeyScan+0x80>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	54d1      	strb	r1, [r2, r3]
 8001aac:	e00b      	b.n	8001ac6 <KeyScan+0x66>
		} else if ((KeyBuffer[j] | 0xf0) == 0xf0) {
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <KeyScan+0x7c>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	f063 030f 	orn	r3, r3, #15
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2bf0      	cmp	r3, #240	; 0xf0
 8001abc:	d103      	bne.n	8001ac6 <KeyScan+0x66>
			KeyStates[j] = 0;
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <KeyScan+0x80>)
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < 4; j++) {
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d9cc      	bls.n	8001a6c <KeyScan+0xc>
		}
	}
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	200000a8 	.word	0x200000a8
 8001ae0:	200000ac 	.word	0x200000ac

08001ae4 <GetButton>:
		return true;
	else
		return false;
}

bool GetButton(uint8_t buttonIndex) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
	// To machine index
	buttonIndex--;
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	71fb      	strb	r3, [r7, #7]
	return KeyStates[buttonIndex];
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4a04      	ldr	r2, [pc, #16]	; (8001b08 <GetButton+0x24>)
 8001af8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200000ac 	.word	0x200000ac

08001b0c <GetButtonDown>:
		return 1;
	}
	return 0;
}

bool GetButtonDown(uint8_t buttonIndex, uint8_t identifier) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	460a      	mov	r2, r1
 8001b16:	71fb      	strb	r3, [r7, #7]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	71bb      	strb	r3, [r7, #6]
	// To machine index
	buttonIndex--;
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	71fb      	strb	r3, [r7, #7]

	if (!KeyStates[buttonIndex]) {
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <GetButtonDown+0x60>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <GetButtonDown+0x2e>
		KeysUsedToBeLow[buttonIndex] = identifier;
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	490e      	ldr	r1, [pc, #56]	; (8001b70 <GetButtonDown+0x64>)
 8001b36:	79ba      	ldrb	r2, [r7, #6]
 8001b38:	54ca      	strb	r2, [r1, r3]
	}

	if (KeyStates[buttonIndex] && KeysUsedToBeLow[buttonIndex] == identifier) {
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <GetButtonDown+0x60>)
 8001b3e:	5cd3      	ldrb	r3, [r2, r3]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d00b      	beq.n	8001b5c <GetButtonDown+0x50>
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4a0a      	ldr	r2, [pc, #40]	; (8001b70 <GetButtonDown+0x64>)
 8001b48:	5cd3      	ldrb	r3, [r2, r3]
 8001b4a:	79ba      	ldrb	r2, [r7, #6]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d105      	bne.n	8001b5c <GetButtonDown+0x50>
		KeysUsedToBeLow[buttonIndex] = 0;
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <GetButtonDown+0x64>)
 8001b54:	2100      	movs	r1, #0
 8001b56:	54d1      	strb	r1, [r2, r3]
		return 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e000      	b.n	8001b5e <GetButtonDown+0x52>
	}
	return 0;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	200000ac 	.word	0x200000ac
 8001b70:	200000b0 	.word	0x200000b0

08001b74 <GenerateGameBuffers>:

void RenderDino(GameObj *dino, uint8_t dinoState, bool isDead);
bool DinoGetsStuck();
void MeltPlants();

void GenerateGameBuffers() {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	dinoHeader = GenLoopBuf(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f001 fb51 	bl	8003220 <GenLoopBuf>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <GenerateGameBuffers+0x68>)
 8001b82:	6013      	str	r3, [r2, #0]
	fireHeader = GenLoopBuf(1);
 8001b84:	2001      	movs	r0, #1
 8001b86:	f001 fb4b 	bl	8003220 <GenLoopBuf>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <GenerateGameBuffers+0x6c>)
 8001b8e:	6013      	str	r3, [r2, #0]

	cloudHeader = GenLoopBuf(2);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f001 fb45 	bl	8003220 <GenLoopBuf>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <GenerateGameBuffers+0x70>)
 8001b9a:	6013      	str	r3, [r2, #0]
	plantHeader = GenLoopBuf(4);
 8001b9c:	2004      	movs	r0, #4
 8001b9e:	f001 fb3f 	bl	8003220 <GenLoopBuf>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <GenerateGameBuffers+0x74>)
 8001ba6:	6013      	str	r3, [r2, #0]
	birdHeader = GenLoopBuf(2);
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f001 fb39 	bl	8003220 <GenLoopBuf>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <GenerateGameBuffers+0x78>)
 8001bb2:	6013      	str	r3, [r2, #0]
	signsHeader = GenLoopBuf(2);
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f001 fb33 	bl	8003220 <GenLoopBuf>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <GenerateGameBuffers+0x7c>)
 8001bbe:	6013      	str	r3, [r2, #0]
	dirtTexHeader = GenLoopBuf(12);
 8001bc0:	200c      	movs	r0, #12
 8001bc2:	f001 fb2d 	bl	8003220 <GenLoopBuf>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <GenerateGameBuffers+0x80>)
 8001bca:	6013      	str	r3, [r2, #0]
	bumpAndDepressionHeader = GenLoopBuf(4);
 8001bcc:	2004      	movs	r0, #4
 8001bce:	f001 fb27 	bl	8003220 <GenLoopBuf>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a08      	ldr	r2, [pc, #32]	; (8001bf8 <GenerateGameBuffers+0x84>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200000e8 	.word	0x200000e8
 8001be0:	200000ec 	.word	0x200000ec
 8001be4:	200000f0 	.word	0x200000f0
 8001be8:	200000f4 	.word	0x200000f4
 8001bec:	200000f8 	.word	0x200000f8
 8001bf0:	200000fc 	.word	0x200000fc
 8001bf4:	20000100 	.word	0x20000100
 8001bf8:	20000104 	.word	0x20000104

08001bfc <GamePrep>:

void GamePrep(LS013B4DN04 *display) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af02      	add	r7, sp, #8
 8001c02:	6078      	str	r0, [r7, #4]
	flipStatus = 0;
 8001c04:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <GamePrep+0x198>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]

	nextPlantTickDel = 0;
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <GamePrep+0x19c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	801a      	strh	r2, [r3, #0]
	nextCloudTickDel = 0;
 8001c10:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <GamePrep+0x1a0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	801a      	strh	r2, [r3, #0]
	nextDirtTexTickDel = 0;
 8001c16:	4b62      	ldr	r3, [pc, #392]	; (8001da0 <GamePrep+0x1a4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	801a      	strh	r2, [r3, #0]
	nextBirdTickDel = 0;
 8001c1c:	4b61      	ldr	r3, [pc, #388]	; (8001da4 <GamePrep+0x1a8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	801a      	strh	r2, [r3, #0]
	nextBumpOrDepressionTickDel = 0;
 8001c22:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <GamePrep+0x1ac>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	801a      	strh	r2, [r3, #0]

	plantTick = 0;
 8001c28:	4b60      	ldr	r3, [pc, #384]	; (8001dac <GamePrep+0x1b0>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	cloudTick = 0;
 8001c2e:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <GamePrep+0x1b4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
	dirtTexTick = 0;
 8001c34:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <GamePrep+0x1b8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
	birdTick = 0;
 8001c3a:	4b5f      	ldr	r3, [pc, #380]	; (8001db8 <GamePrep+0x1bc>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
	bumpOrDepressionTick = 0;
 8001c40:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <GamePrep+0x1c0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

	groundLength = 29;
 8001c46:	4b5e      	ldr	r3, [pc, #376]	; (8001dc0 <GamePrep+0x1c4>)
 8001c48:	221d      	movs	r2, #29
 8001c4a:	701a      	strb	r2, [r3, #0]
	tick = 0;
 8001c4c:	4b5d      	ldr	r3, [pc, #372]	; (8001dc4 <GamePrep+0x1c8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	overallSpeed = 1;
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <GamePrep+0x1cc>)
 8001c54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001c58:	601a      	str	r2, [r3, #0]

	HeaderInit(dinoHeader, (uint8_t*) DinoAssets, 4, 22, 14);
 8001c5a:	4b5c      	ldr	r3, [pc, #368]	; (8001dcc <GamePrep+0x1d0>)
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	230e      	movs	r3, #14
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2316      	movs	r3, #22
 8001c64:	2204      	movs	r2, #4
 8001c66:	495a      	ldr	r1, [pc, #360]	; (8001dd0 <GamePrep+0x1d4>)
 8001c68:	f001 fb0c 	bl	8003284 <HeaderInit>
	HeaderInit(fireHeader, (uint8_t*) FireAssets, 9, 25, 2);
 8001c6c:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <GamePrep+0x1d8>)
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	2302      	movs	r3, #2
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2319      	movs	r3, #25
 8001c76:	2209      	movs	r2, #9
 8001c78:	4957      	ldr	r1, [pc, #348]	; (8001dd8 <GamePrep+0x1dc>)
 8001c7a:	f001 fb03 	bl	8003284 <HeaderInit>
	HeaderInit(cloudHeader, (uint8_t*) CloudAssets, 6, 14, 1);
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <GamePrep+0x1e0>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	2301      	movs	r3, #1
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	230e      	movs	r3, #14
 8001c88:	2206      	movs	r2, #6
 8001c8a:	4955      	ldr	r1, [pc, #340]	; (8001de0 <GamePrep+0x1e4>)
 8001c8c:	f001 fafa 	bl	8003284 <HeaderInit>
	HeaderInit(plantHeader, (uint8_t*) PlantAssets, 2, 22, 5);
 8001c90:	4b54      	ldr	r3, [pc, #336]	; (8001de4 <GamePrep+0x1e8>)
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	2305      	movs	r3, #5
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2316      	movs	r3, #22
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	4952      	ldr	r1, [pc, #328]	; (8001de8 <GamePrep+0x1ec>)
 8001c9e:	f001 faf1 	bl	8003284 <HeaderInit>
	HeaderInit(birdHeader, (uint8_t*) BirdAssets, 3, 15, 2);
 8001ca2:	4b52      	ldr	r3, [pc, #328]	; (8001dec <GamePrep+0x1f0>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	230f      	movs	r3, #15
 8001cac:	2203      	movs	r2, #3
 8001cae:	4950      	ldr	r1, [pc, #320]	; (8001df0 <GamePrep+0x1f4>)
 8001cb0:	f001 fae8 	bl	8003284 <HeaderInit>
	HeaderInit(signsHeader, (uint8_t*) SignsAssets, 2, 19, 1);
 8001cb4:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <GamePrep+0x1f8>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	2301      	movs	r3, #1
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2313      	movs	r3, #19
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	494d      	ldr	r1, [pc, #308]	; (8001df8 <GamePrep+0x1fc>)
 8001cc2:	f001 fadf 	bl	8003284 <HeaderInit>
	HeaderInit(dirtTexHeader, (uint8_t*) DirtTextureAssets, 1, 1, 6);
 8001cc6:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <GamePrep+0x200>)
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	2306      	movs	r3, #6
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2301      	movs	r3, #1
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	494b      	ldr	r1, [pc, #300]	; (8001e00 <GamePrep+0x204>)
 8001cd4:	f001 fad6 	bl	8003284 <HeaderInit>
	HeaderInit(bumpAndDepressionHeader, (uint8_t*) BumpAndDepressionAssets, 1,
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <GamePrep+0x208>)
 8001cda:	6818      	ldr	r0, [r3, #0]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4948      	ldr	r1, [pc, #288]	; (8001e08 <GamePrep+0x20c>)
 8001ce6:	f001 facd 	bl	8003284 <HeaderInit>
			2, 2);

	dinoHeader = Append(dinoHeader, DinoNormalStand, DinoXPosDefault,
 8001cea:	4b38      	ldr	r3, [pc, #224]	; (8001dcc <GamePrep+0x1d0>)
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	eddf 7a47 	vldr	s15, [pc, #284]	; 8001e0c <GamePrep+0x210>
 8001cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf6:	ee17 3a90 	vmov	r3, s15
 8001cfa:	b21b      	sxth	r3, r3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f001 f9d3 	bl	80030aa <Append>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4a31      	ldr	r2, [pc, #196]	; (8001dcc <GamePrep+0x1d0>)
 8001d08:	6013      	str	r3, [r2, #0]
			dinoGroundPos);
	fireHeader = Append(fireHeader, CloudNormal, 24, 52);
 8001d0a:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <GamePrep+0x1d8>)
 8001d0c:	6818      	ldr	r0, [r3, #0]
 8001d0e:	2334      	movs	r3, #52	; 0x34
 8001d10:	2218      	movs	r2, #24
 8001d12:	2100      	movs	r1, #0
 8001d14:	f001 f9c9 	bl	80030aa <Append>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a2e      	ldr	r2, [pc, #184]	; (8001dd4 <GamePrep+0x1d8>)
 8001d1c:	6013      	str	r3, [r2, #0]

	LCD_Fill(flipStatus);
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <GamePrep+0x198>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fdce 	bl	80018c4 <LCD_Fill>
	LCD_DrawLine(77, 0, 29, DRAWMODE_ADD, flipStatus);
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <GamePrep+0x198>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	221d      	movs	r2, #29
 8001d32:	2100      	movs	r1, #0
 8001d34:	204d      	movs	r0, #77	; 0x4d
 8001d36:	f7ff fc9f 	bl	8001678 <LCD_DrawLine>

	LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <GamePrep+0x1d0>)
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <GamePrep+0x198>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	f7ff fa97 	bl	8001278 <LCD_LoadObjs>

	LCD_Print("experimental", 0, 85, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <GamePrep+0x198>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2300      	movs	r3, #0
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2300      	movs	r3, #0
 8001d56:	2255      	movs	r2, #85	; 0x55
 8001d58:	2100      	movs	r1, #0
 8001d5a:	482d      	ldr	r0, [pc, #180]	; (8001e10 <GamePrep+0x214>)
 8001d5c:	f7ff fdca 	bl	80018f4 <LCD_Print>

	LCD_UpdateFull(display);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff f997 	bl	8001094 <LCD_UpdateFull>
	while (!GetButtonDown(BUTTON_2, 1))
 8001d66:	bf00      	nop
 8001d68:	2101      	movs	r1, #1
 8001d6a:	2003      	movs	r0, #3
 8001d6c:	f7ff fece 	bl	8001b0c <GetButtonDown>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f5      	bne.n	8001d68 <GamePrep+0x16c>
//		HAL_Delay(100);
//		LCD_Invert();
//		LCD_UpdateFull(display);
//	}

	dinoVel = initVel;
 8001d7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <GamePrep+0x218>)
 8001d82:	601a      	str	r2, [r3, #0]
	dinoState = JUMPING;
 8001d84:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <GamePrep+0x21c>)
 8001d86:	2203      	movs	r2, #3
 8001d88:	701a      	strb	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200000d0 	.word	0x200000d0
 8001d98:	200000d2 	.word	0x200000d2
 8001d9c:	200000d4 	.word	0x200000d4
 8001da0:	200000da 	.word	0x200000da
 8001da4:	200000d6 	.word	0x200000d6
 8001da8:	200000d8 	.word	0x200000d8
 8001dac:	200000bc 	.word	0x200000bc
 8001db0:	200000c0 	.word	0x200000c0
 8001db4:	200000cc 	.word	0x200000cc
 8001db8:	200000c4 	.word	0x200000c4
 8001dbc:	200000c8 	.word	0x200000c8
 8001dc0:	200000dd 	.word	0x200000dd
 8001dc4:	200000b8 	.word	0x200000b8
 8001dc8:	200000e0 	.word	0x200000e0
 8001dcc:	200000e8 	.word	0x200000e8
 8001dd0:	08006ecc 	.word	0x08006ecc
 8001dd4:	200000ec 	.word	0x200000ec
 8001dd8:	0800739c 	.word	0x0800739c
 8001ddc:	200000f0 	.word	0x200000f0
 8001de0:	08006d9c 	.word	0x08006d9c
 8001de4:	200000f4 	.word	0x200000f4
 8001de8:	08006df0 	.word	0x08006df0
 8001dec:	200000f8 	.word	0x200000f8
 8001df0:	0800756c 	.word	0x0800756c
 8001df4:	200000fc 	.word	0x200000fc
 8001df8:	080075c8 	.word	0x080075c8
 8001dfc:	20000100 	.word	0x20000100
 8001e00:	08007564 	.word	0x08007564
 8001e04:	20000104 	.word	0x20000104
 8001e08:	08007560 	.word	0x08007560
 8001e0c:	42680000 	.word	0x42680000
 8001e10:	08006d88 	.word	0x08006d88
 8001e14:	200000b4 	.word	0x200000b4
 8001e18:	200000dc 	.word	0x200000dc
 8001e1c:	00000000 	.word	0x00000000

08001e20 <GameTick>:

uint8_t GameTick(LS013B4DN04 *display) {
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af02      	add	r7, sp, #8
 8001e26:	6078      	str	r0, [r7, #4]

	// Day and night invertion
	flipStatus = ((tick / 800) % 3 == 2) ? 0 : 1;
 8001e28:	4bb2      	ldr	r3, [pc, #712]	; (80020f4 <GameTick+0x2d4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4ab2      	ldr	r2, [pc, #712]	; (80020f8 <GameTick+0x2d8>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0a19      	lsrs	r1, r3, #8
 8001e34:	4bb1      	ldr	r3, [pc, #708]	; (80020fc <GameTick+0x2dc>)
 8001e36:	fba3 2301 	umull	r2, r3, r3, r1
 8001e3a:	085a      	lsrs	r2, r3, #1
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	4413      	add	r3, r2
 8001e42:	1aca      	subs	r2, r1, r3
 8001e44:	2a02      	cmp	r2, #2
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2da      	uxtb	r2, r3
 8001e4e:	4bac      	ldr	r3, [pc, #688]	; (8002100 <GameTick+0x2e0>)
 8001e50:	701a      	strb	r2, [r3, #0]

	LCD_Fill(flipStatus);
 8001e52:	4bab      	ldr	r3, [pc, #684]	; (8002100 <GameTick+0x2e0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fd34 	bl	80018c4 <LCD_Fill>

	// Roll ground plane
	if (groundLength < 96) {
 8001e5c:	4ba9      	ldr	r3, [pc, #676]	; (8002104 <GameTick+0x2e4>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b5f      	cmp	r3, #95	; 0x5f
 8001e62:	d810      	bhi.n	8001e86 <GameTick+0x66>

		LCD_DrawLine(77, 0, groundLength, DRAWMODE_ADD, flipStatus);
 8001e64:	4ba7      	ldr	r3, [pc, #668]	; (8002104 <GameTick+0x2e4>)
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	4ba5      	ldr	r3, [pc, #660]	; (8002100 <GameTick+0x2e0>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	204d      	movs	r0, #77	; 0x4d
 8001e74:	f7ff fc00 	bl	8001678 <LCD_DrawLine>
		groundLength++;
 8001e78:	4ba2      	ldr	r3, [pc, #648]	; (8002104 <GameTick+0x2e4>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4ba0      	ldr	r3, [pc, #640]	; (8002104 <GameTick+0x2e4>)
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e008      	b.n	8001e98 <GameTick+0x78>
	} else {

		// Still ground plane
		LCD_DrawLine(77, 0, 96, DRAWMODE_ADD, flipStatus);
 8001e86:	4b9e      	ldr	r3, [pc, #632]	; (8002100 <GameTick+0x2e0>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2260      	movs	r2, #96	; 0x60
 8001e90:	2100      	movs	r1, #0
 8001e92:	204d      	movs	r0, #77	; 0x4d
 8001e94:	f7ff fbf0 	bl	8001678 <LCD_DrawLine>
	}

	switch (dinoState) {
 8001e98:	4b9b      	ldr	r3, [pc, #620]	; (8002108 <GameTick+0x2e8>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	f200 8178 	bhi.w	8002194 <GameTick+0x374>
 8001ea4:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <GameTick+0x8c>)
 8001ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eaa:	bf00      	nop
 8001eac:	080020d1 	.word	0x080020d1
 8001eb0:	08002147 	.word	0x08002147
 8001eb4:	08001ec5 	.word	0x08001ec5
 8001eb8:	08001f41 	.word	0x08001f41
 8001ebc:	08002003 	.word	0x08002003
 8001ec0:	080020a1 	.word	0x080020a1

	case JUMPING:

		dinoVel -=
				GetButton(BUTTON_2) ? (gravity * longPressGravityMul) : gravity;
 8001ec4:	2003      	movs	r0, #3
 8001ec6:	f7ff fe0d 	bl	8001ae4 <GetButton>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <GameTick+0xbe>
 8001ed0:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800210c <GameTick+0x2ec>
 8001ed4:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8002110 <GameTick+0x2f0>
 8001ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001edc:	e001      	b.n	8001ee2 <GameTick+0xc2>
 8001ede:	eddf 7a8b 	vldr	s15, [pc, #556]	; 800210c <GameTick+0x2ec>
		dinoVel -=
 8001ee2:	4b8c      	ldr	r3, [pc, #560]	; (8002114 <GameTick+0x2f4>)
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eec:	4b89      	ldr	r3, [pc, #548]	; (8002114 <GameTick+0x2f4>)
 8001eee:	edc3 7a00 	vstr	s15, [r3]
		dinoHeader->y -= dinoVel;
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <GameTick+0x2f8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	ed93 7a02 	vldr	s14, [r3, #8]
 8001efa:	4b86      	ldr	r3, [pc, #536]	; (8002114 <GameTick+0x2f4>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	4b85      	ldr	r3, [pc, #532]	; (8002118 <GameTick+0x2f8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f08:	edc3 7a02 	vstr	s15, [r3, #8]

		if (GetButtonDown(BUTTON_1, 2))
 8001f0c:	2102      	movs	r1, #2
 8001f0e:	2002      	movs	r0, #2
 8001f10:	f7ff fdfc 	bl	8001b0c <GetButtonDown>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <GameTick+0x100>
			dinoState = GLIDING;
 8001f1a:	4b7b      	ldr	r3, [pc, #492]	; (8002108 <GameTick+0x2e8>)
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	701a      	strb	r2, [r3, #0]

		// Dino landed
		if (dinoHeader->y > dinoGroundPos)
 8001f20:	4b7d      	ldr	r3, [pc, #500]	; (8002118 <GameTick+0x2f8>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f28:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800211c <GameTick+0x2fc>
 8001f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f34:	dc00      	bgt.n	8001f38 <GameTick+0x118>
			dinoState = RUNNING;

		break;
 8001f36:	e12d      	b.n	8002194 <GameTick+0x374>
			dinoState = RUNNING;
 8001f38:	4b73      	ldr	r3, [pc, #460]	; (8002108 <GameTick+0x2e8>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	701a      	strb	r2, [r3, #0]
		break;
 8001f3e:	e129      	b.n	8002194 <GameTick+0x374>

	case GLIDING:

		if (dinoVel < 0) {
 8001f40:	4b74      	ldr	r3, [pc, #464]	; (8002114 <GameTick+0x2f4>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	d51b      	bpl.n	8001f88 <GameTick+0x168>
			dinoVel -= gravity;
 8001f50:	4b70      	ldr	r3, [pc, #448]	; (8002114 <GameTick+0x2f4>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800210c <GameTick+0x2ec>
 8001f5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f5e:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <GameTick+0x2f4>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]
			dinoVel += -dinoVel * parachuteGrag;
 8001f64:	4b6b      	ldr	r3, [pc, #428]	; (8002114 <GameTick+0x2f4>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eef1 7a67 	vneg.f32	s15, s15
 8001f6e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002120 <GameTick+0x300>
 8001f72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <GameTick+0x2f4>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f80:	4b64      	ldr	r3, [pc, #400]	; (8002114 <GameTick+0x2f4>)
 8001f82:	edc3 7a00 	vstr	s15, [r3]
 8001f86:	e009      	b.n	8001f9c <GameTick+0x17c>
		} else {
			dinoVel -= gravity;
 8001f88:	4b62      	ldr	r3, [pc, #392]	; (8002114 <GameTick+0x2f4>)
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800210c <GameTick+0x2ec>
 8001f92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <GameTick+0x2f4>)
 8001f98:	edc3 7a00 	vstr	s15, [r3]
		}

		dinoHeader->y -= dinoVel;
 8001f9c:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <GameTick+0x2f8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001fa4:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <GameTick+0x2f4>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <GameTick+0x2f8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fb2:	edc3 7a02 	vstr	s15, [r3, #8]

		if (!GetButton(BUTTON_1))
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	f7ff fd94 	bl	8001ae4 <GetButton>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	f083 0301 	eor.w	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <GameTick+0x1b0>
			dinoState = JUMPING;
 8001fc8:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <GameTick+0x2e8>)
 8001fca:	2203      	movs	r2, #3
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e008      	b.n	8001fe2 <GameTick+0x1c2>
		else if (GetButton(BUTTON_2))
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f7ff fd87 	bl	8001ae4 <GetButton>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <GameTick+0x1c2>
			dinoState = DODGING;
 8001fdc:	4b4a      	ldr	r3, [pc, #296]	; (8002108 <GameTick+0x2e8>)
 8001fde:	2205      	movs	r2, #5
 8001fe0:	701a      	strb	r2, [r3, #0]

		// Dino landed
		if (dinoHeader->y > dinoGroundPos)
 8001fe2:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <GameTick+0x2f8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fea:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800211c <GameTick+0x2fc>
 8001fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff6:	dc00      	bgt.n	8001ffa <GameTick+0x1da>
			dinoState = CRAWLING;
		break;
 8001ff8:	e0cc      	b.n	8002194 <GameTick+0x374>
			dinoState = CRAWLING;
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <GameTick+0x2e8>)
 8001ffc:	2206      	movs	r2, #6
 8001ffe:	701a      	strb	r2, [r3, #0]
		break;
 8002000:	e0c8      	b.n	8002194 <GameTick+0x374>

	case DODGING:

		// In air
		if (dinoHeader->y <= dinoGroundPos) {
 8002002:	4b45      	ldr	r3, [pc, #276]	; (8002118 <GameTick+0x2f8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	edd3 7a02 	vldr	s15, [r3, #8]
 800200a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800211c <GameTick+0x2fc>
 800200e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	d81a      	bhi.n	800204e <GameTick+0x22e>
			dinoVel -= gravity * dodgeGravityMul;
 8002018:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <GameTick+0x2f4>)
 800201a:	ed93 7a00 	vldr	s14, [r3]
 800201e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800210c <GameTick+0x2ec>
 8002022:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800202a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <GameTick+0x2f4>)
 8002030:	edc3 7a00 	vstr	s15, [r3]
			dinoHeader->y -= dinoVel;
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <GameTick+0x2f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	ed93 7a02 	vldr	s14, [r3, #8]
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <GameTick+0x2f4>)
 800203e:	edd3 7a00 	vldr	s15, [r3]
 8002042:	4b35      	ldr	r3, [pc, #212]	; (8002118 <GameTick+0x2f8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800204a:	edc3 7a02 	vstr	s15, [r3, #8]
		}

		if (!GetButton(BUTTON_1))
 800204e:	2002      	movs	r0, #2
 8002050:	f7ff fd48 	bl	8001ae4 <GetButton>
 8002054:	4603      	mov	r3, r0
 8002056:	f083 0301 	eor.w	r3, r3, #1
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <GameTick+0x248>
			dinoState = JUMPING;
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <GameTick+0x2e8>)
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e00b      	b.n	8002080 <GameTick+0x260>
		else if (!GetButton(BUTTON_2))
 8002068:	2003      	movs	r0, #3
 800206a:	f7ff fd3b 	bl	8001ae4 <GetButton>
 800206e:	4603      	mov	r3, r0
 8002070:	f083 0301 	eor.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <GameTick+0x260>
			dinoState = GLIDING;
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <GameTick+0x2e8>)
 800207c:	2204      	movs	r2, #4
 800207e:	701a      	strb	r2, [r3, #0]

		// Dino landed
		if (dinoHeader->y > dinoGroundPos) {
 8002080:	4b25      	ldr	r3, [pc, #148]	; (8002118 <GameTick+0x2f8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	edd3 7a02 	vldr	s15, [r3, #8]
 8002088:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800211c <GameTick+0x2fc>
 800208c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002094:	dc00      	bgt.n	8002098 <GameTick+0x278>
			dinoState = CRAWLING;
		}

		break;
 8002096:	e07d      	b.n	8002194 <GameTick+0x374>
			dinoState = CRAWLING;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <GameTick+0x2e8>)
 800209a:	2206      	movs	r2, #6
 800209c:	701a      	strb	r2, [r3, #0]
		break;
 800209e:	e079      	b.n	8002194 <GameTick+0x374>

	case CRAWLING:
		if (!GetButton(BUTTON_1)) {
 80020a0:	2002      	movs	r0, #2
 80020a2:	f7ff fd1f 	bl	8001ae4 <GetButton>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <GameTick+0x29a>
			dinoState = RUNNING;
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <GameTick+0x2e8>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
		} else if (GetButtonDown(BUTTON_2, 5)) {
			dinoState = FIRING;
		}
		break;
 80020b8:	e067      	b.n	800218a <GameTick+0x36a>
		} else if (GetButtonDown(BUTTON_2, 5)) {
 80020ba:	2105      	movs	r1, #5
 80020bc:	2003      	movs	r0, #3
 80020be:	f7ff fd25 	bl	8001b0c <GetButtonDown>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d060      	beq.n	800218a <GameTick+0x36a>
			dinoState = FIRING;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <GameTick+0x2e8>)
 80020ca:	2202      	movs	r2, #2
 80020cc:	701a      	strb	r2, [r3, #0]
		break;
 80020ce:	e05c      	b.n	800218a <GameTick+0x36a>

	case RUNNING:
		dinoHeader->y = dinoGroundPos;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <GameTick+0x2f8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a13      	ldr	r2, [pc, #76]	; (8002124 <GameTick+0x304>)
 80020d6:	609a      	str	r2, [r3, #8]
		dinoVel = 0;
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <GameTick+0x2f4>)
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

		if (GetButton(BUTTON_1))
 80020e0:	2002      	movs	r0, #2
 80020e2:	f7ff fcff 	bl	8001ae4 <GetButton>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01d      	beq.n	8002128 <GameTick+0x308>
			dinoState = CRAWLING;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <GameTick+0x2e8>)
 80020ee:	2206      	movs	r2, #6
 80020f0:	701a      	strb	r2, [r3, #0]
		else if (GetButtonDown(BUTTON_2, 4)) {
			dinoVel = initVel;
			dinoState = JUMPING;
		}

		break;
 80020f2:	e04c      	b.n	800218e <GameTick+0x36e>
 80020f4:	200000b8 	.word	0x200000b8
 80020f8:	51eb851f 	.word	0x51eb851f
 80020fc:	aaaaaaab 	.word	0xaaaaaaab
 8002100:	200000d0 	.word	0x200000d0
 8002104:	200000dd 	.word	0x200000dd
 8002108:	200000dc 	.word	0x200000dc
 800210c:	3da3d70a 	.word	0x3da3d70a
 8002110:	3f19999a 	.word	0x3f19999a
 8002114:	200000b4 	.word	0x200000b4
 8002118:	200000e8 	.word	0x200000e8
 800211c:	42680000 	.word	0x42680000
 8002120:	3e99999a 	.word	0x3e99999a
 8002124:	42680000 	.word	0x42680000
		else if (GetButtonDown(BUTTON_2, 4)) {
 8002128:	2104      	movs	r1, #4
 800212a:	2003      	movs	r0, #3
 800212c:	f7ff fcee 	bl	8001b0c <GetButtonDown>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d02b      	beq.n	800218e <GameTick+0x36e>
			dinoVel = initVel;
 8002136:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800213a:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <GameTick+0x4d0>)
 800213c:	601a      	str	r2, [r3, #0]
			dinoState = JUMPING;
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <GameTick+0x4d4>)
 8002140:	2203      	movs	r2, #3
 8002142:	701a      	strb	r2, [r3, #0]
		break;
 8002144:	e023      	b.n	800218e <GameTick+0x36e>

	case FIRING:
		dinoHeader->y = dinoGroundPos;
 8002146:	4b6c      	ldr	r3, [pc, #432]	; (80022f8 <GameTick+0x4d8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6c      	ldr	r2, [pc, #432]	; (80022fc <GameTick+0x4dc>)
 800214c:	609a      	str	r2, [r3, #8]
		dinoVel = 0;
 800214e:	4b68      	ldr	r3, [pc, #416]	; (80022f0 <GameTick+0x4d0>)
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	601a      	str	r2, [r3, #0]

		if (!GetButton(BUTTON_1))
 8002156:	2002      	movs	r0, #2
 8002158:	f7ff fcc4 	bl	8001ae4 <GetButton>
 800215c:	4603      	mov	r3, r0
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <GameTick+0x350>
			dinoState = RUNNING;
 8002168:	4b62      	ldr	r3, [pc, #392]	; (80022f4 <GameTick+0x4d4>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
		else if (!GetButton(BUTTON_2))
			dinoState = CRAWLING;

		break;
 800216e:	e010      	b.n	8002192 <GameTick+0x372>
		else if (!GetButton(BUTTON_2))
 8002170:	2003      	movs	r0, #3
 8002172:	f7ff fcb7 	bl	8001ae4 <GetButton>
 8002176:	4603      	mov	r3, r0
 8002178:	f083 0301 	eor.w	r3, r3, #1
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d007      	beq.n	8002192 <GameTick+0x372>
			dinoState = CRAWLING;
 8002182:	4b5c      	ldr	r3, [pc, #368]	; (80022f4 <GameTick+0x4d4>)
 8002184:	2206      	movs	r2, #6
 8002186:	701a      	strb	r2, [r3, #0]
		break;
 8002188:	e003      	b.n	8002192 <GameTick+0x372>
		break;
 800218a:	bf00      	nop
 800218c:	e002      	b.n	8002194 <GameTick+0x374>
		break;
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <GameTick+0x374>
		break;
 8002192:	bf00      	nop
	}

// Plant generation
	if (tick - terrainGenPreTick - plantTick == nextPlantTickDel) {
 8002194:	4b5a      	ldr	r3, [pc, #360]	; (8002300 <GameTick+0x4e0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2264      	movs	r2, #100	; 0x64
 800219a:	1a9a      	subs	r2, r3, r2
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <GameTick+0x4e4>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a59      	ldr	r2, [pc, #356]	; (8002308 <GameTick+0x4e8>)
 80021a4:	8812      	ldrh	r2, [r2, #0]
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d11b      	bne.n	80021e2 <GameTick+0x3c2>
		plantHeader = Append(plantHeader, PlantNormal, 96, 59);
 80021aa:	4b58      	ldr	r3, [pc, #352]	; (800230c <GameTick+0x4ec>)
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	233b      	movs	r3, #59	; 0x3b
 80021b0:	2260      	movs	r2, #96	; 0x60
 80021b2:	2100      	movs	r1, #0
 80021b4:	f000 ff79 	bl	80030aa <Append>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a54      	ldr	r2, [pc, #336]	; (800230c <GameTick+0x4ec>)
 80021bc:	6013      	str	r3, [r2, #0]
		nextPlantTickDel = Random(tick, 80, 330);
 80021be:	4b50      	ldr	r3, [pc, #320]	; (8002300 <GameTick+0x4e0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80021c6:	2150      	movs	r1, #80	; 0x50
 80021c8:	4618      	mov	r0, r3
 80021ca:	f001 f903 	bl	80033d4 <Random>
 80021ce:	4603      	mov	r3, r0
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	4b4d      	ldr	r3, [pc, #308]	; (8002308 <GameTick+0x4e8>)
 80021d4:	801a      	strh	r2, [r3, #0]
		plantTick = tick - terrainGenPreTick;
 80021d6:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <GameTick+0x4e0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2264      	movs	r2, #100	; 0x64
 80021dc:	1a9b      	subs	r3, r3, r2
 80021de:	4a49      	ldr	r2, [pc, #292]	; (8002304 <GameTick+0x4e4>)
 80021e0:	6013      	str	r3, [r2, #0]
	}
// Cloud generation
	if (tick - terrainGenPreTick - cloudTick == nextCloudTickDel) {
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <GameTick+0x4e0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2264      	movs	r2, #100	; 0x64
 80021e8:	1a9a      	subs	r2, r3, r2
 80021ea:	4b49      	ldr	r3, [pc, #292]	; (8002310 <GameTick+0x4f0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	4a48      	ldr	r2, [pc, #288]	; (8002314 <GameTick+0x4f4>)
 80021f2:	8812      	ldrh	r2, [r2, #0]
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d124      	bne.n	8002242 <GameTick+0x422>
		cloudHeader = Append(cloudHeader, CloudNormal, 96,
 80021f8:	4b47      	ldr	r3, [pc, #284]	; (8002318 <GameTick+0x4f8>)
 80021fa:	681c      	ldr	r4, [r3, #0]
 80021fc:	4b40      	ldr	r3, [pc, #256]	; (8002300 <GameTick+0x4e0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2214      	movs	r2, #20
 8002202:	210c      	movs	r1, #12
 8002204:	4618      	mov	r0, r3
 8002206:	f001 f8e5 	bl	80033d4 <Random>
 800220a:	4603      	mov	r3, r0
 800220c:	2260      	movs	r2, #96	; 0x60
 800220e:	2100      	movs	r1, #0
 8002210:	4620      	mov	r0, r4
 8002212:	f000 ff4a 	bl	80030aa <Append>
 8002216:	4603      	mov	r3, r0
 8002218:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <GameTick+0x4f8>)
 800221a:	6013      	str	r3, [r2, #0]
				Random(tick, 12, 20));
		nextCloudTickDel = Random(tick, 1200, 2000);
 800221c:	4b38      	ldr	r3, [pc, #224]	; (8002300 <GameTick+0x4e0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002224:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002228:	4618      	mov	r0, r3
 800222a:	f001 f8d3 	bl	80033d4 <Random>
 800222e:	4603      	mov	r3, r0
 8002230:	b29a      	uxth	r2, r3
 8002232:	4b38      	ldr	r3, [pc, #224]	; (8002314 <GameTick+0x4f4>)
 8002234:	801a      	strh	r2, [r3, #0]
		cloudTick = tick - terrainGenPreTick;
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <GameTick+0x4e0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2264      	movs	r2, #100	; 0x64
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	4a34      	ldr	r2, [pc, #208]	; (8002310 <GameTick+0x4f0>)
 8002240:	6013      	str	r3, [r2, #0]
	}
// Dirt texture generation
	if (tick - terrainGenPreTick - dirtTexTick == nextDirtTexTickDel) {
 8002242:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <GameTick+0x4e0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2264      	movs	r2, #100	; 0x64
 8002248:	1a9a      	subs	r2, r3, r2
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <GameTick+0x4fc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	4a33      	ldr	r2, [pc, #204]	; (8002320 <GameTick+0x500>)
 8002252:	8812      	ldrh	r2, [r2, #0]
 8002254:	4293      	cmp	r3, r2
 8002256:	d12b      	bne.n	80022b0 <GameTick+0x490>

		dirtTexHeader = Append(dirtTexHeader, Random(tick, 2, 6), 96,
 8002258:	4b32      	ldr	r3, [pc, #200]	; (8002324 <GameTick+0x504>)
 800225a:	681c      	ldr	r4, [r3, #0]
 800225c:	4b28      	ldr	r3, [pc, #160]	; (8002300 <GameTick+0x4e0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2206      	movs	r2, #6
 8002262:	2102      	movs	r1, #2
 8002264:	4618      	mov	r0, r3
 8002266:	f001 f8b5 	bl	80033d4 <Random>
 800226a:	4603      	mov	r3, r0
 800226c:	b2dd      	uxtb	r5, r3
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <GameTick+0x4e0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	225a      	movs	r2, #90	; 0x5a
 8002274:	2153      	movs	r1, #83	; 0x53
 8002276:	4618      	mov	r0, r3
 8002278:	f001 f8ac 	bl	80033d4 <Random>
 800227c:	4603      	mov	r3, r0
 800227e:	2260      	movs	r2, #96	; 0x60
 8002280:	4629      	mov	r1, r5
 8002282:	4620      	mov	r0, r4
 8002284:	f000 ff11 	bl	80030aa <Append>
 8002288:	4603      	mov	r3, r0
 800228a:	4a26      	ldr	r2, [pc, #152]	; (8002324 <GameTick+0x504>)
 800228c:	6013      	str	r3, [r2, #0]
				Random(tick, 83, 90));

		nextDirtTexTickDel = Random(tick, 8, 20);
 800228e:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <GameTick+0x4e0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2214      	movs	r2, #20
 8002294:	2108      	movs	r1, #8
 8002296:	4618      	mov	r0, r3
 8002298:	f001 f89c 	bl	80033d4 <Random>
 800229c:	4603      	mov	r3, r0
 800229e:	b29a      	uxth	r2, r3
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <GameTick+0x500>)
 80022a2:	801a      	strh	r2, [r3, #0]
		dirtTexTick = tick - terrainGenPreTick;
 80022a4:	4b16      	ldr	r3, [pc, #88]	; (8002300 <GameTick+0x4e0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2264      	movs	r2, #100	; 0x64
 80022aa:	1a9b      	subs	r3, r3, r2
 80022ac:	4a1b      	ldr	r2, [pc, #108]	; (800231c <GameTick+0x4fc>)
 80022ae:	6013      	str	r3, [r2, #0]
	}
// Bumps and depressions generation
	if (tick - terrainGenPreTick - bumpOrDepressionTick
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <GameTick+0x4e0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2264      	movs	r2, #100	; 0x64
 80022b6:	1a9a      	subs	r2, r3, r2
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <GameTick+0x508>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1ad3      	subs	r3, r2, r3
			== nextBumpOrDepressionTickDel) {
 80022be:	4a1b      	ldr	r2, [pc, #108]	; (800232c <GameTick+0x50c>)
 80022c0:	8812      	ldrh	r2, [r2, #0]
	if (tick - terrainGenPreTick - bumpOrDepressionTick
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d151      	bne.n	800236a <GameTick+0x54a>
		if (Random(tick, 0, 1)) {
 80022c6:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <GameTick+0x4e0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 f880 	bl	80033d4 <Random>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d02c      	beq.n	8002334 <GameTick+0x514>
			bumpAndDepressionHeader = Append(bumpAndDepressionHeader,
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <GameTick+0x510>)
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	234b      	movs	r3, #75	; 0x4b
 80022e0:	2260      	movs	r2, #96	; 0x60
 80022e2:	2100      	movs	r1, #0
 80022e4:	f000 fee1 	bl	80030aa <Append>
 80022e8:	4603      	mov	r3, r0
 80022ea:	4a11      	ldr	r2, [pc, #68]	; (8002330 <GameTick+0x510>)
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e02b      	b.n	8002348 <GameTick+0x528>
 80022f0:	200000b4 	.word	0x200000b4
 80022f4:	200000dc 	.word	0x200000dc
 80022f8:	200000e8 	.word	0x200000e8
 80022fc:	42680000 	.word	0x42680000
 8002300:	200000b8 	.word	0x200000b8
 8002304:	200000bc 	.word	0x200000bc
 8002308:	200000d2 	.word	0x200000d2
 800230c:	200000f4 	.word	0x200000f4
 8002310:	200000c0 	.word	0x200000c0
 8002314:	200000d4 	.word	0x200000d4
 8002318:	200000f0 	.word	0x200000f0
 800231c:	200000cc 	.word	0x200000cc
 8002320:	200000da 	.word	0x200000da
 8002324:	20000100 	.word	0x20000100
 8002328:	200000c8 	.word	0x200000c8
 800232c:	200000d8 	.word	0x200000d8
 8002330:	20000104 	.word	0x20000104
			Bump, 96, 75);
		} else {
			bumpAndDepressionHeader = Append(bumpAndDepressionHeader,
 8002334:	4ba8      	ldr	r3, [pc, #672]	; (80025d8 <GameTick+0x7b8>)
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	234e      	movs	r3, #78	; 0x4e
 800233a:	2260      	movs	r2, #96	; 0x60
 800233c:	2101      	movs	r1, #1
 800233e:	f000 feb4 	bl	80030aa <Append>
 8002342:	4603      	mov	r3, r0
 8002344:	4aa4      	ldr	r2, [pc, #656]	; (80025d8 <GameTick+0x7b8>)
 8002346:	6013      	str	r3, [r2, #0]
			Depression, 96, 78);
		}

		nextBumpOrDepressionTickDel = Random(tick, 20, 150);
 8002348:	4ba4      	ldr	r3, [pc, #656]	; (80025dc <GameTick+0x7bc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2296      	movs	r2, #150	; 0x96
 800234e:	2114      	movs	r1, #20
 8002350:	4618      	mov	r0, r3
 8002352:	f001 f83f 	bl	80033d4 <Random>
 8002356:	4603      	mov	r3, r0
 8002358:	b29a      	uxth	r2, r3
 800235a:	4ba1      	ldr	r3, [pc, #644]	; (80025e0 <GameTick+0x7c0>)
 800235c:	801a      	strh	r2, [r3, #0]
		bumpOrDepressionTick = tick - terrainGenPreTick;
 800235e:	4b9f      	ldr	r3, [pc, #636]	; (80025dc <GameTick+0x7bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2264      	movs	r2, #100	; 0x64
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	4a9f      	ldr	r2, [pc, #636]	; (80025e4 <GameTick+0x7c4>)
 8002368:	6013      	str	r3, [r2, #0]
	}

// Bird Sign Generation
	if (tick - birdGenPreTick - birdTick == nextBirdTickDel) {
 800236a:	4b9c      	ldr	r3, [pc, #624]	; (80025dc <GameTick+0x7bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	22a0      	movs	r2, #160	; 0xa0
 8002370:	1a9a      	subs	r2, r3, r2
 8002372:	4b9d      	ldr	r3, [pc, #628]	; (80025e8 <GameTick+0x7c8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	4a9c      	ldr	r2, [pc, #624]	; (80025ec <GameTick+0x7cc>)
 800237a:	8812      	ldrh	r2, [r2, #0]
 800237c:	4293      	cmp	r3, r2
 800237e:	d111      	bne.n	80023a4 <GameTick+0x584>
		signsHeader = Append(signsHeader, BirdSign, 96, Random(tick, 61, 62));
 8002380:	4b9b      	ldr	r3, [pc, #620]	; (80025f0 <GameTick+0x7d0>)
 8002382:	681c      	ldr	r4, [r3, #0]
 8002384:	4b95      	ldr	r3, [pc, #596]	; (80025dc <GameTick+0x7bc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	223e      	movs	r2, #62	; 0x3e
 800238a:	213d      	movs	r1, #61	; 0x3d
 800238c:	4618      	mov	r0, r3
 800238e:	f001 f821 	bl	80033d4 <Random>
 8002392:	4603      	mov	r3, r0
 8002394:	2260      	movs	r2, #96	; 0x60
 8002396:	2100      	movs	r1, #0
 8002398:	4620      	mov	r0, r4
 800239a:	f000 fe86 	bl	80030aa <Append>
 800239e:	4603      	mov	r3, r0
 80023a0:	4a93      	ldr	r2, [pc, #588]	; (80025f0 <GameTick+0x7d0>)
 80023a2:	6013      	str	r3, [r2, #0]
	}
// Bird generation
	if (tick - birdGenPreTick - birdTick - 200 == nextBirdTickDel) {
 80023a4:	4b8d      	ldr	r3, [pc, #564]	; (80025dc <GameTick+0x7bc>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	22a0      	movs	r2, #160	; 0xa0
 80023aa:	1a9a      	subs	r2, r3, r2
 80023ac:	4b8e      	ldr	r3, [pc, #568]	; (80025e8 <GameTick+0x7c8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	3bc8      	subs	r3, #200	; 0xc8
 80023b4:	4a8d      	ldr	r2, [pc, #564]	; (80025ec <GameTick+0x7cc>)
 80023b6:	8812      	ldrh	r2, [r2, #0]
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d123      	bne.n	8002404 <GameTick+0x5e4>

		birdHeader = Append(birdHeader, BirdWithWingsDownwards, 96,
 80023bc:	4b8d      	ldr	r3, [pc, #564]	; (80025f4 <GameTick+0x7d4>)
 80023be:	681c      	ldr	r4, [r3, #0]
 80023c0:	4b86      	ldr	r3, [pc, #536]	; (80025dc <GameTick+0x7bc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2233      	movs	r2, #51	; 0x33
 80023c6:	210a      	movs	r1, #10
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 f803 	bl	80033d4 <Random>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2260      	movs	r2, #96	; 0x60
 80023d2:	2100      	movs	r1, #0
 80023d4:	4620      	mov	r0, r4
 80023d6:	f000 fe68 	bl	80030aa <Append>
 80023da:	4603      	mov	r3, r0
 80023dc:	4a85      	ldr	r2, [pc, #532]	; (80025f4 <GameTick+0x7d4>)
 80023de:	6013      	str	r3, [r2, #0]
				Random(tick, 10, 51));

		nextBirdTickDel = Random(tick, 250, 800);
 80023e0:	4b7e      	ldr	r3, [pc, #504]	; (80025dc <GameTick+0x7bc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80023e8:	21fa      	movs	r1, #250	; 0xfa
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 fff2 	bl	80033d4 <Random>
 80023f0:	4603      	mov	r3, r0
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	4b7d      	ldr	r3, [pc, #500]	; (80025ec <GameTick+0x7cc>)
 80023f6:	801a      	strh	r2, [r3, #0]
		birdTick = tick - birdGenPreTick;
 80023f8:	4b78      	ldr	r3, [pc, #480]	; (80025dc <GameTick+0x7bc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	22a0      	movs	r2, #160	; 0xa0
 80023fe:	1a9b      	subs	r3, r3, r2
 8002400:	4a79      	ldr	r2, [pc, #484]	; (80025e8 <GameTick+0x7c8>)
 8002402:	6013      	str	r3, [r2, #0]
	}

// Ground objs shift
	plantHeader = ShiftX(plantHeader, -1 * overallSpeed);
 8002404:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <GameTick+0x7d8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a7c      	ldr	r2, [pc, #496]	; (80025fc <GameTick+0x7dc>)
 800240a:	edd2 7a00 	vldr	s15, [r2]
 800240e:	eef1 7a67 	vneg.f32	s15, s15
 8002412:	eeb0 0a67 	vmov.f32	s0, s15
 8002416:	4618      	mov	r0, r3
 8002418:	f000 ff63 	bl	80032e2 <ShiftX>
 800241c:	4603      	mov	r3, r0
 800241e:	4a76      	ldr	r2, [pc, #472]	; (80025f8 <GameTick+0x7d8>)
 8002420:	6013      	str	r3, [r2, #0]
	dirtTexHeader = ShiftX(dirtTexHeader, -1 * overallSpeed);
 8002422:	4b77      	ldr	r3, [pc, #476]	; (8002600 <GameTick+0x7e0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <GameTick+0x7dc>)
 8002428:	edd2 7a00 	vldr	s15, [r2]
 800242c:	eef1 7a67 	vneg.f32	s15, s15
 8002430:	eeb0 0a67 	vmov.f32	s0, s15
 8002434:	4618      	mov	r0, r3
 8002436:	f000 ff54 	bl	80032e2 <ShiftX>
 800243a:	4603      	mov	r3, r0
 800243c:	4a70      	ldr	r2, [pc, #448]	; (8002600 <GameTick+0x7e0>)
 800243e:	6013      	str	r3, [r2, #0]
	signsHeader = ShiftX(signsHeader, -1 * overallSpeed);
 8002440:	4b6b      	ldr	r3, [pc, #428]	; (80025f0 <GameTick+0x7d0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a6d      	ldr	r2, [pc, #436]	; (80025fc <GameTick+0x7dc>)
 8002446:	edd2 7a00 	vldr	s15, [r2]
 800244a:	eef1 7a67 	vneg.f32	s15, s15
 800244e:	eeb0 0a67 	vmov.f32	s0, s15
 8002452:	4618      	mov	r0, r3
 8002454:	f000 ff45 	bl	80032e2 <ShiftX>
 8002458:	4603      	mov	r3, r0
 800245a:	4a65      	ldr	r2, [pc, #404]	; (80025f0 <GameTick+0x7d0>)
 800245c:	6013      	str	r3, [r2, #0]
	bumpAndDepressionHeader = ShiftX(bumpAndDepressionHeader,
 800245e:	4b5e      	ldr	r3, [pc, #376]	; (80025d8 <GameTick+0x7b8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a66      	ldr	r2, [pc, #408]	; (80025fc <GameTick+0x7dc>)
 8002464:	edd2 7a00 	vldr	s15, [r2]
 8002468:	eef1 7a67 	vneg.f32	s15, s15
 800246c:	eeb0 0a67 	vmov.f32	s0, s15
 8002470:	4618      	mov	r0, r3
 8002472:	f000 ff36 	bl	80032e2 <ShiftX>
 8002476:	4603      	mov	r3, r0
 8002478:	4a57      	ldr	r2, [pc, #348]	; (80025d8 <GameTick+0x7b8>)
 800247a:	6013      	str	r3, [r2, #0]
			-1 * overallSpeed);
	birdHeader = ShiftX(birdHeader, -1.2 * overallSpeed);
 800247c:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <GameTick+0x7d4>)
 800247e:	681c      	ldr	r4, [r3, #0]
 8002480:	4b5e      	ldr	r3, [pc, #376]	; (80025fc <GameTick+0x7dc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f867 	bl	8000558 <__aeabi_f2d>
 800248a:	a34f      	add	r3, pc, #316	; (adr r3, 80025c8 <GameTick+0x7a8>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fe f8ba 	bl	8000608 <__aeabi_dmul>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fb96 	bl	8000bcc <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	ee00 3a10 	vmov	s0, r3
 80024a6:	4620      	mov	r0, r4
 80024a8:	f000 ff1b 	bl	80032e2 <ShiftX>
 80024ac:	4603      	mov	r3, r0
 80024ae:	4a51      	ldr	r2, [pc, #324]	; (80025f4 <GameTick+0x7d4>)
 80024b0:	6013      	str	r3, [r2, #0]

// Air objs shift
	cloudHeader = ShiftX(cloudHeader, -0.1 * overallSpeed);
 80024b2:	4b54      	ldr	r3, [pc, #336]	; (8002604 <GameTick+0x7e4>)
 80024b4:	681c      	ldr	r4, [r3, #0]
 80024b6:	4b51      	ldr	r3, [pc, #324]	; (80025fc <GameTick+0x7dc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe f84c 	bl	8000558 <__aeabi_f2d>
 80024c0:	a343      	add	r3, pc, #268	; (adr r3, 80025d0 <GameTick+0x7b0>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f89f 	bl	8000608 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4610      	mov	r0, r2
 80024d0:	4619      	mov	r1, r3
 80024d2:	f7fe fb7b 	bl	8000bcc <__aeabi_d2f>
 80024d6:	4603      	mov	r3, r0
 80024d8:	ee00 3a10 	vmov	s0, r3
 80024dc:	4620      	mov	r0, r4
 80024de:	f000 ff00 	bl	80032e2 <ShiftX>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a47      	ldr	r2, [pc, #284]	; (8002604 <GameTick+0x7e4>)
 80024e6:	6013      	str	r3, [r2, #0]

// Cull plant
	ptr = plantHeader;
 80024e8:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <GameTick+0x7d8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a46      	ldr	r2, [pc, #280]	; (8002608 <GameTick+0x7e8>)
 80024ee:	6013      	str	r3, [r2, #0]
	for (;;) {
		if (ptr->full) {
 80024f0:	4b45      	ldr	r3, [pc, #276]	; (8002608 <GameTick+0x7e8>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	7c1b      	ldrb	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01c      	beq.n	8002534 <GameTick+0x714>
			for (uint8_t y = 71; y <= 77; y++) {
 80024fa:	2347      	movs	r3, #71	; 0x47
 80024fc:	73fb      	strb	r3, [r7, #15]
 80024fe:	e016      	b.n	800252e <GameTick+0x70e>
				LCD_DrawLine(y, ptr->x + 2, 6, DRAWMODE_CULL, flipStatus);
 8002500:	4b41      	ldr	r3, [pc, #260]	; (8002608 <GameTick+0x7e8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	edd3 7a01 	vldr	s15, [r3, #4]
 8002508:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800250c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002514:	4b3d      	ldr	r3, [pc, #244]	; (800260c <GameTick+0x7ec>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	7bf8      	ldrb	r0, [r7, #15]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2301      	movs	r3, #1
 800251e:	2206      	movs	r2, #6
 8002520:	ee17 1a90 	vmov	r1, s15
 8002524:	f7ff f8a8 	bl	8001678 <LCD_DrawLine>
			for (uint8_t y = 71; y <= 77; y++) {
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	3301      	adds	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	2b4d      	cmp	r3, #77	; 0x4d
 8002532:	d9e5      	bls.n	8002500 <GameTick+0x6e0>
			}
		}
		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == plantHeader)
 8002534:	4b34      	ldr	r3, [pc, #208]	; (8002608 <GameTick+0x7e8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	7c1b      	ldrb	r3, [r3, #16]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <GameTick+0x740>
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <GameTick+0x7e8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <GameTick+0x7d8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d005      	beq.n	8002560 <GameTick+0x740>
			break;

		ptr = ptr->next;
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <GameTick+0x7e8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4a2b      	ldr	r2, [pc, #172]	; (8002608 <GameTick+0x7e8>)
 800255c:	6013      	str	r3, [r2, #0]
		if (ptr->full) {
 800255e:	e7c7      	b.n	80024f0 <GameTick+0x6d0>
	}

	// Cull bumps
	ptr = bumpAndDepressionHeader;
 8002560:	4b1d      	ldr	r3, [pc, #116]	; (80025d8 <GameTick+0x7b8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <GameTick+0x7e8>)
 8002566:	6013      	str	r3, [r2, #0]
	for (;;) {
		if (ptr->full) {
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <GameTick+0x7e8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	7c1b      	ldrb	r3, [r3, #16]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d013      	beq.n	800259a <GameTick+0x77a>

			LCD_DrawLine(77, ptr->x + 1, 6, DRAWMODE_CULL, flipStatus);
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <GameTick+0x7e8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	edd3 7a01 	vldr	s15, [r3, #4]
 800257a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800257e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002586:	4b21      	ldr	r3, [pc, #132]	; (800260c <GameTick+0x7ec>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2301      	movs	r3, #1
 800258e:	2206      	movs	r2, #6
 8002590:	ee17 1a90 	vmov	r1, s15
 8002594:	204d      	movs	r0, #77	; 0x4d
 8002596:	f7ff f86f 	bl	8001678 <LCD_DrawLine>
		}
		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == bumpAndDepressionHeader)
 800259a:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <GameTick+0x7e8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	7c1b      	ldrb	r3, [r3, #16]
 80025a2:	f083 0301 	eor.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d131      	bne.n	8002610 <GameTick+0x7f0>
 80025ac:	4b16      	ldr	r3, [pc, #88]	; (8002608 <GameTick+0x7e8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <GameTick+0x7b8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d02a      	beq.n	8002610 <GameTick+0x7f0>
			break;

		ptr = ptr->next;
 80025ba:	4b13      	ldr	r3, [pc, #76]	; (8002608 <GameTick+0x7e8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4a11      	ldr	r2, [pc, #68]	; (8002608 <GameTick+0x7e8>)
 80025c2:	6013      	str	r3, [r2, #0]
		if (ptr->full) {
 80025c4:	e7d0      	b.n	8002568 <GameTick+0x748>
 80025c6:	bf00      	nop
 80025c8:	33333333 	.word	0x33333333
 80025cc:	bff33333 	.word	0xbff33333
 80025d0:	9999999a 	.word	0x9999999a
 80025d4:	bfb99999 	.word	0xbfb99999
 80025d8:	20000104 	.word	0x20000104
 80025dc:	200000b8 	.word	0x200000b8
 80025e0:	200000d8 	.word	0x200000d8
 80025e4:	200000c8 	.word	0x200000c8
 80025e8:	200000c4 	.word	0x200000c4
 80025ec:	200000d6 	.word	0x200000d6
 80025f0:	200000fc 	.word	0x200000fc
 80025f4:	200000f8 	.word	0x200000f8
 80025f8:	200000f4 	.word	0x200000f4
 80025fc:	200000e0 	.word	0x200000e0
 8002600:	20000100 	.word	0x20000100
 8002604:	200000f0 	.word	0x200000f0
 8002608:	200000e4 	.word	0x200000e4
 800260c:	200000d0 	.word	0x200000d0
	}

	if (dinoState == FIRING) {
 8002610:	4b8b      	ldr	r3, [pc, #556]	; (8002840 <GameTick+0xa20>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d120      	bne.n	800265a <GameTick+0x83a>

		UpdateHeaderBmpIndex(fireHeader,
 8002618:	4b8a      	ldr	r3, [pc, #552]	; (8002844 <GameTick+0xa24>)
 800261a:	681a      	ldr	r2, [r3, #0]
				(tick / (int) (12 / overallSpeed)) % 2);
 800261c:	4b8a      	ldr	r3, [pc, #552]	; (8002848 <GameTick+0xa28>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	498a      	ldr	r1, [pc, #552]	; (800284c <GameTick+0xa2c>)
 8002622:	ed91 7a00 	vldr	s14, [r1]
 8002626:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800262a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800262e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002632:	ee17 1a90 	vmov	r1, s15
 8002636:	fbb3 f3f1 	udiv	r3, r3, r1
		UpdateHeaderBmpIndex(fireHeader,
 800263a:	b2db      	uxtb	r3, r3
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f000 fda5 	bl	8003194 <UpdateHeaderBmpIndex>
		LCD_LoadObjs(fireHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 800264a:	4b7e      	ldr	r3, [pc, #504]	; (8002844 <GameTick+0xa24>)
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	4b80      	ldr	r3, [pc, #512]	; (8002850 <GameTick+0xa30>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	f7fe fe0f 	bl	8001278 <LCD_LoadObjs>
	}

	UpdateAllBmpIndexs(birdHeader,
 800265a:	4b7e      	ldr	r3, [pc, #504]	; (8002854 <GameTick+0xa34>)
 800265c:	6818      	ldr	r0, [r3, #0]
	BirdWithWingsDownwards + (tick / (int) (8 / overallSpeed)) % 2,
 800265e:	4b7a      	ldr	r3, [pc, #488]	; (8002848 <GameTick+0xa28>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7a      	ldr	r2, [pc, #488]	; (800284c <GameTick+0xa2c>)
 8002664:	ed92 7a00 	vldr	s14, [r2]
 8002668:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800266c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002670:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002674:	ee17 2a90 	vmov	r2, s15
 8002678:	fbb3 f3f2 	udiv	r3, r3, r2
	UpdateAllBmpIndexs(birdHeader,
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	b2db      	uxtb	r3, r3
 8002684:	22ff      	movs	r2, #255	; 0xff
 8002686:	4619      	mov	r1, r3
 8002688:	f000 fd93 	bl	80031b2 <UpdateAllBmpIndexs>
	NoIgnoringIndex);

	LCD_LoadObjs(plantHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 800268c:	4b72      	ldr	r3, [pc, #456]	; (8002858 <GameTick+0xa38>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <GameTick+0xa30>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	f7fe fdee 	bl	8001278 <LCD_LoadObjs>
	LCD_LoadObjs(birdHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 800269c:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <GameTick+0xa34>)
 800269e:	6818      	ldr	r0, [r3, #0]
 80026a0:	4b6b      	ldr	r3, [pc, #428]	; (8002850 <GameTick+0xa30>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2200      	movs	r2, #0
 80026a6:	2100      	movs	r1, #0
 80026a8:	f7fe fde6 	bl	8001278 <LCD_LoadObjs>
	LCD_LoadObjs(signsHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 80026ac:	4b6b      	ldr	r3, [pc, #428]	; (800285c <GameTick+0xa3c>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	4b67      	ldr	r3, [pc, #412]	; (8002850 <GameTick+0xa30>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	2100      	movs	r1, #0
 80026b8:	f7fe fdde 	bl	8001278 <LCD_LoadObjs>
	LCD_LoadObjs(cloudHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 80026bc:	4b68      	ldr	r3, [pc, #416]	; (8002860 <GameTick+0xa40>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	4b63      	ldr	r3, [pc, #396]	; (8002850 <GameTick+0xa30>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	f7fe fdd6 	bl	8001278 <LCD_LoadObjs>
	LCD_LoadObjs(dirtTexHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 80026cc:	4b65      	ldr	r3, [pc, #404]	; (8002864 <GameTick+0xa44>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <GameTick+0xa30>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	f7fe fdce 	bl	8001278 <LCD_LoadObjs>
	LCD_LoadObjs(bumpAndDepressionHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80026dc:	4b62      	ldr	r3, [pc, #392]	; (8002868 <GameTick+0xa48>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <GameTick+0xa30>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2100      	movs	r1, #0
 80026e8:	f7fe fdc6 	bl	8001278 <LCD_LoadObjs>
			flipStatus);

	MeltPlants();
 80026ec:	f000 f9e2 	bl	8002ab4 <MeltPlants>
	if (DinoGetsStuck())
 80026f0:	f000 fa6c 	bl	8002bcc <DinoGetsStuck>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d111      	bne.n	800271e <GameTick+0x8fe>
		goto Dead;

	RenderDino(dinoHeader, dinoState, 0);
 80026fa:	4b5c      	ldr	r3, [pc, #368]	; (800286c <GameTick+0xa4c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a50      	ldr	r2, [pc, #320]	; (8002840 <GameTick+0xa20>)
 8002700:	7811      	ldrb	r1, [r2, #0]
 8002702:	2200      	movs	r2, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f8b7 	bl	8002878 <RenderDino>

	tick++;
 800270a:	4b4f      	ldr	r3, [pc, #316]	; (8002848 <GameTick+0xa28>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <GameTick+0xa28>)
 8002712:	6013      	str	r3, [r2, #0]
	LCD_UpdateFull(display);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7fe fcbd 	bl	8001094 <LCD_UpdateFull>
	return DINO_IS_ALIVE;
 800271a:	2300      	movs	r3, #0
 800271c:	e08c      	b.n	8002838 <GameTick+0xa18>
		goto Dead;
 800271e:	bf00      	nop

	Dead: LCD_SaveBuf();
 8002720:	f7fe fd86 	bl	8001230 <LCD_SaveBuf>
	// Redraw Dino
	while (dinoHeader->y < dinoGroundPos) {
 8002724:	e016      	b.n	8002754 <GameTick+0x934>
		LCD_LoadBuf();
 8002726:	f7fe fd95 	bl	8001254 <LCD_LoadBuf>
		dinoHeader->y++;
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <GameTick+0xa4c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002732:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800273a:	edc3 7a02 	vstr	s15, [r3, #8]
		RenderDino(dinoHeader, dinoState, 1);
 800273e:	4b4b      	ldr	r3, [pc, #300]	; (800286c <GameTick+0xa4c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a3f      	ldr	r2, [pc, #252]	; (8002840 <GameTick+0xa20>)
 8002744:	7811      	ldrb	r1, [r2, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f000 f895 	bl	8002878 <RenderDino>
		LCD_UpdateFull(display);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7fe fca0 	bl	8001094 <LCD_UpdateFull>
	while (dinoHeader->y < dinoGroundPos) {
 8002754:	4b45      	ldr	r3, [pc, #276]	; (800286c <GameTick+0xa4c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	edd3 7a02 	vldr	s15, [r3, #8]
 800275c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8002870 <GameTick+0xa50>
 8002760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	d4dd      	bmi.n	8002726 <GameTick+0x906>
	}

	LCD_LoadBuf();
 800276a:	f7fe fd73 	bl	8001254 <LCD_LoadBuf>
	RenderDino(dinoHeader, dinoState, 1);
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <GameTick+0xa4c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a33      	ldr	r2, [pc, #204]	; (8002840 <GameTick+0xa20>)
 8002774:	7811      	ldrb	r1, [r2, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f000 f87d 	bl	8002878 <RenderDino>
	LCD_UpdateFull(display);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fc88 	bl	8001094 <LCD_UpdateFull>

	HAL_Delay(300);
 8002784:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002788:	f001 fb08 	bl	8003d9c <HAL_Delay>

	// Flip screen
	for (uint8_t i = 0; i < 2; i++) {
 800278c:	2300      	movs	r3, #0
 800278e:	73bb      	strb	r3, [r7, #14]
 8002790:	e00a      	b.n	80027a8 <GameTick+0x988>
		HAL_Delay(100);
 8002792:	2064      	movs	r0, #100	; 0x64
 8002794:	f001 fb02 	bl	8003d9c <HAL_Delay>
		LCD_Invert();
 8002798:	f7ff f872 	bl	8001880 <LCD_Invert>
		LCD_UpdateFull(display);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7fe fc79 	bl	8001094 <LCD_UpdateFull>
	for (uint8_t i = 0; i < 2; i++) {
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	3301      	adds	r3, #1
 80027a6:	73bb      	strb	r3, [r7, #14]
 80027a8:	7bbb      	ldrb	r3, [r7, #14]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d9f1      	bls.n	8002792 <GameTick+0x972>
	}

	for (uint8_t l = 96; l > 28; l--) {
 80027ae:	2360      	movs	r3, #96	; 0x60
 80027b0:	737b      	strb	r3, [r7, #13]
 80027b2:	e03b      	b.n	800282c <GameTick+0xa0c>
		uint8_t delayTime = ceil((float) (96 - l) * 8 / 67);
 80027b4:	7b7b      	ldrb	r3, [r7, #13]
 80027b6:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80027c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ca:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002874 <GameTick+0xa54>
 80027ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80027d2:	ee16 0a90 	vmov	r0, s13
 80027d6:	f7fd febf 	bl	8000558 <__aeabi_f2d>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	ec43 2b10 	vmov	d0, r2, r3
 80027e2:	f004 f9c1 	bl	8006b68 <ceil>
 80027e6:	ec53 2b10 	vmov	r2, r3, d0
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe f9cd 	bl	8000b8c <__aeabi_d2uiz>
 80027f2:	4603      	mov	r3, r0
 80027f4:	733b      	strb	r3, [r7, #12]
		LCD_DrawLine(77, l, 1, DRAWMODE_CULL, flipStatus);
 80027f6:	7b79      	ldrb	r1, [r7, #13]
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <GameTick+0xa30>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2301      	movs	r3, #1
 8002800:	2201      	movs	r2, #1
 8002802:	204d      	movs	r0, #77	; 0x4d
 8002804:	f7fe ff38 	bl	8001678 <LCD_DrawLine>
		LCD_UpdateLine(display, 77);
 8002808:	214d      	movs	r1, #77	; 0x4d
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7fe fcb4 	bl	8001178 <LCD_UpdateLine>
		HAL_Delay(delayTime);
 8002810:	7b3b      	ldrb	r3, [r7, #12]
 8002812:	4618      	mov	r0, r3
 8002814:	f001 fac2 	bl	8003d9c <HAL_Delay>
		if (GetButtonDown(BUTTON_2, 6))
 8002818:	2106      	movs	r1, #6
 800281a:	2003      	movs	r0, #3
 800281c:	f7ff f976 	bl	8001b0c <GetButtonDown>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <GameTick+0xa14>
	for (uint8_t l = 96; l > 28; l--) {
 8002826:	7b7b      	ldrb	r3, [r7, #13]
 8002828:	3b01      	subs	r3, #1
 800282a:	737b      	strb	r3, [r7, #13]
 800282c:	7b7b      	ldrb	r3, [r7, #13]
 800282e:	2b1c      	cmp	r3, #28
 8002830:	d8c0      	bhi.n	80027b4 <GameTick+0x994>
 8002832:	e000      	b.n	8002836 <GameTick+0xa16>
			break;
 8002834:	bf00      	nop
	}
	return DINO_IS_DEAD;
 8002836:	2301      	movs	r3, #1
}
 8002838:	4618      	mov	r0, r3
 800283a:	3710      	adds	r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bdb0      	pop	{r4, r5, r7, pc}
 8002840:	200000dc 	.word	0x200000dc
 8002844:	200000ec 	.word	0x200000ec
 8002848:	200000b8 	.word	0x200000b8
 800284c:	200000e0 	.word	0x200000e0
 8002850:	200000d0 	.word	0x200000d0
 8002854:	200000f8 	.word	0x200000f8
 8002858:	200000f4 	.word	0x200000f4
 800285c:	200000fc 	.word	0x200000fc
 8002860:	200000f0 	.word	0x200000f0
 8002864:	20000100 	.word	0x20000100
 8002868:	20000104 	.word	0x20000104
 800286c:	200000e8 	.word	0x200000e8
 8002870:	42680000 	.word	0x42680000
 8002874:	42860000 	.word	0x42860000

08002878 <RenderDino>:

void RenderDino(GameObj *dino, uint8_t dinoState, bool isDead) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af02      	add	r7, sp, #8
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	70fb      	strb	r3, [r7, #3]
 8002884:	4613      	mov	r3, r2
 8002886:	70bb      	strb	r3, [r7, #2]
	if (!isDead) {
 8002888:	78bb      	ldrb	r3, [r7, #2]
 800288a:	f083 0301 	eor.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80a1 	beq.w	80029d8 <RenderDino+0x160>
		switch (dinoState) {
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	3b01      	subs	r3, #1
 800289a:	2b05      	cmp	r3, #5
 800289c:	f200 80f6 	bhi.w	8002a8c <RenderDino+0x214>
 80028a0:	a201      	add	r2, pc, #4	; (adr r2, 80028a8 <RenderDino+0x30>)
 80028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a6:	bf00      	nop
 80028a8:	080028c1 	.word	0x080028c1
 80028ac:	08002989 	.word	0x08002989
 80028b0:	08002911 	.word	0x08002911
 80028b4:	08002925 	.word	0x08002925
 80028b8:	0800294b 	.word	0x0800294b
 80028bc:	08002939 	.word	0x08002939
		case RUNNING:
			LCD_DrawLine(77, 8, 8, DRAWMODE_CULL, flipStatus);
 80028c0:	4b78      	ldr	r3, [pc, #480]	; (8002aa4 <RenderDino+0x22c>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	2301      	movs	r3, #1
 80028c8:	2208      	movs	r2, #8
 80028ca:	2108      	movs	r1, #8
 80028cc:	204d      	movs	r0, #77	; 0x4d
 80028ce:	f7fe fed3 	bl	8001678 <LCD_DrawLine>
			UpdateHeaderBmpIndex(dino,
					(tick / (int) (12 / overallSpeed)) % 2 + 1);
 80028d2:	4b75      	ldr	r3, [pc, #468]	; (8002aa8 <RenderDino+0x230>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a75      	ldr	r2, [pc, #468]	; (8002aac <RenderDino+0x234>)
 80028d8:	ed92 7a00 	vldr	s14, [r2]
 80028dc:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80028e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e8:	ee17 2a90 	vmov	r2, s15
 80028ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
			UpdateHeaderBmpIndex(dino,
 80028f8:	3301      	adds	r3, #1
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	4619      	mov	r1, r3
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fc48 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 8002904:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <RenderDino+0x238>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	605a      	str	r2, [r3, #4]
			break;
 800290e:	e0bd      	b.n	8002a8c <RenderDino+0x214>
		case JUMPING:
			UpdateHeaderBmpIndex(dino, DinoNormalStand);
 8002910:	2100      	movs	r1, #0
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fc3e 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 8002918:	4b65      	ldr	r3, [pc, #404]	; (8002ab0 <RenderDino+0x238>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	605a      	str	r2, [r3, #4]
			break;
 8002922:	e0b3      	b.n	8002a8c <RenderDino+0x214>
		case GLIDING:
			UpdateHeaderBmpIndex(dino, DinoGliding);
 8002924:	210c      	movs	r1, #12
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fc34 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosWhenGliding;
 800292c:	4b60      	ldr	r3, [pc, #384]	; (8002ab0 <RenderDino+0x238>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	605a      	str	r2, [r3, #4]
			break;
 8002936:	e0a9      	b.n	8002a8c <RenderDino+0x214>
		case CRAWLING:
			LCD_DrawLine(77, 8, 8, DRAWMODE_CULL, flipStatus);
 8002938:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <RenderDino+0x22c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2301      	movs	r3, #1
 8002940:	2208      	movs	r2, #8
 8002942:	2108      	movs	r1, #8
 8002944:	204d      	movs	r0, #77	; 0x4d
 8002946:	f7fe fe97 	bl	8001678 <LCD_DrawLine>
		case DODGING:
			UpdateHeaderBmpIndex(dino,
			DinoDodgingL + (tick / (int) (12 / overallSpeed)) % 2);
 800294a:	4b57      	ldr	r3, [pc, #348]	; (8002aa8 <RenderDino+0x230>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a57      	ldr	r2, [pc, #348]	; (8002aac <RenderDino+0x234>)
 8002950:	ed92 7a00 	vldr	s14, [r2]
 8002954:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800295c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002960:	ee17 2a90 	vmov	r2, s15
 8002964:	fbb3 f3f2 	udiv	r3, r3, r2
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
			UpdateHeaderBmpIndex(dino,
 8002970:	3309      	adds	r3, #9
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4619      	mov	r1, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fc0c 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosWhenDodging;
 800297c:	4b4c      	ldr	r3, [pc, #304]	; (8002ab0 <RenderDino+0x238>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	605a      	str	r2, [r3, #4]
			break;
 8002986:	e081      	b.n	8002a8c <RenderDino+0x214>
		case FIRING:
			LCD_DrawLine(77, 8, 8, DRAWMODE_CULL, flipStatus);
 8002988:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <RenderDino+0x22c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2301      	movs	r3, #1
 8002990:	2208      	movs	r2, #8
 8002992:	2108      	movs	r1, #8
 8002994:	204d      	movs	r0, #77	; 0x4d
 8002996:	f7fe fe6f 	bl	8001678 <LCD_DrawLine>
			UpdateHeaderBmpIndex(dino,
			DinoFiringL + (tick / (int) (12 / overallSpeed)) % 2);
 800299a:	4b43      	ldr	r3, [pc, #268]	; (8002aa8 <RenderDino+0x230>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a43      	ldr	r2, [pc, #268]	; (8002aac <RenderDino+0x234>)
 80029a0:	ed92 7a00 	vldr	s14, [r2]
 80029a4:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80029a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b0:	ee17 2a90 	vmov	r2, s15
 80029b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	b2db      	uxtb	r3, r3
			UpdateHeaderBmpIndex(dino,
 80029c0:	3305      	adds	r3, #5
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fbe4 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 80029cc:	4b38      	ldr	r3, [pc, #224]	; (8002ab0 <RenderDino+0x238>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	605a      	str	r2, [r3, #4]
			break;
 80029d6:	e059      	b.n	8002a8c <RenderDino+0x214>
		}
	} else if (isDead) {
 80029d8:	78bb      	ldrb	r3, [r7, #2]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d055      	beq.n	8002a8a <RenderDino+0x212>
		switch (dinoState) {
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	2b05      	cmp	r3, #5
 80029e4:	d852      	bhi.n	8002a8c <RenderDino+0x214>
 80029e6:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <RenderDino+0x174>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	08002a05 	.word	0x08002a05
 80029f0:	08002a65 	.word	0x08002a65
 80029f4:	08002a17 	.word	0x08002a17
 80029f8:	08002a2b 	.word	0x08002a2b
 80029fc:	08002a51 	.word	0x08002a51
 8002a00:	08002a3f 	.word	0x08002a3f
		case RUNNING:
			LCD_DrawLine(77, 8, 8, DRAWMODE_CULL, flipStatus);
 8002a04:	4b27      	ldr	r3, [pc, #156]	; (8002aa4 <RenderDino+0x22c>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	2108      	movs	r1, #8
 8002a10:	204d      	movs	r0, #77	; 0x4d
 8002a12:	f7fe fe31 	bl	8001678 <LCD_DrawLine>
		case JUMPING:
			UpdateHeaderBmpIndex(dino, DinoNormalDead);
 8002a16:	2103      	movs	r1, #3
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fbbb 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 8002a1e:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <RenderDino+0x238>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
			break;
 8002a28:	e030      	b.n	8002a8c <RenderDino+0x214>
		case GLIDING:
			UpdateHeaderBmpIndex(dino, DinoGlidingDead);
 8002a2a:	210d      	movs	r1, #13
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fbb1 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosWhenGliding;
 8002a32:	4b1f      	ldr	r3, [pc, #124]	; (8002ab0 <RenderDino+0x238>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
			break;
 8002a3c:	e026      	b.n	8002a8c <RenderDino+0x214>
		case CRAWLING:
			LCD_DrawLine(77, 8, 8, DRAWMODE_CULL, flipStatus);
 8002a3e:	4b19      	ldr	r3, [pc, #100]	; (8002aa4 <RenderDino+0x22c>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	2208      	movs	r2, #8
 8002a48:	2108      	movs	r1, #8
 8002a4a:	204d      	movs	r0, #77	; 0x4d
 8002a4c:	f7fe fe14 	bl	8001678 <LCD_DrawLine>
		case DODGING:
			UpdateHeaderBmpIndex(dino, DinoDodgingDead);
 8002a50:	210b      	movs	r1, #11
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fb9e 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosWhenDodging;
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <RenderDino+0x238>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	605a      	str	r2, [r3, #4]
			break;
 8002a62:	e013      	b.n	8002a8c <RenderDino+0x214>
		case FIRING:
			LCD_DrawLine(77, 8, 8, DRAWMODE_CULL, flipStatus);
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <RenderDino+0x22c>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	2208      	movs	r2, #8
 8002a6e:	2108      	movs	r1, #8
 8002a70:	204d      	movs	r0, #77	; 0x4d
 8002a72:	f7fe fe01 	bl	8001678 <LCD_DrawLine>
			UpdateHeaderBmpIndex(dino, DinoFiringDead);
 8002a76:	2107      	movs	r1, #7
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fb8b 	bl	8003194 <UpdateHeaderBmpIndex>
			dinoHeader->x = DinoXPosDefault;
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <RenderDino+0x238>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
			break;
 8002a88:	e000      	b.n	8002a8c <RenderDino+0x214>
		}
	}
 8002a8a:	bf00      	nop

	LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8002a8c:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <RenderDino+0x238>)
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <RenderDino+0x22c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2200      	movs	r2, #0
 8002a96:	2100      	movs	r1, #0
 8002a98:	f7fe fbee 	bl	8001278 <LCD_LoadObjs>
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200000d0 	.word	0x200000d0
 8002aa8:	200000b8 	.word	0x200000b8
 8002aac:	200000e0 	.word	0x200000e0
 8002ab0:	200000e8 	.word	0x200000e8

08002ab4 <MeltPlants>:

void MeltPlants() {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af04      	add	r7, sp, #16
	// Loop through GroundFires and Plants, shrink plants
	ptr = plantHeader;
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <MeltPlants+0x104>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a3f      	ldr	r2, [pc, #252]	; (8002bbc <MeltPlants+0x108>)
 8002ac0:	6013      	str	r3, [r2, #0]
	for (;;) {
		if (ptr->full) {
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <MeltPlants+0x108>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	7c1b      	ldrb	r3, [r3, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d05b      	beq.n	8002b84 <MeltPlants+0xd0>
			if (ptr->index != PlantNormal) {
 8002acc:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <MeltPlants+0x108>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	7bdb      	ldrb	r3, [r3, #15]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d013      	beq.n	8002afe <MeltPlants+0x4a>
				if (tick % 6 == 0)
 8002ad6:	4b3a      	ldr	r3, [pc, #232]	; (8002bc0 <MeltPlants+0x10c>)
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	4b3a      	ldr	r3, [pc, #232]	; (8002bc4 <MeltPlants+0x110>)
 8002adc:	fba3 2301 	umull	r2, r3, r3, r1
 8002ae0:	089a      	lsrs	r2, r3, #2
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	1aca      	subs	r2, r1, r3
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d149      	bne.n	8002b84 <MeltPlants+0xd0>
					ImgIndexRightShift(ptr, 1);
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <MeltPlants+0x108>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fc4b 	bl	8003392 <ImgIndexRightShift>
 8002afc:	e042      	b.n	8002b84 <MeltPlants+0xd0>
			} else if (IsOverlapping(24, 52, 95, 76, ptr->x, ptr->y, ptr->x + 9,
 8002afe:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <MeltPlants+0x108>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b0a:	ee17 3a90 	vmov	r3, s15
 8002b0e:	b21b      	sxth	r3, r3
 8002b10:	4a2a      	ldr	r2, [pc, #168]	; (8002bbc <MeltPlants+0x108>)
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	edd2 7a02 	vldr	s15, [r2, #8]
 8002b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1c:	ee17 2a90 	vmov	r2, s15
 8002b20:	b212      	sxth	r2, r2
 8002b22:	4926      	ldr	r1, [pc, #152]	; (8002bbc <MeltPlants+0x108>)
 8002b24:	6809      	ldr	r1, [r1, #0]
 8002b26:	edd1 7a01 	vldr	s15, [r1, #4]
 8002b2a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b36:	ee17 1a90 	vmov	r1, s15
 8002b3a:	b209      	sxth	r1, r1
					ptr->y + 21) && dinoState == FIRING) {
 8002b3c:	481f      	ldr	r0, [pc, #124]	; (8002bbc <MeltPlants+0x108>)
 8002b3e:	6800      	ldr	r0, [r0, #0]
 8002b40:	edd0 7a02 	vldr	s15, [r0, #8]
 8002b44:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8002b48:	ee77 7a87 	vadd.f32	s15, s15, s14
			} else if (IsOverlapping(24, 52, 95, 76, ptr->x, ptr->y, ptr->x + 9,
 8002b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b50:	ee17 0a90 	vmov	r0, s15
 8002b54:	b200      	sxth	r0, r0
 8002b56:	9003      	str	r0, [sp, #12]
 8002b58:	9102      	str	r1, [sp, #8]
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	234c      	movs	r3, #76	; 0x4c
 8002b60:	225f      	movs	r2, #95	; 0x5f
 8002b62:	2134      	movs	r1, #52	; 0x34
 8002b64:	2018      	movs	r0, #24
 8002b66:	f000 fa53 	bl	8003010 <IsOverlapping>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <MeltPlants+0xd0>
					ptr->y + 21) && dinoState == FIRING) {
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MeltPlants+0x114>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d105      	bne.n	8002b84 <MeltPlants+0xd0>
				ImgIndexRightShift(ptr, 1);
 8002b78:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <MeltPlants+0x108>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fc07 	bl	8003392 <ImgIndexRightShift>
			}

		}

		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == plantHeader) {
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <MeltPlants+0x108>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	7c1b      	ldrb	r3, [r3, #16]
 8002b8c:	f083 0301 	eor.w	r3, r3, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <MeltPlants+0xfc>
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MeltPlants+0x108>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	4b06      	ldr	r3, [pc, #24]	; (8002bb8 <MeltPlants+0x104>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d005      	beq.n	8002bb0 <MeltPlants+0xfc>
			break;
		}
		ptr = ptr->next;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <MeltPlants+0x108>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <MeltPlants+0x108>)
 8002bac:	6013      	str	r3, [r2, #0]
		if (ptr->full) {
 8002bae:	e788      	b.n	8002ac2 <MeltPlants+0xe>
	}
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	200000f4 	.word	0x200000f4
 8002bbc:	200000e4 	.word	0x200000e4
 8002bc0:	200000b8 	.word	0x200000b8
 8002bc4:	aaaaaaab 	.word	0xaaaaaaab
 8002bc8:	200000dc 	.word	0x200000dc

08002bcc <DinoGetsStuck>:

bool DinoGetsStuck() {
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af04      	add	r7, sp, #16
// Stuck in plants?
ptr = plantHeader;
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <DinoGetsStuck+0x204>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7f      	ldr	r2, [pc, #508]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002bd8:	6013      	str	r3, [r2, #0]
for (;;) {
	if (ptr->full && ptr->index == PlantNormal) {
 8002bda:	4b7e      	ldr	r3, [pc, #504]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	7c1b      	ldrb	r3, [r3, #16]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80c4 	beq.w	8002d6e <DinoGetsStuck+0x1a2>
 8002be6:	4b7b      	ldr	r3, [pc, #492]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	7bdb      	ldrb	r3, [r3, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f040 80be 	bne.w	8002d6e <DinoGetsStuck+0x1a2>
		switch (dinoState) {
 8002bf2:	4b79      	ldr	r3, [pc, #484]	; (8002dd8 <DinoGetsStuck+0x20c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	dc02      	bgt.n	8002c00 <DinoGetsStuck+0x34>
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	dc05      	bgt.n	8002c0a <DinoGetsStuck+0x3e>
 8002bfe:	e0bb      	b.n	8002d78 <DinoGetsStuck+0x1ac>
 8002c00:	3b04      	subs	r3, #4
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	f200 80b8 	bhi.w	8002d78 <DinoGetsStuck+0x1ac>
 8002c08:	e058      	b.n	8002cbc <DinoGetsStuck+0xf0>
		case JUMPING:
		case RUNNING:
		case FIRING:
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002c0a:	4b74      	ldr	r3, [pc, #464]	; (8002ddc <DinoGetsStuck+0x210>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c1e:	ee17 3a90 	vmov	r3, s15
 8002c22:	b218      	sxth	r0, r3
 8002c24:	4b6d      	ldr	r3, [pc, #436]	; (8002ddc <DinoGetsStuck+0x210>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c2c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002c30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c38:	ee17 3a90 	vmov	r3, s15
 8002c3c:	b219      	sxth	r1, r3
					dinoHeader->x + 17, dinoHeader->y + 17, ptr->x, 59,
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <DinoGetsStuck+0x210>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c46:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002c4a:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c52:	ee17 3a90 	vmov	r3, s15
 8002c56:	b21c      	sxth	r4, r3
					dinoHeader->x + 17, dinoHeader->y + 17, ptr->x, 59,
 8002c58:	4b60      	ldr	r3, [pc, #384]	; (8002ddc <DinoGetsStuck+0x210>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c60:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002c64:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c6c:	ee17 3a90 	vmov	r3, s15
 8002c70:	b21d      	sxth	r5, r3
					dinoHeader->x + 17, dinoHeader->y + 17, ptr->x, 59,
 8002c72:	4b58      	ldr	r3, [pc, #352]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	edd3 7a01 	vldr	s15, [r3, #4]
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c7e:	ee17 3a90 	vmov	r3, s15
 8002c82:	b21b      	sxth	r3, r3
					ptr->x + 9, 59 + 21)) {
 8002c84:	4a53      	ldr	r2, [pc, #332]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	edd2 7a01 	vldr	s15, [r2, #4]
 8002c8c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002c90:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002c94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c98:	ee17 2a90 	vmov	r2, s15
 8002c9c:	b212      	sxth	r2, r2
 8002c9e:	2650      	movs	r6, #80	; 0x50
 8002ca0:	9603      	str	r6, [sp, #12]
 8002ca2:	9202      	str	r2, [sp, #8]
 8002ca4:	223b      	movs	r2, #59	; 0x3b
 8002ca6:	9201      	str	r2, [sp, #4]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	462b      	mov	r3, r5
 8002cac:	4622      	mov	r2, r4
 8002cae:	f000 f9af 	bl	8003010 <IsOverlapping>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05c      	beq.n	8002d72 <DinoGetsStuck+0x1a6>
				return 1;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e19f      	b.n	8002ffc <DinoGetsStuck+0x430>
			break;

		case GLIDING:
		case DODGING:
		case CRAWLING:
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002cbc:	4b47      	ldr	r3, [pc, #284]	; (8002ddc <DinoGetsStuck+0x210>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cc4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ccc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cd0:	ee17 3a90 	vmov	r3, s15
 8002cd4:	b218      	sxth	r0, r3
 8002cd6:	4b41      	ldr	r3, [pc, #260]	; (8002ddc <DinoGetsStuck+0x210>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cde:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8002ce2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ce6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cea:	ee17 3a90 	vmov	r3, s15
 8002cee:	b219      	sxth	r1, r3
					dinoHeader->x + 30, dinoHeader->y + 17, ptr->x, 59,
 8002cf0:	4b3a      	ldr	r3, [pc, #232]	; (8002ddc <DinoGetsStuck+0x210>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002cf8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002cfc:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d04:	ee17 3a90 	vmov	r3, s15
 8002d08:	b21c      	sxth	r4, r3
					dinoHeader->x + 30, dinoHeader->y + 17, ptr->x, 59,
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <DinoGetsStuck+0x210>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d12:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002d16:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002d1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d1e:	ee17 3a90 	vmov	r3, s15
 8002d22:	b21d      	sxth	r5, r3
					dinoHeader->x + 30, dinoHeader->y + 17, ptr->x, 59,
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	edd3 7a01 	vldr	s15, [r3, #4]
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d30:	ee17 3a90 	vmov	r3, s15
 8002d34:	b21b      	sxth	r3, r3
					ptr->x + 9, 59 + 21)) {
 8002d36:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	edd2 7a01 	vldr	s15, [r2, #4]
 8002d3e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002d42:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d4a:	ee17 2a90 	vmov	r2, s15
 8002d4e:	b212      	sxth	r2, r2
 8002d50:	2650      	movs	r6, #80	; 0x50
 8002d52:	9603      	str	r6, [sp, #12]
 8002d54:	9202      	str	r2, [sp, #8]
 8002d56:	223b      	movs	r2, #59	; 0x3b
 8002d58:	9201      	str	r2, [sp, #4]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	462b      	mov	r3, r5
 8002d5e:	4622      	mov	r2, r4
 8002d60:	f000 f956 	bl	8003010 <IsOverlapping>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <DinoGetsStuck+0x1aa>
				return 1;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e146      	b.n	8002ffc <DinoGetsStuck+0x430>
			}
			break;
		}

	}
 8002d6e:	bf00      	nop
 8002d70:	e002      	b.n	8002d78 <DinoGetsStuck+0x1ac>
			break;
 8002d72:	bf00      	nop
 8002d74:	e000      	b.n	8002d78 <DinoGetsStuck+0x1ac>
			break;
 8002d76:	bf00      	nop
	// If looped through all / next buffer is empty
	if (!ptr->next->full || ptr->next == plantHeader) {
 8002d78:	4b16      	ldr	r3, [pc, #88]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	7c1b      	ldrb	r3, [r3, #16]
 8002d80:	f083 0301 	eor.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <DinoGetsStuck+0x1d8>
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <DinoGetsStuck+0x204>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d005      	beq.n	8002da4 <DinoGetsStuck+0x1d8>
		break;
	}
	ptr = ptr->next;
 8002d98:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4a0d      	ldr	r2, [pc, #52]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002da0:	6013      	str	r3, [r2, #0]
	if (ptr->full && ptr->index == PlantNormal) {
 8002da2:	e71a      	b.n	8002bda <DinoGetsStuck+0xe>
}

// Stuck in birds?
ptr = birdHeader;
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <DinoGetsStuck+0x214>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0a      	ldr	r2, [pc, #40]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002daa:	6013      	str	r3, [r2, #0]
for (;;) {
	if (ptr->full) {
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <DinoGetsStuck+0x208>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	7c1b      	ldrb	r3, [r3, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8106 	beq.w	8002fc4 <DinoGetsStuck+0x3f8>
		switch (dinoState) {
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <DinoGetsStuck+0x20c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	dc02      	bgt.n	8002dc6 <DinoGetsStuck+0x1fa>
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	dc0f      	bgt.n	8002de4 <DinoGetsStuck+0x218>
 8002dc4:	e103      	b.n	8002fce <DinoGetsStuck+0x402>
 8002dc6:	3b04      	subs	r3, #4
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f200 8100 	bhi.w	8002fce <DinoGetsStuck+0x402>
 8002dce:	e081      	b.n	8002ed4 <DinoGetsStuck+0x308>
 8002dd0:	200000f4 	.word	0x200000f4
 8002dd4:	200000e4 	.word	0x200000e4
 8002dd8:	200000dc 	.word	0x200000dc
 8002ddc:	200000e8 	.word	0x200000e8
 8002de0:	200000f8 	.word	0x200000f8
		case JUMPING:
		case RUNNING:
		case FIRING:
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002de4:	4b87      	ldr	r3, [pc, #540]	; (8003004 <DinoGetsStuck+0x438>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dec:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002df8:	ee17 3a90 	vmov	r3, s15
 8002dfc:	b21c      	sxth	r4, r3
 8002dfe:	4b81      	ldr	r3, [pc, #516]	; (8003004 <DinoGetsStuck+0x438>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e06:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e12:	ee17 3a90 	vmov	r3, s15
 8002e16:	b21d      	sxth	r5, r3
					dinoHeader->x + 17, dinoHeader->y + 17, ptr->x + 2,
 8002e18:	4b7a      	ldr	r3, [pc, #488]	; (8003004 <DinoGetsStuck+0x438>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e20:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002e24:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e2c:	ee17 3a90 	vmov	r3, s15
 8002e30:	b21e      	sxth	r6, r3
					dinoHeader->x + 17, dinoHeader->y + 17, ptr->x + 2,
 8002e32:	4b74      	ldr	r3, [pc, #464]	; (8003004 <DinoGetsStuck+0x438>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e3a:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002e3e:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e46:	ee17 3a90 	vmov	r3, s15
 8002e4a:	fa0f fc83 	sxth.w	ip, r3
					dinoHeader->x + 17, dinoHeader->y + 17, ptr->x + 2,
 8002e4e:	4b6e      	ldr	r3, [pc, #440]	; (8003008 <DinoGetsStuck+0x43c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e56:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002e5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e62:	ee17 3a90 	vmov	r3, s15
 8002e66:	b21b      	sxth	r3, r3
					ptr->y + 3, ptr->x + 14, ptr->y + 12)) {
 8002e68:	4a67      	ldr	r2, [pc, #412]	; (8003008 <DinoGetsStuck+0x43c>)
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	edd2 7a02 	vldr	s15, [r2, #8]
 8002e70:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002e74:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002e78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e7c:	ee17 2a90 	vmov	r2, s15
 8002e80:	b212      	sxth	r2, r2
					ptr->y + 3, ptr->x + 14, ptr->y + 12)) {
 8002e82:	4961      	ldr	r1, [pc, #388]	; (8003008 <DinoGetsStuck+0x43c>)
 8002e84:	6809      	ldr	r1, [r1, #0]
 8002e86:	edd1 7a01 	vldr	s15, [r1, #4]
 8002e8a:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8002e8e:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e96:	ee17 1a90 	vmov	r1, s15
 8002e9a:	b209      	sxth	r1, r1
					ptr->y + 3, ptr->x + 14, ptr->y + 12)) {
 8002e9c:	485a      	ldr	r0, [pc, #360]	; (8003008 <DinoGetsStuck+0x43c>)
 8002e9e:	6800      	ldr	r0, [r0, #0]
 8002ea0:	edd0 7a02 	vldr	s15, [r0, #8]
 8002ea4:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002ea8:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 10, dinoHeader->y + 2,
 8002eac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eb0:	ee17 0a90 	vmov	r0, s15
 8002eb4:	b200      	sxth	r0, r0
 8002eb6:	9003      	str	r0, [sp, #12]
 8002eb8:	9102      	str	r1, [sp, #8]
 8002eba:	9201      	str	r2, [sp, #4]
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4663      	mov	r3, ip
 8002ec0:	4632      	mov	r2, r6
 8002ec2:	4629      	mov	r1, r5
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	f000 f8a3 	bl	8003010 <IsOverlapping>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d07b      	beq.n	8002fc8 <DinoGetsStuck+0x3fc>
				return 1;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e093      	b.n	8002ffc <DinoGetsStuck+0x430>
			}
			break;

		case GLIDING:
		case DODGING:
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002ed4:	4b4b      	ldr	r3, [pc, #300]	; (8003004 <DinoGetsStuck+0x438>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002edc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee8:	ee17 3a90 	vmov	r3, s15
 8002eec:	b21c      	sxth	r4, r3
 8002eee:	4b45      	ldr	r3, [pc, #276]	; (8003004 <DinoGetsStuck+0x438>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ef6:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8002efa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f02:	ee17 3a90 	vmov	r3, s15
 8002f06:	b21d      	sxth	r5, r3
					dinoHeader->x + 30, dinoHeader->y + 17, ptr->x + 2,
 8002f08:	4b3e      	ldr	r3, [pc, #248]	; (8003004 <DinoGetsStuck+0x438>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f10:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002f14:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1c:	ee17 3a90 	vmov	r3, s15
 8002f20:	b21e      	sxth	r6, r3
					dinoHeader->x + 30, dinoHeader->y + 17, ptr->x + 2,
 8002f22:	4b38      	ldr	r3, [pc, #224]	; (8003004 <DinoGetsStuck+0x438>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	edd3 7a02 	vldr	s15, [r3, #8]
 8002f2a:	eeb3 7a01 	vmov.f32	s14, #49	; 0x41880000  17.0
 8002f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f36:	ee17 3a90 	vmov	r3, s15
 8002f3a:	fa0f fc83 	sxth.w	ip, r3
					dinoHeader->x + 30, dinoHeader->y + 17, ptr->x + 2,
 8002f3e:	4b32      	ldr	r3, [pc, #200]	; (8003008 <DinoGetsStuck+0x43c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f52:	ee17 3a90 	vmov	r3, s15
 8002f56:	b21b      	sxth	r3, r3
					ptr->y + 3, ptr->x + 14, ptr->y + 12)) {
 8002f58:	4a2b      	ldr	r2, [pc, #172]	; (8003008 <DinoGetsStuck+0x43c>)
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	edd2 7a02 	vldr	s15, [r2, #8]
 8002f60:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002f64:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002f68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f6c:	ee17 2a90 	vmov	r2, s15
 8002f70:	b212      	sxth	r2, r2
					ptr->y + 3, ptr->x + 14, ptr->y + 12)) {
 8002f72:	4925      	ldr	r1, [pc, #148]	; (8003008 <DinoGetsStuck+0x43c>)
 8002f74:	6809      	ldr	r1, [r1, #0]
 8002f76:	edd1 7a01 	vldr	s15, [r1, #4]
 8002f7a:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8002f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f86:	ee17 1a90 	vmov	r1, s15
 8002f8a:	b209      	sxth	r1, r1
					ptr->y + 3, ptr->x + 14, ptr->y + 12)) {
 8002f8c:	481e      	ldr	r0, [pc, #120]	; (8003008 <DinoGetsStuck+0x43c>)
 8002f8e:	6800      	ldr	r0, [r0, #0]
 8002f90:	edd0 7a02 	vldr	s15, [r0, #8]
 8002f94:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8002f98:	ee77 7a87 	vadd.f32	s15, s15, s14
			if (IsOverlapping(dinoHeader->x + 9, dinoHeader->y + 11,
 8002f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fa0:	ee17 0a90 	vmov	r0, s15
 8002fa4:	b200      	sxth	r0, r0
 8002fa6:	9003      	str	r0, [sp, #12]
 8002fa8:	9102      	str	r1, [sp, #8]
 8002faa:	9201      	str	r2, [sp, #4]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	4663      	mov	r3, ip
 8002fb0:	4632      	mov	r2, r6
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f000 f82b 	bl	8003010 <IsOverlapping>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <DinoGetsStuck+0x400>
				return 1;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e01b      	b.n	8002ffc <DinoGetsStuck+0x430>
			}
			break;
		}

	}
 8002fc4:	bf00      	nop
 8002fc6:	e002      	b.n	8002fce <DinoGetsStuck+0x402>
			break;
 8002fc8:	bf00      	nop
 8002fca:	e000      	b.n	8002fce <DinoGetsStuck+0x402>
			break;
 8002fcc:	bf00      	nop
	// If looped through all / next buffer is empty
	if (!ptr->next->full || ptr->next == birdHeader) {
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <DinoGetsStuck+0x43c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	7c1b      	ldrb	r3, [r3, #16]
 8002fd6:	f083 0301 	eor.w	r3, r3, #1
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10c      	bne.n	8002ffa <DinoGetsStuck+0x42e>
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <DinoGetsStuck+0x43c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <DinoGetsStuck+0x440>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d005      	beq.n	8002ffa <DinoGetsStuck+0x42e>
		break;
	}
	ptr = ptr->next;
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <DinoGetsStuck+0x43c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	4a04      	ldr	r2, [pc, #16]	; (8003008 <DinoGetsStuck+0x43c>)
 8002ff6:	6013      	str	r3, [r2, #0]
	if (ptr->full) {
 8002ff8:	e6d8      	b.n	8002dac <DinoGetsStuck+0x1e0>
}

return 0;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3704      	adds	r7, #4
 8003000:	46bd      	mov	sp, r7
 8003002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003004:	200000e8 	.word	0x200000e8
 8003008:	200000e4 	.word	0x200000e4
 800300c:	200000f8 	.word	0x200000f8

08003010 <IsOverlapping>:
 */

#include "game_utilities.h"

bool IsOverlapping(short x1, short y1, short x2, short y2, short x3, short y3,
		short x4, short y4) {
 8003010:	b490      	push	{r4, r7}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	4604      	mov	r4, r0
 8003018:	4608      	mov	r0, r1
 800301a:	4611      	mov	r1, r2
 800301c:	461a      	mov	r2, r3
 800301e:	4623      	mov	r3, r4
 8003020:	80fb      	strh	r3, [r7, #6]
 8003022:	4603      	mov	r3, r0
 8003024:	80bb      	strh	r3, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	807b      	strh	r3, [r7, #2]
 800302a:	4613      	mov	r3, r2
 800302c:	803b      	strh	r3, [r7, #0]
	if (x1 > x4 || x3 > x2 || y1 > y4 || y3 > y2) {
 800302e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003032:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003036:	429a      	cmp	r2, r3
 8003038:	dc11      	bgt.n	800305e <IsOverlapping+0x4e>
 800303a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800303e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003042:	429a      	cmp	r2, r3
 8003044:	dc0b      	bgt.n	800305e <IsOverlapping+0x4e>
 8003046:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800304a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800304e:	429a      	cmp	r2, r3
 8003050:	dc05      	bgt.n	800305e <IsOverlapping+0x4e>
 8003052:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003056:	f9b7 3000 	ldrsh.w	r3, [r7]
 800305a:	429a      	cmp	r2, r3
 800305c:	dd01      	ble.n	8003062 <IsOverlapping+0x52>
		return false;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <IsOverlapping+0x54>
	}
	return true;
 8003062:	2301      	movs	r3, #1
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bc90      	pop	{r4, r7}
 800306c:	4770      	bx	lr

0800306e <IsFadedOutOfScene>:

bool IsFadedOutOfScene(GameObj *obj) {
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
	if (obj->x + obj->width * 8 < 0) {
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	ed93 7a01 	vldr	s14, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7b1b      	ldrb	r3, [r3, #12]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003096:	d501      	bpl.n	800309c <IsFadedOutOfScene+0x2e>
		return true;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <IsFadedOutOfScene+0x30>
	} else {
		return false;
 800309c:	2300      	movs	r3, #0
	}
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <Append>:

// Append buffer in loop, if buffers are all occupied, use the first buffer
GameObj* Append(GameObj *header, uint8_t index, short xPos, short yPos) {
 80030aa:	b480      	push	{r7}
 80030ac:	b087      	sub	sp, #28
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	4608      	mov	r0, r1
 80030b4:	4611      	mov	r1, r2
 80030b6:	461a      	mov	r2, r3
 80030b8:	4603      	mov	r3, r0
 80030ba:	72fb      	strb	r3, [r7, #11]
 80030bc:	460b      	mov	r3, r1
 80030be:	813b      	strh	r3, [r7, #8]
 80030c0:	4613      	mov	r3, r2
 80030c2:	80fb      	strh	r3, [r7, #6]
	GameObj *ptr = header;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	617b      	str	r3, [r7, #20]

	// If the current pointer is occupied, look for the next pos
	while (ptr->full) {
 80030c8:	e031      	b.n	800312e <Append+0x84>
		ptr = ptr->next;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	617b      	str	r3, [r7, #20]
		// Have cycled for a whole loop
		if (ptr == header) {
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d12a      	bne.n	800312e <Append+0x84>
			ptr->bmpAsset = header->bmpAsset;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	601a      	str	r2, [r3, #0]
			ptr->x = xPos;
 80030e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	edc3 7a01 	vstr	s15, [r3, #4]
			ptr->y = yPos;
 80030f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	edc3 7a02 	vstr	s15, [r3, #8]
			ptr->width = header->width;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	7b1a      	ldrb	r2, [r3, #12]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	731a      	strb	r2, [r3, #12]
			ptr->height = header->height;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	7b5a      	ldrb	r2, [r3, #13]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	735a      	strb	r2, [r3, #13]
			ptr->assetSize = header->assetSize;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	7b9a      	ldrb	r2, [r3, #14]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	739a      	strb	r2, [r3, #14]
			ptr->index = index;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	7afa      	ldrb	r2, [r7, #11]
 8003120:	73da      	strb	r2, [r3, #15]
			ptr->full = 1;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2201      	movs	r2, #1
 8003126:	741a      	strb	r2, [r3, #16]
			return header->next;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	e02c      	b.n	8003188 <Append+0xde>
	while (ptr->full) {
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	7c1b      	ldrb	r3, [r3, #16]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1c9      	bne.n	80030ca <Append+0x20>
		}
	}

	ptr->bmpAsset = header->bmpAsset;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	601a      	str	r2, [r3, #0]
	ptr->x = xPos;
 800313e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	edc3 7a01 	vstr	s15, [r3, #4]
	ptr->y = yPos;
 8003150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003154:	ee07 3a90 	vmov	s15, r3
 8003158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	edc3 7a02 	vstr	s15, [r3, #8]
	ptr->width = header->width;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	7b1a      	ldrb	r2, [r3, #12]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	731a      	strb	r2, [r3, #12]
	ptr->height = header->height;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	7b5a      	ldrb	r2, [r3, #13]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	735a      	strb	r2, [r3, #13]
	ptr->assetSize = header->assetSize;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	7b9a      	ldrb	r2, [r3, #14]
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	739a      	strb	r2, [r3, #14]
	ptr->index = index;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	7afa      	ldrb	r2, [r7, #11]
 800317e:	73da      	strb	r2, [r3, #15]
	ptr->full = 1;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2201      	movs	r2, #1
 8003184:	741a      	strb	r2, [r3, #16]
	return header;
 8003186:	68fb      	ldr	r3, [r7, #12]
}
 8003188:	4618      	mov	r0, r3
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <UpdateHeaderBmpIndex>:

void UpdateHeaderBmpIndex(GameObj *header, uint8_t toIndex) {
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
	header->index = toIndex;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	73da      	strb	r2, [r3, #15]
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <UpdateAllBmpIndexs>:

void UpdateAllBmpIndexs(GameObj *header, uint8_t toIndex, uint8_t ignoreIndex) {
 80031b2:	b480      	push	{r7}
 80031b4:	b085      	sub	sp, #20
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
 80031ba:	460b      	mov	r3, r1
 80031bc:	70fb      	strb	r3, [r7, #3]
 80031be:	4613      	mov	r3, r2
 80031c0:	70bb      	strb	r3, [r7, #2]
	GameObj *ptr = header;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

	// If the current pointer is occupied, look for the next pos
	for (;;) {
		if (ptr->index != ignoreIndex)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	7bdb      	ldrb	r3, [r3, #15]
 80031ca:	78ba      	ldrb	r2, [r7, #2]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d002      	beq.n	80031d6 <UpdateAllBmpIndexs+0x24>
			ptr->index = toIndex;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	73da      	strb	r2, [r3, #15]
		ptr = ptr->next;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	60fb      	str	r3, [r7, #12]

		// Have cycled for a whole loop
		if (ptr == header)
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d000      	beq.n	80031e6 <UpdateAllBmpIndexs+0x34>
		if (ptr->index != ignoreIndex)
 80031e4:	e7ef      	b.n	80031c6 <UpdateAllBmpIndexs+0x14>
			return;
 80031e6:	bf00      	nop
	}
}
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <DisableAll>:

// Set all buffers to empty
void DisableAll(GameObj *header) {
 80031f2:	b480      	push	{r7}
 80031f4:	b085      	sub	sp, #20
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
	GameObj *ptr = header;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60fb      	str	r3, [r7, #12]

	// If the current pointer is occupied, look for the next pos
	for (;;) {
		ptr->full = 0;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	741a      	strb	r2, [r3, #16]
		ptr = ptr->next;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	60fb      	str	r3, [r7, #12]

		// Have cycled for a whole loop
		if (ptr == header)
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	d000      	beq.n	8003214 <DisableAll+0x22>
		ptr->full = 0;
 8003212:	e7f4      	b.n	80031fe <DisableAll+0xc>
			return;
 8003214:	bf00      	nop
	}
}
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <GenLoopBuf>:

// Generate loop buffer given certain size
GameObj* GenLoopBuf(uint8_t size) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
	GameObj *head = NULL, *cyclic = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
	head = (GameObj*) malloc(sizeof(GameObj));
 8003232:	2018      	movs	r0, #24
 8003234:	f002 fc1c 	bl	8005a70 <malloc>
 8003238:	4603      	mov	r3, r0
 800323a:	60fb      	str	r3, [r7, #12]
	head->full = 0;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	741a      	strb	r2, [r3, #16]
	cyclic = head;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8003246:	2301      	movs	r3, #1
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	e00f      	b.n	800326c <GenLoopBuf+0x4c>
		GameObj *body = (GameObj*) malloc(sizeof(GameObj));
 800324c:	2018      	movs	r0, #24
 800324e:	f002 fc0f 	bl	8005a70 <malloc>
 8003252:	4603      	mov	r3, r0
 8003254:	60bb      	str	r3, [r7, #8]
		body->full = 0;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	741a      	strb	r2, [r3, #16]
		cyclic->next = body;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	615a      	str	r2, [r3, #20]
		cyclic = body;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3301      	adds	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	dbeb      	blt.n	800324c <GenLoopBuf+0x2c>
	}
	cyclic->next = head;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	615a      	str	r2, [r3, #20]
	return head;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HeaderInit>:

// Initializes the head pointer with the given values, n resets other buffers
void HeaderInit(GameObj *header, uint8_t *bmpAsset, uint8_t width,
		uint8_t height, uint8_t assetSize) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	460b      	mov	r3, r1
 8003294:	71fb      	strb	r3, [r7, #7]
 8003296:	4613      	mov	r3, r2
 8003298:	71bb      	strb	r3, [r7, #6]
	GameObj *ptr = header;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	617b      	str	r3, [r7, #20]

	ptr->bmpAsset = bmpAsset;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	601a      	str	r2, [r3, #0]
	ptr->x = 0;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
	ptr->y = 0;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	609a      	str	r2, [r3, #8]
	ptr->width = width;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	79fa      	ldrb	r2, [r7, #7]
 80032b8:	731a      	strb	r2, [r3, #12]
	ptr->height = height;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	79ba      	ldrb	r2, [r7, #6]
 80032be:	735a      	strb	r2, [r3, #13]
	ptr->assetSize = assetSize;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032c6:	739a      	strb	r2, [r3, #14]
	ptr->index = 0;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	2200      	movs	r2, #0
 80032cc:	73da      	strb	r2, [r3, #15]
	ptr->full = 0;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2200      	movs	r2, #0
 80032d2:	741a      	strb	r2, [r3, #16]

	DisableAll(ptr);
 80032d4:	6978      	ldr	r0, [r7, #20]
 80032d6:	f7ff ff8c 	bl	80031f2 <DisableAll>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <ShiftX>:

// Shift all buffers and return the first active pointer
GameObj* ShiftX(GameObj *header, float byX) {
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
 80032ea:	ed87 0a00 	vstr	s0, [r7]
	GameObj *ptr = header;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	60fb      	str	r3, [r7, #12]

	// Cycle through all valid buffers once and apply the drift
	for (;;) {
		if (ptr->full) {
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	7c1b      	ldrb	r3, [r3, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d009      	beq.n	800330e <ShiftX+0x2c>
			ptr->x += byX;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003300:	edd7 7a00 	vldr	s15, [r7]
 8003304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		// Have cycled through the buffer
		if (!ptr->next->full || ptr->next == header)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	7c1b      	ldrb	r3, [r3, #16]
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d108      	bne.n	8003330 <ShiftX+0x4e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	429a      	cmp	r2, r3
 8003326:	d003      	beq.n	8003330 <ShiftX+0x4e>
			break;
		ptr = ptr->next;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	60fb      	str	r3, [r7, #12]
		if (ptr->full) {
 800332e:	e7e0      	b.n	80032f2 <ShiftX+0x10>
	}

	ptr = header;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	60fb      	str	r3, [r7, #12]
	// Return the first available buffer, if no buf is available, return header
	while (IsFadedOutOfScene(ptr)) {
 8003334:	e012      	b.n	800335c <ShiftX+0x7a>
		ptr->full = 0;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	741a      	strb	r2, [r3, #16]
		if (!ptr->next->full || ptr->next == header) {
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	7c1b      	ldrb	r3, [r3, #16]
 8003342:	f083 0301 	eor.w	r3, r3, #1
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10d      	bne.n	8003368 <ShiftX+0x86>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	429a      	cmp	r2, r3
 8003354:	d008      	beq.n	8003368 <ShiftX+0x86>
			break;
		}
		ptr = ptr->next;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	60fb      	str	r3, [r7, #12]
	while (IsFadedOutOfScene(ptr)) {
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff fe86 	bl	800306e <IsFadedOutOfScene>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e6      	bne.n	8003336 <ShiftX+0x54>
	}
	return ptr;
 8003368:	68fb      	ldr	r3, [r7, #12]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <DisableCurrent>:

GameObj* DisableCurrent(GameObj *header) {
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
	GameObj *ptr = header;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60fb      	str	r3, [r7, #12]
	ptr->full = 0;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	741a      	strb	r2, [r3, #16]

//	while (!ptr->next->full) {
//		ptr = ptr->next;
//	}

	return ptr;
 8003384:	68fb      	ldr	r3, [r7, #12]
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <ImgIndexRightShift>:

void ImgIndexRightShift(GameObj *header, bool disableWhenEnd) {
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	460b      	mov	r3, r1
 800339c:	70fb      	strb	r3, [r7, #3]
	if (header->index < header->assetSize - 1) {
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7bdb      	ldrb	r3, [r3, #15]
 80033a2:	461a      	mov	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	7b9b      	ldrb	r3, [r3, #14]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	429a      	cmp	r2, r3
 80033ac:	da06      	bge.n	80033bc <ImgIndexRightShift+0x2a>
		header->index++;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	7bdb      	ldrb	r3, [r3, #15]
 80033b2:	3301      	adds	r3, #1
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	73da      	strb	r2, [r3, #15]
		return;
 80033ba:	e008      	b.n	80033ce <ImgIndexRightShift+0x3c>
	}
	if (disableWhenEnd) {
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <ImgIndexRightShift+0x3c>
		header->index = 0;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	73da      	strb	r2, [r3, #15]
		DisableCurrent(header);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff ffd2 	bl	8003372 <DisableCurrent>
	}

}
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <Random>:

short Random(unsigned long seed, short lowerLim, short upperLim) {
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
 80033e0:	4613      	mov	r3, r2
 80033e2:	803b      	strh	r3, [r7, #0]
	srand(seed);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f002 fc41 	bl	8005c6c <srand>
	return rand() % (upperLim - lowerLim + 1) + lowerLim;
 80033ea:	f002 fc6d 	bl	8005cc8 <rand>
 80033ee:	4602      	mov	r2, r0
 80033f0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80033f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033f8:	1acb      	subs	r3, r1, r3
 80033fa:	3301      	adds	r3, #1
 80033fc:	fb92 f1f3 	sdiv	r1, r2, r3
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	b29a      	uxth	r2, r3
 8003408:	887b      	ldrh	r3, [r7, #2]
 800340a:	4413      	add	r3, r2
 800340c:	b29b      	uxth	r3, r3
 800340e:	b21b      	sxth	r3, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800341c:	f000 fc4c 	bl	8003cb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003420:	f000 f82c 	bl	800347c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003424:	f000 f968 	bl	80036f8 <MX_GPIO_Init>
	MX_SPI1_Init();
 8003428:	f000 f892 	bl	8003550 <MX_SPI1_Init>
	MX_TIM1_Init();
 800342c:	f000 f8c6 	bl	80035bc <MX_TIM1_Init>
	MX_TIM2_Init();
 8003430:	f000 f916 	bl	8003660 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8003434:	480c      	ldr	r0, [pc, #48]	; (8003468 <main+0x50>)
 8003436:	f001 fefb 	bl	8005230 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800343a:	480c      	ldr	r0, [pc, #48]	; (800346c <main+0x54>)
 800343c:	f001 fef8 	bl	8005230 <HAL_TIM_Base_Start_IT>

	// ALL GPIO AND BUSES MUST BE INITED BEFORE CALL THIS FUNCTION
	LCD_Init(&MemDisp, &hspi1, GPIOA, CS_Pin);
 8003440:	2310      	movs	r3, #16
 8003442:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <main+0x58>)
 8003444:	490b      	ldr	r1, [pc, #44]	; (8003474 <main+0x5c>)
 8003446:	480c      	ldr	r0, [pc, #48]	; (8003478 <main+0x60>)
 8003448:	f7fd fdc2 	bl	8000fd0 <LCD_Init>
	GenerateGameBuffers();
 800344c:	f7fe fb92 	bl	8001b74 <GenerateGameBuffers>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		GamePrep(&MemDisp);
 8003450:	4809      	ldr	r0, [pc, #36]	; (8003478 <main+0x60>)
 8003452:	f7fe fbd3 	bl	8001bfc <GamePrep>

		while (1) {
			if (GameTick(&MemDisp) == DINO_IS_DEAD)
 8003456:	4808      	ldr	r0, [pc, #32]	; (8003478 <main+0x60>)
 8003458:	f7fe fce2 	bl	8001e20 <GameTick>
 800345c:	4603      	mov	r3, r0
 800345e:	2b01      	cmp	r3, #1
 8003460:	d000      	beq.n	8003464 <main+0x4c>
 8003462:	e7f8      	b.n	8003456 <main+0x3e>
				break;
 8003464:	bf00      	nop
		GamePrep(&MemDisp);
 8003466:	e7f3      	b.n	8003450 <main+0x38>
 8003468:	20000160 	.word	0x20000160
 800346c:	200001a8 	.word	0x200001a8
 8003470:	40020000 	.word	0x40020000
 8003474:	20000108 	.word	0x20000108
 8003478:	200001f0 	.word	0x200001f0

0800347c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b094      	sub	sp, #80	; 0x50
 8003480:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003482:	f107 0320 	add.w	r3, r7, #32
 8003486:	2230      	movs	r2, #48	; 0x30
 8003488:	2100      	movs	r1, #0
 800348a:	4618      	mov	r0, r3
 800348c:	f002 fb06 	bl	8005a9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80034a0:	2300      	movs	r3, #0
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <SystemClock_Config+0xcc>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	4a27      	ldr	r2, [pc, #156]	; (8003548 <SystemClock_Config+0xcc>)
 80034aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ae:	6413      	str	r3, [r2, #64]	; 0x40
 80034b0:	4b25      	ldr	r3, [pc, #148]	; (8003548 <SystemClock_Config+0xcc>)
 80034b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80034bc:	2300      	movs	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <SystemClock_Config+0xd0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80034c8:	4a20      	ldr	r2, [pc, #128]	; (800354c <SystemClock_Config+0xd0>)
 80034ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b1e      	ldr	r3, [pc, #120]	; (800354c <SystemClock_Config+0xd0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034dc:	2302      	movs	r3, #2
 80034de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034e0:	2301      	movs	r3, #1
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034e4:	2310      	movs	r3, #16
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034e8:	2302      	movs	r3, #2
 80034ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034ec:	2300      	movs	r3, #0
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80034f0:	2308      	movs	r3, #8
 80034f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80034f4:	2348      	movs	r3, #72	; 0x48
 80034f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034f8:	2302      	movs	r3, #2
 80034fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80034fc:	2304      	movs	r3, #4
 80034fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003500:	f107 0320 	add.w	r3, r7, #32
 8003504:	4618      	mov	r0, r3
 8003506:	f000 ff4f 	bl	80043a8 <HAL_RCC_OscConfig>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <SystemClock_Config+0x98>
		Error_Handler();
 8003510:	f000 f990 	bl	8003834 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003514:	230f      	movs	r3, #15
 8003516:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003518:	2302      	movs	r3, #2
 800351a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800351c:	2380      	movs	r3, #128	; 0x80
 800351e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003524:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	2101      	movs	r1, #1
 8003530:	4618      	mov	r0, r3
 8003532:	f001 f9b1 	bl	8004898 <HAL_RCC_ClockConfig>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <SystemClock_Config+0xc4>
		Error_Handler();
 800353c:	f000 f97a 	bl	8003834 <Error_Handler>
	}
}
 8003540:	bf00      	nop
 8003542:	3750      	adds	r7, #80	; 0x50
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000

08003550 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003556:	4a18      	ldr	r2, [pc, #96]	; (80035b8 <MX_SPI1_Init+0x68>)
 8003558:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <MX_SPI1_Init+0x64>)
 800355c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003560:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <MX_SPI1_Init+0x64>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800356e:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003570:	2200      	movs	r2, #0
 8003572:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003576:	2200      	movs	r2, #0
 8003578:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <MX_SPI1_Init+0x64>)
 800357c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003580:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003584:	2218      	movs	r2, #24
 8003586:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003588:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <MX_SPI1_Init+0x64>)
 800358a:	2200      	movs	r2, #0
 800358c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003590:	2200      	movs	r2, #0
 8003592:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003594:	4b07      	ldr	r3, [pc, #28]	; (80035b4 <MX_SPI1_Init+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <MX_SPI1_Init+0x64>)
 800359c:	220a      	movs	r2, #10
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80035a0:	4804      	ldr	r0, [pc, #16]	; (80035b4 <MX_SPI1_Init+0x64>)
 80035a2:	f001 fb65 	bl	8004c70 <HAL_SPI_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_SPI1_Init+0x60>
		Error_Handler();
 80035ac:	f000 f942 	bl	8003834 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80035b0:	bf00      	nop
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20000108 	.word	0x20000108
 80035b8:	40013000 	.word	0x40013000

080035bc <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80035d0:	463b      	mov	r3, r7
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80035d8:	4b1f      	ldr	r3, [pc, #124]	; (8003658 <MX_TIM1_Init+0x9c>)
 80035da:	4a20      	ldr	r2, [pc, #128]	; (800365c <MX_TIM1_Init+0xa0>)
 80035dc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 36000 - 1;
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <MX_TIM1_Init+0x9c>)
 80035e0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80035e4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <MX_TIM1_Init+0x9c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 500 - 1;
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <MX_TIM1_Init+0x9c>)
 80035ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 80035f2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <MX_TIM1_Init+0x9c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80035fa:	4b17      	ldr	r3, [pc, #92]	; (8003658 <MX_TIM1_Init+0x9c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003600:	4b15      	ldr	r3, [pc, #84]	; (8003658 <MX_TIM1_Init+0x9c>)
 8003602:	2200      	movs	r2, #0
 8003604:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8003606:	4814      	ldr	r0, [pc, #80]	; (8003658 <MX_TIM1_Init+0x9c>)
 8003608:	f001 fdc2 	bl	8005190 <HAL_TIM_Base_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM1_Init+0x5a>
		Error_Handler();
 8003612:	f000 f90f 	bl	8003834 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800361a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	4619      	mov	r1, r3
 8003622:	480d      	ldr	r0, [pc, #52]	; (8003658 <MX_TIM1_Init+0x9c>)
 8003624:	f001 ff6e 	bl	8005504 <HAL_TIM_ConfigClockSource>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM1_Init+0x76>
		Error_Handler();
 800362e:	f000 f901 	bl	8003834 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800363a:	463b      	mov	r3, r7
 800363c:	4619      	mov	r1, r3
 800363e:	4806      	ldr	r0, [pc, #24]	; (8003658 <MX_TIM1_Init+0x9c>)
 8003640:	f002 f96a 	bl	8005918 <HAL_TIMEx_MasterConfigSynchronization>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800364a:	f000 f8f3 	bl	8003834 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800364e:	bf00      	nop
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000160 	.word	0x20000160
 800365c:	40010000 	.word	0x40010000

08003660 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003666:	f107 0308 	add.w	r3, r7, #8
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	605a      	str	r2, [r3, #4]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003674:	463b      	mov	r3, r7
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800367c:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <MX_TIM2_Init+0x94>)
 800367e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003682:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000 - 1;
 8003684:	4b1b      	ldr	r3, [pc, #108]	; (80036f4 <MX_TIM2_Init+0x94>)
 8003686:	f240 32e7 	movw	r2, #999	; 0x3e7
 800368a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <MX_TIM2_Init+0x94>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100 - 1;
 8003692:	4b18      	ldr	r3, [pc, #96]	; (80036f4 <MX_TIM2_Init+0x94>)
 8003694:	2263      	movs	r2, #99	; 0x63
 8003696:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003698:	4b16      	ldr	r3, [pc, #88]	; (80036f4 <MX_TIM2_Init+0x94>)
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369e:	4b15      	ldr	r3, [pc, #84]	; (80036f4 <MX_TIM2_Init+0x94>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80036a4:	4813      	ldr	r0, [pc, #76]	; (80036f4 <MX_TIM2_Init+0x94>)
 80036a6:	f001 fd73 	bl	8005190 <HAL_TIM_Base_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM2_Init+0x54>
		Error_Handler();
 80036b0:	f000 f8c0 	bl	8003834 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80036ba:	f107 0308 	add.w	r3, r7, #8
 80036be:	4619      	mov	r1, r3
 80036c0:	480c      	ldr	r0, [pc, #48]	; (80036f4 <MX_TIM2_Init+0x94>)
 80036c2:	f001 ff1f 	bl	8005504 <HAL_TIM_ConfigClockSource>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM2_Init+0x70>
		Error_Handler();
 80036cc:	f000 f8b2 	bl	8003834 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80036d8:	463b      	mov	r3, r7
 80036da:	4619      	mov	r1, r3
 80036dc:	4805      	ldr	r0, [pc, #20]	; (80036f4 <MX_TIM2_Init+0x94>)
 80036de:	f002 f91b 	bl	8005918 <HAL_TIMEx_MasterConfigSynchronization>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 80036e8:	f000 f8a4 	bl	8003834 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80036ec:	bf00      	nop
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200001a8 	.word	0x200001a8

080036f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80036fe:	f107 030c 	add.w	r3, r7, #12
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
 800370c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <MX_GPIO_Init+0xe8>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a32      	ldr	r2, [pc, #200]	; (80037e0 <MX_GPIO_Init+0xe8>)
 8003718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b30      	ldr	r3, [pc, #192]	; (80037e0 <MX_GPIO_Init+0xe8>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <MX_GPIO_Init+0xe8>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a2b      	ldr	r2, [pc, #172]	; (80037e0 <MX_GPIO_Init+0xe8>)
 8003734:	f043 0304 	orr.w	r3, r3, #4
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <MX_GPIO_Init+0xe8>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	607b      	str	r3, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	603b      	str	r3, [r7, #0]
 800374a:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <MX_GPIO_Init+0xe8>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a24      	ldr	r2, [pc, #144]	; (80037e0 <MX_GPIO_Init+0xe8>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <MX_GPIO_Init+0xe8>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_Pin | COMM_Pin, GPIO_PIN_RESET);
 8003762:	2200      	movs	r2, #0
 8003764:	f44f 7188 	mov.w	r1, #272	; 0x110
 8003768:	481e      	ldr	r0, [pc, #120]	; (80037e4 <MX_GPIO_Init+0xec>)
 800376a:	f000 fde9 	bl	8004340 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_GPIO_Port, DISP_Pin, GPIO_PIN_SET);
 800376e:	2201      	movs	r2, #1
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	481c      	ldr	r0, [pc, #112]	; (80037e4 <MX_GPIO_Init+0xec>)
 8003774:	f000 fde4 	bl	8004340 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8003778:	2201      	movs	r2, #1
 800377a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800377e:	481a      	ldr	r0, [pc, #104]	; (80037e8 <MX_GPIO_Init+0xf0>)
 8003780:	f000 fdde 	bl	8004340 <HAL_GPIO_WritePin>
			KEY1_LED_Pin | KEY2_LED_Pin | KEY3_LED_Pin | KEY4_LED_Pin,
			GPIO_PIN_SET);

	/*Configure GPIO pins : KEY1_Pin KEY2_Pin KEY3_Pin KEY4_Pin */
	GPIO_InitStruct.Pin = KEY1_Pin | KEY2_Pin | KEY3_Pin | KEY4_Pin;
 8003784:	230f      	movs	r3, #15
 8003786:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	4619      	mov	r1, r3
 8003796:	4814      	ldr	r0, [pc, #80]	; (80037e8 <MX_GPIO_Init+0xf0>)
 8003798:	f000 fc36 	bl	8004008 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin DISP_Pin COMM_Pin */
	GPIO_InitStruct.Pin = CS_Pin | DISP_Pin | COMM_Pin;
 800379c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80037a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037a2:	2301      	movs	r3, #1
 80037a4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ae:	f107 030c 	add.w	r3, r7, #12
 80037b2:	4619      	mov	r1, r3
 80037b4:	480b      	ldr	r0, [pc, #44]	; (80037e4 <MX_GPIO_Init+0xec>)
 80037b6:	f000 fc27 	bl	8004008 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY1_LED_Pin KEY2_LED_Pin KEY3_LED_Pin KEY4_LED_Pin */
	GPIO_InitStruct.Pin = KEY1_LED_Pin | KEY2_LED_Pin | KEY3_LED_Pin
 80037ba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80037be:	60fb      	str	r3, [r7, #12]
			| KEY4_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c0:	2301      	movs	r3, #1
 80037c2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	4619      	mov	r1, r3
 80037d2:	4805      	ldr	r0, [pc, #20]	; (80037e8 <MX_GPIO_Init+0xf0>)
 80037d4:	f000 fc18 	bl	8004008 <HAL_GPIO_Init>

}
 80037d8:	bf00      	nop
 80037da:	3720      	adds	r7, #32
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	40020000 	.word	0x40020000
 80037e8:	40020800 	.word	0x40020800

080037ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d108      	bne.n	800380e <HAL_TIM_PeriodElapsedCallback+0x22>
		// fEXTCOMIN = 1Hz (typ val)
		COMM_TOGGLE;
 80037fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003800:	4809      	ldr	r0, [pc, #36]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003802:	f000 fdb6 	bl	8004372 <HAL_GPIO_TogglePin>
		KEY1_LED_TOGGLE;
 8003806:	2140      	movs	r1, #64	; 0x40
 8003808:	4808      	ldr	r0, [pc, #32]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800380a:	f000 fdb2 	bl	8004372 <HAL_GPIO_TogglePin>
	}
	if (htim == &htim2) {
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a07      	ldr	r2, [pc, #28]	; (8003830 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <HAL_TIM_PeriodElapsedCallback+0x2e>
		KeyScan();
 8003816:	f7fe f923 	bl	8001a60 <KeyScan>
	}
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	20000160 	.word	0x20000160
 8003828:	40020000 	.word	0x40020000
 800382c:	40020800 	.word	0x40020800
 8003830:	200001a8 	.word	0x200001a8

08003834 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003838:	b672      	cpsid	i
}
 800383a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800383c:	e7fe      	b.n	800383c <Error_Handler+0x8>
	...

08003840 <FetchText>:
		0x0c, 0x60, 0x92, 0x00, 0xfe, 0x14, 0xc6, 0x38, 0x38, 0xc6, 0x0c, 0x10,
		0x7c, 0x30, 0xc6, 0x18, 0x00, 0xc6, 0x00, 0x10, 0x38, 0x70, 0xc6, 0x18,
		0x38, 0x7c, 0x00, 0x10, 0x10, 0x20, 0x7c, 0x18, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, };

void FetchText(uint8_t *TextBuf, char chr) {
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
	uint8_t charSerialNum = -1;
 800384c:	23ff      	movs	r3, #255	; 0xff
 800384e:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 96; i++) {
 8003850:	2300      	movs	r3, #0
 8003852:	73bb      	strb	r3, [r7, #14]
 8003854:	e00b      	b.n	800386e <FetchText+0x2e>
		if (chr == CharList[i]) {
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	4a1b      	ldr	r2, [pc, #108]	; (80038c8 <FetchText+0x88>)
 800385a:	5cd3      	ldrb	r3, [r2, r3]
 800385c:	78fa      	ldrb	r2, [r7, #3]
 800385e:	429a      	cmp	r2, r3
 8003860:	d102      	bne.n	8003868 <FetchText+0x28>
			charSerialNum = i;
 8003862:	7bbb      	ldrb	r3, [r7, #14]
 8003864:	73fb      	strb	r3, [r7, #15]
			break;
 8003866:	e005      	b.n	8003874 <FetchText+0x34>
	for (uint8_t i = 0; i < 96; i++) {
 8003868:	7bbb      	ldrb	r3, [r7, #14]
 800386a:	3301      	adds	r3, #1
 800386c:	73bb      	strb	r3, [r7, #14]
 800386e:	7bbb      	ldrb	r3, [r7, #14]
 8003870:	2b5f      	cmp	r3, #95	; 0x5f
 8003872:	d9f0      	bls.n	8003856 <FetchText+0x16>
	if (charSerialNum == -1) {
		memset(TextBuf, 0x00, 8);
		return;
	}

	uint8_t charLookupX = charSerialNum % 8;
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	72fb      	strb	r3, [r7, #11]
	uint8_t charLookupY = 8 * (charSerialNum / 8);
 800387c:	7bfb      	ldrb	r3, [r7, #15]
 800387e:	08db      	lsrs	r3, r3, #3
 8003880:	b2db      	uxtb	r3, r3
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	72bb      	strb	r3, [r7, #10]
	uint8_t n = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	737b      	strb	r3, [r7, #13]

	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 800388a:	7abb      	ldrb	r3, [r7, #10]
 800388c:	733b      	strb	r3, [r7, #12]
 800388e:	e011      	b.n	80038b4 <FetchText+0x74>
		TextBuf[n] = *((uint8_t*) PressStartStandard96 + y * 8 + charLookupX);
 8003890:	7b3b      	ldrb	r3, [r7, #12]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	461a      	mov	r2, r3
 8003896:	7afb      	ldrb	r3, [r7, #11]
 8003898:	4413      	add	r3, r2
 800389a:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <FetchText+0x8c>)
 800389c:	441a      	add	r2, r3
 800389e:	7b7b      	ldrb	r3, [r7, #13]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	440b      	add	r3, r1
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	701a      	strb	r2, [r3, #0]
		n++;
 80038a8:	7b7b      	ldrb	r3, [r7, #13]
 80038aa:	3301      	adds	r3, #1
 80038ac:	737b      	strb	r3, [r7, #13]
	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 80038ae:	7b3b      	ldrb	r3, [r7, #12]
 80038b0:	3301      	adds	r3, #1
 80038b2:	733b      	strb	r3, [r7, #12]
 80038b4:	7abb      	ldrb	r3, [r7, #10]
 80038b6:	1dda      	adds	r2, r3, #7
 80038b8:	7b3b      	ldrb	r3, [r7, #12]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	dae8      	bge.n	8003890 <FetchText+0x50>
	}
}
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	080075f0 	.word	0x080075f0
 80038cc:	08007650 	.word	0x08007650

080038d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <HAL_MspInit+0x4c>)
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	4a0f      	ldr	r2, [pc, #60]	; (800391c <HAL_MspInit+0x4c>)
 80038e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e4:	6453      	str	r3, [r2, #68]	; 0x44
 80038e6:	4b0d      	ldr	r3, [pc, #52]	; (800391c <HAL_MspInit+0x4c>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	603b      	str	r3, [r7, #0]
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_MspInit+0x4c>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <HAL_MspInit+0x4c>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	; 0x40
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <HAL_MspInit+0x4c>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003928:	f107 0314 	add.w	r3, r7, #20
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
 8003930:	605a      	str	r2, [r3, #4]
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <HAL_SPI_MspInit+0x84>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12b      	bne.n	800399a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 800394c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003950:	6453      	str	r3, [r2, #68]	; 0x44
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6313      	str	r3, [r2, #48]	; 0x30
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <HAL_SPI_MspInit+0x88>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800397a:	23a0      	movs	r3, #160	; 0xa0
 800397c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003986:	2303      	movs	r3, #3
 8003988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800398a:	2305      	movs	r3, #5
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800398e:	f107 0314 	add.w	r3, r7, #20
 8003992:	4619      	mov	r1, r3
 8003994:	4805      	ldr	r0, [pc, #20]	; (80039ac <HAL_SPI_MspInit+0x8c>)
 8003996:	f000 fb37 	bl	8004008 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800399a:	bf00      	nop
 800399c:	3728      	adds	r7, #40	; 0x28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40013000 	.word	0x40013000
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40020000 	.word	0x40020000

080039b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_TIM_Base_MspInit+0x80>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d116      	bne.n	80039f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_TIM_Base_MspInit+0x84>)
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <HAL_TIM_Base_MspInit+0x84>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6453      	str	r3, [r2, #68]	; 0x44
 80039d2:	4b18      	ldr	r3, [pc, #96]	; (8003a34 <HAL_TIM_Base_MspInit+0x84>)
 80039d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	2019      	movs	r0, #25
 80039e4:	f000 fad9 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80039e8:	2019      	movs	r0, #25
 80039ea:	f000 faf2 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80039ee:	e01a      	b.n	8003a26 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d115      	bne.n	8003a26 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <HAL_TIM_Base_MspInit+0x84>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <HAL_TIM_Base_MspInit+0x84>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HAL_TIM_Base_MspInit+0x84>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a16:	2200      	movs	r2, #0
 8003a18:	2100      	movs	r1, #0
 8003a1a:	201c      	movs	r0, #28
 8003a1c:	f000 fabd 	bl	8003f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a20:	201c      	movs	r0, #28
 8003a22:	f000 fad6 	bl	8003fd2 <HAL_NVIC_EnableIRQ>
}
 8003a26:	bf00      	nop
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40023800 	.word	0x40023800

08003a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a3c:	e7fe      	b.n	8003a3c <NMI_Handler+0x4>

08003a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a42:	e7fe      	b.n	8003a42 <HardFault_Handler+0x4>

08003a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a48:	e7fe      	b.n	8003a48 <MemManage_Handler+0x4>

08003a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a4e:	e7fe      	b.n	8003a4e <BusFault_Handler+0x4>

08003a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <UsageFault_Handler+0x4>

08003a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a56:	b480      	push	{r7}
 8003a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a76:	bf00      	nop
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a84:	f000 f96a 	bl	8003d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a92:	f001 fc2f 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000160 	.word	0x20000160

08003aa0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003aa4:	4802      	ldr	r0, [pc, #8]	; (8003ab0 <TIM2_IRQHandler+0x10>)
 8003aa6:	f001 fc25 	bl	80052f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003aaa:	bf00      	nop
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	200001a8 	.word	0x200001a8

08003ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	af00      	add	r7, sp, #0
	return 1;
 8003ab8:	2301      	movs	r3, #1
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <_kill>:

int _kill(int pid, int sig)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003ace:	f001 ffa5 	bl	8005a1c <__errno>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2216      	movs	r2, #22
 8003ad6:	601a      	str	r2, [r3, #0]
	return -1;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <_exit>:

void _exit (int status)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ffe7 	bl	8003ac4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003af6:	e7fe      	b.n	8003af6 <_exit+0x12>

08003af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e00a      	b.n	8003b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b0a:	f3af 8000 	nop.w
 8003b0e:	4601      	mov	r1, r0
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	60ba      	str	r2, [r7, #8]
 8003b16:	b2ca      	uxtb	r2, r1
 8003b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	dbf0      	blt.n	8003b0a <_read+0x12>
	}

return len;
 8003b28:	687b      	ldr	r3, [r7, #4]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e009      	b.n	8003b58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	60ba      	str	r2, [r7, #8]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	3301      	adds	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	dbf1      	blt.n	8003b44 <_write+0x12>
	}
	return len;
 8003b60:	687b      	ldr	r3, [r7, #4]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <_close>:

int _close(int file)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
	return -1;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b92:	605a      	str	r2, [r3, #4]
	return 0;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <_isatty>:

int _isatty(int file)
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b083      	sub	sp, #12
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
	return 1;
 8003baa:	2301      	movs	r3, #1
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
	return 0;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <_sbrk+0x5c>)
 8003bde:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <_sbrk+0x60>)
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003be8:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <_sbrk+0x64>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <_sbrk+0x64>)
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <_sbrk+0x68>)
 8003bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003bf6:	4b10      	ldr	r3, [pc, #64]	; (8003c38 <_sbrk+0x64>)
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d207      	bcs.n	8003c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c04:	f001 ff0a 	bl	8005a1c <__errno>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	220c      	movs	r2, #12
 8003c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c12:	e009      	b.n	8003c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <_sbrk+0x64>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c1a:	4b07      	ldr	r3, [pc, #28]	; (8003c38 <_sbrk+0x64>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	4a05      	ldr	r2, [pc, #20]	; (8003c38 <_sbrk+0x64>)
 8003c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20010000 	.word	0x20010000
 8003c34:	00000400 	.word	0x00000400
 8003c38:	200001fc 	.word	0x200001fc
 8003c3c:	20000218 	.word	0x20000218

08003c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c44:	4b06      	ldr	r3, [pc, #24]	; (8003c60 <SystemInit+0x20>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <SystemInit+0x20>)
 8003c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c54:	bf00      	nop
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <Reset_Handler>:
 8003c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c9c <LoopFillZerobss+0x12>
 8003c68:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <LoopFillZerobss+0x16>)
 8003c6a:	490e      	ldr	r1, [pc, #56]	; (8003ca4 <LoopFillZerobss+0x1a>)
 8003c6c:	4a0e      	ldr	r2, [pc, #56]	; (8003ca8 <LoopFillZerobss+0x1e>)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	e002      	b.n	8003c78 <LoopCopyDataInit>

08003c72 <CopyDataInit>:
 8003c72:	58d4      	ldr	r4, [r2, r3]
 8003c74:	50c4      	str	r4, [r0, r3]
 8003c76:	3304      	adds	r3, #4

08003c78 <LoopCopyDataInit>:
 8003c78:	18c4      	adds	r4, r0, r3
 8003c7a:	428c      	cmp	r4, r1
 8003c7c:	d3f9      	bcc.n	8003c72 <CopyDataInit>
 8003c7e:	4a0b      	ldr	r2, [pc, #44]	; (8003cac <LoopFillZerobss+0x22>)
 8003c80:	4c0b      	ldr	r4, [pc, #44]	; (8003cb0 <LoopFillZerobss+0x26>)
 8003c82:	2300      	movs	r3, #0
 8003c84:	e001      	b.n	8003c8a <LoopFillZerobss>

08003c86 <FillZerobss>:
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	3204      	adds	r2, #4

08003c8a <LoopFillZerobss>:
 8003c8a:	42a2      	cmp	r2, r4
 8003c8c:	d3fb      	bcc.n	8003c86 <FillZerobss>
 8003c8e:	f7ff ffd7 	bl	8003c40 <SystemInit>
 8003c92:	f001 fec9 	bl	8005a28 <__libc_init_array>
 8003c96:	f7ff fbbf 	bl	8003418 <main>
 8003c9a:	4770      	bx	lr
 8003c9c:	20010000 	.word	0x20010000
 8003ca0:	20000000 	.word	0x20000000
 8003ca4:	20000078 	.word	0x20000078
 8003ca8:	08007ab8 	.word	0x08007ab8
 8003cac:	20000078 	.word	0x20000078
 8003cb0:	20000214 	.word	0x20000214

08003cb4 <ADC_IRQHandler>:
 8003cb4:	e7fe      	b.n	8003cb4 <ADC_IRQHandler>
	...

08003cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cbc:	4b0e      	ldr	r3, [pc, #56]	; (8003cf8 <HAL_Init+0x40>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0d      	ldr	r2, [pc, #52]	; (8003cf8 <HAL_Init+0x40>)
 8003cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <HAL_Init+0x40>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <HAL_Init+0x40>)
 8003cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cd4:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <HAL_Init+0x40>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a07      	ldr	r2, [pc, #28]	; (8003cf8 <HAL_Init+0x40>)
 8003cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ce0:	2003      	movs	r0, #3
 8003ce2:	f000 f94f 	bl	8003f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ce6:	200f      	movs	r0, #15
 8003ce8:	f000 f808 	bl	8003cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cec:	f7ff fdf0 	bl	80038d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	40023c00 	.word	0x40023c00

08003cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d04:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_InitTick+0x54>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b12      	ldr	r3, [pc, #72]	; (8003d54 <HAL_InitTick+0x58>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 f967 	bl	8003fee <HAL_SYSTICK_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e00e      	b.n	8003d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b0f      	cmp	r3, #15
 8003d2e:	d80a      	bhi.n	8003d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d30:	2200      	movs	r2, #0
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	f04f 30ff 	mov.w	r0, #4294967295
 8003d38:	f000 f92f 	bl	8003f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d3c:	4a06      	ldr	r2, [pc, #24]	; (8003d58 <HAL_InitTick+0x5c>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	20000008 	.word	0x20000008
 8003d54:	20000010 	.word	0x20000010
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <HAL_IncTick+0x20>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <HAL_IncTick+0x24>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4a04      	ldr	r2, [pc, #16]	; (8003d80 <HAL_IncTick+0x24>)
 8003d6e:	6013      	str	r3, [r2, #0]
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	20000010 	.word	0x20000010
 8003d80:	20000200 	.word	0x20000200

08003d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
  return uwTick;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <HAL_GetTick+0x14>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000200 	.word	0x20000200

08003d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff ffee 	bl	8003d84 <HAL_GetTick>
 8003da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d005      	beq.n	8003dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <HAL_Delay+0x44>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dc2:	bf00      	nop
 8003dc4:	f7ff ffde 	bl	8003d84 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d8f7      	bhi.n	8003dc4 <HAL_Delay+0x28>
  {
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000010 	.word	0x20000010

08003de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e00:	4013      	ands	r3, r2
 8003e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e16:	4a04      	ldr	r2, [pc, #16]	; (8003e28 <__NVIC_SetPriorityGrouping+0x44>)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	60d3      	str	r3, [r2, #12]
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	e000ed00 	.word	0xe000ed00

08003e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <__NVIC_GetPriorityGrouping+0x18>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	f003 0307 	and.w	r3, r3, #7
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	e000ed00 	.word	0xe000ed00

08003e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	db0b      	blt.n	8003e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	f003 021f 	and.w	r2, r3, #31
 8003e60:	4907      	ldr	r1, [pc, #28]	; (8003e80 <__NVIC_EnableIRQ+0x38>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	095b      	lsrs	r3, r3, #5
 8003e68:	2001      	movs	r0, #1
 8003e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	e000e100 	.word	0xe000e100

08003e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	6039      	str	r1, [r7, #0]
 8003e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	db0a      	blt.n	8003eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	490c      	ldr	r1, [pc, #48]	; (8003ed0 <__NVIC_SetPriority+0x4c>)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	0112      	lsls	r2, r2, #4
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eac:	e00a      	b.n	8003ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	4908      	ldr	r1, [pc, #32]	; (8003ed4 <__NVIC_SetPriority+0x50>)
 8003eb4:	79fb      	ldrb	r3, [r7, #7]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3b04      	subs	r3, #4
 8003ebc:	0112      	lsls	r2, r2, #4
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	761a      	strb	r2, [r3, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000e100 	.word	0xe000e100
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f1c3 0307 	rsb	r3, r3, #7
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	bf28      	it	cs
 8003ef6:	2304      	movcs	r3, #4
 8003ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	3304      	adds	r3, #4
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d902      	bls.n	8003f08 <NVIC_EncodePriority+0x30>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3b03      	subs	r3, #3
 8003f06:	e000      	b.n	8003f0a <NVIC_EncodePriority+0x32>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43da      	mvns	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	401a      	ands	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f20:	f04f 31ff 	mov.w	r1, #4294967295
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	43d9      	mvns	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f30:	4313      	orrs	r3, r2
         );
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3724      	adds	r7, #36	; 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f50:	d301      	bcc.n	8003f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f52:	2301      	movs	r3, #1
 8003f54:	e00f      	b.n	8003f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f56:	4a0a      	ldr	r2, [pc, #40]	; (8003f80 <SysTick_Config+0x40>)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f5e:	210f      	movs	r1, #15
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	f7ff ff8e 	bl	8003e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <SysTick_Config+0x40>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <SysTick_Config+0x40>)
 8003f70:	2207      	movs	r2, #7
 8003f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	e000e010 	.word	0xe000e010

08003f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff29 	bl	8003de4 <__NVIC_SetPriorityGrouping>
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003fac:	f7ff ff3e 	bl	8003e2c <__NVIC_GetPriorityGrouping>
 8003fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	6978      	ldr	r0, [r7, #20]
 8003fb8:	f7ff ff8e 	bl	8003ed8 <NVIC_EncodePriority>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff ff5d 	bl	8003e84 <__NVIC_SetPriority>
}
 8003fca:	bf00      	nop
 8003fcc:	3718      	adds	r7, #24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b082      	sub	sp, #8
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	4603      	mov	r3, r0
 8003fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff31 	bl	8003e48 <__NVIC_EnableIRQ>
}
 8003fe6:	bf00      	nop
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff ffa2 	bl	8003f40 <SysTick_Config>
 8003ffc:	4603      	mov	r3, r0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004008:	b480      	push	{r7}
 800400a:	b089      	sub	sp, #36	; 0x24
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004016:	2300      	movs	r3, #0
 8004018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800401e:	2300      	movs	r3, #0
 8004020:	61fb      	str	r3, [r7, #28]
 8004022:	e159      	b.n	80042d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004024:	2201      	movs	r2, #1
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4013      	ands	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	429a      	cmp	r2, r3
 800403e:	f040 8148 	bne.w	80042d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b01      	cmp	r3, #1
 800404c:	d005      	beq.n	800405a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004056:	2b02      	cmp	r3, #2
 8004058:	d130      	bne.n	80040bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	2203      	movs	r2, #3
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004090:	2201      	movs	r2, #1
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 0201 	and.w	r2, r3, #1
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d017      	beq.n	80040f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	2203      	movs	r2, #3
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d123      	bne.n	800414c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	08da      	lsrs	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3208      	adds	r2, #8
 800410c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	220f      	movs	r2, #15
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	43db      	mvns	r3, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4013      	ands	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	4313      	orrs	r3, r2
 800413c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	08da      	lsrs	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3208      	adds	r2, #8
 8004146:	69b9      	ldr	r1, [r7, #24]
 8004148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	2203      	movs	r2, #3
 8004158:	fa02 f303 	lsl.w	r3, r2, r3
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 0203 	and.w	r2, r3, #3
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80a2 	beq.w	80042d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	4b57      	ldr	r3, [pc, #348]	; (80042f0 <HAL_GPIO_Init+0x2e8>)
 8004194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004196:	4a56      	ldr	r2, [pc, #344]	; (80042f0 <HAL_GPIO_Init+0x2e8>)
 8004198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800419c:	6453      	str	r3, [r2, #68]	; 0x44
 800419e:	4b54      	ldr	r3, [pc, #336]	; (80042f0 <HAL_GPIO_Init+0x2e8>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041aa:	4a52      	ldr	r2, [pc, #328]	; (80042f4 <HAL_GPIO_Init+0x2ec>)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	3302      	adds	r3, #2
 80041b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	220f      	movs	r2, #15
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a49      	ldr	r2, [pc, #292]	; (80042f8 <HAL_GPIO_Init+0x2f0>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d019      	beq.n	800420a <HAL_GPIO_Init+0x202>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a48      	ldr	r2, [pc, #288]	; (80042fc <HAL_GPIO_Init+0x2f4>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_GPIO_Init+0x1fe>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a47      	ldr	r2, [pc, #284]	; (8004300 <HAL_GPIO_Init+0x2f8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00d      	beq.n	8004202 <HAL_GPIO_Init+0x1fa>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a46      	ldr	r2, [pc, #280]	; (8004304 <HAL_GPIO_Init+0x2fc>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <HAL_GPIO_Init+0x1f6>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a45      	ldr	r2, [pc, #276]	; (8004308 <HAL_GPIO_Init+0x300>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <HAL_GPIO_Init+0x1f2>
 80041f6:	2304      	movs	r3, #4
 80041f8:	e008      	b.n	800420c <HAL_GPIO_Init+0x204>
 80041fa:	2307      	movs	r3, #7
 80041fc:	e006      	b.n	800420c <HAL_GPIO_Init+0x204>
 80041fe:	2303      	movs	r3, #3
 8004200:	e004      	b.n	800420c <HAL_GPIO_Init+0x204>
 8004202:	2302      	movs	r3, #2
 8004204:	e002      	b.n	800420c <HAL_GPIO_Init+0x204>
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_GPIO_Init+0x204>
 800420a:	2300      	movs	r3, #0
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	f002 0203 	and.w	r2, r2, #3
 8004212:	0092      	lsls	r2, r2, #2
 8004214:	4093      	lsls	r3, r2
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800421c:	4935      	ldr	r1, [pc, #212]	; (80042f4 <HAL_GPIO_Init+0x2ec>)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	089b      	lsrs	r3, r3, #2
 8004222:	3302      	adds	r3, #2
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800422a:	4b38      	ldr	r3, [pc, #224]	; (800430c <HAL_GPIO_Init+0x304>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800424e:	4a2f      	ldr	r2, [pc, #188]	; (800430c <HAL_GPIO_Init+0x304>)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004254:	4b2d      	ldr	r3, [pc, #180]	; (800430c <HAL_GPIO_Init+0x304>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	43db      	mvns	r3, r3
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	4013      	ands	r3, r2
 8004262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004278:	4a24      	ldr	r2, [pc, #144]	; (800430c <HAL_GPIO_Init+0x304>)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800427e:	4b23      	ldr	r3, [pc, #140]	; (800430c <HAL_GPIO_Init+0x304>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	43db      	mvns	r3, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4013      	ands	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800429a:	69ba      	ldr	r2, [r7, #24]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042a2:	4a1a      	ldr	r2, [pc, #104]	; (800430c <HAL_GPIO_Init+0x304>)
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042a8:	4b18      	ldr	r3, [pc, #96]	; (800430c <HAL_GPIO_Init+0x304>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042cc:	4a0f      	ldr	r2, [pc, #60]	; (800430c <HAL_GPIO_Init+0x304>)
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3301      	adds	r3, #1
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	2b0f      	cmp	r3, #15
 80042dc:	f67f aea2 	bls.w	8004024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	3724      	adds	r7, #36	; 0x24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800
 80042f4:	40013800 	.word	0x40013800
 80042f8:	40020000 	.word	0x40020000
 80042fc:	40020400 	.word	0x40020400
 8004300:	40020800 	.word	0x40020800
 8004304:	40020c00 	.word	0x40020c00
 8004308:	40021000 	.word	0x40021000
 800430c:	40013c00 	.word	0x40013c00

08004310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	887b      	ldrh	r3, [r7, #2]
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	e001      	b.n	8004332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800432e:	2300      	movs	r3, #0
 8004330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004332:	7bfb      	ldrb	r3, [r7, #15]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	807b      	strh	r3, [r7, #2]
 800434c:	4613      	mov	r3, r2
 800434e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004350:	787b      	ldrb	r3, [r7, #1]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800435c:	e003      	b.n	8004366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800435e:	887b      	ldrh	r3, [r7, #2]
 8004360:	041a      	lsls	r2, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	619a      	str	r2, [r3, #24]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004372:	b480      	push	{r7}
 8004374:	b085      	sub	sp, #20
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
 800437a:	460b      	mov	r3, r1
 800437c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004384:	887a      	ldrh	r2, [r7, #2]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4013      	ands	r3, r2
 800438a:	041a      	lsls	r2, r3, #16
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	43d9      	mvns	r1, r3
 8004390:	887b      	ldrh	r3, [r7, #2]
 8004392:	400b      	ands	r3, r1
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	619a      	str	r2, [r3, #24]
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e267      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d075      	beq.n	80044b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c6:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f003 030c 	and.w	r3, r3, #12
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d00c      	beq.n	80043ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043d2:	4b85      	ldr	r3, [pc, #532]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d112      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043de:	4b82      	ldr	r3, [pc, #520]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ea:	d10b      	bne.n	8004404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ec:	4b7e      	ldr	r3, [pc, #504]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05b      	beq.n	80044b0 <HAL_RCC_OscConfig+0x108>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d157      	bne.n	80044b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e242      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440c:	d106      	bne.n	800441c <HAL_RCC_OscConfig+0x74>
 800440e:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a75      	ldr	r2, [pc, #468]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	e01d      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004424:	d10c      	bne.n	8004440 <HAL_RCC_OscConfig+0x98>
 8004426:	4b70      	ldr	r3, [pc, #448]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a6f      	ldr	r2, [pc, #444]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	4b6d      	ldr	r3, [pc, #436]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a6c      	ldr	r2, [pc, #432]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xb0>
 8004440:	4b69      	ldr	r3, [pc, #420]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a68      	ldr	r2, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b66      	ldr	r3, [pc, #408]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a65      	ldr	r2, [pc, #404]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d013      	beq.n	8004488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7ff fc90 	bl	8003d84 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7ff fc8c 	bl	8003d84 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e207      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b5b      	ldr	r3, [pc, #364]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0xc0>
 8004486:	e014      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7ff fc7c 	bl	8003d84 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004490:	f7ff fc78 	bl	8003d84 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e1f3      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a2:	4b51      	ldr	r3, [pc, #324]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1f0      	bne.n	8004490 <HAL_RCC_OscConfig+0xe8>
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d063      	beq.n	8004586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044be:	4b4a      	ldr	r3, [pc, #296]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b47      	ldr	r3, [pc, #284]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d6:	4b44      	ldr	r3, [pc, #272]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1c7      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4937      	ldr	r1, [pc, #220]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b34      	ldr	r3, [pc, #208]	; (80045ec <HAL_RCC_OscConfig+0x244>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7ff fc31 	bl	8003d84 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004526:	f7ff fc2d 	bl	8003d84 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1a8      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4925      	ldr	r1, [pc, #148]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_OscConfig+0x244>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7ff fc10 	bl	8003d84 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004568:	f7ff fc0c 	bl	8003d84 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e187      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d036      	beq.n	8004600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_RCC_OscConfig+0x248>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7ff fbf0 	bl	8003d84 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a8:	f7ff fbec 	bl	8003d84 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e167      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_OscConfig+0x240>)
 80045bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x200>
 80045c6:	e01b      	b.n	8004600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_OscConfig+0x248>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7ff fbd9 	bl	8003d84 <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	e00e      	b.n	80045f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d6:	f7ff fbd5 	bl	8003d84 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d907      	bls.n	80045f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e150      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
 80045e8:	40023800 	.word	0x40023800
 80045ec:	42470000 	.word	0x42470000
 80045f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b88      	ldr	r3, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ea      	bne.n	80045d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8097 	beq.w	800473c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b7d      	ldr	r3, [pc, #500]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	4a7c      	ldr	r2, [pc, #496]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462c:	6413      	str	r3, [r2, #64]	; 0x40
 800462e:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b77      	ldr	r3, [pc, #476]	; (800481c <HAL_RCC_OscConfig+0x474>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464a:	4b74      	ldr	r3, [pc, #464]	; (800481c <HAL_RCC_OscConfig+0x474>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a73      	ldr	r2, [pc, #460]	; (800481c <HAL_RCC_OscConfig+0x474>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7ff fb95 	bl	8003d84 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7ff fb91 	bl	8003d84 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e10c      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b6a      	ldr	r3, [pc, #424]	; (800481c <HAL_RCC_OscConfig+0x474>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x2ea>
 8004684:	4b64      	ldr	r3, [pc, #400]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	4a63      	ldr	r2, [pc, #396]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6713      	str	r3, [r2, #112]	; 0x70
 8004690:	e01c      	b.n	80046cc <HAL_RCC_OscConfig+0x324>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b05      	cmp	r3, #5
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x30c>
 800469a:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a5e      	ldr	r2, [pc, #376]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a5b      	ldr	r2, [pc, #364]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0x324>
 80046b4:	4b58      	ldr	r3, [pc, #352]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a57      	ldr	r2, [pc, #348]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
 80046c0:	4b55      	ldr	r3, [pc, #340]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a54      	ldr	r2, [pc, #336]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046c6:	f023 0304 	bic.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d015      	beq.n	8004700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7ff fb56 	bl	8003d84 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7ff fb52 	bl	8003d84 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0cb      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	4b49      	ldr	r3, [pc, #292]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ee      	beq.n	80046dc <HAL_RCC_OscConfig+0x334>
 80046fe:	e014      	b.n	800472a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7ff fb40 	bl	8003d84 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	e00a      	b.n	800471e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7ff fb3c 	bl	8003d84 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0b5      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471e:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ee      	bne.n	8004708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004730:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	4a38      	ldr	r2, [pc, #224]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80a1 	beq.w	8004888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004746:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b08      	cmp	r3, #8
 8004750:	d05c      	beq.n	800480c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d141      	bne.n	80047de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b31      	ldr	r3, [pc, #196]	; (8004820 <HAL_RCC_OscConfig+0x478>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7ff fb10 	bl	8003d84 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7ff fb0c 	bl	8003d84 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e087      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b27      	ldr	r3, [pc, #156]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	061b      	lsls	r3, r3, #24
 80047aa:	491b      	ldr	r1, [pc, #108]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b0:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_RCC_OscConfig+0x478>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b6:	f7ff fae5 	bl	8003d84 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047bc:	e008      	b.n	80047d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047be:	f7ff fae1 	bl	8003d84 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d901      	bls.n	80047d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e05c      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f0      	beq.n	80047be <HAL_RCC_OscConfig+0x416>
 80047dc:	e054      	b.n	8004888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b10      	ldr	r3, [pc, #64]	; (8004820 <HAL_RCC_OscConfig+0x478>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7ff face 	bl	8003d84 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ec:	f7ff faca 	bl	8003d84 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e045      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCC_OscConfig+0x470>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x444>
 800480a:	e03d      	b.n	8004888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d107      	bne.n	8004824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e038      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
 8004818:	40023800 	.word	0x40023800
 800481c:	40007000 	.word	0x40007000
 8004820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004824:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x4ec>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d028      	beq.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d121      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d11a      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004854:	4013      	ands	r3, r2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800485a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800485c:	4293      	cmp	r3, r2
 800485e:	d111      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004880:	429a      	cmp	r2, r3
 8004882:	d001      	beq.n	8004888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e000      	b.n	800488a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3718      	adds	r7, #24
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800

08004898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0cc      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048ac:	4b68      	ldr	r3, [pc, #416]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d90c      	bls.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b65      	ldr	r3, [pc, #404]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c2:	4b63      	ldr	r3, [pc, #396]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d001      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0b8      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d020      	beq.n	8004922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ec:	4b59      	ldr	r3, [pc, #356]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a58      	ldr	r2, [pc, #352]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004904:	4b53      	ldr	r3, [pc, #332]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	4a52      	ldr	r2, [pc, #328]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800490e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004910:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	494d      	ldr	r1, [pc, #308]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	4313      	orrs	r3, r2
 8004920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d044      	beq.n	80049b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004936:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d119      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e07f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d003      	beq.n	8004956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004952:	2b03      	cmp	r3, #3
 8004954:	d107      	bne.n	8004966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b3f      	ldr	r3, [pc, #252]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d109      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e06f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004966:	4b3b      	ldr	r3, [pc, #236]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e067      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004976:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f023 0203 	bic.w	r2, r3, #3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4934      	ldr	r1, [pc, #208]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	4313      	orrs	r3, r2
 8004986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004988:	f7ff f9fc 	bl	8003d84 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498e:	e00a      	b.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004990:	f7ff f9f8 	bl	8003d84 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f241 3288 	movw	r2, #5000	; 0x1388
 800499e:	4293      	cmp	r3, r2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e04f      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a6:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 020c 	and.w	r2, r3, #12
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d1eb      	bne.n	8004990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d20c      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b20      	ldr	r3, [pc, #128]	; (8004a50 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e032      	b.n	8004a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0304 	and.w	r3, r3, #4
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d008      	beq.n	80049fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ec:	4b19      	ldr	r3, [pc, #100]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4916      	ldr	r1, [pc, #88]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	490e      	ldr	r1, [pc, #56]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a1e:	f000 f821 	bl	8004a64 <HAL_RCC_GetSysClockFreq>
 8004a22:	4602      	mov	r2, r0
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	091b      	lsrs	r3, r3, #4
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	490a      	ldr	r1, [pc, #40]	; (8004a58 <HAL_RCC_ClockConfig+0x1c0>)
 8004a30:	5ccb      	ldrb	r3, [r1, r3]
 8004a32:	fa22 f303 	lsr.w	r3, r2, r3
 8004a36:	4a09      	ldr	r2, [pc, #36]	; (8004a5c <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff f95c 	bl	8003cfc <HAL_InitTick>

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023c00 	.word	0x40023c00
 8004a54:	40023800 	.word	0x40023800
 8004a58:	08007950 	.word	0x08007950
 8004a5c:	20000008 	.word	0x20000008
 8004a60:	2000000c 	.word	0x2000000c

08004a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a68:	b094      	sub	sp, #80	; 0x50
 8004a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a70:	2300      	movs	r3, #0
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	2300      	movs	r3, #0
 8004a76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a7c:	4b79      	ldr	r3, [pc, #484]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d00d      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	f200 80e1 	bhi.w	8004c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0x34>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004a96:	e0db      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a98:	4b73      	ldr	r3, [pc, #460]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004a9c:	e0db      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a9e:	4b73      	ldr	r3, [pc, #460]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8004aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004aa2:	e0d8      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aa4:	4b6f      	ldr	r3, [pc, #444]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aae:	4b6d      	ldr	r3, [pc, #436]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d063      	beq.n	8004b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b6a      	ldr	r3, [pc, #424]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004acc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ace:	2300      	movs	r3, #0
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	462b      	mov	r3, r5
 8004ada:	f04f 0000 	mov.w	r0, #0
 8004ade:	f04f 0100 	mov.w	r1, #0
 8004ae2:	0159      	lsls	r1, r3, #5
 8004ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ae8:	0150      	lsls	r0, r2, #5
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	4621      	mov	r1, r4
 8004af0:	1a51      	subs	r1, r2, r1
 8004af2:	6139      	str	r1, [r7, #16]
 8004af4:	4629      	mov	r1, r5
 8004af6:	eb63 0301 	sbc.w	r3, r3, r1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	018b      	lsls	r3, r1, #6
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b12:	4651      	mov	r1, sl
 8004b14:	018a      	lsls	r2, r1, #6
 8004b16:	4651      	mov	r1, sl
 8004b18:	ebb2 0801 	subs.w	r8, r2, r1
 8004b1c:	4659      	mov	r1, fp
 8004b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b36:	4690      	mov	r8, r2
 8004b38:	4699      	mov	r9, r3
 8004b3a:	4623      	mov	r3, r4
 8004b3c:	eb18 0303 	adds.w	r3, r8, r3
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	462b      	mov	r3, r5
 8004b44:	eb49 0303 	adc.w	r3, r9, r3
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b56:	4629      	mov	r1, r5
 8004b58:	024b      	lsls	r3, r1, #9
 8004b5a:	4621      	mov	r1, r4
 8004b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b60:	4621      	mov	r1, r4
 8004b62:	024a      	lsls	r2, r1, #9
 8004b64:	4610      	mov	r0, r2
 8004b66:	4619      	mov	r1, r3
 8004b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b74:	f7fc f87a 	bl	8000c6c <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b80:	e058      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b82:	4b38      	ldr	r3, [pc, #224]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	099b      	lsrs	r3, r3, #6
 8004b88:	2200      	movs	r2, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b92:	623b      	str	r3, [r7, #32]
 8004b94:	2300      	movs	r3, #0
 8004b96:	627b      	str	r3, [r7, #36]	; 0x24
 8004b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b9c:	4642      	mov	r2, r8
 8004b9e:	464b      	mov	r3, r9
 8004ba0:	f04f 0000 	mov.w	r0, #0
 8004ba4:	f04f 0100 	mov.w	r1, #0
 8004ba8:	0159      	lsls	r1, r3, #5
 8004baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bae:	0150      	lsls	r0, r2, #5
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	00eb      	lsls	r3, r5, #3
 8004be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bea:	00e2      	lsls	r2, r4, #3
 8004bec:	4614      	mov	r4, r2
 8004bee:	461d      	mov	r5, r3
 8004bf0:	4643      	mov	r3, r8
 8004bf2:	18e3      	adds	r3, r4, r3
 8004bf4:	603b      	str	r3, [r7, #0]
 8004bf6:	464b      	mov	r3, r9
 8004bf8:	eb45 0303 	adc.w	r3, r5, r3
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c0a:	4629      	mov	r1, r5
 8004c0c:	028b      	lsls	r3, r1, #10
 8004c0e:	4621      	mov	r1, r4
 8004c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c14:	4621      	mov	r1, r4
 8004c16:	028a      	lsls	r2, r1, #10
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1e:	2200      	movs	r2, #0
 8004c20:	61bb      	str	r3, [r7, #24]
 8004c22:	61fa      	str	r2, [r7, #28]
 8004c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c28:	f7fc f820 	bl	8000c6c <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4613      	mov	r3, r2
 8004c32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c34:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c4e:	e002      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3750      	adds	r7, #80	; 0x50
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c62:	bf00      	nop
 8004c64:	40023800 	.word	0x40023800
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	007a1200 	.word	0x007a1200

08004c70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e07b      	b.n	8004d7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d108      	bne.n	8004c9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c92:	d009      	beq.n	8004ca8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	61da      	str	r2, [r3, #28]
 8004c9a:	e005      	b.n	8004ca8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fe fe2c 	bl	8003920 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2c:	ea42 0103 	orr.w	r1, r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	0c1b      	lsrs	r3, r3, #16
 8004d46:	f003 0104 	and.w	r1, r3, #4
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	f003 0210 	and.w	r2, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	69da      	ldr	r2, [r3, #28]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3708      	adds	r7, #8
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b088      	sub	sp, #32
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_SPI_Transmit+0x22>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e126      	b.n	8004ff2 <HAL_SPI_Transmit+0x270>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dac:	f7fe ffea 	bl	8003d84 <HAL_GetTick>
 8004db0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dc6:	e10b      	b.n	8004fe0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Transmit+0x52>
 8004dce:	88fb      	ldrh	r3, [r7, #6]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dd8:	e102      	b.n	8004fe0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2203      	movs	r2, #3
 8004dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e20:	d10f      	bne.n	8004e42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d007      	beq.n	8004e60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e68:	d14b      	bne.n	8004f02 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_SPI_Transmit+0xf6>
 8004e72:	8afb      	ldrh	r3, [r7, #22]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d13e      	bne.n	8004ef6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7c:	881a      	ldrh	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	1c9a      	adds	r2, r3, #2
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e9c:	e02b      	b.n	8004ef6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d112      	bne.n	8004ed2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ed0:	e011      	b.n	8004ef6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ed2:	f7fe ff57 	bl	8003d84 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d803      	bhi.n	8004eea <HAL_SPI_Transmit+0x168>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d102      	bne.n	8004ef0 <HAL_SPI_Transmit+0x16e>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ef4:	e074      	b.n	8004fe0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ce      	bne.n	8004e9e <HAL_SPI_Transmit+0x11c>
 8004f00:	e04c      	b.n	8004f9c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_SPI_Transmit+0x18e>
 8004f0a:	8afb      	ldrh	r3, [r7, #22]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d140      	bne.n	8004f92 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	7812      	ldrb	r2, [r2, #0]
 8004f1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f36:	e02c      	b.n	8004f92 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d113      	bne.n	8004f6e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	7812      	ldrb	r2, [r2, #0]
 8004f52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f6c:	e011      	b.n	8004f92 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f6e:	f7fe ff09 	bl	8003d84 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d803      	bhi.n	8004f86 <HAL_SPI_Transmit+0x204>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d102      	bne.n	8004f8c <HAL_SPI_Transmit+0x20a>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f90:	e026      	b.n	8004fe0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d1cd      	bne.n	8004f38 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f8b3 	bl	800510c <SPI_EndRxTxTransaction>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	613b      	str	r3, [r7, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e000      	b.n	8004fe0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004fde:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3720      	adds	r7, #32
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800500c:	f7fe feba 	bl	8003d84 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	4413      	add	r3, r2
 800501a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800501c:	f7fe feb2 	bl	8003d84 <HAL_GetTick>
 8005020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005022:	4b39      	ldr	r3, [pc, #228]	; (8005108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	015b      	lsls	r3, r3, #5
 8005028:	0d1b      	lsrs	r3, r3, #20
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	fb02 f303 	mul.w	r3, r2, r3
 8005030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005032:	e054      	b.n	80050de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503a:	d050      	beq.n	80050de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800503c:	f7fe fea2 	bl	8003d84 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	69fa      	ldr	r2, [r7, #28]
 8005048:	429a      	cmp	r2, r3
 800504a:	d902      	bls.n	8005052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d13d      	bne.n	80050ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800506a:	d111      	bne.n	8005090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005074:	d004      	beq.n	8005080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800507e:	d107      	bne.n	8005090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005098:	d10f      	bne.n	80050ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e017      	b.n	80050fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	3b01      	subs	r3, #1
 80050dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d19b      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3720      	adds	r7, #32
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	20000008 	.word	0x20000008

0800510c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b088      	sub	sp, #32
 8005110:	af02      	add	r7, sp, #8
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <SPI_EndRxTxTransaction+0x7c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1b      	ldr	r2, [pc, #108]	; (800518c <SPI_EndRxTxTransaction+0x80>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	0d5b      	lsrs	r3, r3, #21
 8005124:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005128:	fb02 f303 	mul.w	r3, r2, r3
 800512c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005136:	d112      	bne.n	800515e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2200      	movs	r2, #0
 8005140:	2180      	movs	r1, #128	; 0x80
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff ff5a 	bl	8004ffc <SPI_WaitFlagStateUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d016      	beq.n	800517c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005152:	f043 0220 	orr.w	r2, r3, #32
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e00f      	b.n	800517e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00a      	beq.n	800517a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	3b01      	subs	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005174:	2b80      	cmp	r3, #128	; 0x80
 8005176:	d0f2      	beq.n	800515e <SPI_EndRxTxTransaction+0x52>
 8005178:	e000      	b.n	800517c <SPI_EndRxTxTransaction+0x70>
        break;
 800517a:	bf00      	nop
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000008 	.word	0x20000008
 800518c:	165e9f81 	.word	0x165e9f81

08005190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e041      	b.n	8005226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fe fbfa 	bl	80039b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4610      	mov	r0, r2
 80051d0:	f000 fa88 	bl	80056e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	d001      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e044      	b.n	80052d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1e      	ldr	r2, [pc, #120]	; (80052e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d018      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x6c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005272:	d013      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x6c>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x6c>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d009      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x6c>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <HAL_TIM_Base_Start_IT+0xbc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x6c>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a16      	ldr	r2, [pc, #88]	; (80052f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d111      	bne.n	80052c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b06      	cmp	r3, #6
 80052ac:	d010      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	e007      	b.n	80052d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40014000 	.word	0x40014000

080052f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b02      	cmp	r3, #2
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b02      	cmp	r3, #2
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0202 	mvn.w	r2, #2
 8005320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f9b5 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f9a7 	bl	8005692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f9b8 	bl	80056ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d122      	bne.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b04      	cmp	r3, #4
 800536a:	d11b      	bne.n	80053a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0204 	mvn.w	r2, #4
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f98b 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f97d 	bl	8005692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f98e 	bl	80056ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d122      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d11b      	bne.n	80053f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0208 	mvn.w	r2, #8
 80053c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2204      	movs	r2, #4
 80053ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d003      	beq.n	80053e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f961 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 80053e4:	e005      	b.n	80053f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f953 	bl	8005692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f964 	bl	80056ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b10      	cmp	r3, #16
 8005404:	d122      	bne.n	800544c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	f003 0310 	and.w	r3, r3, #16
 8005410:	2b10      	cmp	r3, #16
 8005412:	d11b      	bne.n	800544c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0210 	mvn.w	r2, #16
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2208      	movs	r2, #8
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f937 	bl	80056a6 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f929 	bl	8005692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f93a 	bl	80056ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b01      	cmp	r3, #1
 8005458:	d10e      	bne.n	8005478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b01      	cmp	r3, #1
 8005466:	d107      	bne.n	8005478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f06f 0201 	mvn.w	r2, #1
 8005470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f7fe f9ba 	bl	80037ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005482:	2b80      	cmp	r3, #128	; 0x80
 8005484:	d10e      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d107      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fab2 	bl	8005a08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ae:	2b40      	cmp	r3, #64	; 0x40
 80054b0:	d10e      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b40      	cmp	r3, #64	; 0x40
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f8ff 	bl	80056ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b20      	cmp	r3, #32
 80054dc:	d10e      	bne.n	80054fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d107      	bne.n	80054fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0220 	mvn.w	r2, #32
 80054f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa7c 	bl	80059f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIM_ConfigClockSource+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e0b4      	b.n	800568a <HAL_TIM_ConfigClockSource+0x186>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800553e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005558:	d03e      	beq.n	80055d8 <HAL_TIM_ConfigClockSource+0xd4>
 800555a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555e:	f200 8087 	bhi.w	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005566:	f000 8086 	beq.w	8005676 <HAL_TIM_ConfigClockSource+0x172>
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556e:	d87f      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b70      	cmp	r3, #112	; 0x70
 8005572:	d01a      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0xa6>
 8005574:	2b70      	cmp	r3, #112	; 0x70
 8005576:	d87b      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b60      	cmp	r3, #96	; 0x60
 800557a:	d050      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x11a>
 800557c:	2b60      	cmp	r3, #96	; 0x60
 800557e:	d877      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b50      	cmp	r3, #80	; 0x50
 8005582:	d03c      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0xfa>
 8005584:	2b50      	cmp	r3, #80	; 0x50
 8005586:	d873      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b40      	cmp	r3, #64	; 0x40
 800558a:	d058      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x13a>
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d86f      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b30      	cmp	r3, #48	; 0x30
 8005592:	d064      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
 8005594:	2b30      	cmp	r3, #48	; 0x30
 8005596:	d86b      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b20      	cmp	r3, #32
 800559a:	d060      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
 800559c:	2b20      	cmp	r3, #32
 800559e:	d867      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d05c      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d05a      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
 80055a8:	e062      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6899      	ldr	r1, [r3, #8]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f000 f98d 	bl	80058d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	609a      	str	r2, [r3, #8]
      break;
 80055d6:	e04f      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6818      	ldr	r0, [r3, #0]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	6899      	ldr	r1, [r3, #8]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f000 f976 	bl	80058d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055fa:	609a      	str	r2, [r3, #8]
      break;
 80055fc:	e03c      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6859      	ldr	r1, [r3, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	461a      	mov	r2, r3
 800560c:	f000 f8ea 	bl	80057e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2150      	movs	r1, #80	; 0x50
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f943 	bl	80058a2 <TIM_ITRx_SetConfig>
      break;
 800561c:	e02c      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	461a      	mov	r2, r3
 800562c:	f000 f909 	bl	8005842 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2160      	movs	r1, #96	; 0x60
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f933 	bl	80058a2 <TIM_ITRx_SetConfig>
      break;
 800563c:	e01c      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	461a      	mov	r2, r3
 800564c:	f000 f8ca 	bl	80057e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2140      	movs	r1, #64	; 0x40
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f923 	bl	80058a2 <TIM_ITRx_SetConfig>
      break;
 800565c:	e00c      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f000 f91a 	bl	80058a2 <TIM_ITRx_SetConfig>
      break;
 800566e:	e003      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
      break;
 8005674:	e000      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
	...

080056e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a34      	ldr	r2, [pc, #208]	; (80057c8 <TIM_Base_SetConfig+0xe4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005702:	d00b      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a31      	ldr	r2, [pc, #196]	; (80057cc <TIM_Base_SetConfig+0xe8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a30      	ldr	r2, [pc, #192]	; (80057d0 <TIM_Base_SetConfig+0xec>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_Base_SetConfig+0x38>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a2f      	ldr	r2, [pc, #188]	; (80057d4 <TIM_Base_SetConfig+0xf0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d108      	bne.n	800572e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a25      	ldr	r2, [pc, #148]	; (80057c8 <TIM_Base_SetConfig+0xe4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01b      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573c:	d017      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a22      	ldr	r2, [pc, #136]	; (80057cc <TIM_Base_SetConfig+0xe8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a21      	ldr	r2, [pc, #132]	; (80057d0 <TIM_Base_SetConfig+0xec>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a20      	ldr	r2, [pc, #128]	; (80057d4 <TIM_Base_SetConfig+0xf0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a1f      	ldr	r2, [pc, #124]	; (80057d8 <TIM_Base_SetConfig+0xf4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a1e      	ldr	r2, [pc, #120]	; (80057dc <TIM_Base_SetConfig+0xf8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_Base_SetConfig+0x8a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a1d      	ldr	r2, [pc, #116]	; (80057e0 <TIM_Base_SetConfig+0xfc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d108      	bne.n	8005780 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a08      	ldr	r2, [pc, #32]	; (80057c8 <TIM_Base_SetConfig+0xe4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d103      	bne.n	80057b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	615a      	str	r2, [r3, #20]
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40010000 	.word	0x40010000
 80057cc:	40000400 	.word	0x40000400
 80057d0:	40000800 	.word	0x40000800
 80057d4:	40000c00 	.word	0x40000c00
 80057d8:	40014000 	.word	0x40014000
 80057dc:	40014400 	.word	0x40014400
 80057e0:	40014800 	.word	0x40014800

080057e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1b      	ldr	r3, [r3, #32]
 80057f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	f023 0201 	bic.w	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800580e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	4313      	orrs	r3, r2
 8005818:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f023 030a 	bic.w	r3, r3, #10
 8005820:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005822:	697a      	ldr	r2, [r7, #20]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	621a      	str	r2, [r3, #32]
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005842:	b480      	push	{r7}
 8005844:	b087      	sub	sp, #28
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0210 	bic.w	r2, r3, #16
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a1b      	ldr	r3, [r3, #32]
 8005864:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800586c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	031b      	lsls	r3, r3, #12
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	4313      	orrs	r3, r2
 8005876:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800587e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	f043 0307 	orr.w	r3, r3, #7
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	609a      	str	r2, [r3, #8]
}
 80058cc:	bf00      	nop
 80058ce:	3714      	adds	r7, #20
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
 80058e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	021a      	lsls	r2, r3, #8
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	4313      	orrs	r3, r2
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	609a      	str	r2, [r3, #8]
}
 800590c:	bf00      	nop
 800590e:	371c      	adds	r7, #28
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800592c:	2302      	movs	r3, #2
 800592e:	e050      	b.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a1c      	ldr	r2, [pc, #112]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d018      	beq.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597c:	d013      	beq.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a18      	ldr	r2, [pc, #96]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00e      	beq.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a16      	ldr	r2, [pc, #88]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a15      	ldr	r2, [pc, #84]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a13      	ldr	r2, [pc, #76]	; (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d10c      	bne.n	80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40010000 	.word	0x40010000
 80059e4:	40000400 	.word	0x40000400
 80059e8:	40000800 	.word	0x40000800
 80059ec:	40000c00 	.word	0x40000c00
 80059f0:	40014000 	.word	0x40014000

080059f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059fc:	bf00      	nop
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <__errno>:
 8005a1c:	4b01      	ldr	r3, [pc, #4]	; (8005a24 <__errno+0x8>)
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000014 	.word	0x20000014

08005a28 <__libc_init_array>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	4d0d      	ldr	r5, [pc, #52]	; (8005a60 <__libc_init_array+0x38>)
 8005a2c:	4c0d      	ldr	r4, [pc, #52]	; (8005a64 <__libc_init_array+0x3c>)
 8005a2e:	1b64      	subs	r4, r4, r5
 8005a30:	10a4      	asrs	r4, r4, #2
 8005a32:	2600      	movs	r6, #0
 8005a34:	42a6      	cmp	r6, r4
 8005a36:	d109      	bne.n	8005a4c <__libc_init_array+0x24>
 8005a38:	4d0b      	ldr	r5, [pc, #44]	; (8005a68 <__libc_init_array+0x40>)
 8005a3a:	4c0c      	ldr	r4, [pc, #48]	; (8005a6c <__libc_init_array+0x44>)
 8005a3c:	f001 f998 	bl	8006d70 <_init>
 8005a40:	1b64      	subs	r4, r4, r5
 8005a42:	10a4      	asrs	r4, r4, #2
 8005a44:	2600      	movs	r6, #0
 8005a46:	42a6      	cmp	r6, r4
 8005a48:	d105      	bne.n	8005a56 <__libc_init_array+0x2e>
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a50:	4798      	blx	r3
 8005a52:	3601      	adds	r6, #1
 8005a54:	e7ee      	b.n	8005a34 <__libc_init_array+0xc>
 8005a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a5a:	4798      	blx	r3
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	e7f2      	b.n	8005a46 <__libc_init_array+0x1e>
 8005a60:	08007ab0 	.word	0x08007ab0
 8005a64:	08007ab0 	.word	0x08007ab0
 8005a68:	08007ab0 	.word	0x08007ab0
 8005a6c:	08007ab4 	.word	0x08007ab4

08005a70 <malloc>:
 8005a70:	4b02      	ldr	r3, [pc, #8]	; (8005a7c <malloc+0xc>)
 8005a72:	4601      	mov	r1, r0
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	f000 b885 	b.w	8005b84 <_malloc_r>
 8005a7a:	bf00      	nop
 8005a7c:	20000014 	.word	0x20000014

08005a80 <memcpy>:
 8005a80:	440a      	add	r2, r1
 8005a82:	4291      	cmp	r1, r2
 8005a84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a88:	d100      	bne.n	8005a8c <memcpy+0xc>
 8005a8a:	4770      	bx	lr
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a96:	4291      	cmp	r1, r2
 8005a98:	d1f9      	bne.n	8005a8e <memcpy+0xe>
 8005a9a:	bd10      	pop	{r4, pc}

08005a9c <memset>:
 8005a9c:	4402      	add	r2, r0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d100      	bne.n	8005aa6 <memset+0xa>
 8005aa4:	4770      	bx	lr
 8005aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aaa:	e7f9      	b.n	8005aa0 <memset+0x4>

08005aac <_free_r>:
 8005aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	d044      	beq.n	8005b3c <_free_r+0x90>
 8005ab2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab6:	9001      	str	r0, [sp, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f1a1 0404 	sub.w	r4, r1, #4
 8005abe:	bfb8      	it	lt
 8005ac0:	18e4      	addlt	r4, r4, r3
 8005ac2:	f000 f97f 	bl	8005dc4 <__malloc_lock>
 8005ac6:	4a1e      	ldr	r2, [pc, #120]	; (8005b40 <_free_r+0x94>)
 8005ac8:	9801      	ldr	r0, [sp, #4]
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	b933      	cbnz	r3, 8005adc <_free_r+0x30>
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	6014      	str	r4, [r2, #0]
 8005ad2:	b003      	add	sp, #12
 8005ad4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ad8:	f000 b97a 	b.w	8005dd0 <__malloc_unlock>
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d908      	bls.n	8005af2 <_free_r+0x46>
 8005ae0:	6825      	ldr	r5, [r4, #0]
 8005ae2:	1961      	adds	r1, r4, r5
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf01      	itttt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	1949      	addeq	r1, r1, r5
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	e7ed      	b.n	8005ace <_free_r+0x22>
 8005af2:	461a      	mov	r2, r3
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b10b      	cbz	r3, 8005afc <_free_r+0x50>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d9fa      	bls.n	8005af2 <_free_r+0x46>
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	1855      	adds	r5, r2, r1
 8005b00:	42a5      	cmp	r5, r4
 8005b02:	d10b      	bne.n	8005b1c <_free_r+0x70>
 8005b04:	6824      	ldr	r4, [r4, #0]
 8005b06:	4421      	add	r1, r4
 8005b08:	1854      	adds	r4, r2, r1
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	d1e0      	bne.n	8005ad2 <_free_r+0x26>
 8005b10:	681c      	ldr	r4, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	6053      	str	r3, [r2, #4]
 8005b16:	4421      	add	r1, r4
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	e7da      	b.n	8005ad2 <_free_r+0x26>
 8005b1c:	d902      	bls.n	8005b24 <_free_r+0x78>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	6003      	str	r3, [r0, #0]
 8005b22:	e7d6      	b.n	8005ad2 <_free_r+0x26>
 8005b24:	6825      	ldr	r5, [r4, #0]
 8005b26:	1961      	adds	r1, r4, r5
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	bf04      	itt	eq
 8005b2c:	6819      	ldreq	r1, [r3, #0]
 8005b2e:	685b      	ldreq	r3, [r3, #4]
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	bf04      	itt	eq
 8005b34:	1949      	addeq	r1, r1, r5
 8005b36:	6021      	streq	r1, [r4, #0]
 8005b38:	6054      	str	r4, [r2, #4]
 8005b3a:	e7ca      	b.n	8005ad2 <_free_r+0x26>
 8005b3c:	b003      	add	sp, #12
 8005b3e:	bd30      	pop	{r4, r5, pc}
 8005b40:	20000204 	.word	0x20000204

08005b44 <sbrk_aligned>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4e0e      	ldr	r6, [pc, #56]	; (8005b80 <sbrk_aligned+0x3c>)
 8005b48:	460c      	mov	r4, r1
 8005b4a:	6831      	ldr	r1, [r6, #0]
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	b911      	cbnz	r1, 8005b56 <sbrk_aligned+0x12>
 8005b50:	f000 f8f8 	bl	8005d44 <_sbrk_r>
 8005b54:	6030      	str	r0, [r6, #0]
 8005b56:	4621      	mov	r1, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 f8f3 	bl	8005d44 <_sbrk_r>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d00a      	beq.n	8005b78 <sbrk_aligned+0x34>
 8005b62:	1cc4      	adds	r4, r0, #3
 8005b64:	f024 0403 	bic.w	r4, r4, #3
 8005b68:	42a0      	cmp	r0, r4
 8005b6a:	d007      	beq.n	8005b7c <sbrk_aligned+0x38>
 8005b6c:	1a21      	subs	r1, r4, r0
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 f8e8 	bl	8005d44 <_sbrk_r>
 8005b74:	3001      	adds	r0, #1
 8005b76:	d101      	bne.n	8005b7c <sbrk_aligned+0x38>
 8005b78:	f04f 34ff 	mov.w	r4, #4294967295
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	bd70      	pop	{r4, r5, r6, pc}
 8005b80:	20000208 	.word	0x20000208

08005b84 <_malloc_r>:
 8005b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b88:	1ccd      	adds	r5, r1, #3
 8005b8a:	f025 0503 	bic.w	r5, r5, #3
 8005b8e:	3508      	adds	r5, #8
 8005b90:	2d0c      	cmp	r5, #12
 8005b92:	bf38      	it	cc
 8005b94:	250c      	movcc	r5, #12
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	4607      	mov	r7, r0
 8005b9a:	db01      	blt.n	8005ba0 <_malloc_r+0x1c>
 8005b9c:	42a9      	cmp	r1, r5
 8005b9e:	d905      	bls.n	8005bac <_malloc_r+0x28>
 8005ba0:	230c      	movs	r3, #12
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	4630      	mov	r0, r6
 8005ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bac:	4e2e      	ldr	r6, [pc, #184]	; (8005c68 <_malloc_r+0xe4>)
 8005bae:	f000 f909 	bl	8005dc4 <__malloc_lock>
 8005bb2:	6833      	ldr	r3, [r6, #0]
 8005bb4:	461c      	mov	r4, r3
 8005bb6:	bb34      	cbnz	r4, 8005c06 <_malloc_r+0x82>
 8005bb8:	4629      	mov	r1, r5
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f7ff ffc2 	bl	8005b44 <sbrk_aligned>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	d14d      	bne.n	8005c62 <_malloc_r+0xde>
 8005bc6:	6834      	ldr	r4, [r6, #0]
 8005bc8:	4626      	mov	r6, r4
 8005bca:	2e00      	cmp	r6, #0
 8005bcc:	d140      	bne.n	8005c50 <_malloc_r+0xcc>
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	4631      	mov	r1, r6
 8005bd2:	4638      	mov	r0, r7
 8005bd4:	eb04 0803 	add.w	r8, r4, r3
 8005bd8:	f000 f8b4 	bl	8005d44 <_sbrk_r>
 8005bdc:	4580      	cmp	r8, r0
 8005bde:	d13a      	bne.n	8005c56 <_malloc_r+0xd2>
 8005be0:	6821      	ldr	r1, [r4, #0]
 8005be2:	3503      	adds	r5, #3
 8005be4:	1a6d      	subs	r5, r5, r1
 8005be6:	f025 0503 	bic.w	r5, r5, #3
 8005bea:	3508      	adds	r5, #8
 8005bec:	2d0c      	cmp	r5, #12
 8005bee:	bf38      	it	cc
 8005bf0:	250c      	movcc	r5, #12
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	f7ff ffa5 	bl	8005b44 <sbrk_aligned>
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d02b      	beq.n	8005c56 <_malloc_r+0xd2>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	442b      	add	r3, r5
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	e00e      	b.n	8005c24 <_malloc_r+0xa0>
 8005c06:	6822      	ldr	r2, [r4, #0]
 8005c08:	1b52      	subs	r2, r2, r5
 8005c0a:	d41e      	bmi.n	8005c4a <_malloc_r+0xc6>
 8005c0c:	2a0b      	cmp	r2, #11
 8005c0e:	d916      	bls.n	8005c3e <_malloc_r+0xba>
 8005c10:	1961      	adds	r1, r4, r5
 8005c12:	42a3      	cmp	r3, r4
 8005c14:	6025      	str	r5, [r4, #0]
 8005c16:	bf18      	it	ne
 8005c18:	6059      	strne	r1, [r3, #4]
 8005c1a:	6863      	ldr	r3, [r4, #4]
 8005c1c:	bf08      	it	eq
 8005c1e:	6031      	streq	r1, [r6, #0]
 8005c20:	5162      	str	r2, [r4, r5]
 8005c22:	604b      	str	r3, [r1, #4]
 8005c24:	4638      	mov	r0, r7
 8005c26:	f104 060b 	add.w	r6, r4, #11
 8005c2a:	f000 f8d1 	bl	8005dd0 <__malloc_unlock>
 8005c2e:	f026 0607 	bic.w	r6, r6, #7
 8005c32:	1d23      	adds	r3, r4, #4
 8005c34:	1af2      	subs	r2, r6, r3
 8005c36:	d0b6      	beq.n	8005ba6 <_malloc_r+0x22>
 8005c38:	1b9b      	subs	r3, r3, r6
 8005c3a:	50a3      	str	r3, [r4, r2]
 8005c3c:	e7b3      	b.n	8005ba6 <_malloc_r+0x22>
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	bf0c      	ite	eq
 8005c44:	6032      	streq	r2, [r6, #0]
 8005c46:	605a      	strne	r2, [r3, #4]
 8005c48:	e7ec      	b.n	8005c24 <_malloc_r+0xa0>
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	6864      	ldr	r4, [r4, #4]
 8005c4e:	e7b2      	b.n	8005bb6 <_malloc_r+0x32>
 8005c50:	4634      	mov	r4, r6
 8005c52:	6876      	ldr	r6, [r6, #4]
 8005c54:	e7b9      	b.n	8005bca <_malloc_r+0x46>
 8005c56:	230c      	movs	r3, #12
 8005c58:	603b      	str	r3, [r7, #0]
 8005c5a:	4638      	mov	r0, r7
 8005c5c:	f000 f8b8 	bl	8005dd0 <__malloc_unlock>
 8005c60:	e7a1      	b.n	8005ba6 <_malloc_r+0x22>
 8005c62:	6025      	str	r5, [r4, #0]
 8005c64:	e7de      	b.n	8005c24 <_malloc_r+0xa0>
 8005c66:	bf00      	nop
 8005c68:	20000204 	.word	0x20000204

08005c6c <srand>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <srand+0x44>)
 8005c70:	681d      	ldr	r5, [r3, #0]
 8005c72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c74:	4604      	mov	r4, r0
 8005c76:	b9b3      	cbnz	r3, 8005ca6 <srand+0x3a>
 8005c78:	2018      	movs	r0, #24
 8005c7a:	f7ff fef9 	bl	8005a70 <malloc>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	63a8      	str	r0, [r5, #56]	; 0x38
 8005c82:	b920      	cbnz	r0, 8005c8e <srand+0x22>
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <srand+0x48>)
 8005c86:	480c      	ldr	r0, [pc, #48]	; (8005cb8 <srand+0x4c>)
 8005c88:	2142      	movs	r1, #66	; 0x42
 8005c8a:	f000 f86b 	bl	8005d64 <__assert_func>
 8005c8e:	490b      	ldr	r1, [pc, #44]	; (8005cbc <srand+0x50>)
 8005c90:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <srand+0x54>)
 8005c92:	e9c0 1300 	strd	r1, r3, [r0]
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <srand+0x58>)
 8005c98:	6083      	str	r3, [r0, #8]
 8005c9a:	230b      	movs	r3, #11
 8005c9c:	8183      	strh	r3, [r0, #12]
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005ca6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005ca8:	2200      	movs	r2, #0
 8005caa:	611c      	str	r4, [r3, #16]
 8005cac:	615a      	str	r2, [r3, #20]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	20000014 	.word	0x20000014
 8005cb4:	08007964 	.word	0x08007964
 8005cb8:	0800797b 	.word	0x0800797b
 8005cbc:	abcd330e 	.word	0xabcd330e
 8005cc0:	e66d1234 	.word	0xe66d1234
 8005cc4:	0005deec 	.word	0x0005deec

08005cc8 <rand>:
 8005cc8:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <rand+0x5c>)
 8005cca:	b510      	push	{r4, lr}
 8005ccc:	681c      	ldr	r4, [r3, #0]
 8005cce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005cd0:	b9b3      	cbnz	r3, 8005d00 <rand+0x38>
 8005cd2:	2018      	movs	r0, #24
 8005cd4:	f7ff fecc 	bl	8005a70 <malloc>
 8005cd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8005cda:	b928      	cbnz	r0, 8005ce8 <rand+0x20>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	4b12      	ldr	r3, [pc, #72]	; (8005d28 <rand+0x60>)
 8005ce0:	4812      	ldr	r0, [pc, #72]	; (8005d2c <rand+0x64>)
 8005ce2:	214e      	movs	r1, #78	; 0x4e
 8005ce4:	f000 f83e 	bl	8005d64 <__assert_func>
 8005ce8:	4a11      	ldr	r2, [pc, #68]	; (8005d30 <rand+0x68>)
 8005cea:	4b12      	ldr	r3, [pc, #72]	; (8005d34 <rand+0x6c>)
 8005cec:	e9c0 2300 	strd	r2, r3, [r0]
 8005cf0:	4b11      	ldr	r3, [pc, #68]	; (8005d38 <rand+0x70>)
 8005cf2:	6083      	str	r3, [r0, #8]
 8005cf4:	230b      	movs	r3, #11
 8005cf6:	8183      	strh	r3, [r0, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005d00:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005d02:	4a0e      	ldr	r2, [pc, #56]	; (8005d3c <rand+0x74>)
 8005d04:	6920      	ldr	r0, [r4, #16]
 8005d06:	6963      	ldr	r3, [r4, #20]
 8005d08:	490d      	ldr	r1, [pc, #52]	; (8005d40 <rand+0x78>)
 8005d0a:	4342      	muls	r2, r0
 8005d0c:	fb01 2203 	mla	r2, r1, r3, r2
 8005d10:	fba0 0101 	umull	r0, r1, r0, r1
 8005d14:	1c43      	adds	r3, r0, #1
 8005d16:	eb42 0001 	adc.w	r0, r2, r1
 8005d1a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005d1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005d22:	bd10      	pop	{r4, pc}
 8005d24:	20000014 	.word	0x20000014
 8005d28:	08007964 	.word	0x08007964
 8005d2c:	0800797b 	.word	0x0800797b
 8005d30:	abcd330e 	.word	0xabcd330e
 8005d34:	e66d1234 	.word	0xe66d1234
 8005d38:	0005deec 	.word	0x0005deec
 8005d3c:	5851f42d 	.word	0x5851f42d
 8005d40:	4c957f2d 	.word	0x4c957f2d

08005d44 <_sbrk_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d06      	ldr	r5, [pc, #24]	; (8005d60 <_sbrk_r+0x1c>)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	602b      	str	r3, [r5, #0]
 8005d50:	f7fd ff40 	bl	8003bd4 <_sbrk>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_sbrk_r+0x1a>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_sbrk_r+0x1a>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	2000020c 	.word	0x2000020c

08005d64 <__assert_func>:
 8005d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d66:	4614      	mov	r4, r2
 8005d68:	461a      	mov	r2, r3
 8005d6a:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <__assert_func+0x2c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4605      	mov	r5, r0
 8005d70:	68d8      	ldr	r0, [r3, #12]
 8005d72:	b14c      	cbz	r4, 8005d88 <__assert_func+0x24>
 8005d74:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <__assert_func+0x30>)
 8005d76:	9100      	str	r1, [sp, #0]
 8005d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d7c:	4906      	ldr	r1, [pc, #24]	; (8005d98 <__assert_func+0x34>)
 8005d7e:	462b      	mov	r3, r5
 8005d80:	f000 f80e 	bl	8005da0 <fiprintf>
 8005d84:	f000 fbd8 	bl	8006538 <abort>
 8005d88:	4b04      	ldr	r3, [pc, #16]	; (8005d9c <__assert_func+0x38>)
 8005d8a:	461c      	mov	r4, r3
 8005d8c:	e7f3      	b.n	8005d76 <__assert_func+0x12>
 8005d8e:	bf00      	nop
 8005d90:	20000014 	.word	0x20000014
 8005d94:	080079d6 	.word	0x080079d6
 8005d98:	080079e3 	.word	0x080079e3
 8005d9c:	08007a11 	.word	0x08007a11

08005da0 <fiprintf>:
 8005da0:	b40e      	push	{r1, r2, r3}
 8005da2:	b503      	push	{r0, r1, lr}
 8005da4:	4601      	mov	r1, r0
 8005da6:	ab03      	add	r3, sp, #12
 8005da8:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <fiprintf+0x20>)
 8005daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dae:	6800      	ldr	r0, [r0, #0]
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	f000 f83d 	bl	8005e30 <_vfiprintf_r>
 8005db6:	b002      	add	sp, #8
 8005db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dbc:	b003      	add	sp, #12
 8005dbe:	4770      	bx	lr
 8005dc0:	20000014 	.word	0x20000014

08005dc4 <__malloc_lock>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__malloc_lock+0x8>)
 8005dc6:	f000 bd77 	b.w	80068b8 <__retarget_lock_acquire_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20000210 	.word	0x20000210

08005dd0 <__malloc_unlock>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__malloc_unlock+0x8>)
 8005dd2:	f000 bd72 	b.w	80068ba <__retarget_lock_release_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20000210 	.word	0x20000210

08005ddc <__sfputc_r>:
 8005ddc:	6893      	ldr	r3, [r2, #8]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	b410      	push	{r4}
 8005de4:	6093      	str	r3, [r2, #8]
 8005de6:	da08      	bge.n	8005dfa <__sfputc_r+0x1e>
 8005de8:	6994      	ldr	r4, [r2, #24]
 8005dea:	42a3      	cmp	r3, r4
 8005dec:	db01      	blt.n	8005df2 <__sfputc_r+0x16>
 8005dee:	290a      	cmp	r1, #10
 8005df0:	d103      	bne.n	8005dfa <__sfputc_r+0x1e>
 8005df2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df6:	f000 badf 	b.w	80063b8 <__swbuf_r>
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	1c58      	adds	r0, r3, #1
 8005dfe:	6010      	str	r0, [r2, #0]
 8005e00:	7019      	strb	r1, [r3, #0]
 8005e02:	4608      	mov	r0, r1
 8005e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <__sfputs_r>:
 8005e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	460f      	mov	r7, r1
 8005e10:	4614      	mov	r4, r2
 8005e12:	18d5      	adds	r5, r2, r3
 8005e14:	42ac      	cmp	r4, r5
 8005e16:	d101      	bne.n	8005e1c <__sfputs_r+0x12>
 8005e18:	2000      	movs	r0, #0
 8005e1a:	e007      	b.n	8005e2c <__sfputs_r+0x22>
 8005e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e20:	463a      	mov	r2, r7
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff ffda 	bl	8005ddc <__sfputc_r>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d1f3      	bne.n	8005e14 <__sfputs_r+0xa>
 8005e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e30 <_vfiprintf_r>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	460d      	mov	r5, r1
 8005e36:	b09d      	sub	sp, #116	; 0x74
 8005e38:	4614      	mov	r4, r2
 8005e3a:	4698      	mov	r8, r3
 8005e3c:	4606      	mov	r6, r0
 8005e3e:	b118      	cbz	r0, 8005e48 <_vfiprintf_r+0x18>
 8005e40:	6983      	ldr	r3, [r0, #24]
 8005e42:	b90b      	cbnz	r3, 8005e48 <_vfiprintf_r+0x18>
 8005e44:	f000 fc9a 	bl	800677c <__sinit>
 8005e48:	4b89      	ldr	r3, [pc, #548]	; (8006070 <_vfiprintf_r+0x240>)
 8005e4a:	429d      	cmp	r5, r3
 8005e4c:	d11b      	bne.n	8005e86 <_vfiprintf_r+0x56>
 8005e4e:	6875      	ldr	r5, [r6, #4]
 8005e50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d405      	bmi.n	8005e62 <_vfiprintf_r+0x32>
 8005e56:	89ab      	ldrh	r3, [r5, #12]
 8005e58:	059a      	lsls	r2, r3, #22
 8005e5a:	d402      	bmi.n	8005e62 <_vfiprintf_r+0x32>
 8005e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e5e:	f000 fd2b 	bl	80068b8 <__retarget_lock_acquire_recursive>
 8005e62:	89ab      	ldrh	r3, [r5, #12]
 8005e64:	071b      	lsls	r3, r3, #28
 8005e66:	d501      	bpl.n	8005e6c <_vfiprintf_r+0x3c>
 8005e68:	692b      	ldr	r3, [r5, #16]
 8005e6a:	b9eb      	cbnz	r3, 8005ea8 <_vfiprintf_r+0x78>
 8005e6c:	4629      	mov	r1, r5
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f000 faf4 	bl	800645c <__swsetup_r>
 8005e74:	b1c0      	cbz	r0, 8005ea8 <_vfiprintf_r+0x78>
 8005e76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e78:	07dc      	lsls	r4, r3, #31
 8005e7a:	d50e      	bpl.n	8005e9a <_vfiprintf_r+0x6a>
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e80:	b01d      	add	sp, #116	; 0x74
 8005e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	4b7b      	ldr	r3, [pc, #492]	; (8006074 <_vfiprintf_r+0x244>)
 8005e88:	429d      	cmp	r5, r3
 8005e8a:	d101      	bne.n	8005e90 <_vfiprintf_r+0x60>
 8005e8c:	68b5      	ldr	r5, [r6, #8]
 8005e8e:	e7df      	b.n	8005e50 <_vfiprintf_r+0x20>
 8005e90:	4b79      	ldr	r3, [pc, #484]	; (8006078 <_vfiprintf_r+0x248>)
 8005e92:	429d      	cmp	r5, r3
 8005e94:	bf08      	it	eq
 8005e96:	68f5      	ldreq	r5, [r6, #12]
 8005e98:	e7da      	b.n	8005e50 <_vfiprintf_r+0x20>
 8005e9a:	89ab      	ldrh	r3, [r5, #12]
 8005e9c:	0598      	lsls	r0, r3, #22
 8005e9e:	d4ed      	bmi.n	8005e7c <_vfiprintf_r+0x4c>
 8005ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ea2:	f000 fd0a 	bl	80068ba <__retarget_lock_release_recursive>
 8005ea6:	e7e9      	b.n	8005e7c <_vfiprintf_r+0x4c>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005eac:	2320      	movs	r3, #32
 8005eae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eb6:	2330      	movs	r3, #48	; 0x30
 8005eb8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800607c <_vfiprintf_r+0x24c>
 8005ebc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ec0:	f04f 0901 	mov.w	r9, #1
 8005ec4:	4623      	mov	r3, r4
 8005ec6:	469a      	mov	sl, r3
 8005ec8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ecc:	b10a      	cbz	r2, 8005ed2 <_vfiprintf_r+0xa2>
 8005ece:	2a25      	cmp	r2, #37	; 0x25
 8005ed0:	d1f9      	bne.n	8005ec6 <_vfiprintf_r+0x96>
 8005ed2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ed6:	d00b      	beq.n	8005ef0 <_vfiprintf_r+0xc0>
 8005ed8:	465b      	mov	r3, fp
 8005eda:	4622      	mov	r2, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f7ff ff93 	bl	8005e0a <__sfputs_r>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	f000 80aa 	beq.w	800603e <_vfiprintf_r+0x20e>
 8005eea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eec:	445a      	add	r2, fp
 8005eee:	9209      	str	r2, [sp, #36]	; 0x24
 8005ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80a2 	beq.w	800603e <_vfiprintf_r+0x20e>
 8005efa:	2300      	movs	r3, #0
 8005efc:	f04f 32ff 	mov.w	r2, #4294967295
 8005f00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f04:	f10a 0a01 	add.w	sl, sl, #1
 8005f08:	9304      	str	r3, [sp, #16]
 8005f0a:	9307      	str	r3, [sp, #28]
 8005f0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f10:	931a      	str	r3, [sp, #104]	; 0x68
 8005f12:	4654      	mov	r4, sl
 8005f14:	2205      	movs	r2, #5
 8005f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f1a:	4858      	ldr	r0, [pc, #352]	; (800607c <_vfiprintf_r+0x24c>)
 8005f1c:	f7fa f968 	bl	80001f0 <memchr>
 8005f20:	9a04      	ldr	r2, [sp, #16]
 8005f22:	b9d8      	cbnz	r0, 8005f5c <_vfiprintf_r+0x12c>
 8005f24:	06d1      	lsls	r1, r2, #27
 8005f26:	bf44      	itt	mi
 8005f28:	2320      	movmi	r3, #32
 8005f2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f2e:	0713      	lsls	r3, r2, #28
 8005f30:	bf44      	itt	mi
 8005f32:	232b      	movmi	r3, #43	; 0x2b
 8005f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f38:	f89a 3000 	ldrb.w	r3, [sl]
 8005f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f3e:	d015      	beq.n	8005f6c <_vfiprintf_r+0x13c>
 8005f40:	9a07      	ldr	r2, [sp, #28]
 8005f42:	4654      	mov	r4, sl
 8005f44:	2000      	movs	r0, #0
 8005f46:	f04f 0c0a 	mov.w	ip, #10
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f50:	3b30      	subs	r3, #48	; 0x30
 8005f52:	2b09      	cmp	r3, #9
 8005f54:	d94e      	bls.n	8005ff4 <_vfiprintf_r+0x1c4>
 8005f56:	b1b0      	cbz	r0, 8005f86 <_vfiprintf_r+0x156>
 8005f58:	9207      	str	r2, [sp, #28]
 8005f5a:	e014      	b.n	8005f86 <_vfiprintf_r+0x156>
 8005f5c:	eba0 0308 	sub.w	r3, r0, r8
 8005f60:	fa09 f303 	lsl.w	r3, r9, r3
 8005f64:	4313      	orrs	r3, r2
 8005f66:	9304      	str	r3, [sp, #16]
 8005f68:	46a2      	mov	sl, r4
 8005f6a:	e7d2      	b.n	8005f12 <_vfiprintf_r+0xe2>
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	1d19      	adds	r1, r3, #4
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	9103      	str	r1, [sp, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bfbb      	ittet	lt
 8005f78:	425b      	neglt	r3, r3
 8005f7a:	f042 0202 	orrlt.w	r2, r2, #2
 8005f7e:	9307      	strge	r3, [sp, #28]
 8005f80:	9307      	strlt	r3, [sp, #28]
 8005f82:	bfb8      	it	lt
 8005f84:	9204      	strlt	r2, [sp, #16]
 8005f86:	7823      	ldrb	r3, [r4, #0]
 8005f88:	2b2e      	cmp	r3, #46	; 0x2e
 8005f8a:	d10c      	bne.n	8005fa6 <_vfiprintf_r+0x176>
 8005f8c:	7863      	ldrb	r3, [r4, #1]
 8005f8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f90:	d135      	bne.n	8005ffe <_vfiprintf_r+0x1ce>
 8005f92:	9b03      	ldr	r3, [sp, #12]
 8005f94:	1d1a      	adds	r2, r3, #4
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	9203      	str	r2, [sp, #12]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bfb8      	it	lt
 8005f9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fa2:	3402      	adds	r4, #2
 8005fa4:	9305      	str	r3, [sp, #20]
 8005fa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800608c <_vfiprintf_r+0x25c>
 8005faa:	7821      	ldrb	r1, [r4, #0]
 8005fac:	2203      	movs	r2, #3
 8005fae:	4650      	mov	r0, sl
 8005fb0:	f7fa f91e 	bl	80001f0 <memchr>
 8005fb4:	b140      	cbz	r0, 8005fc8 <_vfiprintf_r+0x198>
 8005fb6:	2340      	movs	r3, #64	; 0x40
 8005fb8:	eba0 000a 	sub.w	r0, r0, sl
 8005fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	4303      	orrs	r3, r0
 8005fc4:	3401      	adds	r4, #1
 8005fc6:	9304      	str	r3, [sp, #16]
 8005fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fcc:	482c      	ldr	r0, [pc, #176]	; (8006080 <_vfiprintf_r+0x250>)
 8005fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fd2:	2206      	movs	r2, #6
 8005fd4:	f7fa f90c 	bl	80001f0 <memchr>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	d03f      	beq.n	800605c <_vfiprintf_r+0x22c>
 8005fdc:	4b29      	ldr	r3, [pc, #164]	; (8006084 <_vfiprintf_r+0x254>)
 8005fde:	bb1b      	cbnz	r3, 8006028 <_vfiprintf_r+0x1f8>
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	3307      	adds	r3, #7
 8005fe4:	f023 0307 	bic.w	r3, r3, #7
 8005fe8:	3308      	adds	r3, #8
 8005fea:	9303      	str	r3, [sp, #12]
 8005fec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fee:	443b      	add	r3, r7
 8005ff0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ff2:	e767      	b.n	8005ec4 <_vfiprintf_r+0x94>
 8005ff4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	e7a5      	b.n	8005f4a <_vfiprintf_r+0x11a>
 8005ffe:	2300      	movs	r3, #0
 8006000:	3401      	adds	r4, #1
 8006002:	9305      	str	r3, [sp, #20]
 8006004:	4619      	mov	r1, r3
 8006006:	f04f 0c0a 	mov.w	ip, #10
 800600a:	4620      	mov	r0, r4
 800600c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006010:	3a30      	subs	r2, #48	; 0x30
 8006012:	2a09      	cmp	r2, #9
 8006014:	d903      	bls.n	800601e <_vfiprintf_r+0x1ee>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d0c5      	beq.n	8005fa6 <_vfiprintf_r+0x176>
 800601a:	9105      	str	r1, [sp, #20]
 800601c:	e7c3      	b.n	8005fa6 <_vfiprintf_r+0x176>
 800601e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006022:	4604      	mov	r4, r0
 8006024:	2301      	movs	r3, #1
 8006026:	e7f0      	b.n	800600a <_vfiprintf_r+0x1da>
 8006028:	ab03      	add	r3, sp, #12
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	462a      	mov	r2, r5
 800602e:	4b16      	ldr	r3, [pc, #88]	; (8006088 <_vfiprintf_r+0x258>)
 8006030:	a904      	add	r1, sp, #16
 8006032:	4630      	mov	r0, r6
 8006034:	f3af 8000 	nop.w
 8006038:	4607      	mov	r7, r0
 800603a:	1c78      	adds	r0, r7, #1
 800603c:	d1d6      	bne.n	8005fec <_vfiprintf_r+0x1bc>
 800603e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006040:	07d9      	lsls	r1, r3, #31
 8006042:	d405      	bmi.n	8006050 <_vfiprintf_r+0x220>
 8006044:	89ab      	ldrh	r3, [r5, #12]
 8006046:	059a      	lsls	r2, r3, #22
 8006048:	d402      	bmi.n	8006050 <_vfiprintf_r+0x220>
 800604a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800604c:	f000 fc35 	bl	80068ba <__retarget_lock_release_recursive>
 8006050:	89ab      	ldrh	r3, [r5, #12]
 8006052:	065b      	lsls	r3, r3, #25
 8006054:	f53f af12 	bmi.w	8005e7c <_vfiprintf_r+0x4c>
 8006058:	9809      	ldr	r0, [sp, #36]	; 0x24
 800605a:	e711      	b.n	8005e80 <_vfiprintf_r+0x50>
 800605c:	ab03      	add	r3, sp, #12
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	462a      	mov	r2, r5
 8006062:	4b09      	ldr	r3, [pc, #36]	; (8006088 <_vfiprintf_r+0x258>)
 8006064:	a904      	add	r1, sp, #16
 8006066:	4630      	mov	r0, r6
 8006068:	f000 f880 	bl	800616c <_printf_i>
 800606c:	e7e4      	b.n	8006038 <_vfiprintf_r+0x208>
 800606e:	bf00      	nop
 8006070:	08007a68 	.word	0x08007a68
 8006074:	08007a88 	.word	0x08007a88
 8006078:	08007a48 	.word	0x08007a48
 800607c:	08007a12 	.word	0x08007a12
 8006080:	08007a1c 	.word	0x08007a1c
 8006084:	00000000 	.word	0x00000000
 8006088:	08005e0b 	.word	0x08005e0b
 800608c:	08007a18 	.word	0x08007a18

08006090 <_printf_common>:
 8006090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	4616      	mov	r6, r2
 8006096:	4699      	mov	r9, r3
 8006098:	688a      	ldr	r2, [r1, #8]
 800609a:	690b      	ldr	r3, [r1, #16]
 800609c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	bfb8      	it	lt
 80060a4:	4613      	movlt	r3, r2
 80060a6:	6033      	str	r3, [r6, #0]
 80060a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060ac:	4607      	mov	r7, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	b10a      	cbz	r2, 80060b6 <_printf_common+0x26>
 80060b2:	3301      	adds	r3, #1
 80060b4:	6033      	str	r3, [r6, #0]
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	0699      	lsls	r1, r3, #26
 80060ba:	bf42      	ittt	mi
 80060bc:	6833      	ldrmi	r3, [r6, #0]
 80060be:	3302      	addmi	r3, #2
 80060c0:	6033      	strmi	r3, [r6, #0]
 80060c2:	6825      	ldr	r5, [r4, #0]
 80060c4:	f015 0506 	ands.w	r5, r5, #6
 80060c8:	d106      	bne.n	80060d8 <_printf_common+0x48>
 80060ca:	f104 0a19 	add.w	sl, r4, #25
 80060ce:	68e3      	ldr	r3, [r4, #12]
 80060d0:	6832      	ldr	r2, [r6, #0]
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	42ab      	cmp	r3, r5
 80060d6:	dc26      	bgt.n	8006126 <_printf_common+0x96>
 80060d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060dc:	1e13      	subs	r3, r2, #0
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	bf18      	it	ne
 80060e2:	2301      	movne	r3, #1
 80060e4:	0692      	lsls	r2, r2, #26
 80060e6:	d42b      	bmi.n	8006140 <_printf_common+0xb0>
 80060e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060ec:	4649      	mov	r1, r9
 80060ee:	4638      	mov	r0, r7
 80060f0:	47c0      	blx	r8
 80060f2:	3001      	adds	r0, #1
 80060f4:	d01e      	beq.n	8006134 <_printf_common+0xa4>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	68e5      	ldr	r5, [r4, #12]
 80060fa:	6832      	ldr	r2, [r6, #0]
 80060fc:	f003 0306 	and.w	r3, r3, #6
 8006100:	2b04      	cmp	r3, #4
 8006102:	bf08      	it	eq
 8006104:	1aad      	subeq	r5, r5, r2
 8006106:	68a3      	ldr	r3, [r4, #8]
 8006108:	6922      	ldr	r2, [r4, #16]
 800610a:	bf0c      	ite	eq
 800610c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006110:	2500      	movne	r5, #0
 8006112:	4293      	cmp	r3, r2
 8006114:	bfc4      	itt	gt
 8006116:	1a9b      	subgt	r3, r3, r2
 8006118:	18ed      	addgt	r5, r5, r3
 800611a:	2600      	movs	r6, #0
 800611c:	341a      	adds	r4, #26
 800611e:	42b5      	cmp	r5, r6
 8006120:	d11a      	bne.n	8006158 <_printf_common+0xc8>
 8006122:	2000      	movs	r0, #0
 8006124:	e008      	b.n	8006138 <_printf_common+0xa8>
 8006126:	2301      	movs	r3, #1
 8006128:	4652      	mov	r2, sl
 800612a:	4649      	mov	r1, r9
 800612c:	4638      	mov	r0, r7
 800612e:	47c0      	blx	r8
 8006130:	3001      	adds	r0, #1
 8006132:	d103      	bne.n	800613c <_printf_common+0xac>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613c:	3501      	adds	r5, #1
 800613e:	e7c6      	b.n	80060ce <_printf_common+0x3e>
 8006140:	18e1      	adds	r1, r4, r3
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	2030      	movs	r0, #48	; 0x30
 8006146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800614a:	4422      	add	r2, r4
 800614c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006154:	3302      	adds	r3, #2
 8006156:	e7c7      	b.n	80060e8 <_printf_common+0x58>
 8006158:	2301      	movs	r3, #1
 800615a:	4622      	mov	r2, r4
 800615c:	4649      	mov	r1, r9
 800615e:	4638      	mov	r0, r7
 8006160:	47c0      	blx	r8
 8006162:	3001      	adds	r0, #1
 8006164:	d0e6      	beq.n	8006134 <_printf_common+0xa4>
 8006166:	3601      	adds	r6, #1
 8006168:	e7d9      	b.n	800611e <_printf_common+0x8e>
	...

0800616c <_printf_i>:
 800616c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006170:	7e0f      	ldrb	r7, [r1, #24]
 8006172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006174:	2f78      	cmp	r7, #120	; 0x78
 8006176:	4691      	mov	r9, r2
 8006178:	4680      	mov	r8, r0
 800617a:	460c      	mov	r4, r1
 800617c:	469a      	mov	sl, r3
 800617e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006182:	d807      	bhi.n	8006194 <_printf_i+0x28>
 8006184:	2f62      	cmp	r7, #98	; 0x62
 8006186:	d80a      	bhi.n	800619e <_printf_i+0x32>
 8006188:	2f00      	cmp	r7, #0
 800618a:	f000 80d8 	beq.w	800633e <_printf_i+0x1d2>
 800618e:	2f58      	cmp	r7, #88	; 0x58
 8006190:	f000 80a3 	beq.w	80062da <_printf_i+0x16e>
 8006194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800619c:	e03a      	b.n	8006214 <_printf_i+0xa8>
 800619e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061a2:	2b15      	cmp	r3, #21
 80061a4:	d8f6      	bhi.n	8006194 <_printf_i+0x28>
 80061a6:	a101      	add	r1, pc, #4	; (adr r1, 80061ac <_printf_i+0x40>)
 80061a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ac:	08006205 	.word	0x08006205
 80061b0:	08006219 	.word	0x08006219
 80061b4:	08006195 	.word	0x08006195
 80061b8:	08006195 	.word	0x08006195
 80061bc:	08006195 	.word	0x08006195
 80061c0:	08006195 	.word	0x08006195
 80061c4:	08006219 	.word	0x08006219
 80061c8:	08006195 	.word	0x08006195
 80061cc:	08006195 	.word	0x08006195
 80061d0:	08006195 	.word	0x08006195
 80061d4:	08006195 	.word	0x08006195
 80061d8:	08006325 	.word	0x08006325
 80061dc:	08006249 	.word	0x08006249
 80061e0:	08006307 	.word	0x08006307
 80061e4:	08006195 	.word	0x08006195
 80061e8:	08006195 	.word	0x08006195
 80061ec:	08006347 	.word	0x08006347
 80061f0:	08006195 	.word	0x08006195
 80061f4:	08006249 	.word	0x08006249
 80061f8:	08006195 	.word	0x08006195
 80061fc:	08006195 	.word	0x08006195
 8006200:	0800630f 	.word	0x0800630f
 8006204:	682b      	ldr	r3, [r5, #0]
 8006206:	1d1a      	adds	r2, r3, #4
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	602a      	str	r2, [r5, #0]
 800620c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006214:	2301      	movs	r3, #1
 8006216:	e0a3      	b.n	8006360 <_printf_i+0x1f4>
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	6829      	ldr	r1, [r5, #0]
 800621c:	0606      	lsls	r6, r0, #24
 800621e:	f101 0304 	add.w	r3, r1, #4
 8006222:	d50a      	bpl.n	800623a <_printf_i+0xce>
 8006224:	680e      	ldr	r6, [r1, #0]
 8006226:	602b      	str	r3, [r5, #0]
 8006228:	2e00      	cmp	r6, #0
 800622a:	da03      	bge.n	8006234 <_printf_i+0xc8>
 800622c:	232d      	movs	r3, #45	; 0x2d
 800622e:	4276      	negs	r6, r6
 8006230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006234:	485e      	ldr	r0, [pc, #376]	; (80063b0 <_printf_i+0x244>)
 8006236:	230a      	movs	r3, #10
 8006238:	e019      	b.n	800626e <_printf_i+0x102>
 800623a:	680e      	ldr	r6, [r1, #0]
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006242:	bf18      	it	ne
 8006244:	b236      	sxthne	r6, r6
 8006246:	e7ef      	b.n	8006228 <_printf_i+0xbc>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	6820      	ldr	r0, [r4, #0]
 800624c:	1d19      	adds	r1, r3, #4
 800624e:	6029      	str	r1, [r5, #0]
 8006250:	0601      	lsls	r1, r0, #24
 8006252:	d501      	bpl.n	8006258 <_printf_i+0xec>
 8006254:	681e      	ldr	r6, [r3, #0]
 8006256:	e002      	b.n	800625e <_printf_i+0xf2>
 8006258:	0646      	lsls	r6, r0, #25
 800625a:	d5fb      	bpl.n	8006254 <_printf_i+0xe8>
 800625c:	881e      	ldrh	r6, [r3, #0]
 800625e:	4854      	ldr	r0, [pc, #336]	; (80063b0 <_printf_i+0x244>)
 8006260:	2f6f      	cmp	r7, #111	; 0x6f
 8006262:	bf0c      	ite	eq
 8006264:	2308      	moveq	r3, #8
 8006266:	230a      	movne	r3, #10
 8006268:	2100      	movs	r1, #0
 800626a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800626e:	6865      	ldr	r5, [r4, #4]
 8006270:	60a5      	str	r5, [r4, #8]
 8006272:	2d00      	cmp	r5, #0
 8006274:	bfa2      	ittt	ge
 8006276:	6821      	ldrge	r1, [r4, #0]
 8006278:	f021 0104 	bicge.w	r1, r1, #4
 800627c:	6021      	strge	r1, [r4, #0]
 800627e:	b90e      	cbnz	r6, 8006284 <_printf_i+0x118>
 8006280:	2d00      	cmp	r5, #0
 8006282:	d04d      	beq.n	8006320 <_printf_i+0x1b4>
 8006284:	4615      	mov	r5, r2
 8006286:	fbb6 f1f3 	udiv	r1, r6, r3
 800628a:	fb03 6711 	mls	r7, r3, r1, r6
 800628e:	5dc7      	ldrb	r7, [r0, r7]
 8006290:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006294:	4637      	mov	r7, r6
 8006296:	42bb      	cmp	r3, r7
 8006298:	460e      	mov	r6, r1
 800629a:	d9f4      	bls.n	8006286 <_printf_i+0x11a>
 800629c:	2b08      	cmp	r3, #8
 800629e:	d10b      	bne.n	80062b8 <_printf_i+0x14c>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	07de      	lsls	r6, r3, #31
 80062a4:	d508      	bpl.n	80062b8 <_printf_i+0x14c>
 80062a6:	6923      	ldr	r3, [r4, #16]
 80062a8:	6861      	ldr	r1, [r4, #4]
 80062aa:	4299      	cmp	r1, r3
 80062ac:	bfde      	ittt	le
 80062ae:	2330      	movle	r3, #48	; 0x30
 80062b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062b8:	1b52      	subs	r2, r2, r5
 80062ba:	6122      	str	r2, [r4, #16]
 80062bc:	f8cd a000 	str.w	sl, [sp]
 80062c0:	464b      	mov	r3, r9
 80062c2:	aa03      	add	r2, sp, #12
 80062c4:	4621      	mov	r1, r4
 80062c6:	4640      	mov	r0, r8
 80062c8:	f7ff fee2 	bl	8006090 <_printf_common>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d14c      	bne.n	800636a <_printf_i+0x1fe>
 80062d0:	f04f 30ff 	mov.w	r0, #4294967295
 80062d4:	b004      	add	sp, #16
 80062d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062da:	4835      	ldr	r0, [pc, #212]	; (80063b0 <_printf_i+0x244>)
 80062dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062e0:	6829      	ldr	r1, [r5, #0]
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80062e8:	6029      	str	r1, [r5, #0]
 80062ea:	061d      	lsls	r5, r3, #24
 80062ec:	d514      	bpl.n	8006318 <_printf_i+0x1ac>
 80062ee:	07df      	lsls	r7, r3, #31
 80062f0:	bf44      	itt	mi
 80062f2:	f043 0320 	orrmi.w	r3, r3, #32
 80062f6:	6023      	strmi	r3, [r4, #0]
 80062f8:	b91e      	cbnz	r6, 8006302 <_printf_i+0x196>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	f023 0320 	bic.w	r3, r3, #32
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	2310      	movs	r3, #16
 8006304:	e7b0      	b.n	8006268 <_printf_i+0xfc>
 8006306:	6823      	ldr	r3, [r4, #0]
 8006308:	f043 0320 	orr.w	r3, r3, #32
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	2378      	movs	r3, #120	; 0x78
 8006310:	4828      	ldr	r0, [pc, #160]	; (80063b4 <_printf_i+0x248>)
 8006312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006316:	e7e3      	b.n	80062e0 <_printf_i+0x174>
 8006318:	0659      	lsls	r1, r3, #25
 800631a:	bf48      	it	mi
 800631c:	b2b6      	uxthmi	r6, r6
 800631e:	e7e6      	b.n	80062ee <_printf_i+0x182>
 8006320:	4615      	mov	r5, r2
 8006322:	e7bb      	b.n	800629c <_printf_i+0x130>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	6826      	ldr	r6, [r4, #0]
 8006328:	6961      	ldr	r1, [r4, #20]
 800632a:	1d18      	adds	r0, r3, #4
 800632c:	6028      	str	r0, [r5, #0]
 800632e:	0635      	lsls	r5, r6, #24
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	d501      	bpl.n	8006338 <_printf_i+0x1cc>
 8006334:	6019      	str	r1, [r3, #0]
 8006336:	e002      	b.n	800633e <_printf_i+0x1d2>
 8006338:	0670      	lsls	r0, r6, #25
 800633a:	d5fb      	bpl.n	8006334 <_printf_i+0x1c8>
 800633c:	8019      	strh	r1, [r3, #0]
 800633e:	2300      	movs	r3, #0
 8006340:	6123      	str	r3, [r4, #16]
 8006342:	4615      	mov	r5, r2
 8006344:	e7ba      	b.n	80062bc <_printf_i+0x150>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	1d1a      	adds	r2, r3, #4
 800634a:	602a      	str	r2, [r5, #0]
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	6862      	ldr	r2, [r4, #4]
 8006350:	2100      	movs	r1, #0
 8006352:	4628      	mov	r0, r5
 8006354:	f7f9 ff4c 	bl	80001f0 <memchr>
 8006358:	b108      	cbz	r0, 800635e <_printf_i+0x1f2>
 800635a:	1b40      	subs	r0, r0, r5
 800635c:	6060      	str	r0, [r4, #4]
 800635e:	6863      	ldr	r3, [r4, #4]
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	2300      	movs	r3, #0
 8006364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006368:	e7a8      	b.n	80062bc <_printf_i+0x150>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	462a      	mov	r2, r5
 800636e:	4649      	mov	r1, r9
 8006370:	4640      	mov	r0, r8
 8006372:	47d0      	blx	sl
 8006374:	3001      	adds	r0, #1
 8006376:	d0ab      	beq.n	80062d0 <_printf_i+0x164>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	079b      	lsls	r3, r3, #30
 800637c:	d413      	bmi.n	80063a6 <_printf_i+0x23a>
 800637e:	68e0      	ldr	r0, [r4, #12]
 8006380:	9b03      	ldr	r3, [sp, #12]
 8006382:	4298      	cmp	r0, r3
 8006384:	bfb8      	it	lt
 8006386:	4618      	movlt	r0, r3
 8006388:	e7a4      	b.n	80062d4 <_printf_i+0x168>
 800638a:	2301      	movs	r3, #1
 800638c:	4632      	mov	r2, r6
 800638e:	4649      	mov	r1, r9
 8006390:	4640      	mov	r0, r8
 8006392:	47d0      	blx	sl
 8006394:	3001      	adds	r0, #1
 8006396:	d09b      	beq.n	80062d0 <_printf_i+0x164>
 8006398:	3501      	adds	r5, #1
 800639a:	68e3      	ldr	r3, [r4, #12]
 800639c:	9903      	ldr	r1, [sp, #12]
 800639e:	1a5b      	subs	r3, r3, r1
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dcf2      	bgt.n	800638a <_printf_i+0x21e>
 80063a4:	e7eb      	b.n	800637e <_printf_i+0x212>
 80063a6:	2500      	movs	r5, #0
 80063a8:	f104 0619 	add.w	r6, r4, #25
 80063ac:	e7f5      	b.n	800639a <_printf_i+0x22e>
 80063ae:	bf00      	nop
 80063b0:	08007a23 	.word	0x08007a23
 80063b4:	08007a34 	.word	0x08007a34

080063b8 <__swbuf_r>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	460e      	mov	r6, r1
 80063bc:	4614      	mov	r4, r2
 80063be:	4605      	mov	r5, r0
 80063c0:	b118      	cbz	r0, 80063ca <__swbuf_r+0x12>
 80063c2:	6983      	ldr	r3, [r0, #24]
 80063c4:	b90b      	cbnz	r3, 80063ca <__swbuf_r+0x12>
 80063c6:	f000 f9d9 	bl	800677c <__sinit>
 80063ca:	4b21      	ldr	r3, [pc, #132]	; (8006450 <__swbuf_r+0x98>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d12b      	bne.n	8006428 <__swbuf_r+0x70>
 80063d0:	686c      	ldr	r4, [r5, #4]
 80063d2:	69a3      	ldr	r3, [r4, #24]
 80063d4:	60a3      	str	r3, [r4, #8]
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	071a      	lsls	r2, r3, #28
 80063da:	d52f      	bpl.n	800643c <__swbuf_r+0x84>
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	b36b      	cbz	r3, 800643c <__swbuf_r+0x84>
 80063e0:	6923      	ldr	r3, [r4, #16]
 80063e2:	6820      	ldr	r0, [r4, #0]
 80063e4:	1ac0      	subs	r0, r0, r3
 80063e6:	6963      	ldr	r3, [r4, #20]
 80063e8:	b2f6      	uxtb	r6, r6
 80063ea:	4283      	cmp	r3, r0
 80063ec:	4637      	mov	r7, r6
 80063ee:	dc04      	bgt.n	80063fa <__swbuf_r+0x42>
 80063f0:	4621      	mov	r1, r4
 80063f2:	4628      	mov	r0, r5
 80063f4:	f000 f92e 	bl	8006654 <_fflush_r>
 80063f8:	bb30      	cbnz	r0, 8006448 <__swbuf_r+0x90>
 80063fa:	68a3      	ldr	r3, [r4, #8]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	60a3      	str	r3, [r4, #8]
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	1c5a      	adds	r2, r3, #1
 8006404:	6022      	str	r2, [r4, #0]
 8006406:	701e      	strb	r6, [r3, #0]
 8006408:	6963      	ldr	r3, [r4, #20]
 800640a:	3001      	adds	r0, #1
 800640c:	4283      	cmp	r3, r0
 800640e:	d004      	beq.n	800641a <__swbuf_r+0x62>
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	07db      	lsls	r3, r3, #31
 8006414:	d506      	bpl.n	8006424 <__swbuf_r+0x6c>
 8006416:	2e0a      	cmp	r6, #10
 8006418:	d104      	bne.n	8006424 <__swbuf_r+0x6c>
 800641a:	4621      	mov	r1, r4
 800641c:	4628      	mov	r0, r5
 800641e:	f000 f919 	bl	8006654 <_fflush_r>
 8006422:	b988      	cbnz	r0, 8006448 <__swbuf_r+0x90>
 8006424:	4638      	mov	r0, r7
 8006426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006428:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <__swbuf_r+0x9c>)
 800642a:	429c      	cmp	r4, r3
 800642c:	d101      	bne.n	8006432 <__swbuf_r+0x7a>
 800642e:	68ac      	ldr	r4, [r5, #8]
 8006430:	e7cf      	b.n	80063d2 <__swbuf_r+0x1a>
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <__swbuf_r+0xa0>)
 8006434:	429c      	cmp	r4, r3
 8006436:	bf08      	it	eq
 8006438:	68ec      	ldreq	r4, [r5, #12]
 800643a:	e7ca      	b.n	80063d2 <__swbuf_r+0x1a>
 800643c:	4621      	mov	r1, r4
 800643e:	4628      	mov	r0, r5
 8006440:	f000 f80c 	bl	800645c <__swsetup_r>
 8006444:	2800      	cmp	r0, #0
 8006446:	d0cb      	beq.n	80063e0 <__swbuf_r+0x28>
 8006448:	f04f 37ff 	mov.w	r7, #4294967295
 800644c:	e7ea      	b.n	8006424 <__swbuf_r+0x6c>
 800644e:	bf00      	nop
 8006450:	08007a68 	.word	0x08007a68
 8006454:	08007a88 	.word	0x08007a88
 8006458:	08007a48 	.word	0x08007a48

0800645c <__swsetup_r>:
 800645c:	4b32      	ldr	r3, [pc, #200]	; (8006528 <__swsetup_r+0xcc>)
 800645e:	b570      	push	{r4, r5, r6, lr}
 8006460:	681d      	ldr	r5, [r3, #0]
 8006462:	4606      	mov	r6, r0
 8006464:	460c      	mov	r4, r1
 8006466:	b125      	cbz	r5, 8006472 <__swsetup_r+0x16>
 8006468:	69ab      	ldr	r3, [r5, #24]
 800646a:	b913      	cbnz	r3, 8006472 <__swsetup_r+0x16>
 800646c:	4628      	mov	r0, r5
 800646e:	f000 f985 	bl	800677c <__sinit>
 8006472:	4b2e      	ldr	r3, [pc, #184]	; (800652c <__swsetup_r+0xd0>)
 8006474:	429c      	cmp	r4, r3
 8006476:	d10f      	bne.n	8006498 <__swsetup_r+0x3c>
 8006478:	686c      	ldr	r4, [r5, #4]
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006480:	0719      	lsls	r1, r3, #28
 8006482:	d42c      	bmi.n	80064de <__swsetup_r+0x82>
 8006484:	06dd      	lsls	r5, r3, #27
 8006486:	d411      	bmi.n	80064ac <__swsetup_r+0x50>
 8006488:	2309      	movs	r3, #9
 800648a:	6033      	str	r3, [r6, #0]
 800648c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	f04f 30ff 	mov.w	r0, #4294967295
 8006496:	e03e      	b.n	8006516 <__swsetup_r+0xba>
 8006498:	4b25      	ldr	r3, [pc, #148]	; (8006530 <__swsetup_r+0xd4>)
 800649a:	429c      	cmp	r4, r3
 800649c:	d101      	bne.n	80064a2 <__swsetup_r+0x46>
 800649e:	68ac      	ldr	r4, [r5, #8]
 80064a0:	e7eb      	b.n	800647a <__swsetup_r+0x1e>
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <__swsetup_r+0xd8>)
 80064a4:	429c      	cmp	r4, r3
 80064a6:	bf08      	it	eq
 80064a8:	68ec      	ldreq	r4, [r5, #12]
 80064aa:	e7e6      	b.n	800647a <__swsetup_r+0x1e>
 80064ac:	0758      	lsls	r0, r3, #29
 80064ae:	d512      	bpl.n	80064d6 <__swsetup_r+0x7a>
 80064b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064b2:	b141      	cbz	r1, 80064c6 <__swsetup_r+0x6a>
 80064b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064b8:	4299      	cmp	r1, r3
 80064ba:	d002      	beq.n	80064c2 <__swsetup_r+0x66>
 80064bc:	4630      	mov	r0, r6
 80064be:	f7ff faf5 	bl	8005aac <_free_r>
 80064c2:	2300      	movs	r3, #0
 80064c4:	6363      	str	r3, [r4, #52]	; 0x34
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	2300      	movs	r3, #0
 80064d0:	6063      	str	r3, [r4, #4]
 80064d2:	6923      	ldr	r3, [r4, #16]
 80064d4:	6023      	str	r3, [r4, #0]
 80064d6:	89a3      	ldrh	r3, [r4, #12]
 80064d8:	f043 0308 	orr.w	r3, r3, #8
 80064dc:	81a3      	strh	r3, [r4, #12]
 80064de:	6923      	ldr	r3, [r4, #16]
 80064e0:	b94b      	cbnz	r3, 80064f6 <__swsetup_r+0x9a>
 80064e2:	89a3      	ldrh	r3, [r4, #12]
 80064e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ec:	d003      	beq.n	80064f6 <__swsetup_r+0x9a>
 80064ee:	4621      	mov	r1, r4
 80064f0:	4630      	mov	r0, r6
 80064f2:	f000 fa09 	bl	8006908 <__smakebuf_r>
 80064f6:	89a0      	ldrh	r0, [r4, #12]
 80064f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064fc:	f010 0301 	ands.w	r3, r0, #1
 8006500:	d00a      	beq.n	8006518 <__swsetup_r+0xbc>
 8006502:	2300      	movs	r3, #0
 8006504:	60a3      	str	r3, [r4, #8]
 8006506:	6963      	ldr	r3, [r4, #20]
 8006508:	425b      	negs	r3, r3
 800650a:	61a3      	str	r3, [r4, #24]
 800650c:	6923      	ldr	r3, [r4, #16]
 800650e:	b943      	cbnz	r3, 8006522 <__swsetup_r+0xc6>
 8006510:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006514:	d1ba      	bne.n	800648c <__swsetup_r+0x30>
 8006516:	bd70      	pop	{r4, r5, r6, pc}
 8006518:	0781      	lsls	r1, r0, #30
 800651a:	bf58      	it	pl
 800651c:	6963      	ldrpl	r3, [r4, #20]
 800651e:	60a3      	str	r3, [r4, #8]
 8006520:	e7f4      	b.n	800650c <__swsetup_r+0xb0>
 8006522:	2000      	movs	r0, #0
 8006524:	e7f7      	b.n	8006516 <__swsetup_r+0xba>
 8006526:	bf00      	nop
 8006528:	20000014 	.word	0x20000014
 800652c:	08007a68 	.word	0x08007a68
 8006530:	08007a88 	.word	0x08007a88
 8006534:	08007a48 	.word	0x08007a48

08006538 <abort>:
 8006538:	b508      	push	{r3, lr}
 800653a:	2006      	movs	r0, #6
 800653c:	f000 fa4c 	bl	80069d8 <raise>
 8006540:	2001      	movs	r0, #1
 8006542:	f7fd facf 	bl	8003ae4 <_exit>
	...

08006548 <__sflush_r>:
 8006548:	898a      	ldrh	r2, [r1, #12]
 800654a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800654e:	4605      	mov	r5, r0
 8006550:	0710      	lsls	r0, r2, #28
 8006552:	460c      	mov	r4, r1
 8006554:	d458      	bmi.n	8006608 <__sflush_r+0xc0>
 8006556:	684b      	ldr	r3, [r1, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	dc05      	bgt.n	8006568 <__sflush_r+0x20>
 800655c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	dc02      	bgt.n	8006568 <__sflush_r+0x20>
 8006562:	2000      	movs	r0, #0
 8006564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006568:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800656a:	2e00      	cmp	r6, #0
 800656c:	d0f9      	beq.n	8006562 <__sflush_r+0x1a>
 800656e:	2300      	movs	r3, #0
 8006570:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006574:	682f      	ldr	r7, [r5, #0]
 8006576:	602b      	str	r3, [r5, #0]
 8006578:	d032      	beq.n	80065e0 <__sflush_r+0x98>
 800657a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	075a      	lsls	r2, r3, #29
 8006580:	d505      	bpl.n	800658e <__sflush_r+0x46>
 8006582:	6863      	ldr	r3, [r4, #4]
 8006584:	1ac0      	subs	r0, r0, r3
 8006586:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006588:	b10b      	cbz	r3, 800658e <__sflush_r+0x46>
 800658a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800658c:	1ac0      	subs	r0, r0, r3
 800658e:	2300      	movs	r3, #0
 8006590:	4602      	mov	r2, r0
 8006592:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006594:	6a21      	ldr	r1, [r4, #32]
 8006596:	4628      	mov	r0, r5
 8006598:	47b0      	blx	r6
 800659a:	1c43      	adds	r3, r0, #1
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	d106      	bne.n	80065ae <__sflush_r+0x66>
 80065a0:	6829      	ldr	r1, [r5, #0]
 80065a2:	291d      	cmp	r1, #29
 80065a4:	d82c      	bhi.n	8006600 <__sflush_r+0xb8>
 80065a6:	4a2a      	ldr	r2, [pc, #168]	; (8006650 <__sflush_r+0x108>)
 80065a8:	40ca      	lsrs	r2, r1
 80065aa:	07d6      	lsls	r6, r2, #31
 80065ac:	d528      	bpl.n	8006600 <__sflush_r+0xb8>
 80065ae:	2200      	movs	r2, #0
 80065b0:	6062      	str	r2, [r4, #4]
 80065b2:	04d9      	lsls	r1, r3, #19
 80065b4:	6922      	ldr	r2, [r4, #16]
 80065b6:	6022      	str	r2, [r4, #0]
 80065b8:	d504      	bpl.n	80065c4 <__sflush_r+0x7c>
 80065ba:	1c42      	adds	r2, r0, #1
 80065bc:	d101      	bne.n	80065c2 <__sflush_r+0x7a>
 80065be:	682b      	ldr	r3, [r5, #0]
 80065c0:	b903      	cbnz	r3, 80065c4 <__sflush_r+0x7c>
 80065c2:	6560      	str	r0, [r4, #84]	; 0x54
 80065c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065c6:	602f      	str	r7, [r5, #0]
 80065c8:	2900      	cmp	r1, #0
 80065ca:	d0ca      	beq.n	8006562 <__sflush_r+0x1a>
 80065cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065d0:	4299      	cmp	r1, r3
 80065d2:	d002      	beq.n	80065da <__sflush_r+0x92>
 80065d4:	4628      	mov	r0, r5
 80065d6:	f7ff fa69 	bl	8005aac <_free_r>
 80065da:	2000      	movs	r0, #0
 80065dc:	6360      	str	r0, [r4, #52]	; 0x34
 80065de:	e7c1      	b.n	8006564 <__sflush_r+0x1c>
 80065e0:	6a21      	ldr	r1, [r4, #32]
 80065e2:	2301      	movs	r3, #1
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b0      	blx	r6
 80065e8:	1c41      	adds	r1, r0, #1
 80065ea:	d1c7      	bne.n	800657c <__sflush_r+0x34>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d0c4      	beq.n	800657c <__sflush_r+0x34>
 80065f2:	2b1d      	cmp	r3, #29
 80065f4:	d001      	beq.n	80065fa <__sflush_r+0xb2>
 80065f6:	2b16      	cmp	r3, #22
 80065f8:	d101      	bne.n	80065fe <__sflush_r+0xb6>
 80065fa:	602f      	str	r7, [r5, #0]
 80065fc:	e7b1      	b.n	8006562 <__sflush_r+0x1a>
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006604:	81a3      	strh	r3, [r4, #12]
 8006606:	e7ad      	b.n	8006564 <__sflush_r+0x1c>
 8006608:	690f      	ldr	r7, [r1, #16]
 800660a:	2f00      	cmp	r7, #0
 800660c:	d0a9      	beq.n	8006562 <__sflush_r+0x1a>
 800660e:	0793      	lsls	r3, r2, #30
 8006610:	680e      	ldr	r6, [r1, #0]
 8006612:	bf08      	it	eq
 8006614:	694b      	ldreq	r3, [r1, #20]
 8006616:	600f      	str	r7, [r1, #0]
 8006618:	bf18      	it	ne
 800661a:	2300      	movne	r3, #0
 800661c:	eba6 0807 	sub.w	r8, r6, r7
 8006620:	608b      	str	r3, [r1, #8]
 8006622:	f1b8 0f00 	cmp.w	r8, #0
 8006626:	dd9c      	ble.n	8006562 <__sflush_r+0x1a>
 8006628:	6a21      	ldr	r1, [r4, #32]
 800662a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800662c:	4643      	mov	r3, r8
 800662e:	463a      	mov	r2, r7
 8006630:	4628      	mov	r0, r5
 8006632:	47b0      	blx	r6
 8006634:	2800      	cmp	r0, #0
 8006636:	dc06      	bgt.n	8006646 <__sflush_r+0xfe>
 8006638:	89a3      	ldrh	r3, [r4, #12]
 800663a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800663e:	81a3      	strh	r3, [r4, #12]
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	e78e      	b.n	8006564 <__sflush_r+0x1c>
 8006646:	4407      	add	r7, r0
 8006648:	eba8 0800 	sub.w	r8, r8, r0
 800664c:	e7e9      	b.n	8006622 <__sflush_r+0xda>
 800664e:	bf00      	nop
 8006650:	20400001 	.word	0x20400001

08006654 <_fflush_r>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	690b      	ldr	r3, [r1, #16]
 8006658:	4605      	mov	r5, r0
 800665a:	460c      	mov	r4, r1
 800665c:	b913      	cbnz	r3, 8006664 <_fflush_r+0x10>
 800665e:	2500      	movs	r5, #0
 8006660:	4628      	mov	r0, r5
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	b118      	cbz	r0, 800666e <_fflush_r+0x1a>
 8006666:	6983      	ldr	r3, [r0, #24]
 8006668:	b90b      	cbnz	r3, 800666e <_fflush_r+0x1a>
 800666a:	f000 f887 	bl	800677c <__sinit>
 800666e:	4b14      	ldr	r3, [pc, #80]	; (80066c0 <_fflush_r+0x6c>)
 8006670:	429c      	cmp	r4, r3
 8006672:	d11b      	bne.n	80066ac <_fflush_r+0x58>
 8006674:	686c      	ldr	r4, [r5, #4]
 8006676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0ef      	beq.n	800665e <_fflush_r+0xa>
 800667e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006680:	07d0      	lsls	r0, r2, #31
 8006682:	d404      	bmi.n	800668e <_fflush_r+0x3a>
 8006684:	0599      	lsls	r1, r3, #22
 8006686:	d402      	bmi.n	800668e <_fflush_r+0x3a>
 8006688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668a:	f000 f915 	bl	80068b8 <__retarget_lock_acquire_recursive>
 800668e:	4628      	mov	r0, r5
 8006690:	4621      	mov	r1, r4
 8006692:	f7ff ff59 	bl	8006548 <__sflush_r>
 8006696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006698:	07da      	lsls	r2, r3, #31
 800669a:	4605      	mov	r5, r0
 800669c:	d4e0      	bmi.n	8006660 <_fflush_r+0xc>
 800669e:	89a3      	ldrh	r3, [r4, #12]
 80066a0:	059b      	lsls	r3, r3, #22
 80066a2:	d4dd      	bmi.n	8006660 <_fflush_r+0xc>
 80066a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066a6:	f000 f908 	bl	80068ba <__retarget_lock_release_recursive>
 80066aa:	e7d9      	b.n	8006660 <_fflush_r+0xc>
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <_fflush_r+0x70>)
 80066ae:	429c      	cmp	r4, r3
 80066b0:	d101      	bne.n	80066b6 <_fflush_r+0x62>
 80066b2:	68ac      	ldr	r4, [r5, #8]
 80066b4:	e7df      	b.n	8006676 <_fflush_r+0x22>
 80066b6:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <_fflush_r+0x74>)
 80066b8:	429c      	cmp	r4, r3
 80066ba:	bf08      	it	eq
 80066bc:	68ec      	ldreq	r4, [r5, #12]
 80066be:	e7da      	b.n	8006676 <_fflush_r+0x22>
 80066c0:	08007a68 	.word	0x08007a68
 80066c4:	08007a88 	.word	0x08007a88
 80066c8:	08007a48 	.word	0x08007a48

080066cc <std>:
 80066cc:	2300      	movs	r3, #0
 80066ce:	b510      	push	{r4, lr}
 80066d0:	4604      	mov	r4, r0
 80066d2:	e9c0 3300 	strd	r3, r3, [r0]
 80066d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066da:	6083      	str	r3, [r0, #8]
 80066dc:	8181      	strh	r1, [r0, #12]
 80066de:	6643      	str	r3, [r0, #100]	; 0x64
 80066e0:	81c2      	strh	r2, [r0, #14]
 80066e2:	6183      	str	r3, [r0, #24]
 80066e4:	4619      	mov	r1, r3
 80066e6:	2208      	movs	r2, #8
 80066e8:	305c      	adds	r0, #92	; 0x5c
 80066ea:	f7ff f9d7 	bl	8005a9c <memset>
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <std+0x38>)
 80066f0:	6263      	str	r3, [r4, #36]	; 0x24
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <std+0x3c>)
 80066f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80066f6:	4b05      	ldr	r3, [pc, #20]	; (800670c <std+0x40>)
 80066f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <std+0x44>)
 80066fc:	6224      	str	r4, [r4, #32]
 80066fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006700:	bd10      	pop	{r4, pc}
 8006702:	bf00      	nop
 8006704:	08006a11 	.word	0x08006a11
 8006708:	08006a33 	.word	0x08006a33
 800670c:	08006a6b 	.word	0x08006a6b
 8006710:	08006a8f 	.word	0x08006a8f

08006714 <_cleanup_r>:
 8006714:	4901      	ldr	r1, [pc, #4]	; (800671c <_cleanup_r+0x8>)
 8006716:	f000 b8af 	b.w	8006878 <_fwalk_reent>
 800671a:	bf00      	nop
 800671c:	08006655 	.word	0x08006655

08006720 <__sfmoreglue>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	2268      	movs	r2, #104	; 0x68
 8006724:	1e4d      	subs	r5, r1, #1
 8006726:	4355      	muls	r5, r2
 8006728:	460e      	mov	r6, r1
 800672a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800672e:	f7ff fa29 	bl	8005b84 <_malloc_r>
 8006732:	4604      	mov	r4, r0
 8006734:	b140      	cbz	r0, 8006748 <__sfmoreglue+0x28>
 8006736:	2100      	movs	r1, #0
 8006738:	e9c0 1600 	strd	r1, r6, [r0]
 800673c:	300c      	adds	r0, #12
 800673e:	60a0      	str	r0, [r4, #8]
 8006740:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006744:	f7ff f9aa 	bl	8005a9c <memset>
 8006748:	4620      	mov	r0, r4
 800674a:	bd70      	pop	{r4, r5, r6, pc}

0800674c <__sfp_lock_acquire>:
 800674c:	4801      	ldr	r0, [pc, #4]	; (8006754 <__sfp_lock_acquire+0x8>)
 800674e:	f000 b8b3 	b.w	80068b8 <__retarget_lock_acquire_recursive>
 8006752:	bf00      	nop
 8006754:	20000211 	.word	0x20000211

08006758 <__sfp_lock_release>:
 8006758:	4801      	ldr	r0, [pc, #4]	; (8006760 <__sfp_lock_release+0x8>)
 800675a:	f000 b8ae 	b.w	80068ba <__retarget_lock_release_recursive>
 800675e:	bf00      	nop
 8006760:	20000211 	.word	0x20000211

08006764 <__sinit_lock_acquire>:
 8006764:	4801      	ldr	r0, [pc, #4]	; (800676c <__sinit_lock_acquire+0x8>)
 8006766:	f000 b8a7 	b.w	80068b8 <__retarget_lock_acquire_recursive>
 800676a:	bf00      	nop
 800676c:	20000212 	.word	0x20000212

08006770 <__sinit_lock_release>:
 8006770:	4801      	ldr	r0, [pc, #4]	; (8006778 <__sinit_lock_release+0x8>)
 8006772:	f000 b8a2 	b.w	80068ba <__retarget_lock_release_recursive>
 8006776:	bf00      	nop
 8006778:	20000212 	.word	0x20000212

0800677c <__sinit>:
 800677c:	b510      	push	{r4, lr}
 800677e:	4604      	mov	r4, r0
 8006780:	f7ff fff0 	bl	8006764 <__sinit_lock_acquire>
 8006784:	69a3      	ldr	r3, [r4, #24]
 8006786:	b11b      	cbz	r3, 8006790 <__sinit+0x14>
 8006788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800678c:	f7ff bff0 	b.w	8006770 <__sinit_lock_release>
 8006790:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006794:	6523      	str	r3, [r4, #80]	; 0x50
 8006796:	4b13      	ldr	r3, [pc, #76]	; (80067e4 <__sinit+0x68>)
 8006798:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <__sinit+0x6c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	62a2      	str	r2, [r4, #40]	; 0x28
 800679e:	42a3      	cmp	r3, r4
 80067a0:	bf04      	itt	eq
 80067a2:	2301      	moveq	r3, #1
 80067a4:	61a3      	streq	r3, [r4, #24]
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 f820 	bl	80067ec <__sfp>
 80067ac:	6060      	str	r0, [r4, #4]
 80067ae:	4620      	mov	r0, r4
 80067b0:	f000 f81c 	bl	80067ec <__sfp>
 80067b4:	60a0      	str	r0, [r4, #8]
 80067b6:	4620      	mov	r0, r4
 80067b8:	f000 f818 	bl	80067ec <__sfp>
 80067bc:	2200      	movs	r2, #0
 80067be:	60e0      	str	r0, [r4, #12]
 80067c0:	2104      	movs	r1, #4
 80067c2:	6860      	ldr	r0, [r4, #4]
 80067c4:	f7ff ff82 	bl	80066cc <std>
 80067c8:	68a0      	ldr	r0, [r4, #8]
 80067ca:	2201      	movs	r2, #1
 80067cc:	2109      	movs	r1, #9
 80067ce:	f7ff ff7d 	bl	80066cc <std>
 80067d2:	68e0      	ldr	r0, [r4, #12]
 80067d4:	2202      	movs	r2, #2
 80067d6:	2112      	movs	r1, #18
 80067d8:	f7ff ff78 	bl	80066cc <std>
 80067dc:	2301      	movs	r3, #1
 80067de:	61a3      	str	r3, [r4, #24]
 80067e0:	e7d2      	b.n	8006788 <__sinit+0xc>
 80067e2:	bf00      	nop
 80067e4:	08007960 	.word	0x08007960
 80067e8:	08006715 	.word	0x08006715

080067ec <__sfp>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	4607      	mov	r7, r0
 80067f0:	f7ff ffac 	bl	800674c <__sfp_lock_acquire>
 80067f4:	4b1e      	ldr	r3, [pc, #120]	; (8006870 <__sfp+0x84>)
 80067f6:	681e      	ldr	r6, [r3, #0]
 80067f8:	69b3      	ldr	r3, [r6, #24]
 80067fa:	b913      	cbnz	r3, 8006802 <__sfp+0x16>
 80067fc:	4630      	mov	r0, r6
 80067fe:	f7ff ffbd 	bl	800677c <__sinit>
 8006802:	3648      	adds	r6, #72	; 0x48
 8006804:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006808:	3b01      	subs	r3, #1
 800680a:	d503      	bpl.n	8006814 <__sfp+0x28>
 800680c:	6833      	ldr	r3, [r6, #0]
 800680e:	b30b      	cbz	r3, 8006854 <__sfp+0x68>
 8006810:	6836      	ldr	r6, [r6, #0]
 8006812:	e7f7      	b.n	8006804 <__sfp+0x18>
 8006814:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006818:	b9d5      	cbnz	r5, 8006850 <__sfp+0x64>
 800681a:	4b16      	ldr	r3, [pc, #88]	; (8006874 <__sfp+0x88>)
 800681c:	60e3      	str	r3, [r4, #12]
 800681e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006822:	6665      	str	r5, [r4, #100]	; 0x64
 8006824:	f000 f847 	bl	80068b6 <__retarget_lock_init_recursive>
 8006828:	f7ff ff96 	bl	8006758 <__sfp_lock_release>
 800682c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006830:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006834:	6025      	str	r5, [r4, #0]
 8006836:	61a5      	str	r5, [r4, #24]
 8006838:	2208      	movs	r2, #8
 800683a:	4629      	mov	r1, r5
 800683c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006840:	f7ff f92c 	bl	8005a9c <memset>
 8006844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800684c:	4620      	mov	r0, r4
 800684e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006850:	3468      	adds	r4, #104	; 0x68
 8006852:	e7d9      	b.n	8006808 <__sfp+0x1c>
 8006854:	2104      	movs	r1, #4
 8006856:	4638      	mov	r0, r7
 8006858:	f7ff ff62 	bl	8006720 <__sfmoreglue>
 800685c:	4604      	mov	r4, r0
 800685e:	6030      	str	r0, [r6, #0]
 8006860:	2800      	cmp	r0, #0
 8006862:	d1d5      	bne.n	8006810 <__sfp+0x24>
 8006864:	f7ff ff78 	bl	8006758 <__sfp_lock_release>
 8006868:	230c      	movs	r3, #12
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	e7ee      	b.n	800684c <__sfp+0x60>
 800686e:	bf00      	nop
 8006870:	08007960 	.word	0x08007960
 8006874:	ffff0001 	.word	0xffff0001

08006878 <_fwalk_reent>:
 8006878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800687c:	4606      	mov	r6, r0
 800687e:	4688      	mov	r8, r1
 8006880:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006884:	2700      	movs	r7, #0
 8006886:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800688a:	f1b9 0901 	subs.w	r9, r9, #1
 800688e:	d505      	bpl.n	800689c <_fwalk_reent+0x24>
 8006890:	6824      	ldr	r4, [r4, #0]
 8006892:	2c00      	cmp	r4, #0
 8006894:	d1f7      	bne.n	8006886 <_fwalk_reent+0xe>
 8006896:	4638      	mov	r0, r7
 8006898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800689c:	89ab      	ldrh	r3, [r5, #12]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d907      	bls.n	80068b2 <_fwalk_reent+0x3a>
 80068a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80068a6:	3301      	adds	r3, #1
 80068a8:	d003      	beq.n	80068b2 <_fwalk_reent+0x3a>
 80068aa:	4629      	mov	r1, r5
 80068ac:	4630      	mov	r0, r6
 80068ae:	47c0      	blx	r8
 80068b0:	4307      	orrs	r7, r0
 80068b2:	3568      	adds	r5, #104	; 0x68
 80068b4:	e7e9      	b.n	800688a <_fwalk_reent+0x12>

080068b6 <__retarget_lock_init_recursive>:
 80068b6:	4770      	bx	lr

080068b8 <__retarget_lock_acquire_recursive>:
 80068b8:	4770      	bx	lr

080068ba <__retarget_lock_release_recursive>:
 80068ba:	4770      	bx	lr

080068bc <__swhatbuf_r>:
 80068bc:	b570      	push	{r4, r5, r6, lr}
 80068be:	460e      	mov	r6, r1
 80068c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c4:	2900      	cmp	r1, #0
 80068c6:	b096      	sub	sp, #88	; 0x58
 80068c8:	4614      	mov	r4, r2
 80068ca:	461d      	mov	r5, r3
 80068cc:	da08      	bge.n	80068e0 <__swhatbuf_r+0x24>
 80068ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	602a      	str	r2, [r5, #0]
 80068d6:	061a      	lsls	r2, r3, #24
 80068d8:	d410      	bmi.n	80068fc <__swhatbuf_r+0x40>
 80068da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068de:	e00e      	b.n	80068fe <__swhatbuf_r+0x42>
 80068e0:	466a      	mov	r2, sp
 80068e2:	f000 f8fb 	bl	8006adc <_fstat_r>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	dbf1      	blt.n	80068ce <__swhatbuf_r+0x12>
 80068ea:	9a01      	ldr	r2, [sp, #4]
 80068ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068f4:	425a      	negs	r2, r3
 80068f6:	415a      	adcs	r2, r3
 80068f8:	602a      	str	r2, [r5, #0]
 80068fa:	e7ee      	b.n	80068da <__swhatbuf_r+0x1e>
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	2000      	movs	r0, #0
 8006900:	6023      	str	r3, [r4, #0]
 8006902:	b016      	add	sp, #88	; 0x58
 8006904:	bd70      	pop	{r4, r5, r6, pc}
	...

08006908 <__smakebuf_r>:
 8006908:	898b      	ldrh	r3, [r1, #12]
 800690a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800690c:	079d      	lsls	r5, r3, #30
 800690e:	4606      	mov	r6, r0
 8006910:	460c      	mov	r4, r1
 8006912:	d507      	bpl.n	8006924 <__smakebuf_r+0x1c>
 8006914:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	6123      	str	r3, [r4, #16]
 800691c:	2301      	movs	r3, #1
 800691e:	6163      	str	r3, [r4, #20]
 8006920:	b002      	add	sp, #8
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	ab01      	add	r3, sp, #4
 8006926:	466a      	mov	r2, sp
 8006928:	f7ff ffc8 	bl	80068bc <__swhatbuf_r>
 800692c:	9900      	ldr	r1, [sp, #0]
 800692e:	4605      	mov	r5, r0
 8006930:	4630      	mov	r0, r6
 8006932:	f7ff f927 	bl	8005b84 <_malloc_r>
 8006936:	b948      	cbnz	r0, 800694c <__smakebuf_r+0x44>
 8006938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693c:	059a      	lsls	r2, r3, #22
 800693e:	d4ef      	bmi.n	8006920 <__smakebuf_r+0x18>
 8006940:	f023 0303 	bic.w	r3, r3, #3
 8006944:	f043 0302 	orr.w	r3, r3, #2
 8006948:	81a3      	strh	r3, [r4, #12]
 800694a:	e7e3      	b.n	8006914 <__smakebuf_r+0xc>
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <__smakebuf_r+0x7c>)
 800694e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	6020      	str	r0, [r4, #0]
 8006954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006958:	81a3      	strh	r3, [r4, #12]
 800695a:	9b00      	ldr	r3, [sp, #0]
 800695c:	6163      	str	r3, [r4, #20]
 800695e:	9b01      	ldr	r3, [sp, #4]
 8006960:	6120      	str	r0, [r4, #16]
 8006962:	b15b      	cbz	r3, 800697c <__smakebuf_r+0x74>
 8006964:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006968:	4630      	mov	r0, r6
 800696a:	f000 f8c9 	bl	8006b00 <_isatty_r>
 800696e:	b128      	cbz	r0, 800697c <__smakebuf_r+0x74>
 8006970:	89a3      	ldrh	r3, [r4, #12]
 8006972:	f023 0303 	bic.w	r3, r3, #3
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	81a3      	strh	r3, [r4, #12]
 800697c:	89a0      	ldrh	r0, [r4, #12]
 800697e:	4305      	orrs	r5, r0
 8006980:	81a5      	strh	r5, [r4, #12]
 8006982:	e7cd      	b.n	8006920 <__smakebuf_r+0x18>
 8006984:	08006715 	.word	0x08006715

08006988 <_raise_r>:
 8006988:	291f      	cmp	r1, #31
 800698a:	b538      	push	{r3, r4, r5, lr}
 800698c:	4604      	mov	r4, r0
 800698e:	460d      	mov	r5, r1
 8006990:	d904      	bls.n	800699c <_raise_r+0x14>
 8006992:	2316      	movs	r3, #22
 8006994:	6003      	str	r3, [r0, #0]
 8006996:	f04f 30ff 	mov.w	r0, #4294967295
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800699e:	b112      	cbz	r2, 80069a6 <_raise_r+0x1e>
 80069a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80069a4:	b94b      	cbnz	r3, 80069ba <_raise_r+0x32>
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f830 	bl	8006a0c <_getpid_r>
 80069ac:	462a      	mov	r2, r5
 80069ae:	4601      	mov	r1, r0
 80069b0:	4620      	mov	r0, r4
 80069b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069b6:	f000 b817 	b.w	80069e8 <_kill_r>
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d00a      	beq.n	80069d4 <_raise_r+0x4c>
 80069be:	1c59      	adds	r1, r3, #1
 80069c0:	d103      	bne.n	80069ca <_raise_r+0x42>
 80069c2:	2316      	movs	r3, #22
 80069c4:	6003      	str	r3, [r0, #0]
 80069c6:	2001      	movs	r0, #1
 80069c8:	e7e7      	b.n	800699a <_raise_r+0x12>
 80069ca:	2400      	movs	r4, #0
 80069cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069d0:	4628      	mov	r0, r5
 80069d2:	4798      	blx	r3
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7e0      	b.n	800699a <_raise_r+0x12>

080069d8 <raise>:
 80069d8:	4b02      	ldr	r3, [pc, #8]	; (80069e4 <raise+0xc>)
 80069da:	4601      	mov	r1, r0
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	f7ff bfd3 	b.w	8006988 <_raise_r>
 80069e2:	bf00      	nop
 80069e4:	20000014 	.word	0x20000014

080069e8 <_kill_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d07      	ldr	r5, [pc, #28]	; (8006a08 <_kill_r+0x20>)
 80069ec:	2300      	movs	r3, #0
 80069ee:	4604      	mov	r4, r0
 80069f0:	4608      	mov	r0, r1
 80069f2:	4611      	mov	r1, r2
 80069f4:	602b      	str	r3, [r5, #0]
 80069f6:	f7fd f865 	bl	8003ac4 <_kill>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d102      	bne.n	8006a04 <_kill_r+0x1c>
 80069fe:	682b      	ldr	r3, [r5, #0]
 8006a00:	b103      	cbz	r3, 8006a04 <_kill_r+0x1c>
 8006a02:	6023      	str	r3, [r4, #0]
 8006a04:	bd38      	pop	{r3, r4, r5, pc}
 8006a06:	bf00      	nop
 8006a08:	2000020c 	.word	0x2000020c

08006a0c <_getpid_r>:
 8006a0c:	f7fd b852 	b.w	8003ab4 <_getpid>

08006a10 <__sread>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	460c      	mov	r4, r1
 8006a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a18:	f000 f894 	bl	8006b44 <_read_r>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	bfab      	itete	ge
 8006a20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a22:	89a3      	ldrhlt	r3, [r4, #12]
 8006a24:	181b      	addge	r3, r3, r0
 8006a26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a2a:	bfac      	ite	ge
 8006a2c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a2e:	81a3      	strhlt	r3, [r4, #12]
 8006a30:	bd10      	pop	{r4, pc}

08006a32 <__swrite>:
 8006a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	461f      	mov	r7, r3
 8006a38:	898b      	ldrh	r3, [r1, #12]
 8006a3a:	05db      	lsls	r3, r3, #23
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	4616      	mov	r6, r2
 8006a42:	d505      	bpl.n	8006a50 <__swrite+0x1e>
 8006a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a48:	2302      	movs	r3, #2
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f000 f868 	bl	8006b20 <_lseek_r>
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a5a:	81a3      	strh	r3, [r4, #12]
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	463b      	mov	r3, r7
 8006a60:	4628      	mov	r0, r5
 8006a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a66:	f000 b817 	b.w	8006a98 <_write_r>

08006a6a <__sseek>:
 8006a6a:	b510      	push	{r4, lr}
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a72:	f000 f855 	bl	8006b20 <_lseek_r>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	bf15      	itete	ne
 8006a7c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a86:	81a3      	strheq	r3, [r4, #12]
 8006a88:	bf18      	it	ne
 8006a8a:	81a3      	strhne	r3, [r4, #12]
 8006a8c:	bd10      	pop	{r4, pc}

08006a8e <__sclose>:
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 b813 	b.w	8006abc <_close_r>
	...

08006a98 <_write_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d07      	ldr	r5, [pc, #28]	; (8006ab8 <_write_r+0x20>)
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	602a      	str	r2, [r5, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f7fd f843 	bl	8003b32 <_write>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_write_r+0x1e>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_write_r+0x1e>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	2000020c 	.word	0x2000020c

08006abc <_close_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d06      	ldr	r5, [pc, #24]	; (8006ad8 <_close_r+0x1c>)
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f7fd f84f 	bl	8003b6a <_close>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_close_r+0x1a>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_close_r+0x1a>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	2000020c 	.word	0x2000020c

08006adc <_fstat_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d07      	ldr	r5, [pc, #28]	; (8006afc <_fstat_r+0x20>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	602b      	str	r3, [r5, #0]
 8006aea:	f7fd f84a 	bl	8003b82 <_fstat>
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d102      	bne.n	8006af8 <_fstat_r+0x1c>
 8006af2:	682b      	ldr	r3, [r5, #0]
 8006af4:	b103      	cbz	r3, 8006af8 <_fstat_r+0x1c>
 8006af6:	6023      	str	r3, [r4, #0]
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	bf00      	nop
 8006afc:	2000020c 	.word	0x2000020c

08006b00 <_isatty_r>:
 8006b00:	b538      	push	{r3, r4, r5, lr}
 8006b02:	4d06      	ldr	r5, [pc, #24]	; (8006b1c <_isatty_r+0x1c>)
 8006b04:	2300      	movs	r3, #0
 8006b06:	4604      	mov	r4, r0
 8006b08:	4608      	mov	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fd f849 	bl	8003ba2 <_isatty>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_isatty_r+0x1a>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_isatty_r+0x1a>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	2000020c 	.word	0x2000020c

08006b20 <_lseek_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d07      	ldr	r5, [pc, #28]	; (8006b40 <_lseek_r+0x20>)
 8006b24:	4604      	mov	r4, r0
 8006b26:	4608      	mov	r0, r1
 8006b28:	4611      	mov	r1, r2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	602a      	str	r2, [r5, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f7fd f842 	bl	8003bb8 <_lseek>
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d102      	bne.n	8006b3e <_lseek_r+0x1e>
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	b103      	cbz	r3, 8006b3e <_lseek_r+0x1e>
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	bd38      	pop	{r3, r4, r5, pc}
 8006b40:	2000020c 	.word	0x2000020c

08006b44 <_read_r>:
 8006b44:	b538      	push	{r3, r4, r5, lr}
 8006b46:	4d07      	ldr	r5, [pc, #28]	; (8006b64 <_read_r+0x20>)
 8006b48:	4604      	mov	r4, r0
 8006b4a:	4608      	mov	r0, r1
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	2200      	movs	r2, #0
 8006b50:	602a      	str	r2, [r5, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	f7fc ffd0 	bl	8003af8 <_read>
 8006b58:	1c43      	adds	r3, r0, #1
 8006b5a:	d102      	bne.n	8006b62 <_read_r+0x1e>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	b103      	cbz	r3, 8006b62 <_read_r+0x1e>
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	bd38      	pop	{r3, r4, r5, pc}
 8006b64:	2000020c 	.word	0x2000020c

08006b68 <ceil>:
 8006b68:	ec51 0b10 	vmov	r0, r1, d0
 8006b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006b74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006b78:	2e13      	cmp	r6, #19
 8006b7a:	ee10 5a10 	vmov	r5, s0
 8006b7e:	ee10 8a10 	vmov	r8, s0
 8006b82:	460c      	mov	r4, r1
 8006b84:	dc30      	bgt.n	8006be8 <ceil+0x80>
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	da12      	bge.n	8006bb0 <ceil+0x48>
 8006b8a:	a335      	add	r3, pc, #212	; (adr r3, 8006c60 <ceil+0xf8>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f7f9 fb84 	bl	800029c <__adddf3>
 8006b94:	2200      	movs	r2, #0
 8006b96:	2300      	movs	r3, #0
 8006b98:	f7f9 ffc6 	bl	8000b28 <__aeabi_dcmpgt>
 8006b9c:	b128      	cbz	r0, 8006baa <ceil+0x42>
 8006b9e:	2c00      	cmp	r4, #0
 8006ba0:	db55      	blt.n	8006c4e <ceil+0xe6>
 8006ba2:	432c      	orrs	r4, r5
 8006ba4:	d057      	beq.n	8006c56 <ceil+0xee>
 8006ba6:	4c30      	ldr	r4, [pc, #192]	; (8006c68 <ceil+0x100>)
 8006ba8:	2500      	movs	r5, #0
 8006baa:	4621      	mov	r1, r4
 8006bac:	4628      	mov	r0, r5
 8006bae:	e025      	b.n	8006bfc <ceil+0x94>
 8006bb0:	4f2e      	ldr	r7, [pc, #184]	; (8006c6c <ceil+0x104>)
 8006bb2:	4137      	asrs	r7, r6
 8006bb4:	ea01 0307 	and.w	r3, r1, r7
 8006bb8:	4303      	orrs	r3, r0
 8006bba:	d01f      	beq.n	8006bfc <ceil+0x94>
 8006bbc:	a328      	add	r3, pc, #160	; (adr r3, 8006c60 <ceil+0xf8>)
 8006bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc2:	f7f9 fb6b 	bl	800029c <__adddf3>
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f7f9 ffad 	bl	8000b28 <__aeabi_dcmpgt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d0eb      	beq.n	8006baa <ceil+0x42>
 8006bd2:	2c00      	cmp	r4, #0
 8006bd4:	bfc2      	ittt	gt
 8006bd6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8006bda:	fa43 f606 	asrgt.w	r6, r3, r6
 8006bde:	19a4      	addgt	r4, r4, r6
 8006be0:	ea24 0407 	bic.w	r4, r4, r7
 8006be4:	2500      	movs	r5, #0
 8006be6:	e7e0      	b.n	8006baa <ceil+0x42>
 8006be8:	2e33      	cmp	r6, #51	; 0x33
 8006bea:	dd0b      	ble.n	8006c04 <ceil+0x9c>
 8006bec:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006bf0:	d104      	bne.n	8006bfc <ceil+0x94>
 8006bf2:	ee10 2a10 	vmov	r2, s0
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	f7f9 fb50 	bl	800029c <__adddf3>
 8006bfc:	ec41 0b10 	vmov	d0, r0, r1
 8006c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c04:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006c08:	f04f 33ff 	mov.w	r3, #4294967295
 8006c0c:	fa23 f707 	lsr.w	r7, r3, r7
 8006c10:	4207      	tst	r7, r0
 8006c12:	d0f3      	beq.n	8006bfc <ceil+0x94>
 8006c14:	a312      	add	r3, pc, #72	; (adr r3, 8006c60 <ceil+0xf8>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fb3f 	bl	800029c <__adddf3>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	f7f9 ff81 	bl	8000b28 <__aeabi_dcmpgt>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d0bf      	beq.n	8006baa <ceil+0x42>
 8006c2a:	2c00      	cmp	r4, #0
 8006c2c:	dd02      	ble.n	8006c34 <ceil+0xcc>
 8006c2e:	2e14      	cmp	r6, #20
 8006c30:	d103      	bne.n	8006c3a <ceil+0xd2>
 8006c32:	3401      	adds	r4, #1
 8006c34:	ea25 0507 	bic.w	r5, r5, r7
 8006c38:	e7b7      	b.n	8006baa <ceil+0x42>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006c40:	fa03 f606 	lsl.w	r6, r3, r6
 8006c44:	4435      	add	r5, r6
 8006c46:	4545      	cmp	r5, r8
 8006c48:	bf38      	it	cc
 8006c4a:	18e4      	addcc	r4, r4, r3
 8006c4c:	e7f2      	b.n	8006c34 <ceil+0xcc>
 8006c4e:	2500      	movs	r5, #0
 8006c50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006c54:	e7a9      	b.n	8006baa <ceil+0x42>
 8006c56:	4625      	mov	r5, r4
 8006c58:	e7a7      	b.n	8006baa <ceil+0x42>
 8006c5a:	bf00      	nop
 8006c5c:	f3af 8000 	nop.w
 8006c60:	8800759c 	.word	0x8800759c
 8006c64:	7e37e43c 	.word	0x7e37e43c
 8006c68:	3ff00000 	.word	0x3ff00000
 8006c6c:	000fffff 	.word	0x000fffff

08006c70 <floor>:
 8006c70:	ec51 0b10 	vmov	r0, r1, d0
 8006c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006c7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006c80:	2e13      	cmp	r6, #19
 8006c82:	ee10 5a10 	vmov	r5, s0
 8006c86:	ee10 8a10 	vmov	r8, s0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	dc32      	bgt.n	8006cf4 <floor+0x84>
 8006c8e:	2e00      	cmp	r6, #0
 8006c90:	da14      	bge.n	8006cbc <floor+0x4c>
 8006c92:	a333      	add	r3, pc, #204	; (adr r3, 8006d60 <floor+0xf0>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f7f9 fb00 	bl	800029c <__adddf3>
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f7f9 ff42 	bl	8000b28 <__aeabi_dcmpgt>
 8006ca4:	b138      	cbz	r0, 8006cb6 <floor+0x46>
 8006ca6:	2c00      	cmp	r4, #0
 8006ca8:	da57      	bge.n	8006d5a <floor+0xea>
 8006caa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006cae:	431d      	orrs	r5, r3
 8006cb0:	d001      	beq.n	8006cb6 <floor+0x46>
 8006cb2:	4c2d      	ldr	r4, [pc, #180]	; (8006d68 <floor+0xf8>)
 8006cb4:	2500      	movs	r5, #0
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4628      	mov	r0, r5
 8006cba:	e025      	b.n	8006d08 <floor+0x98>
 8006cbc:	4f2b      	ldr	r7, [pc, #172]	; (8006d6c <floor+0xfc>)
 8006cbe:	4137      	asrs	r7, r6
 8006cc0:	ea01 0307 	and.w	r3, r1, r7
 8006cc4:	4303      	orrs	r3, r0
 8006cc6:	d01f      	beq.n	8006d08 <floor+0x98>
 8006cc8:	a325      	add	r3, pc, #148	; (adr r3, 8006d60 <floor+0xf0>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f7f9 fae5 	bl	800029c <__adddf3>
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f7f9 ff27 	bl	8000b28 <__aeabi_dcmpgt>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d0eb      	beq.n	8006cb6 <floor+0x46>
 8006cde:	2c00      	cmp	r4, #0
 8006ce0:	bfbe      	ittt	lt
 8006ce2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006ce6:	fa43 f606 	asrlt.w	r6, r3, r6
 8006cea:	19a4      	addlt	r4, r4, r6
 8006cec:	ea24 0407 	bic.w	r4, r4, r7
 8006cf0:	2500      	movs	r5, #0
 8006cf2:	e7e0      	b.n	8006cb6 <floor+0x46>
 8006cf4:	2e33      	cmp	r6, #51	; 0x33
 8006cf6:	dd0b      	ble.n	8006d10 <floor+0xa0>
 8006cf8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006cfc:	d104      	bne.n	8006d08 <floor+0x98>
 8006cfe:	ee10 2a10 	vmov	r2, s0
 8006d02:	460b      	mov	r3, r1
 8006d04:	f7f9 faca 	bl	800029c <__adddf3>
 8006d08:	ec41 0b10 	vmov	d0, r0, r1
 8006d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295
 8006d18:	fa23 f707 	lsr.w	r7, r3, r7
 8006d1c:	4207      	tst	r7, r0
 8006d1e:	d0f3      	beq.n	8006d08 <floor+0x98>
 8006d20:	a30f      	add	r3, pc, #60	; (adr r3, 8006d60 <floor+0xf0>)
 8006d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d26:	f7f9 fab9 	bl	800029c <__adddf3>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	f7f9 fefb 	bl	8000b28 <__aeabi_dcmpgt>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d0bf      	beq.n	8006cb6 <floor+0x46>
 8006d36:	2c00      	cmp	r4, #0
 8006d38:	da02      	bge.n	8006d40 <floor+0xd0>
 8006d3a:	2e14      	cmp	r6, #20
 8006d3c:	d103      	bne.n	8006d46 <floor+0xd6>
 8006d3e:	3401      	adds	r4, #1
 8006d40:	ea25 0507 	bic.w	r5, r5, r7
 8006d44:	e7b7      	b.n	8006cb6 <floor+0x46>
 8006d46:	2301      	movs	r3, #1
 8006d48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006d4c:	fa03 f606 	lsl.w	r6, r3, r6
 8006d50:	4435      	add	r5, r6
 8006d52:	4545      	cmp	r5, r8
 8006d54:	bf38      	it	cc
 8006d56:	18e4      	addcc	r4, r4, r3
 8006d58:	e7f2      	b.n	8006d40 <floor+0xd0>
 8006d5a:	2500      	movs	r5, #0
 8006d5c:	462c      	mov	r4, r5
 8006d5e:	e7aa      	b.n	8006cb6 <floor+0x46>
 8006d60:	8800759c 	.word	0x8800759c
 8006d64:	7e37e43c 	.word	0x7e37e43c
 8006d68:	bff00000 	.word	0xbff00000
 8006d6c:	000fffff 	.word	0x000fffff

08006d70 <_init>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	bf00      	nop
 8006d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d76:	bc08      	pop	{r3}
 8006d78:	469e      	mov	lr, r3
 8006d7a:	4770      	bx	lr

08006d7c <_fini>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr
