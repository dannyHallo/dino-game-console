
Gameing101.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a00  08006100  08006100  00016100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b00  08006b00  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b00  08006b00  00016b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b08  08006b08  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b08  08006b08  00016b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000078  08006b88  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08006b88  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d628  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002205  00000000  00000000  0002d6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0002f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  00030630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001791f  00000000  00000000  00031270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eac4  00000000  00000000  00048b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f264  00000000  00000000  00057653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e68b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004348  00000000  00000000  000e6908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060e8 	.word	0x080060e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080060e8 	.word	0x080060e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <__aeabi_uldivmod>:
 8000c6c:	b953      	cbnz	r3, 8000c84 <__aeabi_uldivmod+0x18>
 8000c6e:	b94a      	cbnz	r2, 8000c84 <__aeabi_uldivmod+0x18>
 8000c70:	2900      	cmp	r1, #0
 8000c72:	bf08      	it	eq
 8000c74:	2800      	cmpeq	r0, #0
 8000c76:	bf1c      	itt	ne
 8000c78:	f04f 31ff 	movne.w	r1, #4294967295
 8000c7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c80:	f000 b974 	b.w	8000f6c <__aeabi_idiv0>
 8000c84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c8c:	f000 f806 	bl	8000c9c <__udivmoddi4>
 8000c90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c98:	b004      	add	sp, #16
 8000c9a:	4770      	bx	lr

08000c9c <__udivmoddi4>:
 8000c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca0:	9d08      	ldr	r5, [sp, #32]
 8000ca2:	4604      	mov	r4, r0
 8000ca4:	468e      	mov	lr, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d14d      	bne.n	8000d46 <__udivmoddi4+0xaa>
 8000caa:	428a      	cmp	r2, r1
 8000cac:	4694      	mov	ip, r2
 8000cae:	d969      	bls.n	8000d84 <__udivmoddi4+0xe8>
 8000cb0:	fab2 f282 	clz	r2, r2
 8000cb4:	b152      	cbz	r2, 8000ccc <__udivmoddi4+0x30>
 8000cb6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cba:	f1c2 0120 	rsb	r1, r2, #32
 8000cbe:	fa20 f101 	lsr.w	r1, r0, r1
 8000cc2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc6:	ea41 0e03 	orr.w	lr, r1, r3
 8000cca:	4094      	lsls	r4, r2
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	0c21      	lsrs	r1, r4, #16
 8000cd2:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd6:	fa1f f78c 	uxth.w	r7, ip
 8000cda:	fb08 e316 	mls	r3, r8, r6, lr
 8000cde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ce2:	fb06 f107 	mul.w	r1, r6, r7
 8000ce6:	4299      	cmp	r1, r3
 8000ce8:	d90a      	bls.n	8000d00 <__udivmoddi4+0x64>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cf2:	f080 811f 	bcs.w	8000f34 <__udivmoddi4+0x298>
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	f240 811c 	bls.w	8000f34 <__udivmoddi4+0x298>
 8000cfc:	3e02      	subs	r6, #2
 8000cfe:	4463      	add	r3, ip
 8000d00:	1a5b      	subs	r3, r3, r1
 8000d02:	b2a4      	uxth	r4, r4
 8000d04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d08:	fb08 3310 	mls	r3, r8, r0, r3
 8000d0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d10:	fb00 f707 	mul.w	r7, r0, r7
 8000d14:	42a7      	cmp	r7, r4
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x92>
 8000d18:	eb1c 0404 	adds.w	r4, ip, r4
 8000d1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d20:	f080 810a 	bcs.w	8000f38 <__udivmoddi4+0x29c>
 8000d24:	42a7      	cmp	r7, r4
 8000d26:	f240 8107 	bls.w	8000f38 <__udivmoddi4+0x29c>
 8000d2a:	4464      	add	r4, ip
 8000d2c:	3802      	subs	r0, #2
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	1be4      	subs	r4, r4, r7
 8000d34:	2600      	movs	r6, #0
 8000d36:	b11d      	cbz	r5, 8000d40 <__udivmoddi4+0xa4>
 8000d38:	40d4      	lsrs	r4, r2
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d909      	bls.n	8000d5e <__udivmoddi4+0xc2>
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	f000 80ef 	beq.w	8000f2e <__udivmoddi4+0x292>
 8000d50:	2600      	movs	r6, #0
 8000d52:	e9c5 0100 	strd	r0, r1, [r5]
 8000d56:	4630      	mov	r0, r6
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	fab3 f683 	clz	r6, r3
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d14a      	bne.n	8000dfc <__udivmoddi4+0x160>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xd4>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 80f9 	bhi.w	8000f62 <__udivmoddi4+0x2c6>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb61 0303 	sbc.w	r3, r1, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	469e      	mov	lr, r3
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e0      	beq.n	8000d40 <__udivmoddi4+0xa4>
 8000d7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d82:	e7dd      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000d84:	b902      	cbnz	r2, 8000d88 <__udivmoddi4+0xec>
 8000d86:	deff      	udf	#255	; 0xff
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	f040 8092 	bne.w	8000eb6 <__udivmoddi4+0x21a>
 8000d92:	eba1 010c 	sub.w	r1, r1, ip
 8000d96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9a:	fa1f fe8c 	uxth.w	lr, ip
 8000d9e:	2601      	movs	r6, #1
 8000da0:	0c20      	lsrs	r0, r4, #16
 8000da2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da6:	fb07 1113 	mls	r1, r7, r3, r1
 8000daa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dae:	fb0e f003 	mul.w	r0, lr, r3
 8000db2:	4288      	cmp	r0, r1
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x12c>
 8000db6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x12a>
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	f200 80cb 	bhi.w	8000f5c <__udivmoddi4+0x2c0>
 8000dc6:	4643      	mov	r3, r8
 8000dc8:	1a09      	subs	r1, r1, r0
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x156>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000de8:	d202      	bcs.n	8000df0 <__udivmoddi4+0x154>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	f200 80bb 	bhi.w	8000f66 <__udivmoddi4+0x2ca>
 8000df0:	4608      	mov	r0, r1
 8000df2:	eba4 040e 	sub.w	r4, r4, lr
 8000df6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dfa:	e79c      	b.n	8000d36 <__udivmoddi4+0x9a>
 8000dfc:	f1c6 0720 	rsb	r7, r6, #32
 8000e00:	40b3      	lsls	r3, r6
 8000e02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e12:	431c      	orrs	r4, r3
 8000e14:	40f9      	lsrs	r1, r7
 8000e16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e22:	0c20      	lsrs	r0, r4, #16
 8000e24:	fa1f fe8c 	uxth.w	lr, ip
 8000e28:	fb09 1118 	mls	r1, r9, r8, r1
 8000e2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e30:	fb08 f00e 	mul.w	r0, r8, lr
 8000e34:	4288      	cmp	r0, r1
 8000e36:	fa02 f206 	lsl.w	r2, r2, r6
 8000e3a:	d90b      	bls.n	8000e54 <__udivmoddi4+0x1b8>
 8000e3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e44:	f080 8088 	bcs.w	8000f58 <__udivmoddi4+0x2bc>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f240 8085 	bls.w	8000f58 <__udivmoddi4+0x2bc>
 8000e4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000e52:	4461      	add	r1, ip
 8000e54:	1a09      	subs	r1, r1, r0
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e68:	458e      	cmp	lr, r1
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x1e2>
 8000e6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e74:	d26c      	bcs.n	8000f50 <__udivmoddi4+0x2b4>
 8000e76:	458e      	cmp	lr, r1
 8000e78:	d96a      	bls.n	8000f50 <__udivmoddi4+0x2b4>
 8000e7a:	3802      	subs	r0, #2
 8000e7c:	4461      	add	r1, ip
 8000e7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e82:	fba0 9402 	umull	r9, r4, r0, r2
 8000e86:	eba1 010e 	sub.w	r1, r1, lr
 8000e8a:	42a1      	cmp	r1, r4
 8000e8c:	46c8      	mov	r8, r9
 8000e8e:	46a6      	mov	lr, r4
 8000e90:	d356      	bcc.n	8000f40 <__udivmoddi4+0x2a4>
 8000e92:	d053      	beq.n	8000f3c <__udivmoddi4+0x2a0>
 8000e94:	b15d      	cbz	r5, 8000eae <__udivmoddi4+0x212>
 8000e96:	ebb3 0208 	subs.w	r2, r3, r8
 8000e9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ea2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea6:	40f1      	lsrs	r1, r6
 8000ea8:	431f      	orrs	r7, r3
 8000eaa:	e9c5 7100 	strd	r7, r1, [r5]
 8000eae:	2600      	movs	r6, #0
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	f1c2 0320 	rsb	r3, r2, #32
 8000eba:	40d8      	lsrs	r0, r3
 8000ebc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec4:	4091      	lsls	r1, r2
 8000ec6:	4301      	orrs	r1, r0
 8000ec8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed8:	0c0b      	lsrs	r3, r1, #16
 8000eda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ede:	fb00 f60e 	mul.w	r6, r0, lr
 8000ee2:	429e      	cmp	r6, r3
 8000ee4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee8:	d908      	bls.n	8000efc <__udivmoddi4+0x260>
 8000eea:	eb1c 0303 	adds.w	r3, ip, r3
 8000eee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef2:	d22f      	bcs.n	8000f54 <__udivmoddi4+0x2b8>
 8000ef4:	429e      	cmp	r6, r3
 8000ef6:	d92d      	bls.n	8000f54 <__udivmoddi4+0x2b8>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	4463      	add	r3, ip
 8000efc:	1b9b      	subs	r3, r3, r6
 8000efe:	b289      	uxth	r1, r1
 8000f00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f04:	fb07 3316 	mls	r3, r7, r6, r3
 8000f08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f10:	428b      	cmp	r3, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x28a>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f1c:	d216      	bcs.n	8000f4c <__udivmoddi4+0x2b0>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d914      	bls.n	8000f4c <__udivmoddi4+0x2b0>
 8000f22:	3e02      	subs	r6, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f2c:	e738      	b.n	8000da0 <__udivmoddi4+0x104>
 8000f2e:	462e      	mov	r6, r5
 8000f30:	4628      	mov	r0, r5
 8000f32:	e705      	b.n	8000d40 <__udivmoddi4+0xa4>
 8000f34:	4606      	mov	r6, r0
 8000f36:	e6e3      	b.n	8000d00 <__udivmoddi4+0x64>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6f8      	b.n	8000d2e <__udivmoddi4+0x92>
 8000f3c:	454b      	cmp	r3, r9
 8000f3e:	d2a9      	bcs.n	8000e94 <__udivmoddi4+0x1f8>
 8000f40:	ebb9 0802 	subs.w	r8, r9, r2
 8000f44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f48:	3801      	subs	r0, #1
 8000f4a:	e7a3      	b.n	8000e94 <__udivmoddi4+0x1f8>
 8000f4c:	4646      	mov	r6, r8
 8000f4e:	e7ea      	b.n	8000f26 <__udivmoddi4+0x28a>
 8000f50:	4620      	mov	r0, r4
 8000f52:	e794      	b.n	8000e7e <__udivmoddi4+0x1e2>
 8000f54:	4640      	mov	r0, r8
 8000f56:	e7d1      	b.n	8000efc <__udivmoddi4+0x260>
 8000f58:	46d0      	mov	r8, sl
 8000f5a:	e77b      	b.n	8000e54 <__udivmoddi4+0x1b8>
 8000f5c:	3b02      	subs	r3, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	e732      	b.n	8000dc8 <__udivmoddi4+0x12c>
 8000f62:	4630      	mov	r0, r6
 8000f64:	e709      	b.n	8000d7a <__udivmoddi4+0xde>
 8000f66:	4464      	add	r4, ip
 8000f68:	3802      	subs	r0, #2
 8000f6a:	e742      	b.n	8000df2 <__udivmoddi4+0x156>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <smallRbit>:
static uint8_t SendBuf[2];

//This buffer holds 1 Character bitmap image (8x8)
//static uint8_t chBuf[8];

uint8_t smallRbit(uint8_t re) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	return (uint8_t) (__RBIT(re) >> 24);
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	0e1b      	lsrs	r3, r3, #24
 8000f8a:	b2db      	uxtb	r3, r3
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <modulo>:

int modulo(int x, int N) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	return (x % N + N) % N;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	fb93 f2f2 	sdiv	r2, r3, r2
 8000faa:	6839      	ldr	r1, [r7, #0]
 8000fac:	fb01 f202 	mul.w	r2, r1, r2
 8000fb0:	1a9a      	subs	r2, r3, r2
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	fb93 f2f2 	sdiv	r2, r3, r2
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	fb01 f202 	mul.w	r2, r1, r2
 8000fc2:	1a9b      	subs	r3, r3, r2
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LCD_Init>:

// Display Initialization
void LCD_Init(LS013B4DN04 *MemDisp, SPI_HandleTypeDef *Bus,
		GPIO_TypeDef *dispGPIO, uint16_t LCDcs) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	807b      	strh	r3, [r7, #2]

	//Store params into our struct
	MemDisp->Bus = Bus;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	601a      	str	r2, [r3, #0]
	MemDisp->dispGPIO = dispGPIO;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	605a      	str	r2, [r3, #4]
	MemDisp->LCDcs = LCDcs;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	887a      	ldrh	r2, [r7, #2]
 8000fee:	811a      	strh	r2, [r3, #8]

	DispBuf = malloc(1152);
 8000ff0:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8000ff4:	f003 ff04 	bl	8004e00 <malloc>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b21      	ldr	r3, [pc, #132]	; (8001084 <LCD_Init+0xb4>)
 8000ffe:	601a      	str	r2, [r3, #0]
	DispBuf2 = malloc(1152);
 8001000:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8001004:	f003 fefc 	bl	8004e00 <malloc>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <LCD_Init+0xb8>)
 800100e:	601a      	str	r2, [r3, #0]
	TextBuf = malloc(8);
 8001010:	2008      	movs	r0, #8
 8001012:	f003 fef5 	bl	8004e00 <malloc>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <LCD_Init+0xbc>)
 800101c:	601a      	str	r2, [r3, #0]

	memset(DispBuf, 0x00, 1152);
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <LCD_Init+0xb4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f003 fef1 	bl	8004e10 <memset>
	memset(DispBuf2, 0x00, 1152);
 800102e:	4b16      	ldr	r3, [pc, #88]	; (8001088 <LCD_Init+0xb8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f003 fee9 	bl	8004e10 <memset>
	memset(TextBuf, 0x00, 1152);
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <LCD_Init+0xbc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fee1 	bl	8004e10 <memset>

	//At lease 3 + 13 clock is needed for Display clear (16 Clock = 8x2 bit = 2 byte)
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6858      	ldr	r0, [r3, #4]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	891b      	ldrh	r3, [r3, #8]
 8001056:	2201      	movs	r2, #1
 8001058:	4619      	mov	r1, r3
 800105a:	f002 fb39 	bl	80036d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to data sheet
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	2396      	movs	r3, #150	; 0x96
 8001064:	2202      	movs	r2, #2
 8001066:	490a      	ldr	r1, [pc, #40]	; (8001090 <LCD_Init+0xc0>)
 8001068:	f003 f853 	bl	8004112 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	6858      	ldr	r0, [r3, #4]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	891b      	ldrh	r3, [r3, #8]
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	f002 fb2a 	bl	80036d0 <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000098 	.word	0x20000098
 8001088:	2000009c 	.word	0x2000009c
 800108c:	200000a0 	.word	0x200000a0
 8001090:	20000000 	.word	0x20000000

08001094 <LCD_UpdateFull>:

// Display update (Transmit data)
void LCD_UpdateFull(LS013B4DN04 *MemDisp) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <LCD_UpdateFull+0xd0>)
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <LCD_UpdateFull+0xd4>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010aa:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010b8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6858      	ldr	r0, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	891b      	ldrh	r3, [r3, #8]
 80010c2:	2201      	movs	r2, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	f002 fb03 	bl	80036d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	2396      	movs	r3, #150	; 0x96
 80010d0:	2201      	movs	r2, #1
 80010d2:	4924      	ldr	r1, [pc, #144]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010d4:	f003 f81d 	bl	8004112 <HAL_SPI_Transmit>

	for (uint8_t row = 0; row < 96; row++) {
 80010d8:	2300      	movs	r3, #0
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e02b      	b.n	8001136 <LCD_UpdateFull+0xa2>
		SendBuf[1] = smallRbit(row + 1); // counting from row number 1 to row number 96
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff43 	bl	8000f70 <smallRbit>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <LCD_UpdateFull+0xd0>)
 80010f0:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6818      	ldr	r0, [r3, #0]
 80010f6:	491d      	ldr	r1, [pc, #116]	; (800116c <LCD_UpdateFull+0xd8>)
 80010f8:	2396      	movs	r3, #150	; 0x96
 80010fa:	2201      	movs	r2, #1
 80010fc:	f003 f809 	bl	8004112 <HAL_SPI_Transmit>

		uint16_t offset = row * 12;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	b29b      	uxth	r3, r3
 8001104:	461a      	mov	r2, r3
 8001106:	0052      	lsls	r2, r2, #1
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	81bb      	strh	r3, [r7, #12]
		HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <LCD_UpdateFull+0xdc>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	89bb      	ldrh	r3, [r7, #12]
 8001118:	18d1      	adds	r1, r2, r3
 800111a:	2396      	movs	r3, #150	; 0x96
 800111c:	220c      	movs	r2, #12
 800111e:	f002 fff8 	bl	8004112 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	2396      	movs	r3, #150	; 0x96
 8001128:	2201      	movs	r2, #1
 800112a:	4912      	ldr	r1, [pc, #72]	; (8001174 <LCD_UpdateFull+0xe0>)
 800112c:	f002 fff1 	bl	8004112 <HAL_SPI_Transmit>
	for (uint8_t row = 0; row < 96; row++) {
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	3301      	adds	r3, #1
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b5f      	cmp	r3, #95	; 0x5f
 800113a:	d9d0      	bls.n	80010de <LCD_UpdateFull+0x4a>
	}

	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	2396      	movs	r3, #150	; 0x96
 8001142:	2201      	movs	r2, #1
 8001144:	490b      	ldr	r1, [pc, #44]	; (8001174 <LCD_UpdateFull+0xe0>)
 8001146:	f002 ffe4 	bl	8004112 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6858      	ldr	r0, [r3, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	891b      	ldrh	r3, [r3, #8]
 8001152:	2200      	movs	r2, #0
 8001154:	4619      	mov	r1, r3
 8001156:	f002 fabb 	bl	80036d0 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200000a4 	.word	0x200000a4
 8001168:	20000004 	.word	0x20000004
 800116c:	200000a5 	.word	0x200000a5
 8001170:	20000098 	.word	0x20000098
 8001174:	20000094 	.word	0x20000094

08001178 <LCD_UpdateLine>:

// Display update (Transmit data)
void LCD_UpdateLine(LS013B4DN04 *MemDisp, uint8_t lineNum) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8001184:	4b29      	ldr	r3, [pc, #164]	; (800122c <LCD_UpdateLine+0xb4>)
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <LCD_UpdateLine+0xb8>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4313      	orrs	r3, r2
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b26      	ldr	r3, [pc, #152]	; (800122c <LCD_UpdateLine+0xb4>)
 8001192:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 8001194:	4b25      	ldr	r3, [pc, #148]	; (800122c <LCD_UpdateLine+0xb4>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b23      	ldr	r3, [pc, #140]	; (800122c <LCD_UpdateLine+0xb4>)
 80011a0:	701a      	strb	r2, [r3, #0]
	// CS On
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6858      	ldr	r0, [r3, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	891b      	ldrh	r3, [r3, #8]
 80011aa:	2201      	movs	r2, #1
 80011ac:	4619      	mov	r1, r3
 80011ae:	f002 fa8f 	bl	80036d0 <HAL_GPIO_WritePin>

	// Command
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	2396      	movs	r3, #150	; 0x96
 80011b8:	2201      	movs	r2, #1
 80011ba:	491c      	ldr	r1, [pc, #112]	; (800122c <LCD_UpdateLine+0xb4>)
 80011bc:	f002 ffa9 	bl	8004112 <HAL_SPI_Transmit>

	// Line num
	SendBuf[1] = smallRbit(lineNum + 1); // counting from row number 1 to row number 96
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fed2 	bl	8000f70 <smallRbit>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <LCD_UpdateLine+0xb4>)
 80011d2:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	4916      	ldr	r1, [pc, #88]	; (8001234 <LCD_UpdateLine+0xbc>)
 80011da:	2396      	movs	r3, #150	; 0x96
 80011dc:	2201      	movs	r2, #1
 80011de:	f002 ff98 	bl	8004112 <HAL_SPI_Transmit>

	uint16_t offset = lineNum * 12;
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	0052      	lsls	r2, r2, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <LCD_UpdateLine+0xc0>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	18d1      	adds	r1, r2, r3
 80011fc:	2396      	movs	r3, #150	; 0x96
 80011fe:	220c      	movs	r2, #12
 8001200:	f002 ff87 	bl	8004112 <HAL_SPI_Transmit>

	// Trailer
	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 2, 150);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6818      	ldr	r0, [r3, #0]
 8001208:	2396      	movs	r3, #150	; 0x96
 800120a:	2202      	movs	r2, #2
 800120c:	490b      	ldr	r1, [pc, #44]	; (800123c <LCD_UpdateLine+0xc4>)
 800120e:	f002 ff80 	bl	8004112 <HAL_SPI_Transmit>

	// Cs Off
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6858      	ldr	r0, [r3, #4]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	891b      	ldrh	r3, [r3, #8]
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	f002 fa57 	bl	80036d0 <HAL_GPIO_WritePin>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200000a4 	.word	0x200000a4
 8001230:	20000004 	.word	0x20000004
 8001234:	200000a5 	.word	0x200000a5
 8001238:	20000098 	.word	0x20000098
 800123c:	20000094 	.word	0x20000094

08001240 <LCD_LoadObjs>:
void LCD_LoadFull(uint8_t *BMP) {
	memcpy(DispBuf, BMP, 1152);
}

void LCD_LoadObjs(GameObj *header, uint8_t drawMode, uint8_t repeatMode, uint8_t index,
bool flip) {
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af04      	add	r7, sp, #16
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	4608      	mov	r0, r1
 800124a:	4611      	mov	r1, r2
 800124c:	461a      	mov	r2, r3
 800124e:	4603      	mov	r3, r0
 8001250:	70fb      	strb	r3, [r7, #3]
 8001252:	460b      	mov	r3, r1
 8001254:	70bb      	strb	r3, [r7, #2]
 8001256:	4613      	mov	r3, r2
 8001258:	707b      	strb	r3, [r7, #1]
	GameObj *ptr = header;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

	if (!ptr->full)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	7c1b      	ldrb	r3, [r3, #16]
 8001262:	f083 0301 	eor.w	r3, r3, #1
 8001266:	b2db      	uxtb	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d12b      	bne.n	80012c4 <LCD_LoadObjs+0x84>
		return;

	for (;;) {
		LCD_LoadObj(ptr->bmp, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	edd3 7a01 	vldr	s15, [r3, #4]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	ed93 7a02 	vldr	s14, [r3, #8]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	7b19      	ldrb	r1, [r3, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	7b5a      	ldrb	r2, [r3, #13]
 8001284:	78fc      	ldrb	r4, [r7, #3]
 8001286:	f897 3020 	ldrb.w	r3, [r7, #32]
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	78bb      	ldrb	r3, [r7, #2]
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	4623      	mov	r3, r4
 8001296:	eef0 0a47 	vmov.f32	s1, s14
 800129a:	eeb0 0a67 	vmov.f32	s0, s15
 800129e:	f000 f817 	bl	80012d0 <LCD_LoadObj>
				repeatMode, index, flip);

		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == header)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	7c1b      	ldrb	r3, [r3, #16]
 80012a8:	f083 0301 	eor.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10a      	bne.n	80012c8 <LCD_LoadObjs+0x88>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d005      	beq.n	80012c8 <LCD_LoadObjs+0x88>
			return;
		ptr = ptr->next;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	60fb      	str	r3, [r7, #12]
		LCD_LoadObj(ptr->bmp, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 80012c2:	e7d3      	b.n	800126c <LCD_LoadObjs+0x2c>
		return;
 80012c4:	bf00      	nop
 80012c6:	e000      	b.n	80012ca <LCD_LoadObjs+0x8a>
			return;
 80012c8:	bf00      	nop
	}
}
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}

080012d0 <LCD_LoadObj>:

void LCD_LoadObj(uint8_t *bmp, float posX, float posY, uint8_t width,
		uint8_t height, uint8_t drawMode, uint8_t repeatMode,uint8_t index,  bool flip) {
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80012e0:	4608      	mov	r0, r1
 80012e2:	4611      	mov	r1, r2
 80012e4:	461a      	mov	r2, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	70fb      	strb	r3, [r7, #3]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70bb      	strb	r3, [r7, #2]
 80012ee:	4613      	mov	r3, r2
 80012f0:	707b      	strb	r3, [r7, #1]
	short displayRow;
	short displayRowOffset;

	//Counting from Y origin point to bmpH using for loop
	for (uint8_t y = 0; y < height; y++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012f8:	e18e      	b.n	8001618 <LCD_LoadObj+0x348>
		displayRow = modulo(floor(posY) + y, 96);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff f92c 	bl	8000558 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	ec43 2b10 	vmov	d0, r2, r3
 8001308:	f004 fe6e 	bl	8005fe8 <floor>
 800130c:	ec55 4b10 	vmov	r4, r5, d0
 8001310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f90d 	bl	8000534 <__aeabi_i2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7fe ffbb 	bl	800029c <__adddf3>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	4610      	mov	r0, r2
 800132c:	4619      	mov	r1, r3
 800132e:	f7ff fc05 	bl	8000b3c <__aeabi_d2iz>
 8001332:	4603      	mov	r3, r0
 8001334:	2160      	movs	r1, #96	; 0x60
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fe2e 	bl	8000f98 <modulo>
 800133c:	4603      	mov	r3, r0
 800133e:	847b      	strh	r3, [r7, #34]	; 0x22

		if ((repeatMode == REPEATMODE_NONE)
 8001340:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001344:	2b00      	cmp	r3, #0
 8001346:	d109      	bne.n	800135c <LCD_LoadObj+0x8c>
				&& (displayRow < 0 || displayRow >= 96)) {
 8001348:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800134c:	2b00      	cmp	r3, #0
 800134e:	f2c0 815d 	blt.w	800160c <LCD_LoadObj+0x33c>
 8001352:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001356:	2b5f      	cmp	r3, #95	; 0x5f
 8001358:	f300 8158 	bgt.w	800160c <LCD_LoadObj+0x33c>
			continue;
		}

		displayRowOffset = displayRow * 12;
 800135c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800135e:	461a      	mov	r2, r3
 8001360:	0052      	lsls	r2, r2, #1
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	b29b      	uxth	r3, r3
 8001368:	843b      	strh	r3, [r7, #32]

		int firstXByte = floor(floor(posX) / 8);
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f7ff f8f4 	bl	8000558 <__aeabi_f2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	ec43 2b10 	vmov	d0, r2, r3
 8001378:	f004 fe36 	bl	8005fe8 <floor>
 800137c:	ec51 0b10 	vmov	r0, r1, d0
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	4baa      	ldr	r3, [pc, #680]	; (8001630 <LCD_LoadObj+0x360>)
 8001386:	f7ff fa69 	bl	800085c <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	ec43 2b17 	vmov	d7, r2, r3
 8001392:	eeb0 0a47 	vmov.f32	s0, s14
 8001396:	eef0 0a67 	vmov.f32	s1, s15
 800139a:	f004 fe25 	bl	8005fe8 <floor>
 800139e:	ec53 2b10 	vmov	r2, r3, d0
 80013a2:	4610      	mov	r0, r2
 80013a4:	4619      	mov	r1, r3
 80013a6:	f7ff fbc9 	bl	8000b3c <__aeabi_d2iz>
 80013aa:	4603      	mov	r3, r0
 80013ac:	61fb      	str	r3, [r7, #28]
		uint8_t leftOffset = modulo(floor(posX), 8);
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f7ff f8d2 	bl	8000558 <__aeabi_f2d>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	ec43 2b10 	vmov	d0, r2, r3
 80013bc:	f004 fe14 	bl	8005fe8 <floor>
 80013c0:	ec53 2b10 	vmov	r2, r3, d0
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f7ff fbb8 	bl	8000b3c <__aeabi_d2iz>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2108      	movs	r1, #8
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fde1 	bl	8000f98 <modulo>
 80013d6:	4603      	mov	r3, r0
 80013d8:	76fb      	strb	r3, [r7, #27]

		uint8_t v1 = 0x00, v2 = 0x00;
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t *currentEditingBuf;

		for (uint8_t j = 0; j < width + 1; j++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80013ec:	e107      	b.n	80015fe <LCD_LoadObj+0x32e>
			if (j == width)
 80013ee:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d103      	bne.n	8001400 <LCD_LoadObj+0x130>
				v2 = 0x00;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80013fe:	e016      	b.n	800142e <LCD_LoadObj+0x15e>
			else
				v2 = *(bmp + width * y + j + index * (height * width));
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001410:	78ba      	ldrb	r2, [r7, #2]
 8001412:	78f9      	ldrb	r1, [r7, #3]
 8001414:	fb01 f202 	mul.w	r2, r1, r2
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	18c2      	adds	r2, r0, r3
 800141e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001422:	4413      	add	r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			if (repeatMode == REPEATMODE_NONE
 800142e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001432:	2b00      	cmp	r3, #0
 8001434:	d110      	bne.n	8001458 <LCD_LoadObj+0x188>
					&& (firstXByte + j < 0 || firstXByte + j > 11)) {
 8001436:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	4413      	add	r3, r2
 800143e:	2b00      	cmp	r3, #0
 8001440:	db05      	blt.n	800144e <LCD_LoadObj+0x17e>
 8001442:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	2b0b      	cmp	r3, #11
 800144c:	dd04      	ble.n	8001458 <LCD_LoadObj+0x188>
				v1 = v2;
 800144e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				continue;
 8001456:	e0cd      	b.n	80015f4 <LCD_LoadObj+0x324>
			}

			currentEditingBuf = DispBuf + displayRowOffset
					+ (firstXByte + j) % 12;
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <LCD_LoadObj+0x364>)
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001460:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	441a      	add	r2, r3
 8001468:	4b73      	ldr	r3, [pc, #460]	; (8001638 <LCD_LoadObj+0x368>)
 800146a:	fb83 1302 	smull	r1, r3, r3, r2
 800146e:	1059      	asrs	r1, r3, #1
 8001470:	17d3      	asrs	r3, r2, #31
 8001472:	1ac9      	subs	r1, r1, r3
 8001474:	460b      	mov	r3, r1
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	440b      	add	r3, r1
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	1ad1      	subs	r1, r2, r3
 800147e:	460b      	mov	r3, r1
 8001480:	4423      	add	r3, r4
			currentEditingBuf = DispBuf + displayRowOffset
 8001482:	4403      	add	r3, r0
 8001484:	617b      	str	r3, [r7, #20]

			if (flip) {
 8001486:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d057      	beq.n	800153e <LCD_LoadObj+0x26e>
				switch (drawMode) {
 800148e:	787b      	ldrb	r3, [r7, #1]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d03b      	beq.n	800150c <LCD_LoadObj+0x23c>
 8001494:	2b02      	cmp	r3, #2
 8001496:	f300 80a9 	bgt.w	80015ec <LCD_LoadObj+0x31c>
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <LCD_LoadObj+0x1d4>
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d01b      	beq.n	80014da <LCD_LoadObj+0x20a>
 80014a2:	e0a3      	b.n	80015ec <LCD_LoadObj+0x31c>
				case DRAWMODE_ADD:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b25a      	sxtb	r2, r3
 80014aa:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80014ae:	7efb      	ldrb	r3, [r7, #27]
 80014b0:	f1c3 0308 	rsb	r3, r3, #8
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80014b8:	b259      	sxtb	r1, r3
 80014ba:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80014be:	7efb      	ldrb	r3, [r7, #27]
 80014c0:	fa40 f303 	asr.w	r3, r0, r3
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	430b      	orrs	r3, r1
 80014c8:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80014ca:	43db      	mvns	r3, r3
 80014cc:	b25b      	sxtb	r3, r3
 80014ce:	4013      	ands	r3, r2
 80014d0:	b25b      	sxtb	r3, r3
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	701a      	strb	r2, [r3, #0]
					break;
 80014d8:	e088      	b.n	80015ec <LCD_LoadObj+0x31c>
				case DRAWMODE_CULL:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b25a      	sxtb	r2, r3
 80014e0:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80014e4:	7efb      	ldrb	r3, [r7, #27]
 80014e6:	f1c3 0308 	rsb	r3, r3, #8
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80014ee:	b259      	sxtb	r1, r3
 80014f0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80014f4:	7efb      	ldrb	r3, [r7, #27]
 80014f6:	fa40 f303 	asr.w	r3, r0, r3
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	430b      	orrs	r3, r1
 80014fe:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001500:	4313      	orrs	r3, r2
 8001502:	b25b      	sxtb	r3, r3
 8001504:	b2da      	uxtb	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	701a      	strb	r2, [r3, #0]
					break;
 800150a:	e06f      	b.n	80015ec <LCD_LoadObj+0x31c>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	b25a      	sxtb	r2, r3
 8001512:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001516:	7efb      	ldrb	r3, [r7, #27]
 8001518:	f1c3 0308 	rsb	r3, r3, #8
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 8001520:	b259      	sxtb	r1, r3
 8001522:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001526:	7efb      	ldrb	r3, [r7, #27]
 8001528:	fa40 f303 	asr.w	r3, r0, r3
 800152c:	b25b      	sxtb	r3, r3
 800152e:	430b      	orrs	r3, r1
 8001530:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 8001532:	4053      	eors	r3, r2
 8001534:	b25b      	sxtb	r3, r3
 8001536:	b2da      	uxtb	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	701a      	strb	r2, [r3, #0]
					break;
 800153c:	e056      	b.n	80015ec <LCD_LoadObj+0x31c>
				}
			} else {
				switch (drawMode) {
 800153e:	787b      	ldrb	r3, [r7, #1]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d03a      	beq.n	80015ba <LCD_LoadObj+0x2ea>
 8001544:	2b02      	cmp	r3, #2
 8001546:	dc51      	bgt.n	80015ec <LCD_LoadObj+0x31c>
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <LCD_LoadObj+0x282>
 800154c:	2b01      	cmp	r3, #1
 800154e:	d019      	beq.n	8001584 <LCD_LoadObj+0x2b4>
 8001550:	e04c      	b.n	80015ec <LCD_LoadObj+0x31c>
				case DRAWMODE_ADD:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	b25a      	sxtb	r2, r3
 8001558:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800155c:	7efb      	ldrb	r3, [r7, #27]
 800155e:	f1c3 0308 	rsb	r3, r3, #8
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 8001566:	b259      	sxtb	r1, r3
 8001568:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800156c:	7efb      	ldrb	r3, [r7, #27]
 800156e:	fa40 f303 	asr.w	r3, r0, r3
 8001572:	b25b      	sxtb	r3, r3
 8001574:	430b      	orrs	r3, r1
 8001576:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001578:	4313      	orrs	r3, r2
 800157a:	b25b      	sxtb	r3, r3
 800157c:	b2da      	uxtb	r2, r3
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	701a      	strb	r2, [r3, #0]
					break;
 8001582:	e033      	b.n	80015ec <LCD_LoadObj+0x31c>
				case DRAWMODE_CULL:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b25a      	sxtb	r2, r3
 800158a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800158e:	7efb      	ldrb	r3, [r7, #27]
 8001590:	f1c3 0308 	rsb	r3, r3, #8
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 8001598:	b259      	sxtb	r1, r3
 800159a:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800159e:	7efb      	ldrb	r3, [r7, #27]
 80015a0:	fa40 f303 	asr.w	r3, r0, r3
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	430b      	orrs	r3, r1
 80015a8:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80015aa:	43db      	mvns	r3, r3
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	4013      	ands	r3, r2
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	701a      	strb	r2, [r3, #0]
					break;
 80015b8:	e018      	b.n	80015ec <LCD_LoadObj+0x31c>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b25a      	sxtb	r2, r3
 80015c0:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80015c4:	7efb      	ldrb	r3, [r7, #27]
 80015c6:	f1c3 0308 	rsb	r3, r3, #8
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80015ce:	b259      	sxtb	r1, r3
 80015d0:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80015d4:	7efb      	ldrb	r3, [r7, #27]
 80015d6:	fa40 f303 	asr.w	r3, r0, r3
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	430b      	orrs	r3, r1
 80015de:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80015e0:	4053      	eors	r3, r2
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	701a      	strb	r2, [r3, #0]
					break;
 80015ea:	bf00      	nop
				}
			}

			v1 = v2;
 80015ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t j = 0; j < width + 1; j++) {
 80015f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015f8:	3301      	adds	r3, #1
 80015fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015fe:	78fa      	ldrb	r2, [r7, #3]
 8001600:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001604:	429a      	cmp	r2, r3
 8001606:	f4bf aef2 	bcs.w	80013ee <LCD_LoadObj+0x11e>
 800160a:	e000      	b.n	800160e <LCD_LoadObj+0x33e>
			continue;
 800160c:	bf00      	nop
	for (uint8_t y = 0; y < height; y++) {
 800160e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001612:	3301      	adds	r3, #1
 8001614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001618:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800161c:	78bb      	ldrb	r3, [r7, #2]
 800161e:	429a      	cmp	r2, r3
 8001620:	f4ff ae6b 	bcc.w	80012fa <LCD_LoadObj+0x2a>
		}
	}
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3728      	adds	r7, #40	; 0x28
 800162a:	46bd      	mov	sp, r7
 800162c:	bdb0      	pop	{r4, r5, r7, pc}
 800162e:	bf00      	nop
 8001630:	40200000 	.word	0x40200000
 8001634:	20000098 	.word	0x20000098
 8001638:	2aaaaaab 	.word	0x2aaaaaab

0800163c <LCD_DrawLine>:

void LCD_DrawLine(uint8_t startingRow, int startingPoint, uint8_t length,
		uint8_t drawMode, bool flip) {
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6039      	str	r1, [r7, #0]
 8001644:	4611      	mov	r1, r2
 8001646:	461a      	mov	r2, r3
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	460b      	mov	r3, r1
 800164e:	71bb      	strb	r3, [r7, #6]
 8001650:	4613      	mov	r3, r2
 8001652:	717b      	strb	r3, [r7, #5]
	uint16_t rowOffset = (startingRow % 96) * 12;
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	4b78      	ldr	r3, [pc, #480]	; (8001838 <LCD_DrawLine+0x1fc>)
 8001658:	fba3 1302 	umull	r1, r3, r3, r2
 800165c:	0999      	lsrs	r1, r3, #6
 800165e:	460b      	mov	r3, r1
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	440b      	add	r3, r1
 8001664:	015b      	lsls	r3, r3, #5
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	0052      	lsls	r2, r2, #1
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	82bb      	strh	r3, [r7, #20]

	for (uint8_t j = 0; j < length; j++) {
 8001676:	2300      	movs	r3, #0
 8001678:	75fb      	strb	r3, [r7, #23]
 800167a:	e0d1      	b.n	8001820 <LCD_DrawLine+0x1e4>
		if (startingPoint + j < 0 || startingPoint + j > 95)
 800167c:	7dfa      	ldrb	r2, [r7, #23]
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	f2c0 80c8 	blt.w	8001818 <LCD_DrawLine+0x1dc>
 8001688:	7dfa      	ldrb	r2, [r7, #23]
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	4413      	add	r3, r2
 800168e:	2b5f      	cmp	r3, #95	; 0x5f
 8001690:	f300 80c2 	bgt.w	8001818 <LCD_DrawLine+0x1dc>
			continue;
		uint8_t additionalOffset = ((startingPoint + j) % 96) / 8;
 8001694:	7dfa      	ldrb	r2, [r7, #23]
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	441a      	add	r2, r3
 800169a:	4b68      	ldr	r3, [pc, #416]	; (800183c <LCD_DrawLine+0x200>)
 800169c:	fb83 1302 	smull	r1, r3, r3, r2
 80016a0:	1119      	asrs	r1, r3, #4
 80016a2:	17d3      	asrs	r3, r2, #31
 80016a4:	1ac9      	subs	r1, r1, r3
 80016a6:	460b      	mov	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	440b      	add	r3, r1
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	1ad1      	subs	r1, r2, r3
 80016b0:	460b      	mov	r3, r1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da00      	bge.n	80016b8 <LCD_DrawLine+0x7c>
 80016b6:	3307      	adds	r3, #7
 80016b8:	10db      	asrs	r3, r3, #3
 80016ba:	74fb      	strb	r3, [r7, #19]

		uint8_t *currentEditingBuf = DispBuf + rowOffset + additionalOffset;
 80016bc:	4b60      	ldr	r3, [pc, #384]	; (8001840 <LCD_DrawLine+0x204>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	8ab9      	ldrh	r1, [r7, #20]
 80016c2:	7cfb      	ldrb	r3, [r7, #19]
 80016c4:	440b      	add	r3, r1
 80016c6:	4413      	add	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]
		if (flip) {
 80016ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d051      	beq.n	8001776 <LCD_DrawLine+0x13a>
			switch (drawMode) {
 80016d2:	797b      	ldrb	r3, [r7, #5]
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d037      	beq.n	8001748 <LCD_DrawLine+0x10c>
 80016d8:	2b02      	cmp	r3, #2
 80016da:	f300 809e 	bgt.w	800181a <LCD_DrawLine+0x1de>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d002      	beq.n	80016e8 <LCD_DrawLine+0xac>
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d019      	beq.n	800171a <LCD_DrawLine+0xde>
 80016e6:	e098      	b.n	800181a <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b25a      	sxtb	r2, r3
 80016ee:	7df9      	ldrb	r1, [r7, #23]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	440b      	add	r3, r1
 80016f4:	4259      	negs	r1, r3
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	f001 0107 	and.w	r1, r1, #7
 80016fe:	bf58      	it	pl
 8001700:	424b      	negpl	r3, r1
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	fa41 f303 	asr.w	r3, r1, r3
 8001708:	b25b      	sxtb	r3, r3
 800170a:	43db      	mvns	r3, r3
 800170c:	b25b      	sxtb	r3, r3
 800170e:	4013      	ands	r3, r2
 8001710:	b25b      	sxtb	r3, r3
 8001712:	b2da      	uxtb	r2, r3
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	701a      	strb	r2, [r3, #0]
				break;
 8001718:	e07f      	b.n	800181a <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b25a      	sxtb	r2, r3
 8001720:	7df9      	ldrb	r1, [r7, #23]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	440b      	add	r3, r1
 8001726:	4259      	negs	r1, r3
 8001728:	f003 0307 	and.w	r3, r3, #7
 800172c:	f001 0107 	and.w	r1, r1, #7
 8001730:	bf58      	it	pl
 8001732:	424b      	negpl	r3, r1
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	fa41 f303 	asr.w	r3, r1, r3
 800173a:	b25b      	sxtb	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b25b      	sxtb	r3, r3
 8001740:	b2da      	uxtb	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	701a      	strb	r2, [r3, #0]
				break;
 8001746:	e068      	b.n	800181a <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b25a      	sxtb	r2, r3
 800174e:	7df9      	ldrb	r1, [r7, #23]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	440b      	add	r3, r1
 8001754:	4259      	negs	r1, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	f001 0107 	and.w	r1, r1, #7
 800175e:	bf58      	it	pl
 8001760:	424b      	negpl	r3, r1
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	fa41 f303 	asr.w	r3, r1, r3
 8001768:	b25b      	sxtb	r3, r3
 800176a:	4053      	eors	r3, r2
 800176c:	b25b      	sxtb	r3, r3
 800176e:	b2da      	uxtb	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	701a      	strb	r2, [r3, #0]
				break;
 8001774:	e051      	b.n	800181a <LCD_DrawLine+0x1de>
			}
		} else {
			switch (drawMode) {
 8001776:	797b      	ldrb	r3, [r7, #5]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d036      	beq.n	80017ea <LCD_DrawLine+0x1ae>
 800177c:	2b02      	cmp	r3, #2
 800177e:	dc4c      	bgt.n	800181a <LCD_DrawLine+0x1de>
 8001780:	2b00      	cmp	r3, #0
 8001782:	d002      	beq.n	800178a <LCD_DrawLine+0x14e>
 8001784:	2b01      	cmp	r3, #1
 8001786:	d017      	beq.n	80017b8 <LCD_DrawLine+0x17c>
 8001788:	e047      	b.n	800181a <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b25a      	sxtb	r2, r3
 8001790:	7df9      	ldrb	r1, [r7, #23]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	440b      	add	r3, r1
 8001796:	4259      	negs	r1, r3
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	f001 0107 	and.w	r1, r1, #7
 80017a0:	bf58      	it	pl
 80017a2:	424b      	negpl	r3, r1
 80017a4:	2180      	movs	r1, #128	; 0x80
 80017a6:	fa41 f303 	asr.w	r3, r1, r3
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	701a      	strb	r2, [r3, #0]
				break;
 80017b6:	e030      	b.n	800181a <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b25a      	sxtb	r2, r3
 80017be:	7df9      	ldrb	r1, [r7, #23]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	440b      	add	r3, r1
 80017c4:	4259      	negs	r1, r3
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	f001 0107 	and.w	r1, r1, #7
 80017ce:	bf58      	it	pl
 80017d0:	424b      	negpl	r3, r1
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	fa41 f303 	asr.w	r3, r1, r3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	4013      	ands	r3, r2
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	701a      	strb	r2, [r3, #0]
				break;
 80017e8:	e017      	b.n	800181a <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b25a      	sxtb	r2, r3
 80017f0:	7df9      	ldrb	r1, [r7, #23]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	440b      	add	r3, r1
 80017f6:	4259      	negs	r1, r3
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	f001 0107 	and.w	r1, r1, #7
 8001800:	bf58      	it	pl
 8001802:	424b      	negpl	r3, r1
 8001804:	2180      	movs	r1, #128	; 0x80
 8001806:	fa41 f303 	asr.w	r3, r1, r3
 800180a:	b25b      	sxtb	r3, r3
 800180c:	4053      	eors	r3, r2
 800180e:	b25b      	sxtb	r3, r3
 8001810:	b2da      	uxtb	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	701a      	strb	r2, [r3, #0]
				break;
 8001816:	e000      	b.n	800181a <LCD_DrawLine+0x1de>
			continue;
 8001818:	bf00      	nop
	for (uint8_t j = 0; j < length; j++) {
 800181a:	7dfb      	ldrb	r3, [r7, #23]
 800181c:	3301      	adds	r3, #1
 800181e:	75fb      	strb	r3, [r7, #23]
 8001820:	7dfa      	ldrb	r2, [r7, #23]
 8001822:	79bb      	ldrb	r3, [r7, #6]
 8001824:	429a      	cmp	r2, r3
 8001826:	f4ff af29 	bcc.w	800167c <LCD_DrawLine+0x40>
			}
		}

	}
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	aaaaaaab 	.word	0xaaaaaaab
 800183c:	2aaaaaab 	.word	0x2aaaaaab
 8001840:	20000098 	.word	0x20000098

08001844 <LCD_Invert>:

// Inverts color, WILL CAUSE PERFORMANCE LOSS
void LCD_Invert(void) {
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
	uint16_t invt = 1152;
 800184a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800184e:	80fb      	strh	r3, [r7, #6]
	do {
		invt--;
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	3b01      	subs	r3, #1
 8001854:	80fb      	strh	r3, [r7, #6]
		DispBuf[invt] = ~DispBuf[invt];
 8001856:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <LCD_Invert+0x40>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	4413      	add	r3, r2
 800185e:	781a      	ldrb	r2, [r3, #0]
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <LCD_Invert+0x40>)
 8001862:	6819      	ldr	r1, [r3, #0]
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	440b      	add	r3, r1
 8001868:	43d2      	mvns	r2, r2
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]
	} while (invt);
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ed      	bne.n	8001850 <LCD_Invert+0xc>
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000098 	.word	0x20000098

08001888 <LCD_Fill>:

//Fill screen with either black or white color
void LCD_Fill(bool flip) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
	memset(DispBuf, (flip ? 0xFF : 0x00), 1152);
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <LCD_Fill+0x2c>)
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <LCD_Fill+0x18>
 800189c:	23ff      	movs	r3, #255	; 0xff
 800189e:	e000      	b.n	80018a2 <LCD_Fill+0x1a>
 80018a0:	2300      	movs	r3, #0
 80018a2:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80018a6:	4619      	mov	r1, r3
 80018a8:	f003 fab2 	bl	8004e10 <memset>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000098 	.word	0x20000098

080018b8 <LCD_Print>:
	}

}

void LCD_Print(char *str, short xPos, short yPos, uint8_t drawMode,
		uint8_t repeatMode, bool flip) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af04      	add	r7, sp, #16
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4603      	mov	r3, r0
 80018c8:	817b      	strh	r3, [r7, #10]
 80018ca:	460b      	mov	r3, r1
 80018cc:	813b      	strh	r3, [r7, #8]
 80018ce:	4613      	mov	r3, r2
 80018d0:	71fb      	strb	r3, [r7, #7]
	short strLength = strlen(str);
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7fe fc84 	bl	80001e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	833b      	strh	r3, [r7, #24]
	short lineSpacing = 1;
 80018dc:	2301      	movs	r3, #1
 80018de:	82fb      	strh	r3, [r7, #22]
	short charSpacing = -1;
 80018e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e4:	82bb      	strh	r3, [r7, #20]
	short spaceSpacing = 1;
 80018e6:	2301      	movs	r3, #1
 80018e8:	827b      	strh	r3, [r7, #18]
	short tabSpacing = 8 + charSpacing;
 80018ea:	8abb      	ldrh	r3, [r7, #20]
 80018ec:	3308      	adds	r3, #8
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	823b      	strh	r3, [r7, #16]

	short lineOff = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	83fb      	strh	r3, [r7, #30]
	short charOff = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	83bb      	strh	r3, [r7, #28]

	for (short i = 0; i < strLength; i++) {
 80018fa:	2300      	movs	r3, #0
 80018fc:	837b      	strh	r3, [r7, #26]
 80018fe:	e067      	b.n	80019d0 <LCD_Print+0x118>
		if (str[i] == '\n') {
 8001900:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b0a      	cmp	r3, #10
 800190c:	d109      	bne.n	8001922 <LCD_Print+0x6a>
			lineOff += (8 + lineSpacing);
 800190e:	8afa      	ldrh	r2, [r7, #22]
 8001910:	8bfb      	ldrh	r3, [r7, #30]
 8001912:	4413      	add	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	3308      	adds	r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	83fb      	strh	r3, [r7, #30]
			charOff = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	83bb      	strh	r3, [r7, #28]
			continue;
 8001920:	e050      	b.n	80019c4 <LCD_Print+0x10c>
		}
		if (str[i] == ' ') {
 8001922:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b20      	cmp	r3, #32
 800192e:	d105      	bne.n	800193c <LCD_Print+0x84>
			charOff += spaceSpacing;
 8001930:	8bba      	ldrh	r2, [r7, #28]
 8001932:	8a7b      	ldrh	r3, [r7, #18]
 8001934:	4413      	add	r3, r2
 8001936:	b29b      	uxth	r3, r3
 8001938:	83bb      	strh	r3, [r7, #28]
			continue;
 800193a:	e043      	b.n	80019c4 <LCD_Print+0x10c>
		}
		if (str[i] == '\t') {
 800193c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b09      	cmp	r3, #9
 8001948:	d105      	bne.n	8001956 <LCD_Print+0x9e>
			charOff += tabSpacing;
 800194a:	8bba      	ldrh	r2, [r7, #28]
 800194c:	8a3b      	ldrh	r3, [r7, #16]
 800194e:	4413      	add	r3, r2
 8001950:	b29b      	uxth	r3, r3
 8001952:	83bb      	strh	r3, [r7, #28]
			continue;
 8001954:	e036      	b.n	80019c4 <LCD_Print+0x10c>
		}

		FetchText(TextBuf, str[i]);
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <LCD_Print+0x130>)
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f001 f933 	bl	8002bd0 <FetchText>
		LCD_LoadObj(TextBuf, xPos + charOff, yPos + lineOff, 1, 8, drawMode,
 800196a:	4b1f      	ldr	r3, [pc, #124]	; (80019e8 <LCD_Print+0x130>)
 800196c:	6818      	ldr	r0, [r3, #0]
 800196e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001972:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001976:	4413      	add	r3, r2
 8001978:	ee07 3a90 	vmov	s15, r3
 800197c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001980:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001984:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001988:	4413      	add	r3, r2
 800198a:	ee07 3a10 	vmov	s14, r3
 800198e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001998:	9302      	str	r3, [sp, #8]
 800199a:	2300      	movs	r3, #0
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	2208      	movs	r2, #8
 80019a8:	2101      	movs	r1, #1
 80019aa:	eef0 0a47 	vmov.f32	s1, s14
 80019ae:	eeb0 0a67 	vmov.f32	s0, s15
 80019b2:	f7ff fc8d 	bl	80012d0 <LCD_LoadObj>
				repeatMode, 0, flip);
		charOff += (8 + charSpacing);
 80019b6:	8aba      	ldrh	r2, [r7, #20]
 80019b8:	8bbb      	ldrh	r3, [r7, #28]
 80019ba:	4413      	add	r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3308      	adds	r3, #8
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	83bb      	strh	r3, [r7, #28]
	for (short i = 0; i < strLength; i++) {
 80019c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3301      	adds	r3, #1
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	837b      	strh	r3, [r7, #26]
 80019d0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80019d4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80019d8:	429a      	cmp	r2, r3
 80019da:	db91      	blt.n	8001900 <LCD_Print+0x48>
	}
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200000a0 	.word	0x200000a0

080019ec <LookupKeyState>:

static uint8_t KeyBuffer[4] = { 0, 0, 0, 0 };
static bool KeyStates[4] = { 0, 0, 0, 0 };
static bool KeysUsedToBeLow[4] = { 0, 0, 0, 0 };

uint8_t LookupKeyState(uint8_t n) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(KEYS_GPIO_Port, KeyPins[n])) {
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <LookupKeyState+0x30>)
 80019fa:	5cd3      	ldrb	r3, [r2, r3]
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	4807      	ldr	r0, [pc, #28]	; (8001a20 <LookupKeyState+0x34>)
 8001a02:	f001 fe4d 	bl	80036a0 <HAL_GPIO_ReadPin>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <LookupKeyState+0x24>
		return 0xff;
 8001a0c:	23ff      	movs	r3, #255	; 0xff
 8001a0e:	e000      	b.n	8001a12 <LookupKeyState+0x26>
	}
	return 0x00;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	08006128 	.word	0x08006128
 8001a20:	40020800 	.word	0x40020800

08001a24 <KeyScan>:

void KeyScan() {
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
	for (uint8_t j = 0; j < 4; j++) {
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	71fb      	strb	r3, [r7, #7]
 8001a2e:	e02f      	b.n	8001a90 <KeyScan+0x6c>
		KeyBuffer[j] = ((KeyBuffer[j] << 1) | (LookupKeyState(j) & 0x01));
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4a1b      	ldr	r2, [pc, #108]	; (8001aa0 <KeyScan+0x7c>)
 8001a34:	5cd3      	ldrb	r3, [r2, r3]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	b25c      	sxtb	r4, r3
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ffd5 	bl	80019ec <LookupKeyState>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	b25b      	sxtb	r3, r3
 8001a4c:	4323      	orrs	r3, r4
 8001a4e:	b25a      	sxtb	r2, r3
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	b2d1      	uxtb	r1, r2
 8001a54:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <KeyScan+0x7c>)
 8001a56:	54d1      	strb	r1, [r2, r3]

		if ((KeyBuffer[j] | 0xf0) == 0xff) {
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4a11      	ldr	r2, [pc, #68]	; (8001aa0 <KeyScan+0x7c>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	f063 030f 	orn	r3, r3, #15
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2bff      	cmp	r3, #255	; 0xff
 8001a66:	d104      	bne.n	8001a72 <KeyScan+0x4e>
			KeyStates[j] = 1;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	; (8001aa4 <KeyScan+0x80>)
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	54d1      	strb	r1, [r2, r3]
 8001a70:	e00b      	b.n	8001a8a <KeyScan+0x66>
		} else if ((KeyBuffer[j] | 0xf0) == 0xf0) {
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <KeyScan+0x7c>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	f063 030f 	orn	r3, r3, #15
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2bf0      	cmp	r3, #240	; 0xf0
 8001a80:	d103      	bne.n	8001a8a <KeyScan+0x66>
			KeyStates[j] = 0;
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <KeyScan+0x80>)
 8001a86:	2100      	movs	r1, #0
 8001a88:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < 4; j++) {
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	71fb      	strb	r3, [r7, #7]
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d9cc      	bls.n	8001a30 <KeyScan+0xc>
		}
	}
}
 8001a96:	bf00      	nop
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd90      	pop	{r4, r7, pc}
 8001aa0:	200000a8 	.word	0x200000a8
 8001aa4:	200000ac 	.word	0x200000ac

08001aa8 <GetButtonDown>:
	// To machine index
	buttonIndex--;
	return KeyStates[buttonIndex];
}

bool GetButtonDown(uint8_t buttonIndex) {
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
	// To machine index
	buttonIndex--;
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	71fb      	strb	r3, [r7, #7]

	if(!KeyStates[buttonIndex]){
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <GetButtonDown+0x58>)
 8001abc:	5cd3      	ldrb	r3, [r2, r3]
 8001abe:	f083 0301 	eor.w	r3, r3, #1
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <GetButtonDown+0x28>
		KeysUsedToBeLow[buttonIndex] = true;
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	4a0e      	ldr	r2, [pc, #56]	; (8001b04 <GetButtonDown+0x5c>)
 8001acc:	2101      	movs	r1, #1
 8001ace:	54d1      	strb	r1, [r2, r3]
	}

	if (KeyStates[buttonIndex] && KeysUsedToBeLow[buttonIndex]) {
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	4a0b      	ldr	r2, [pc, #44]	; (8001b00 <GetButtonDown+0x58>)
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00a      	beq.n	8001af0 <GetButtonDown+0x48>
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	4a09      	ldr	r2, [pc, #36]	; (8001b04 <GetButtonDown+0x5c>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <GetButtonDown+0x48>
		KeysUsedToBeLow[buttonIndex] = false;
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <GetButtonDown+0x5c>)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	54d1      	strb	r1, [r2, r3]
		return 1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <GetButtonDown+0x4a>
	}
	return 0;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	200000ac 	.word	0x200000ac
 8001b04:	200000b0 	.word	0x200000b0

08001b08 <IsOverlapping>:
 */

#include "gamelogic.h"

bool IsOverlapping(short x1, short y1, short x2, short y2, short x3, short y3,
		short x4, short y4) {
 8001b08:	b490      	push	{r4, r7}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4604      	mov	r4, r0
 8001b10:	4608      	mov	r0, r1
 8001b12:	4611      	mov	r1, r2
 8001b14:	461a      	mov	r2, r3
 8001b16:	4623      	mov	r3, r4
 8001b18:	80fb      	strh	r3, [r7, #6]
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80bb      	strh	r3, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	807b      	strh	r3, [r7, #2]
 8001b22:	4613      	mov	r3, r2
 8001b24:	803b      	strh	r3, [r7, #0]
	if (x1 > x4 || x3 > x2 || y1 > y4 || y3 > y2) {
 8001b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b2a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	dc11      	bgt.n	8001b56 <IsOverlapping+0x4e>
 8001b32:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001b36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dc0b      	bgt.n	8001b56 <IsOverlapping+0x4e>
 8001b3e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b42:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dc05      	bgt.n	8001b56 <IsOverlapping+0x4e>
 8001b4a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b4e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	dd01      	ble.n	8001b5a <IsOverlapping+0x52>
		return false;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e000      	b.n	8001b5c <IsOverlapping+0x54>
	}
	return true;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc90      	pop	{r4, r7}
 8001b64:	4770      	bx	lr

08001b66 <IsFadedOutOfScene>:

bool IsFadedOutOfScene(GameObj *obj) {
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
	if (obj->x + obj->width * 8 < 0) {
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7b1b      	ldrb	r3, [r3, #12]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	d501      	bpl.n	8001b94 <IsFadedOutOfScene+0x2e>
		return true;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <IsFadedOutOfScene+0x30>
	} else {
		return false;
 8001b94:	2300      	movs	r3, #0
	}
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <Append>:

// Append buffer in loop, if buffers are all occupied, use the first buffer
GameObj* Append(GameObj *header, uint8_t *bmp, short xPos, short yPos) {
 8001ba2:	b480      	push	{r7}
 8001ba4:	b087      	sub	sp, #28
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	4611      	mov	r1, r2
 8001bae:	461a      	mov	r2, r3
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	80fb      	strh	r3, [r7, #6]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	80bb      	strh	r3, [r7, #4]
	GameObj *ptr = header;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	617b      	str	r3, [r7, #20]

	// If the current pointer is occupied, look for the next pos
	while (ptr->full) {
 8001bbc:	e030      	b.n	8001c20 <Append+0x7e>
		ptr = ptr->next;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	617b      	str	r3, [r7, #20]
		// Have cycled for a whole loop
		if (ptr == header) {
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d129      	bne.n	8001c20 <Append+0x7e>
			ptr->bmp = bmp;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	601a      	str	r2, [r3, #0]
			ptr->x = xPos;
 8001bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd6:	ee07 3a90 	vmov	s15, r3
 8001bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	edc3 7a01 	vstr	s15, [r3, #4]
			ptr->y = yPos;
 8001be4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001be8:	ee07 3a90 	vmov	s15, r3
 8001bec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	edc3 7a02 	vstr	s15, [r3, #8]
			ptr->width = header->width;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	7b1a      	ldrb	r2, [r3, #12]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	731a      	strb	r2, [r3, #12]
			ptr->height = header->height;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	7b5a      	ldrb	r2, [r3, #13]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	735a      	strb	r2, [r3, #13]
			ptr->size = header->size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	7b9a      	ldrb	r2, [r3, #14]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	739a      	strb	r2, [r3, #14]
			ptr->index = 0;
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2200      	movs	r2, #0
 8001c12:	73da      	strb	r2, [r3, #15]
			ptr->full = 1;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2201      	movs	r2, #1
 8001c18:	741a      	strb	r2, [r3, #16]
			return header->next;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	e02b      	b.n	8001c78 <Append+0xd6>
	while (ptr->full) {
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	7c1b      	ldrb	r3, [r3, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ca      	bne.n	8001bbe <Append+0x1c>
		}
	}

	ptr->bmp = bmp;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	601a      	str	r2, [r3, #0]
	ptr->x = xPos;
 8001c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	edc3 7a01 	vstr	s15, [r3, #4]
	ptr->y = yPos;
 8001c40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	edc3 7a02 	vstr	s15, [r3, #8]
	ptr->width = header->width;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	7b1a      	ldrb	r2, [r3, #12]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	731a      	strb	r2, [r3, #12]
	ptr->height = header->height;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	7b5a      	ldrb	r2, [r3, #13]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	735a      	strb	r2, [r3, #13]
	ptr->size = header->size;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	7b9a      	ldrb	r2, [r3, #14]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	739a      	strb	r2, [r3, #14]
	ptr->index = 0;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	73da      	strb	r2, [r3, #15]
	ptr->full = 1;
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2201      	movs	r2, #1
 8001c74:	741a      	strb	r2, [r3, #16]
	return header;
 8001c76:	68fb      	ldr	r3, [r7, #12]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	371c      	adds	r7, #28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <DisableAll>:
			return;
	}
}

// Set all buffers to empty
void DisableAll(GameObj *header) {
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	GameObj *ptr = header;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]

	// If the current pointer is occupied, look for the next pos
	for (;;) {
		ptr->full = 0;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	741a      	strb	r2, [r3, #16]
		ptr = ptr->next;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	60fb      	str	r3, [r7, #12]

		// Have cycled for a whole loop
		if (ptr == header)
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d000      	beq.n	8001ca6 <DisableAll+0x22>
		ptr->full = 0;
 8001ca4:	e7f4      	b.n	8001c90 <DisableAll+0xc>
			return;
 8001ca6:	bf00      	nop
	}
}
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <GenLoopBuf>:

// Generate loop buffer given certain size
GameObj* GenLoopBuf(uint8_t size) {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
	GameObj *head = NULL, *cyclic = NULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
	head = (GameObj*) malloc(sizeof(GameObj));
 8001cc4:	2018      	movs	r0, #24
 8001cc6:	f003 f89b 	bl	8004e00 <malloc>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	60fb      	str	r3, [r7, #12]
	head->full = 0;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	741a      	strb	r2, [r3, #16]
	cyclic = head;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8001cd8:	2301      	movs	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	e00f      	b.n	8001cfe <GenLoopBuf+0x4c>
		GameObj *body = (GameObj*) malloc(sizeof(GameObj));
 8001cde:	2018      	movs	r0, #24
 8001ce0:	f003 f88e 	bl	8004e00 <malloc>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60bb      	str	r3, [r7, #8]
		body->full = 0;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2200      	movs	r2, #0
 8001cec:	741a      	strb	r2, [r3, #16]
		cyclic->next = body;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	615a      	str	r2, [r3, #20]
		cyclic = body;
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	dbeb      	blt.n	8001cde <GenLoopBuf+0x2c>
	}
	cyclic->next = head;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	615a      	str	r2, [r3, #20]
	return head;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HeaderInit>:

// Initializes the head pointer with the given values, n resets other buffers
void HeaderInit(GameObj *header, uint8_t *bmp, uint8_t width, uint8_t height, uint8_t size) {
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b086      	sub	sp, #24
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	4611      	mov	r1, r2
 8001d22:	461a      	mov	r2, r3
 8001d24:	460b      	mov	r3, r1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	71bb      	strb	r3, [r7, #6]
	GameObj *ptr = header;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	617b      	str	r3, [r7, #20]

	ptr->bmp = bmp;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	601a      	str	r2, [r3, #0]
	ptr->x = 0;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f04f 0200 	mov.w	r2, #0
 8001d3c:	605a      	str	r2, [r3, #4]
	ptr->y = 0;
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
	ptr->width = width;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	731a      	strb	r2, [r3, #12]
	ptr->height = height;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	79ba      	ldrb	r2, [r7, #6]
 8001d50:	735a      	strb	r2, [r3, #13]
	ptr->size = size;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d58:	739a      	strb	r2, [r3, #14]
	ptr->index = 0;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	73da      	strb	r2, [r3, #15]
	ptr->full = 0;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2200      	movs	r2, #0
 8001d64:	741a      	strb	r2, [r3, #16]

	DisableAll(ptr);
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8c 	bl	8001c84 <DisableAll>
}
 8001d6c:	bf00      	nop
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <ShiftX>:

// Shift all buffers and return the first active pointer
GameObj* ShiftX(GameObj *header, float byX) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	ed87 0a00 	vstr	s0, [r7]
	GameObj *ptr = header;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60fb      	str	r3, [r7, #12]

	// Cycle through all valid buffers once and apply the drift
	for (;;) {
		if (ptr->full) {
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	7c1b      	ldrb	r3, [r3, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <ShiftX+0x2c>
			ptr->x += byX;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d92:	edd7 7a00 	vldr	s15, [r7]
 8001d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		// Have cycled through the buffer
		if (!ptr->next->full || ptr->next == header)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	7c1b      	ldrb	r3, [r3, #16]
 8001da6:	f083 0301 	eor.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d108      	bne.n	8001dc2 <ShiftX+0x4e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d003      	beq.n	8001dc2 <ShiftX+0x4e>
			break;
		ptr = ptr->next;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	60fb      	str	r3, [r7, #12]
		if (ptr->full) {
 8001dc0:	e7e0      	b.n	8001d84 <ShiftX+0x10>
	}

	ptr = header;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	60fb      	str	r3, [r7, #12]
	// Return the first available buffer, if no buf is available, return header
	while (IsFadedOutOfScene(ptr)) {
 8001dc6:	e012      	b.n	8001dee <ShiftX+0x7a>
		ptr->full = 0;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	741a      	strb	r2, [r3, #16]
		if (!ptr->next->full || ptr->next == header) {
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	7c1b      	ldrb	r3, [r3, #16]
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <ShiftX+0x86>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d008      	beq.n	8001dfa <ShiftX+0x86>
			break;
		}
		ptr = ptr->next;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	60fb      	str	r3, [r7, #12]
	while (IsFadedOutOfScene(ptr)) {
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff feb9 	bl	8001b66 <IsFadedOutOfScene>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1e6      	bne.n	8001dc8 <ShiftX+0x54>
	}
	return ptr;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <Random>:

short Random(unsigned long seed, short lowerLim, short upperLim) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	807b      	strh	r3, [r7, #2]
 8001e10:	4613      	mov	r3, r2
 8001e12:	803b      	strh	r3, [r7, #0]
	srand(seed);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f003 f8e3 	bl	8004fe0 <srand>
	return rand() % (upperLim - lowerLim + 1) + lowerLim;
 8001e1a:	f003 f90f 	bl	800503c <rand>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001e24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e28:	1acb      	subs	r3, r1, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	fb92 f1f3 	sdiv	r1, r2, r3
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b21b      	sxth	r3, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4a:	b08d      	sub	sp, #52	; 0x34
 8001e4c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e4e:	f001 f8fb 	bl	8003048 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e52:	f000 fcd5 	bl	8002800 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e56:	f000 fe11 	bl	8002a7c <MX_GPIO_Init>
	MX_SPI1_Init();
 8001e5a:	f000 fd3b 	bl	80028d4 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001e5e:	f000 fd6f 	bl	8002940 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001e62:	f000 fdbf 	bl	80029e4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8001e66:	48b8      	ldr	r0, [pc, #736]	; (8002148 <main+0x300>)
 8001e68:	f002 fbaa 	bl	80045c0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001e6c:	48b7      	ldr	r0, [pc, #732]	; (800214c <main+0x304>)
 8001e6e:	f002 fba7 	bl	80045c0 <HAL_TIM_Base_Start_IT>

	// ALL GPIO AND BUSES MUST BE INITED BEFORE CALL THIS FUNCTION
	LCD_Init(&MemDisp, &hspi1, GPIOA, CS_Pin);
 8001e72:	2310      	movs	r3, #16
 8001e74:	4ab6      	ldr	r2, [pc, #728]	; (8002150 <main+0x308>)
 8001e76:	49b7      	ldr	r1, [pc, #732]	; (8002154 <main+0x30c>)
 8001e78:	48b7      	ldr	r0, [pc, #732]	; (8002158 <main+0x310>)
 8001e7a:	f7ff f8a9 	bl	8000fd0 <LCD_Init>

	GameObj *dinoHeader = GenLoopBuf(1);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff ff17 	bl	8001cb2 <GenLoopBuf>
 8001e84:	61f8      	str	r0, [r7, #28]
	GameObj *fireHeader = GenLoopBuf(1);
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff ff13 	bl	8001cb2 <GenLoopBuf>
 8001e8c:	61b8      	str	r0, [r7, #24]
	GameObj *groundFireHeader = GenLoopBuf(2);
 8001e8e:	2002      	movs	r0, #2
 8001e90:	f7ff ff0f 	bl	8001cb2 <GenLoopBuf>
 8001e94:	6178      	str	r0, [r7, #20]
	GameObj *cloudHeader = GenLoopBuf(2);
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7ff ff0b 	bl	8001cb2 <GenLoopBuf>
 8001e9c:	6138      	str	r0, [r7, #16]
	GameObj *plantHeader = GenLoopBuf(2);
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f7ff ff07 	bl	8001cb2 <GenLoopBuf>
 8001ea4:	60f8      	str	r0, [r7, #12]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		isJumping = 0, flipStatus = 0;
 8001ea6:	4bad      	ldr	r3, [pc, #692]	; (800215c <main+0x314>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	4bac      	ldr	r3, [pc, #688]	; (8002160 <main+0x318>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
		jumpTick = 0, nextPlantTickDel = 0, nextCloudTickDel = 0;
 8001eb2:	4bac      	ldr	r3, [pc, #688]	; (8002164 <main+0x31c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	801a      	strh	r2, [r3, #0]
 8001eb8:	4bab      	ldr	r3, [pc, #684]	; (8002168 <main+0x320>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	4bab      	ldr	r3, [pc, #684]	; (800216c <main+0x324>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	801a      	strh	r2, [r3, #0]
		plantSubTick = 0, cloudSubTick = 0;
 8001ec4:	4baa      	ldr	r3, [pc, #680]	; (8002170 <main+0x328>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	4baa      	ldr	r3, [pc, #680]	; (8002174 <main+0x32c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
		groundLength = 29;
 8001ed0:	4ba9      	ldr	r3, [pc, #676]	; (8002178 <main+0x330>)
 8001ed2:	221d      	movs	r2, #29
 8001ed4:	701a      	strb	r2, [r3, #0]
		tick = -JumpTickMax - 10;
 8001ed6:	eddf 7aa9 	vldr	s15, [pc, #676]	; 800217c <main+0x334>
 8001eda:	eef1 7a67 	vneg.f32	s15, s15
 8001ede:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ee2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 2a90 	vmov	r2, s15
 8001eee:	4ba4      	ldr	r3, [pc, #656]	; (8002180 <main+0x338>)
 8001ef0:	601a      	str	r2, [r3, #0]
		overallSpeed = 1;
 8001ef2:	4ba4      	ldr	r3, [pc, #656]	; (8002184 <main+0x33c>)
 8001ef4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ef8:	601a      	str	r2, [r3, #0]

		HeaderInit(dinoHeader, NULL, 3, 22, 7);
 8001efa:	2307      	movs	r3, #7
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2316      	movs	r3, #22
 8001f00:	2203      	movs	r2, #3
 8001f02:	2100      	movs	r1, #0
 8001f04:	69f8      	ldr	r0, [r7, #28]
 8001f06:	f7ff ff06 	bl	8001d16 <HeaderInit>
		HeaderInit(fireHeader, NULL, 9, 25, 2);
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	2319      	movs	r3, #25
 8001f10:	2209      	movs	r2, #9
 8001f12:	2100      	movs	r1, #0
 8001f14:	69b8      	ldr	r0, [r7, #24]
 8001f16:	f7ff fefe 	bl	8001d16 <HeaderInit>
		HeaderInit(cloudHeader, NULL, 6, 14, 1);
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	230e      	movs	r3, #14
 8001f20:	2206      	movs	r2, #6
 8001f22:	2100      	movs	r1, #0
 8001f24:	6938      	ldr	r0, [r7, #16]
 8001f26:	f7ff fef6 	bl	8001d16 <HeaderInit>
		HeaderInit(plantHeader, NULL, 2, 22, 7);
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2316      	movs	r3, #22
 8001f30:	2202      	movs	r2, #2
 8001f32:	2100      	movs	r1, #0
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff feee 	bl	8001d16 <HeaderInit>
		HeaderInit(groundFireHeader, NULL, 12, 7, 4);
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2307      	movs	r3, #7
 8001f40:	220c      	movs	r2, #12
 8001f42:	2100      	movs	r1, #0
 8001f44:	6978      	ldr	r0, [r7, #20]
 8001f46:	f7ff fee6 	bl	8001d16 <HeaderInit>

		dinoHeader = Append(dinoHeader, (uint8_t*) DinoAssets, 4,
 8001f4a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8002188 <main+0x340>
 8001f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f52:	ee17 3a90 	vmov	r3, s15
 8001f56:	b21b      	sxth	r3, r3
 8001f58:	2204      	movs	r2, #4
 8001f5a:	498c      	ldr	r1, [pc, #560]	; (800218c <main+0x344>)
 8001f5c:	69f8      	ldr	r0, [r7, #28]
 8001f5e:	f7ff fe20 	bl	8001ba2 <Append>
 8001f62:	61f8      	str	r0, [r7, #28]
				DinoGroundPos);
		fireHeader = Append(fireHeader, (uint8_t*) Fire, 24, 52);
 8001f64:	2334      	movs	r3, #52	; 0x34
 8001f66:	2218      	movs	r2, #24
 8001f68:	4989      	ldr	r1, [pc, #548]	; (8002190 <main+0x348>)
 8001f6a:	69b8      	ldr	r0, [r7, #24]
 8001f6c:	f7ff fe19 	bl	8001ba2 <Append>
 8001f70:	61b8      	str	r0, [r7, #24]

		LCD_Fill(flipStatus);
 8001f72:	4b7b      	ldr	r3, [pc, #492]	; (8002160 <main+0x318>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fc86 	bl	8001888 <LCD_Fill>
		LCD_DrawLine(77, 0, 29, DRAWMODE_ADD, flipStatus);
 8001f7c:	4b78      	ldr	r3, [pc, #480]	; (8002160 <main+0x318>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2300      	movs	r3, #0
 8001f84:	221d      	movs	r2, #29
 8001f86:	2100      	movs	r1, #0
 8001f88:	204d      	movs	r0, #77	; 0x4d
 8001f8a:	f7ff fb57 	bl	800163c <LCD_DrawLine>
		LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10, DRAWMODE_CULL,
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f94:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8001f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fa0:	edc7 7a01 	vstr	s15, [r7, #4]
 8001fa4:	793b      	ldrb	r3, [r7, #4]
 8001fa6:	b2d8      	uxtb	r0, r3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001fae:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fba:	4b69      	ldr	r3, [pc, #420]	; (8002160 <main+0x318>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	220a      	movs	r2, #10
 8001fc4:	ee17 1a90 	vmov	r1, s15
 8001fc8:	f7ff fb38 	bl	800163c <LCD_DrawLine>
				flipStatus);
		LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, DinoNormalStand,
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <main+0x318>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	69f8      	ldr	r0, [r7, #28]
 8001fda:	f7ff f931 	bl	8001240 <LCD_LoadObjs>
				flipStatus);
		LCD_Print("dino\tcan\trun\nreal\tfast!", 2, 4, DRAWMODE_ADD,
 8001fde:	4b60      	ldr	r3, [pc, #384]	; (8002160 <main+0x318>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	9301      	str	r3, [sp, #4]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	2204      	movs	r2, #4
 8001fec:	2102      	movs	r1, #2
 8001fee:	4869      	ldr	r0, [pc, #420]	; (8002194 <main+0x34c>)
 8001ff0:	f7ff fc62 	bl	80018b8 <LCD_Print>
		REPEATMODE_NONE, flipStatus);
		LCD_Print("\t\t\t\tdev\tbuild", 2, 86, DRAWMODE_ADD,
 8001ff4:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <main+0x318>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	2256      	movs	r2, #86	; 0x56
 8002002:	2102      	movs	r1, #2
 8002004:	4864      	ldr	r0, [pc, #400]	; (8002198 <main+0x350>)
 8002006:	f7ff fc57 	bl	80018b8 <LCD_Print>
		REPEATMODE_NONE, flipStatus);

		while (!GetButtonDown(JUMP_BUTTON))
 800200a:	e002      	b.n	8002012 <main+0x1ca>
			LCD_UpdateFull(&MemDisp);
 800200c:	4852      	ldr	r0, [pc, #328]	; (8002158 <main+0x310>)
 800200e:	f7ff f841 	bl	8001094 <LCD_UpdateFull>
		while (!GetButtonDown(JUMP_BUTTON))
 8002012:	2004      	movs	r0, #4
 8002014:	f7ff fd48 	bl	8001aa8 <GetButtonDown>
 8002018:	4603      	mov	r3, r0
 800201a:	f083 0301 	eor.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1f3      	bne.n	800200c <main+0x1c4>
		isJumping = 1;
 8002024:	4b4d      	ldr	r3, [pc, #308]	; (800215c <main+0x314>)
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]

		/// THE TICK LOOP
		while (1) {
			// Day and night invertion
			flipStatus = ((tick / 800) % 3 == 2) ? 1 : 0;
 800202a:	4b55      	ldr	r3, [pc, #340]	; (8002180 <main+0x338>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a5b      	ldr	r2, [pc, #364]	; (800219c <main+0x354>)
 8002030:	fb82 1203 	smull	r1, r2, r2, r3
 8002034:	1212      	asrs	r2, r2, #8
 8002036:	17db      	asrs	r3, r3, #31
 8002038:	1ad1      	subs	r1, r2, r3
 800203a:	4b59      	ldr	r3, [pc, #356]	; (80021a0 <main+0x358>)
 800203c:	fb83 3201 	smull	r3, r2, r3, r1
 8002040:	17cb      	asrs	r3, r1, #31
 8002042:	1ad2      	subs	r2, r2, r3
 8002044:	4613      	mov	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4413      	add	r3, r2
 800204a:	1aca      	subs	r2, r1, r3
 800204c:	2a02      	cmp	r2, #2
 800204e:	bf0c      	ite	eq
 8002050:	2301      	moveq	r3, #1
 8002052:	2300      	movne	r3, #0
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b42      	ldr	r3, [pc, #264]	; (8002160 <main+0x318>)
 8002058:	701a      	strb	r2, [r3, #0]

			if (GetButtonDown(JUMP_BUTTON) && !isJumping)
 800205a:	2004      	movs	r0, #4
 800205c:	f7ff fd24 	bl	8001aa8 <GetButtonDown>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <main+0x232>
 8002066:	4b3d      	ldr	r3, [pc, #244]	; (800215c <main+0x314>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	f083 0301 	eor.w	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d002      	beq.n	800207a <main+0x232>
				isJumping = 1;
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <main+0x314>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]

			dinoVerticalMovement = DinoGroundPos;
 800207a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002188 <main+0x340>
 800207e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002082:	ee17 3a90 	vmov	r3, s15
 8002086:	b21a      	sxth	r2, r3
 8002088:	4b46      	ldr	r3, [pc, #280]	; (80021a4 <main+0x35c>)
 800208a:	801a      	strh	r2, [r3, #0]
			if (isJumping) {
 800208c:	4b33      	ldr	r3, [pc, #204]	; (800215c <main+0x314>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 8091 	beq.w	80021b8 <main+0x370>
				if (jumpTick < JumpTickMax / overallSpeed - 1) {
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <main+0x31c>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	ee07 3a90 	vmov	s15, r3
 800209e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a2:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800217c <main+0x334>
 80020a6:	4b37      	ldr	r3, [pc, #220]	; (8002184 <main+0x33c>)
 80020a8:	edd3 6a00 	vldr	s13, [r3]
 80020ac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80020b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80020b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c0:	d574      	bpl.n	80021ac <main+0x364>
					jumpTick++;
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <main+0x31c>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b26      	ldr	r3, [pc, #152]	; (8002164 <main+0x31c>)
 80020cc:	801a      	strh	r2, [r3, #0]
					dinoVerticalMovement = jumpTick
							* (jumpTick - JumpTickMax / overallSpeed)
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <main+0x31c>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020da:	4b22      	ldr	r3, [pc, #136]	; (8002164 <main+0x31c>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80020e6:	eddf 5a25 	vldr	s11, [pc, #148]	; 800217c <main+0x334>
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <main+0x33c>)
 80020ec:	ed93 6a00 	vldr	s12, [r3]
 80020f0:	eec5 7a86 	vdiv.f32	s15, s11, s12
 80020f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80020f8:	ee27 7a27 	vmul.f32	s14, s14, s15
							* (4
									/ ((JumpTickMax / overallSpeed)
 80020fc:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 800217c <main+0x334>
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <main+0x33c>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	eec6 6a27 	vdiv.f32	s13, s12, s15
											* (JumpTickMax / overallSpeed)))
 800210a:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800217c <main+0x334>
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <main+0x33c>)
 8002110:	ed93 6a00 	vldr	s12, [r3]
 8002114:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002118:	ee66 6aa7 	vmul.f32	s13, s13, s15
									/ ((JumpTickMax / overallSpeed)
 800211c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8002120:	eec6 7a26 	vdiv.f32	s15, s12, s13
							* (4
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
							* DinoJumpHeight + DinoGroundPos;
 8002128:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80021a8 <main+0x360>
 800212c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002130:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002188 <main+0x340>
 8002134:	ee77 7a87 	vadd.f32	s15, s15, s14
					dinoVerticalMovement = jumpTick
 8002138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800213c:	ee17 3a90 	vmov	r3, s15
 8002140:	b21a      	sxth	r2, r3
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <main+0x35c>)
 8002144:	801a      	strh	r2, [r3, #0]
 8002146:	e037      	b.n	80021b8 <main+0x370>
 8002148:	2000010c 	.word	0x2000010c
 800214c:	20000154 	.word	0x20000154
 8002150:	40020000 	.word	0x40020000
 8002154:	200000b4 	.word	0x200000b4
 8002158:	2000019c 	.word	0x2000019c
 800215c:	200001a8 	.word	0x200001a8
 8002160:	200001a9 	.word	0x200001a9
 8002164:	200001aa 	.word	0x200001aa
 8002168:	200001ac 	.word	0x200001ac
 800216c:	200001ae 	.word	0x200001ae
 8002170:	200001b4 	.word	0x200001b4
 8002174:	200001b8 	.word	0x200001b8
 8002178:	200001c2 	.word	0x200001c2
 800217c:	42700000 	.word	0x42700000
 8002180:	200001b0 	.word	0x200001b0
 8002184:	200001c4 	.word	0x200001c4
 8002188:	42680000 	.word	0x42680000
 800218c:	080062b4 	.word	0x080062b4
 8002190:	08006484 	.word	0x08006484
 8002194:	08006100 	.word	0x08006100
 8002198:	08006118 	.word	0x08006118
 800219c:	51eb851f 	.word	0x51eb851f
 80021a0:	55555556 	.word	0x55555556
 80021a4:	200001c0 	.word	0x200001c0
 80021a8:	42200000 	.word	0x42200000
				} else {
					isJumping = 0;
 80021ac:	4b72      	ldr	r3, [pc, #456]	; (8002378 <main+0x530>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
					jumpTick = 0;
 80021b2:	4b72      	ldr	r3, [pc, #456]	; (800237c <main+0x534>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	801a      	strh	r2, [r3, #0]
				}
			}

			// Plant generation
			if (tick - plantSubTick == nextPlantTickDel) {
 80021b8:	4b71      	ldr	r3, [pc, #452]	; (8002380 <main+0x538>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b71      	ldr	r3, [pc, #452]	; (8002384 <main+0x53c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	4a71      	ldr	r2, [pc, #452]	; (8002388 <main+0x540>)
 80021c4:	8812      	ldrh	r2, [r2, #0]
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d115      	bne.n	80021f6 <main+0x3ae>
				plantHeader = Append(plantHeader, (uint8_t*) Plant1[0], 96, 59);
 80021ca:	233b      	movs	r3, #59	; 0x3b
 80021cc:	2260      	movs	r2, #96	; 0x60
 80021ce:	496f      	ldr	r1, [pc, #444]	; (800238c <main+0x544>)
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff fce6 	bl	8001ba2 <Append>
 80021d6:	60f8      	str	r0, [r7, #12]
				nextPlantTickDel = Random(tick, 80, 160);
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <main+0x538>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	22a0      	movs	r2, #160	; 0xa0
 80021de:	2150      	movs	r1, #80	; 0x50
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fe0f 	bl	8001e04 <Random>
 80021e6:	4603      	mov	r3, r0
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	4b67      	ldr	r3, [pc, #412]	; (8002388 <main+0x540>)
 80021ec:	801a      	strh	r2, [r3, #0]
				plantSubTick = tick;
 80021ee:	4b64      	ldr	r3, [pc, #400]	; (8002380 <main+0x538>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a64      	ldr	r2, [pc, #400]	; (8002384 <main+0x53c>)
 80021f4:	6013      	str	r3, [r2, #0]
			}
			// Cloud generation
			if (tick - cloudSubTick == nextCloudTickDel) {
 80021f6:	4b62      	ldr	r3, [pc, #392]	; (8002380 <main+0x538>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4b65      	ldr	r3, [pc, #404]	; (8002390 <main+0x548>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4a64      	ldr	r2, [pc, #400]	; (8002394 <main+0x54c>)
 8002202:	8812      	ldrh	r2, [r2, #0]
 8002204:	4293      	cmp	r3, r2
 8002206:	d11e      	bne.n	8002246 <main+0x3fe>
				cloudHeader = Append(cloudHeader, (uint8_t*) Cloud, 96,
 8002208:	4b5d      	ldr	r3, [pc, #372]	; (8002380 <main+0x538>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2214      	movs	r2, #20
 800220e:	210c      	movs	r1, #12
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fdf7 	bl	8001e04 <Random>
 8002216:	4603      	mov	r3, r0
 8002218:	2260      	movs	r2, #96	; 0x60
 800221a:	495f      	ldr	r1, [pc, #380]	; (8002398 <main+0x550>)
 800221c:	6938      	ldr	r0, [r7, #16]
 800221e:	f7ff fcc0 	bl	8001ba2 <Append>
 8002222:	6138      	str	r0, [r7, #16]
						Random(tick, 12, 20));
				nextCloudTickDel = Random(tick, 1200, 2000);
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <main+0x538>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800222c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff fde7 	bl	8001e04 <Random>
 8002236:	4603      	mov	r3, r0
 8002238:	b29a      	uxth	r2, r3
 800223a:	4b56      	ldr	r3, [pc, #344]	; (8002394 <main+0x54c>)
 800223c:	801a      	strh	r2, [r3, #0]
				cloudSubTick = tick;
 800223e:	4b50      	ldr	r3, [pc, #320]	; (8002380 <main+0x538>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a53      	ldr	r2, [pc, #332]	; (8002390 <main+0x548>)
 8002244:	6013      	str	r3, [r2, #0]
			}

			LCD_Fill(flipStatus);
 8002246:	4b55      	ldr	r3, [pc, #340]	; (800239c <main+0x554>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fb1c 	bl	8001888 <LCD_Fill>

			// Draw ground
			if (groundLength < 96) {
 8002250:	4b53      	ldr	r3, [pc, #332]	; (80023a0 <main+0x558>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b5f      	cmp	r3, #95	; 0x5f
 8002256:	d810      	bhi.n	800227a <main+0x432>
				LCD_DrawLine(77, 0, groundLength, DRAWMODE_ADD, flipStatus);
 8002258:	4b51      	ldr	r3, [pc, #324]	; (80023a0 <main+0x558>)
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	4b4f      	ldr	r3, [pc, #316]	; (800239c <main+0x554>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2300      	movs	r3, #0
 8002264:	2100      	movs	r1, #0
 8002266:	204d      	movs	r0, #77	; 0x4d
 8002268:	f7ff f9e8 	bl	800163c <LCD_DrawLine>
				groundLength++;
 800226c:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <main+0x558>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b4a      	ldr	r3, [pc, #296]	; (80023a0 <main+0x558>)
 8002276:	701a      	strb	r2, [r3, #0]
 8002278:	e008      	b.n	800228c <main+0x444>
			} else {
				// Reset canvas
				LCD_DrawLine(77, 0, 96, DRAWMODE_ADD, flipStatus);
 800227a:	4b48      	ldr	r3, [pc, #288]	; (800239c <main+0x554>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	2300      	movs	r3, #0
 8002282:	2260      	movs	r2, #96	; 0x60
 8002284:	2100      	movs	r1, #0
 8002286:	204d      	movs	r0, #77	; 0x4d
 8002288:	f7ff f9d8 	bl	800163c <LCD_DrawLine>
			}

			// Ground objs shift
			plantHeader = ShiftX(plantHeader, -1 * overallSpeed);
 800228c:	4b45      	ldr	r3, [pc, #276]	; (80023a4 <main+0x55c>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	eef1 7a67 	vneg.f32	s15, s15
 8002296:	eeb0 0a67 	vmov.f32	s0, s15
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff fd6a 	bl	8001d74 <ShiftX>
 80022a0:	60f8      	str	r0, [r7, #12]
			groundFireHeader = ShiftX(groundFireHeader, -1 * overallSpeed);
 80022a2:	4b40      	ldr	r3, [pc, #256]	; (80023a4 <main+0x55c>)
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	eef1 7a67 	vneg.f32	s15, s15
 80022ac:	eeb0 0a67 	vmov.f32	s0, s15
 80022b0:	6978      	ldr	r0, [r7, #20]
 80022b2:	f7ff fd5f 	bl	8001d74 <ShiftX>
 80022b6:	6178      	str	r0, [r7, #20]
			// Air objs shift
			cloudHeader = ShiftX(cloudHeader, -0.1 * overallSpeed);
 80022b8:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <main+0x55c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f94b 	bl	8000558 <__aeabi_f2d>
 80022c2:	a32b      	add	r3, pc, #172	; (adr r3, 8002370 <main+0x528>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe f99e 	bl	8000608 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fc7a 	bl	8000bcc <__aeabi_d2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	ee00 3a10 	vmov	s0, r3
 80022de:	6938      	ldr	r0, [r7, #16]
 80022e0:	f7ff fd48 	bl	8001d74 <ShiftX>
 80022e4:	6138      	str	r0, [r7, #16]

			dinoHeader->y = dinoVerticalMovement;
 80022e6:	4b30      	ldr	r3, [pc, #192]	; (80023a8 <main+0x560>)
 80022e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	edc3 7a02 	vstr	s15, [r3, #8]
			// Culling masks
			ptr = plantHeader;
 80022fa:	4a2c      	ldr	r2, [pc, #176]	; (80023ac <main+0x564>)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6013      	str	r3, [r2, #0]
			for (;;) {
				if (ptr->full) {
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <main+0x564>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	7c1b      	ldrb	r3, [r3, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01c      	beq.n	8002344 <main+0x4fc>
					for (uint8_t y = 71; y <= 77; y++) {
 800230a:	2347      	movs	r3, #71	; 0x47
 800230c:	72fb      	strb	r3, [r7, #11]
 800230e:	e016      	b.n	800233e <main+0x4f6>
						LCD_DrawLine(y, ptr->x + 2, 6, DRAWMODE_CULL,
 8002310:	4b26      	ldr	r3, [pc, #152]	; (80023ac <main+0x564>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	edd3 7a01 	vldr	s15, [r3, #4]
 8002318:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800231c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002324:	4b1d      	ldr	r3, [pc, #116]	; (800239c <main+0x554>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	7af8      	ldrb	r0, [r7, #11]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2301      	movs	r3, #1
 800232e:	2206      	movs	r2, #6
 8002330:	ee17 1a90 	vmov	r1, s15
 8002334:	f7ff f982 	bl	800163c <LCD_DrawLine>
					for (uint8_t y = 71; y <= 77; y++) {
 8002338:	7afb      	ldrb	r3, [r7, #11]
 800233a:	3301      	adds	r3, #1
 800233c:	72fb      	strb	r3, [r7, #11]
 800233e:	7afb      	ldrb	r3, [r7, #11]
 8002340:	2b4d      	cmp	r3, #77	; 0x4d
 8002342:	d9e5      	bls.n	8002310 <main+0x4c8>
								flipStatus);
					}
				}
				// If looped through all / next buffer is empty
				if (!ptr->next->full || ptr->next == plantHeader) {
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <main+0x564>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	7c1b      	ldrb	r3, [r3, #16]
 800234c:	f083 0301 	eor.w	r3, r3, #1
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b00      	cmp	r3, #0
 8002354:	d12c      	bne.n	80023b0 <main+0x568>
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <main+0x564>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	429a      	cmp	r2, r3
 8002360:	d026      	beq.n	80023b0 <main+0x568>
					break;
				}
				ptr = ptr->next;
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <main+0x564>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	4a10      	ldr	r2, [pc, #64]	; (80023ac <main+0x564>)
 800236a:	6013      	str	r3, [r2, #0]
				if (ptr->full) {
 800236c:	e7c8      	b.n	8002300 <main+0x4b8>
 800236e:	bf00      	nop
 8002370:	9999999a 	.word	0x9999999a
 8002374:	bfb99999 	.word	0xbfb99999
 8002378:	200001a8 	.word	0x200001a8
 800237c:	200001aa 	.word	0x200001aa
 8002380:	200001b0 	.word	0x200001b0
 8002384:	200001b4 	.word	0x200001b4
 8002388:	200001ac 	.word	0x200001ac
 800238c:	08006180 	.word	0x08006180
 8002390:	200001b8 	.word	0x200001b8
 8002394:	200001ae 	.word	0x200001ae
 8002398:	0800612c 	.word	0x0800612c
 800239c:	200001a9 	.word	0x200001a9
 80023a0:	200001c2 	.word	0x200001c2
 80023a4:	200001c4 	.word	0x200001c4
 80023a8:	200001c0 	.word	0x200001c0
 80023ac:	200001c8 	.word	0x200001c8
			}
			LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10,
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80023b6:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80023ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80023c6:	793b      	ldrb	r3, [r7, #4]
 80023c8:	b2d8      	uxtb	r0, r3
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80023d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023dc:	4baf      	ldr	r3, [pc, #700]	; (800269c <main+0x854>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	220a      	movs	r2, #10
 80023e6:	ee17 1a90 	vmov	r1, s15
 80023ea:	f7ff f927 	bl	800163c <LCD_DrawLine>
			DRAWMODE_CULL, flipStatus);

			// Render fire
			if (!isJumping) {
 80023ee:	4bac      	ldr	r3, [pc, #688]	; (80026a0 <main+0x858>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	f083 0301 	eor.w	r3, r3, #1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d010      	beq.n	800241e <main+0x5d6>
				if (GetButtonDown(FIRE_BUTTON)) {
 80023fc:	2003      	movs	r0, #3
 80023fe:	f7ff fb53 	bl	8001aa8 <GetButtonDown>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00a      	beq.n	800241e <main+0x5d6>
					fireSubTick = fireTickLength;
 8002408:	2314      	movs	r3, #20
 800240a:	461a      	mov	r2, r3
 800240c:	4ba5      	ldr	r3, [pc, #660]	; (80026a4 <main+0x85c>)
 800240e:	601a      	str	r2, [r3, #0]
					groundFireHeader = Append(groundFireHeader, NULL, 57, 70);
 8002410:	2346      	movs	r3, #70	; 0x46
 8002412:	2239      	movs	r2, #57	; 0x39
 8002414:	2100      	movs	r1, #0
 8002416:	6978      	ldr	r0, [r7, #20]
 8002418:	f7ff fbc3 	bl	8001ba2 <Append>
 800241c:	6178      	str	r0, [r7, #20]
				}
			}

			if (fireSubTick > 0) {
 800241e:	4ba1      	ldr	r3, [pc, #644]	; (80026a4 <main+0x85c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	dd29      	ble.n	800247a <main+0x632>
				fireSubTick--;
 8002426:	4b9f      	ldr	r3, [pc, #636]	; (80026a4 <main+0x85c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3b01      	subs	r3, #1
 800242c:	4a9d      	ldr	r2, [pc, #628]	; (80026a4 <main+0x85c>)
 800242e:	6013      	str	r3, [r2, #0]

				if (!isJumping) {
 8002430:	4b9b      	ldr	r3, [pc, #620]	; (80026a0 <main+0x858>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	f083 0301 	eor.w	r3, r3, #1
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d01d      	beq.n	800247a <main+0x632>
					LCD_LoadObjs(fireHeader, DRAWMODE_ADD, REPEATMODE_NONE,
							((fireTickLength - fireSubTick)
 800243e:	2314      	movs	r3, #20
 8002440:	4a98      	ldr	r2, [pc, #608]	; (80026a4 <main+0x85c>)
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	1a9b      	subs	r3, r3, r2
									/ (int) (12 / overallSpeed)) % 2,
 8002446:	4a98      	ldr	r2, [pc, #608]	; (80026a8 <main+0x860>)
 8002448:	ed92 7a00 	vldr	s14, [r2]
 800244c:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8002450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002458:	ee17 2a90 	vmov	r2, s15
 800245c:	fbb3 f3f2 	udiv	r3, r3, r2
					LCD_LoadObjs(fireHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b8c      	ldr	r3, [pc, #560]	; (800269c <main+0x854>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	4613      	mov	r3, r2
 8002470:	2200      	movs	r2, #0
 8002472:	2100      	movs	r1, #0
 8002474:	69b8      	ldr	r0, [r7, #24]
 8002476:	f7fe fee3 	bl	8001240 <LCD_LoadObjs>
							flipStatus);
				}
			}

			LCD_LoadObjs(groundFireHeader, DRAWMODE_ADD, REPEATMODE_NONE,
					(tick / (int) (16 / overallSpeed)) % 4, flipStatus);
 800247a:	4b8c      	ldr	r3, [pc, #560]	; (80026ac <main+0x864>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a8a      	ldr	r2, [pc, #552]	; (80026a8 <main+0x860>)
 8002480:	ed92 7a00 	vldr	s14, [r2]
 8002484:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800248c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002490:	ee17 2a90 	vmov	r2, s15
 8002494:	fb93 f3f2 	sdiv	r3, r3, r2
 8002498:	425a      	negs	r2, r3
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	f002 0203 	and.w	r2, r2, #3
 80024a2:	bf58      	it	pl
 80024a4:	4253      	negpl	r3, r2
			LCD_LoadObjs(groundFireHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b7c      	ldr	r3, [pc, #496]	; (800269c <main+0x854>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	4613      	mov	r3, r2
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	6978      	ldr	r0, [r7, #20]
 80024b6:	f7fe fec3 	bl	8001240 <LCD_LoadObjs>

			LCD_LoadObjs(plantHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80024ba:	4b78      	ldr	r3, [pc, #480]	; (800269c <main+0x854>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f7fe feba 	bl	8001240 <LCD_LoadObjs>
					PlantNormal, flipStatus);

			LCD_LoadObjs(cloudHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80024cc:	4b73      	ldr	r3, [pc, #460]	; (800269c <main+0x854>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2300      	movs	r3, #0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	6938      	ldr	r0, [r7, #16]
 80024da:	f7fe feb1 	bl	8001240 <LCD_LoadObjs>
			CloudNormal, flipStatus);

			// Loop through plants, check death
			ptr = plantHeader;
 80024de:	4a74      	ldr	r2, [pc, #464]	; (80026b0 <main+0x868>)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6013      	str	r3, [r2, #0]
			for (;;) {
				if (ptr->full) {
 80024e4:	4b72      	ldr	r3, [pc, #456]	; (80026b0 <main+0x868>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	7c1b      	ldrb	r3, [r3, #16]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d056      	beq.n	800259c <main+0x754>
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80024f4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80024f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002500:	ee17 3a90 	vmov	r3, s15
 8002504:	b218      	sxth	r0, r3
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	edd3 7a02 	vldr	s15, [r3, #8]
 800250c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002510:	ee17 3a90 	vmov	r3, s15
 8002514:	b219      	sxth	r1, r3
							dinoHeader->x + 23 - 7, dinoHeader->y + 21 - 4,
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	edd3 7a01 	vldr	s15, [r3, #4]
 800251c:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002520:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002524:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8002528:	ee77 7ac7 	vsub.f32	s15, s15, s14
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 800252c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002530:	ee17 3a90 	vmov	r3, s15
 8002534:	b21c      	sxth	r4, r3
							dinoHeader->x + 23 - 7, dinoHeader->y + 21 - 4,
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	edd3 7a02 	vldr	s15, [r3, #8]
 800253c:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8002540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002544:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002548:	ee77 7ac7 	vsub.f32	s15, s15, s14
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 800254c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002550:	ee17 3a90 	vmov	r3, s15
 8002554:	b21d      	sxth	r5, r3
							ptr->x, 59, ptr->x + 9, 59 + 21)) {
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <main+0x868>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	edd3 7a01 	vldr	s15, [r3, #4]
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 800255e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002562:	ee17 3a90 	vmov	r3, s15
 8002566:	b21b      	sxth	r3, r3
							ptr->x, 59, ptr->x + 9, 59 + 21)) {
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <main+0x868>)
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	edd2 7a01 	vldr	s15, [r2, #4]
 8002570:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002574:	ee77 7a87 	vadd.f32	s15, s15, s14
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002578:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800257c:	ee17 2a90 	vmov	r2, s15
 8002580:	b212      	sxth	r2, r2
 8002582:	2650      	movs	r6, #80	; 0x50
 8002584:	9603      	str	r6, [sp, #12]
 8002586:	9202      	str	r2, [sp, #8]
 8002588:	223b      	movs	r2, #59	; 0x3b
 800258a:	9201      	str	r2, [sp, #4]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	462b      	mov	r3, r5
 8002590:	4622      	mov	r2, r4
 8002592:	f7ff fab9 	bl	8001b08 <IsOverlapping>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d14b      	bne.n	8002634 <main+0x7ec>
						goto Dead;
					}
				}
				// If looped through all / next buffer is empty
				if (!ptr->next->full || ptr->next == plantHeader) {
 800259c:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <main+0x868>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	7c1b      	ldrb	r3, [r3, #16]
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d10b      	bne.n	80025c6 <main+0x77e>
 80025ae:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <main+0x868>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d005      	beq.n	80025c6 <main+0x77e>
					break;
				}
				ptr = ptr->next;
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <main+0x868>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <main+0x868>)
 80025c2:	6013      	str	r3, [r2, #0]
				if (ptr->full) {
 80025c4:	e78e      	b.n	80024e4 <main+0x69c>
//				ptr = ptr->next;
//			}

// Render dino!
// Dino is jumping
			if (isJumping) {
 80025c6:	4b36      	ldr	r3, [pc, #216]	; (80026a0 <main+0x858>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <main+0x79a>
				LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80025ce:	4b33      	ldr	r3, [pc, #204]	; (800269c <main+0x854>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	69f8      	ldr	r0, [r7, #28]
 80025dc:	f7fe fe30 	bl	8001240 <LCD_LoadObjs>
 80025e0:	e01f      	b.n	8002622 <main+0x7da>
//						(tick / (int) (12 / overallSpeed)) % 2 + 1, flipStatus);
//			}
			// Dino is running normally
			else {
				LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE,
						(tick / (int) (12 / overallSpeed)) % 2 + 1, flipStatus);
 80025e2:	4b32      	ldr	r3, [pc, #200]	; (80026ac <main+0x864>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <main+0x860>)
 80025e8:	ed92 7a00 	vldr	s14, [r2]
 80025ec:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 80025f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f8:	ee17 2a90 	vmov	r2, s15
 80025fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	bfb8      	it	lt
 8002608:	425b      	neglt	r3, r3
				LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b22      	ldr	r3, [pc, #136]	; (800269c <main+0x854>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	69f8      	ldr	r0, [r7, #28]
 800261e:	f7fe fe0f 	bl	8001240 <LCD_LoadObjs>
			}

			tick++;
 8002622:	4b22      	ldr	r3, [pc, #136]	; (80026ac <main+0x864>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3301      	adds	r3, #1
 8002628:	4a20      	ldr	r2, [pc, #128]	; (80026ac <main+0x864>)
 800262a:	6013      	str	r3, [r2, #0]
			LCD_UpdateFull(&MemDisp);
 800262c:	4821      	ldr	r0, [pc, #132]	; (80026b4 <main+0x86c>)
 800262e:	f7fe fd31 	bl	8001094 <LCD_UpdateFull>
			flipStatus = ((tick / 800) % 3 == 2) ? 1 : 0;
 8002632:	e4fa      	b.n	800202a <main+0x1e2>
						goto Dead;
 8002634:	bf00      	nop
		}

		// Dead handler (outer loop)
		if (0) {
			Dead:
			LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10,
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	edd3 7a02 	vldr	s15, [r3, #8]
 800263c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8002640:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002648:	edc7 7a01 	vstr	s15, [r7, #4]
 800264c:	793b      	ldrb	r3, [r7, #4]
 800264e:	b2d8      	uxtb	r0, r3
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	edd3 7a01 	vldr	s15, [r3, #4]
 8002656:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800265a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800265e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <main+0x854>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	2301      	movs	r3, #1
 800266a:	220a      	movs	r2, #10
 800266c:	ee17 1a90 	vmov	r1, s15
 8002670:	f7fe ffe4 	bl	800163c <LCD_DrawLine>
			DRAWMODE_CULL, flipStatus);
			LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, DinoDead, flipStatus);
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <main+0x854>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2306      	movs	r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	2100      	movs	r1, #0
 8002680:	69f8      	ldr	r0, [r7, #28]
 8002682:	f7fe fddd 	bl	8001240 <LCD_LoadObjs>
			LCD_UpdateFull(&MemDisp);
 8002686:	480b      	ldr	r0, [pc, #44]	; (80026b4 <main+0x86c>)
 8002688:	f7fe fd04 	bl	8001094 <LCD_UpdateFull>

			HAL_Delay(400);
 800268c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002690:	f000 fd4c 	bl	800312c <HAL_Delay>

			// Flip screen
			for (uint8_t i = 0; i < 2; i++) {
 8002694:	2300      	movs	r3, #0
 8002696:	72bb      	strb	r3, [r7, #10]
 8002698:	e019      	b.n	80026ce <main+0x886>
 800269a:	bf00      	nop
 800269c:	200001a9 	.word	0x200001a9
 80026a0:	200001a8 	.word	0x200001a8
 80026a4:	200001bc 	.word	0x200001bc
 80026a8:	200001c4 	.word	0x200001c4
 80026ac:	200001b0 	.word	0x200001b0
 80026b0:	200001c8 	.word	0x200001c8
 80026b4:	2000019c 	.word	0x2000019c
				HAL_Delay(100);
 80026b8:	2064      	movs	r0, #100	; 0x64
 80026ba:	f000 fd37 	bl	800312c <HAL_Delay>
				LCD_Invert();
 80026be:	f7ff f8c1 	bl	8001844 <LCD_Invert>
				LCD_UpdateFull(&MemDisp);
 80026c2:	484b      	ldr	r0, [pc, #300]	; (80027f0 <main+0x9a8>)
 80026c4:	f7fe fce6 	bl	8001094 <LCD_UpdateFull>
			for (uint8_t i = 0; i < 2; i++) {
 80026c8:	7abb      	ldrb	r3, [r7, #10]
 80026ca:	3301      	adds	r3, #1
 80026cc:	72bb      	strb	r3, [r7, #10]
 80026ce:	7abb      	ldrb	r3, [r7, #10]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d9f1      	bls.n	80026b8 <main+0x870>
			}

			// Redraw Dino
			while (dinoHeader->y <= DinoGroundPos) {
 80026d4:	e045      	b.n	8002762 <main+0x91a>
				LCD_Fill(flipStatus);
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <main+0x9ac>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff f8d4 	bl	8001888 <LCD_Fill>
				LCD_DrawLine(77, 0, 96, DRAWMODE_ADD, flipStatus);
 80026e0:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <main+0x9ac>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2300      	movs	r3, #0
 80026e8:	2260      	movs	r2, #96	; 0x60
 80026ea:	2100      	movs	r1, #0
 80026ec:	204d      	movs	r0, #77	; 0x4d
 80026ee:	f7fe ffa5 	bl	800163c <LCD_DrawLine>
				LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10,
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80026fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002704:	edc7 7a01 	vstr	s15, [r7, #4]
 8002708:	793b      	ldrb	r3, [r7, #4]
 800270a:	b2d8      	uxtb	r0, r3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002712:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002716:	ee77 7a87 	vadd.f32	s15, s15, s14
 800271a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800271e:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <main+0x9ac>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	2301      	movs	r3, #1
 8002726:	220a      	movs	r2, #10
 8002728:	ee17 1a90 	vmov	r1, s15
 800272c:	f7fe ff86 	bl	800163c <LCD_DrawLine>
				DRAWMODE_CULL, flipStatus);
				LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <main+0x9ac>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2306      	movs	r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	2100      	movs	r1, #0
 800273c:	69f8      	ldr	r0, [r7, #28]
 800273e:	f7fe fd7f 	bl	8001240 <LCD_LoadObjs>
						DinoDead, flipStatus);
				HAL_Delay(5);
 8002742:	2005      	movs	r0, #5
 8002744:	f000 fcf2 	bl	800312c <HAL_Delay>
				LCD_UpdateFull(&MemDisp);
 8002748:	4829      	ldr	r0, [pc, #164]	; (80027f0 <main+0x9a8>)
 800274a:	f7fe fca3 	bl	8001094 <LCD_UpdateFull>
				dinoHeader->y++;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	edd3 7a02 	vldr	s15, [r3, #8]
 8002754:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002758:	ee77 7a87 	vadd.f32	s15, s15, s14
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	edc3 7a02 	vstr	s15, [r3, #8]
			while (dinoHeader->y <= DinoGroundPos) {
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	edd3 7a02 	vldr	s15, [r3, #8]
 8002768:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80027f8 <main+0x9b0>
 800276c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	d9af      	bls.n	80026d6 <main+0x88e>
			}

			for (uint8_t l = 96; l > 28; l--) {
 8002776:	2360      	movs	r3, #96	; 0x60
 8002778:	727b      	strb	r3, [r7, #9]
 800277a:	e034      	b.n	80027e6 <main+0x99e>
				uint8_t delayTime = ceil((float) (96 - l) * 8 / 67);
 800277c:	7a7b      	ldrb	r3, [r7, #9]
 800277e:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800278e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002792:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80027fc <main+0x9b4>
 8002796:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800279a:	ee16 0a90 	vmov	r0, s13
 800279e:	f7fd fedb 	bl	8000558 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	ec43 2b10 	vmov	d0, r2, r3
 80027aa:	f003 fb99 	bl	8005ee0 <ceil>
 80027ae:	ec53 2b10 	vmov	r2, r3, d0
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fe f9e9 	bl	8000b8c <__aeabi_d2uiz>
 80027ba:	4603      	mov	r3, r0
 80027bc:	723b      	strb	r3, [r7, #8]
				LCD_DrawLine(77, l, 1, DRAWMODE_CULL, flipStatus);
 80027be:	7a79      	ldrb	r1, [r7, #9]
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <main+0x9ac>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	2201      	movs	r2, #1
 80027ca:	204d      	movs	r0, #77	; 0x4d
 80027cc:	f7fe ff36 	bl	800163c <LCD_DrawLine>
				LCD_UpdateLine(&MemDisp, 77);
 80027d0:	214d      	movs	r1, #77	; 0x4d
 80027d2:	4807      	ldr	r0, [pc, #28]	; (80027f0 <main+0x9a8>)
 80027d4:	f7fe fcd0 	bl	8001178 <LCD_UpdateLine>
				HAL_Delay(delayTime);
 80027d8:	7a3b      	ldrb	r3, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fca6 	bl	800312c <HAL_Delay>
			for (uint8_t l = 96; l > 28; l--) {
 80027e0:	7a7b      	ldrb	r3, [r7, #9]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	727b      	strb	r3, [r7, #9]
 80027e6:	7a7b      	ldrb	r3, [r7, #9]
 80027e8:	2b1c      	cmp	r3, #28
 80027ea:	d8c7      	bhi.n	800277c <main+0x934>
		isJumping = 0, flipStatus = 0;
 80027ec:	f7ff bb5b 	b.w	8001ea6 <main+0x5e>
 80027f0:	2000019c 	.word	0x2000019c
 80027f4:	200001a9 	.word	0x200001a9
 80027f8:	42680000 	.word	0x42680000
 80027fc:	42860000 	.word	0x42860000

08002800 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b094      	sub	sp, #80	; 0x50
 8002804:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002806:	f107 0320 	add.w	r3, r7, #32
 800280a:	2230      	movs	r2, #48	; 0x30
 800280c:	2100      	movs	r1, #0
 800280e:	4618      	mov	r0, r3
 8002810:	f002 fafe 	bl	8004e10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002814:	f107 030c 	add.w	r3, r7, #12
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	4b28      	ldr	r3, [pc, #160]	; (80028cc <SystemClock_Config+0xcc>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <SystemClock_Config+0xcc>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	6413      	str	r3, [r2, #64]	; 0x40
 8002834:	4b25      	ldr	r3, [pc, #148]	; (80028cc <SystemClock_Config+0xcc>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <SystemClock_Config+0xd0>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800284c:	4a20      	ldr	r2, [pc, #128]	; (80028d0 <SystemClock_Config+0xd0>)
 800284e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002852:	6013      	str	r3, [r2, #0]
 8002854:	4b1e      	ldr	r3, [pc, #120]	; (80028d0 <SystemClock_Config+0xd0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002860:	2301      	movs	r3, #1
 8002862:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800286a:	2302      	movs	r3, #2
 800286c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800286e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002874:	2304      	movs	r3, #4
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 108;
 8002878:	236c      	movs	r3, #108	; 0x6c
 800287a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800287c:	2306      	movs	r3, #6
 800287e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002880:	2304      	movs	r3, #4
 8002882:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002884:	f107 0320 	add.w	r3, r7, #32
 8002888:	4618      	mov	r0, r3
 800288a:	f000 ff55 	bl	8003738 <HAL_RCC_OscConfig>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <SystemClock_Config+0x98>
		Error_Handler();
 8002894:	f000 f996 	bl	8002bc4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002898:	230f      	movs	r3, #15
 800289a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800289c:	2302      	movs	r3, #2
 800289e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	2101      	movs	r1, #1
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 f9b7 	bl	8003c28 <HAL_RCC_ClockConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <SystemClock_Config+0xc4>
		Error_Handler();
 80028c0:	f000 f980 	bl	8002bc4 <Error_Handler>
	}
}
 80028c4:	bf00      	nop
 80028c6:	3750      	adds	r7, #80	; 0x50
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40007000 	.word	0x40007000

080028d4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80028d8:	4b17      	ldr	r3, [pc, #92]	; (8002938 <MX_SPI1_Init+0x64>)
 80028da:	4a18      	ldr	r2, [pc, #96]	; (800293c <MX_SPI1_Init+0x68>)
 80028dc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <MX_SPI1_Init+0x64>)
 80028e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028e6:	4b14      	ldr	r3, [pc, #80]	; (8002938 <MX_SPI1_Init+0x64>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <MX_SPI1_Init+0x64>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <MX_SPI1_Init+0x64>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f8:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <MX_SPI1_Init+0x64>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80028fe:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <MX_SPI1_Init+0x64>)
 8002900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002904:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002906:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <MX_SPI1_Init+0x64>)
 8002908:	2218      	movs	r2, #24
 800290a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800290c:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <MX_SPI1_Init+0x64>)
 800290e:	2200      	movs	r2, #0
 8002910:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002912:	4b09      	ldr	r3, [pc, #36]	; (8002938 <MX_SPI1_Init+0x64>)
 8002914:	2200      	movs	r2, #0
 8002916:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002918:	4b07      	ldr	r3, [pc, #28]	; (8002938 <MX_SPI1_Init+0x64>)
 800291a:	2200      	movs	r2, #0
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <MX_SPI1_Init+0x64>)
 8002920:	220a      	movs	r2, #10
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002924:	4804      	ldr	r0, [pc, #16]	; (8002938 <MX_SPI1_Init+0x64>)
 8002926:	f001 fb6b 	bl	8004000 <HAL_SPI_Init>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002930:	f000 f948 	bl	8002bc4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002934:	bf00      	nop
 8002936:	bd80      	pop	{r7, pc}
 8002938:	200000b4 	.word	0x200000b4
 800293c:	40013000 	.word	0x40013000

08002940 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	2200      	movs	r2, #0
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002954:	463b      	mov	r3, r7
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <MX_TIM1_Init+0x9c>)
 800295e:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <MX_TIM1_Init+0xa0>)
 8002960:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 36000 - 1;
 8002962:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <MX_TIM1_Init+0x9c>)
 8002964:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002968:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <MX_TIM1_Init+0x9c>)
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 8002970:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <MX_TIM1_Init+0x9c>)
 8002972:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002976:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002978:	4b18      	ldr	r3, [pc, #96]	; (80029dc <MX_TIM1_Init+0x9c>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <MX_TIM1_Init+0x9c>)
 8002980:	2200      	movs	r2, #0
 8002982:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <MX_TIM1_Init+0x9c>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800298a:	4814      	ldr	r0, [pc, #80]	; (80029dc <MX_TIM1_Init+0x9c>)
 800298c:	f001 fdc8 	bl	8004520 <HAL_TIM_Base_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM1_Init+0x5a>
		Error_Handler();
 8002996:	f000 f915 	bl	8002bc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800299a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80029a0:	f107 0308 	add.w	r3, r7, #8
 80029a4:	4619      	mov	r1, r3
 80029a6:	480d      	ldr	r0, [pc, #52]	; (80029dc <MX_TIM1_Init+0x9c>)
 80029a8:	f001 ff74 	bl	8004894 <HAL_TIM_ConfigClockSource>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <MX_TIM1_Init+0x76>
		Error_Handler();
 80029b2:	f000 f907 	bl	8002bc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80029be:	463b      	mov	r3, r7
 80029c0:	4619      	mov	r1, r3
 80029c2:	4806      	ldr	r0, [pc, #24]	; (80029dc <MX_TIM1_Init+0x9c>)
 80029c4:	f002 f970 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 80029ce:	f000 f8f9 	bl	8002bc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2000010c 	.word	0x2000010c
 80029e0:	40010000 	.word	0x40010000

080029e4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80029f8:	463b      	mov	r3, r7
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002a00:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a06:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000 - 1;
 8002a08:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a0e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 100 - 1;
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a18:	2263      	movs	r2, #99	; 0x63
 8002a1a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002a28:	4813      	ldr	r0, [pc, #76]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a2a:	f001 fd79 	bl	8004520 <HAL_TIM_Base_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_TIM2_Init+0x54>
		Error_Handler();
 8002a34:	f000 f8c6 	bl	8002bc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	4619      	mov	r1, r3
 8002a44:	480c      	ldr	r0, [pc, #48]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a46:	f001 ff25 	bl	8004894 <HAL_TIM_ConfigClockSource>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_TIM2_Init+0x70>
		Error_Handler();
 8002a50:	f000 f8b8 	bl	8002bc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002a5c:	463b      	mov	r3, r7
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <MX_TIM2_Init+0x94>)
 8002a62:	f002 f921 	bl	8004ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM2_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8002a6c:	f000 f8aa 	bl	8002bc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002a70:	bf00      	nop
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000154 	.word	0x20000154

08002a7c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002a82:	f107 030c 	add.w	r3, r7, #12
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	4b36      	ldr	r3, [pc, #216]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a35      	ldr	r2, [pc, #212]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b33      	ldr	r3, [pc, #204]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	60bb      	str	r3, [r7, #8]
 8002aac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a2e      	ldr	r2, [pc, #184]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	4b28      	ldr	r3, [pc, #160]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <MX_GPIO_Init+0xf4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, CS_Pin | COMM_Pin, GPIO_PIN_RESET);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002aec:	4821      	ldr	r0, [pc, #132]	; (8002b74 <MX_GPIO_Init+0xf8>)
 8002aee:	f000 fdef 	bl	80036d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DISP_GPIO_Port, DISP_Pin, GPIO_PIN_SET);
 8002af2:	2201      	movs	r2, #1
 8002af4:	2140      	movs	r1, #64	; 0x40
 8002af6:	481f      	ldr	r0, [pc, #124]	; (8002b74 <MX_GPIO_Init+0xf8>)
 8002af8:	f000 fdea 	bl	80036d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, KEY1_LED_Pin | KEY4_LED_Pin, GPIO_PIN_SET);
 8002afc:	2201      	movs	r2, #1
 8002afe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002b02:	481d      	ldr	r0, [pc, #116]	; (8002b78 <MX_GPIO_Init+0xfc>)
 8002b04:	f000 fde4 	bl	80036d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, KEY2_LED_Pin | KEY3_LED_Pin, GPIO_PIN_RESET);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002b0e:	481a      	ldr	r0, [pc, #104]	; (8002b78 <MX_GPIO_Init+0xfc>)
 8002b10:	f000 fdde 	bl	80036d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : KEY1_Pin KEY2_Pin KEY3_Pin KEY4_Pin */
	GPIO_InitStruct.Pin = KEY1_Pin | KEY2_Pin | KEY3_Pin | KEY4_Pin;
 8002b14:	230f      	movs	r3, #15
 8002b16:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	4619      	mov	r1, r3
 8002b26:	4814      	ldr	r0, [pc, #80]	; (8002b78 <MX_GPIO_Init+0xfc>)
 8002b28:	f000 fc36 	bl	8003398 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_Pin DISP_Pin COMM_Pin */
	GPIO_InitStruct.Pin = CS_Pin | DISP_Pin | COMM_Pin;
 8002b2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002b30:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b32:	2301      	movs	r3, #1
 8002b34:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3e:	f107 030c 	add.w	r3, r7, #12
 8002b42:	4619      	mov	r1, r3
 8002b44:	480b      	ldr	r0, [pc, #44]	; (8002b74 <MX_GPIO_Init+0xf8>)
 8002b46:	f000 fc27 	bl	8003398 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY1_LED_Pin KEY2_LED_Pin KEY3_LED_Pin KEY4_LED_Pin */
	GPIO_InitStruct.Pin = KEY1_LED_Pin | KEY2_LED_Pin | KEY3_LED_Pin
 8002b4a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002b4e:	60fb      	str	r3, [r7, #12]
			| KEY4_LED_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b50:	2301      	movs	r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	4619      	mov	r1, r3
 8002b62:	4805      	ldr	r0, [pc, #20]	; (8002b78 <MX_GPIO_Init+0xfc>)
 8002b64:	f000 fc18 	bl	8003398 <HAL_GPIO_Init>

}
 8002b68:	bf00      	nop
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020800 	.word	0x40020800

08002b7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a0b      	ldr	r2, [pc, #44]	; (8002bb4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d104      	bne.n	8002b96 <HAL_TIM_PeriodElapsedCallback+0x1a>
		// fCom = 0.5Hz (min val)
		COMM_TOGGLE;
 8002b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b90:	4809      	ldr	r0, [pc, #36]	; (8002bb8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002b92:	f000 fdb6 	bl	8003702 <HAL_GPIO_TogglePin>
	}
	if (htim == &htim2) {
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a08      	ldr	r2, [pc, #32]	; (8002bbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d105      	bne.n	8002baa <HAL_TIM_PeriodElapsedCallback+0x2e>
		KEY2_LED_TOGGLE;
 8002b9e:	2180      	movs	r1, #128	; 0x80
 8002ba0:	4807      	ldr	r0, [pc, #28]	; (8002bc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002ba2:	f000 fdae 	bl	8003702 <HAL_GPIO_TogglePin>
		KeyScan();
 8002ba6:	f7fe ff3d 	bl	8001a24 <KeyScan>
	}
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	2000010c 	.word	0x2000010c
 8002bb8:	40020000 	.word	0x40020000
 8002bbc:	20000154 	.word	0x20000154
 8002bc0:	40020800 	.word	0x40020800

08002bc4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002bc8:	b672      	cpsid	i
}
 8002bca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002bcc:	e7fe      	b.n	8002bcc <Error_Handler+0x8>
	...

08002bd0 <FetchText>:
		0x0c, 0x60, 0x92, 0x00, 0xfe, 0x14, 0xc6, 0x38, 0x38, 0xc6, 0x0c, 0x10,
		0x7c, 0x30, 0xc6, 0x18, 0x00, 0xc6, 0x00, 0x10, 0x38, 0x70, 0xc6, 0x18,
		0x38, 0x7c, 0x00, 0x10, 0x10, 0x20, 0x7c, 0x18, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, };

void FetchText(uint8_t *TextBuf, char chr) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	70fb      	strb	r3, [r7, #3]
	uint8_t charSerialNum = -1;
 8002bdc:	23ff      	movs	r3, #255	; 0xff
 8002bde:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 96; i++) {
 8002be0:	2300      	movs	r3, #0
 8002be2:	73bb      	strb	r3, [r7, #14]
 8002be4:	e00b      	b.n	8002bfe <FetchText+0x2e>
		if (chr == CharList[i]) {
 8002be6:	7bbb      	ldrb	r3, [r7, #14]
 8002be8:	4a1b      	ldr	r2, [pc, #108]	; (8002c58 <FetchText+0x88>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d102      	bne.n	8002bf8 <FetchText+0x28>
			charSerialNum = i;
 8002bf2:	7bbb      	ldrb	r3, [r7, #14]
 8002bf4:	73fb      	strb	r3, [r7, #15]
			break;
 8002bf6:	e005      	b.n	8002c04 <FetchText+0x34>
	for (uint8_t i = 0; i < 96; i++) {
 8002bf8:	7bbb      	ldrb	r3, [r7, #14]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	73bb      	strb	r3, [r7, #14]
 8002bfe:	7bbb      	ldrb	r3, [r7, #14]
 8002c00:	2b5f      	cmp	r3, #95	; 0x5f
 8002c02:	d9f0      	bls.n	8002be6 <FetchText+0x16>
	if (charSerialNum == -1) {
		memset(TextBuf, 0x00, 8);
		return;
	}

	uint8_t charLookupX = charSerialNum % 8;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	72fb      	strb	r3, [r7, #11]
	uint8_t charLookupY = 8 * (charSerialNum / 8);
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	08db      	lsrs	r3, r3, #3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	72bb      	strb	r3, [r7, #10]
	uint8_t n = 0;
 8002c16:	2300      	movs	r3, #0
 8002c18:	737b      	strb	r3, [r7, #13]

	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 8002c1a:	7abb      	ldrb	r3, [r7, #10]
 8002c1c:	733b      	strb	r3, [r7, #12]
 8002c1e:	e011      	b.n	8002c44 <FetchText+0x74>
		TextBuf[n] = *((uint8_t*) PressStartStandard96 + y * 8 + charLookupX);
 8002c20:	7b3b      	ldrb	r3, [r7, #12]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	461a      	mov	r2, r3
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	4413      	add	r3, r2
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <FetchText+0x8c>)
 8002c2c:	441a      	add	r2, r3
 8002c2e:	7b7b      	ldrb	r3, [r7, #13]
 8002c30:	6879      	ldr	r1, [r7, #4]
 8002c32:	440b      	add	r3, r1
 8002c34:	7812      	ldrb	r2, [r2, #0]
 8002c36:	701a      	strb	r2, [r3, #0]
		n++;
 8002c38:	7b7b      	ldrb	r3, [r7, #13]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	737b      	strb	r3, [r7, #13]
	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 8002c3e:	7b3b      	ldrb	r3, [r7, #12]
 8002c40:	3301      	adds	r3, #1
 8002c42:	733b      	strb	r3, [r7, #12]
 8002c44:	7abb      	ldrb	r3, [r7, #10]
 8002c46:	1dda      	adds	r2, r3, #7
 8002c48:	7b3b      	ldrb	r3, [r7, #12]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dae8      	bge.n	8002c20 <FetchText+0x50>
	}
}
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	08006648 	.word	0x08006648
 8002c5c:	080066a8 	.word	0x080066a8

08002c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	607b      	str	r3, [r7, #4]
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_MspInit+0x4c>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	4a0f      	ldr	r2, [pc, #60]	; (8002cac <HAL_MspInit+0x4c>)
 8002c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c74:	6453      	str	r3, [r2, #68]	; 0x44
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <HAL_MspInit+0x4c>)
 8002c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_MspInit+0x4c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a08      	ldr	r2, [pc, #32]	; (8002cac <HAL_MspInit+0x4c>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_MspInit+0x4c>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	603b      	str	r3, [r7, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 0314 	add.w	r3, r7, #20
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a19      	ldr	r2, [pc, #100]	; (8002d34 <HAL_SPI_MspInit+0x84>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d12b      	bne.n	8002d2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <HAL_SPI_MspInit+0x88>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <HAL_SPI_MspInit+0x88>)
 8002cdc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_SPI_MspInit+0x88>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b11      	ldr	r3, [pc, #68]	; (8002d38 <HAL_SPI_MspInit+0x88>)
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <HAL_SPI_MspInit+0x88>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	; (8002d38 <HAL_SPI_MspInit+0x88>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d0a:	23a0      	movs	r3, #160	; 0xa0
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d16:	2303      	movs	r3, #3
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d1a:	2305      	movs	r3, #5
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	4805      	ldr	r0, [pc, #20]	; (8002d3c <HAL_SPI_MspInit+0x8c>)
 8002d26:	f000 fb37 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d2a:	bf00      	nop
 8002d2c:	3728      	adds	r7, #40	; 0x28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40013000 	.word	0x40013000
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40020000 	.word	0x40020000

08002d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_TIM_Base_MspInit+0x80>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d116      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6453      	str	r3, [r2, #68]	; 0x44
 8002d62:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2019      	movs	r0, #25
 8002d74:	f000 fad9 	bl	800332a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d78:	2019      	movs	r0, #25
 8002d7a:	f000 faf2 	bl	8003362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d7e:	e01a      	b.n	8002db6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d88:	d115      	bne.n	8002db6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6413      	str	r3, [r2, #64]	; 0x40
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	201c      	movs	r0, #28
 8002dac:	f000 fabd 	bl	800332a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002db0:	201c      	movs	r0, #28
 8002db2:	f000 fad6 	bl	8003362 <HAL_NVIC_EnableIRQ>
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	40023800 	.word	0x40023800

08002dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <NMI_Handler+0x4>

08002dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <HardFault_Handler+0x4>

08002dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <MemManage_Handler+0x4>

08002dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <BusFault_Handler+0x4>

08002de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <UsageFault_Handler+0x4>

08002de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e14:	f000 f96a 	bl	80030ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e20:	4802      	ldr	r0, [pc, #8]	; (8002e2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e22:	f001 fc2f 	bl	8004684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	2000010c 	.word	0x2000010c

08002e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e34:	4802      	ldr	r0, [pc, #8]	; (8002e40 <TIM2_IRQHandler+0x10>)
 8002e36:	f001 fc25 	bl	8004684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000154 	.word	0x20000154

08002e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
	return 1;
 8002e48:	2301      	movs	r3, #1
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <_kill>:

int _kill(int pid, int sig)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e5e:	f001 ffa5 	bl	8004dac <__errno>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2216      	movs	r2, #22
 8002e66:	601a      	str	r2, [r3, #0]
	return -1;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_exit>:

void _exit (int status)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ffe7 	bl	8002e54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e86:	e7fe      	b.n	8002e86 <_exit+0x12>

08002e88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	e00a      	b.n	8002eb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e9a:	f3af 8000 	nop.w
 8002e9e:	4601      	mov	r1, r0
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	60ba      	str	r2, [r7, #8]
 8002ea6:	b2ca      	uxtb	r2, r1
 8002ea8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3301      	adds	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	dbf0      	blt.n	8002e9a <_read+0x12>
	}

return len;
 8002eb8:	687b      	ldr	r3, [r7, #4]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	60f8      	str	r0, [r7, #12]
 8002eca:	60b9      	str	r1, [r7, #8]
 8002ecc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	e009      	b.n	8002ee8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	60ba      	str	r2, [r7, #8]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dbf1      	blt.n	8002ed4 <_write+0x12>
	}
	return len;
 8002ef0:	687b      	ldr	r3, [r7, #4]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <_close>:

int _close(int file)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
	return -1;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f22:	605a      	str	r2, [r3, #4]
	return 0;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <_isatty>:

int _isatty(int file)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
	return 1;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
	return 0;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
	...

08002f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f6c:	4a14      	ldr	r2, [pc, #80]	; (8002fc0 <_sbrk+0x5c>)
 8002f6e:	4b15      	ldr	r3, [pc, #84]	; (8002fc4 <_sbrk+0x60>)
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f78:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <_sbrk+0x64>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f80:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <_sbrk+0x64>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <_sbrk+0x68>)
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f86:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d207      	bcs.n	8002fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f94:	f001 ff0a 	bl	8004dac <__errno>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	e009      	b.n	8002fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002faa:	4b07      	ldr	r3, [pc, #28]	; (8002fc8 <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <_sbrk+0x64>)
 8002fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20010000 	.word	0x20010000
 8002fc4:	00000400 	.word	0x00000400
 8002fc8:	200001cc 	.word	0x200001cc
 8002fcc:	200001e8 	.word	0x200001e8

08002fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <SystemInit+0x20>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <SystemInit+0x20>)
 8002fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <Reset_Handler>:
 8002ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800302c <LoopFillZerobss+0x12>
 8002ff8:	480d      	ldr	r0, [pc, #52]	; (8003030 <LoopFillZerobss+0x16>)
 8002ffa:	490e      	ldr	r1, [pc, #56]	; (8003034 <LoopFillZerobss+0x1a>)
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <LoopFillZerobss+0x1e>)
 8002ffe:	2300      	movs	r3, #0
 8003000:	e002      	b.n	8003008 <LoopCopyDataInit>

08003002 <CopyDataInit>:
 8003002:	58d4      	ldr	r4, [r2, r3]
 8003004:	50c4      	str	r4, [r0, r3]
 8003006:	3304      	adds	r3, #4

08003008 <LoopCopyDataInit>:
 8003008:	18c4      	adds	r4, r0, r3
 800300a:	428c      	cmp	r4, r1
 800300c:	d3f9      	bcc.n	8003002 <CopyDataInit>
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <LoopFillZerobss+0x22>)
 8003010:	4c0b      	ldr	r4, [pc, #44]	; (8003040 <LoopFillZerobss+0x26>)
 8003012:	2300      	movs	r3, #0
 8003014:	e001      	b.n	800301a <LoopFillZerobss>

08003016 <FillZerobss>:
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	3204      	adds	r2, #4

0800301a <LoopFillZerobss>:
 800301a:	42a2      	cmp	r2, r4
 800301c:	d3fb      	bcc.n	8003016 <FillZerobss>
 800301e:	f7ff ffd7 	bl	8002fd0 <SystemInit>
 8003022:	f001 fec9 	bl	8004db8 <__libc_init_array>
 8003026:	f7fe ff0f 	bl	8001e48 <main>
 800302a:	4770      	bx	lr
 800302c:	20010000 	.word	0x20010000
 8003030:	20000000 	.word	0x20000000
 8003034:	20000078 	.word	0x20000078
 8003038:	08006b10 	.word	0x08006b10
 800303c:	20000078 	.word	0x20000078
 8003040:	200001e4 	.word	0x200001e4

08003044 <ADC_IRQHandler>:
 8003044:	e7fe      	b.n	8003044 <ADC_IRQHandler>
	...

08003048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <HAL_Init+0x40>)
 8003052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_Init+0x40>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_Init+0x40>)
 800305e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_Init+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <HAL_Init+0x40>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003070:	2003      	movs	r0, #3
 8003072:	f000 f94f 	bl	8003314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003076:	200f      	movs	r0, #15
 8003078:	f000 f808 	bl	800308c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800307c:	f7ff fdf0 	bl	8002c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00

0800308c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_InitTick+0x54>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_InitTick+0x58>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f967 	bl	800337e <HAL_SYSTICK_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00e      	b.n	80030d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b0f      	cmp	r3, #15
 80030be:	d80a      	bhi.n	80030d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c0:	2200      	movs	r2, #0
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f000 f92f 	bl	800332a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030cc:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <HAL_InitTick+0x5c>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e000      	b.n	80030d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000008 	.word	0x20000008
 80030e4:	20000010 	.word	0x20000010
 80030e8:	2000000c 	.word	0x2000000c

080030ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x20>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_IncTick+0x24>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4413      	add	r3, r2
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_IncTick+0x24>)
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000010 	.word	0x20000010
 8003110:	200001d0 	.word	0x200001d0

08003114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return uwTick;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_GetTick+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	200001d0 	.word	0x200001d0

0800312c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff ffee 	bl	8003114 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d005      	beq.n	8003152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_Delay+0x44>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003152:	bf00      	nop
 8003154:	f7ff ffde 	bl	8003114 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	429a      	cmp	r2, r3
 8003162:	d8f7      	bhi.n	8003154 <HAL_Delay+0x28>
  {
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000010 	.word	0x20000010

08003174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003184:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003190:	4013      	ands	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800319c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031a6:	4a04      	ldr	r2, [pc, #16]	; (80031b8 <__NVIC_SetPriorityGrouping+0x44>)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	60d3      	str	r3, [r2, #12]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <__NVIC_GetPriorityGrouping+0x18>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	0a1b      	lsrs	r3, r3, #8
 80031c6:	f003 0307 	and.w	r3, r3, #7
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	db0b      	blt.n	8003202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	f003 021f 	and.w	r2, r3, #31
 80031f0:	4907      	ldr	r1, [pc, #28]	; (8003210 <__NVIC_EnableIRQ+0x38>)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	095b      	lsrs	r3, r3, #5
 80031f8:	2001      	movs	r0, #1
 80031fa:	fa00 f202 	lsl.w	r2, r0, r2
 80031fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000e100 	.word	0xe000e100

08003214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	6039      	str	r1, [r7, #0]
 800321e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003224:	2b00      	cmp	r3, #0
 8003226:	db0a      	blt.n	800323e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	490c      	ldr	r1, [pc, #48]	; (8003260 <__NVIC_SetPriority+0x4c>)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	0112      	lsls	r2, r2, #4
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	440b      	add	r3, r1
 8003238:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800323c:	e00a      	b.n	8003254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	4908      	ldr	r1, [pc, #32]	; (8003264 <__NVIC_SetPriority+0x50>)
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	3b04      	subs	r3, #4
 800324c:	0112      	lsls	r2, r2, #4
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	440b      	add	r3, r1
 8003252:	761a      	strb	r2, [r3, #24]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000e100 	.word	0xe000e100
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f1c3 0307 	rsb	r3, r3, #7
 8003282:	2b04      	cmp	r3, #4
 8003284:	bf28      	it	cs
 8003286:	2304      	movcs	r3, #4
 8003288:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3304      	adds	r3, #4
 800328e:	2b06      	cmp	r3, #6
 8003290:	d902      	bls.n	8003298 <NVIC_EncodePriority+0x30>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	3b03      	subs	r3, #3
 8003296:	e000      	b.n	800329a <NVIC_EncodePriority+0x32>
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	f04f 32ff 	mov.w	r2, #4294967295
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	401a      	ands	r2, r3
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032b0:	f04f 31ff 	mov.w	r1, #4294967295
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	43d9      	mvns	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c0:	4313      	orrs	r3, r2
         );
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3724      	adds	r7, #36	; 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
	...

080032d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3b01      	subs	r3, #1
 80032dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e0:	d301      	bcc.n	80032e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00f      	b.n	8003306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032e6:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <SysTick_Config+0x40>)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ee:	210f      	movs	r1, #15
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	f7ff ff8e 	bl	8003214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <SysTick_Config+0x40>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032fe:	4b04      	ldr	r3, [pc, #16]	; (8003310 <SysTick_Config+0x40>)
 8003300:	2207      	movs	r2, #7
 8003302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	e000e010 	.word	0xe000e010

08003314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff ff29 	bl	8003174 <__NVIC_SetPriorityGrouping>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800333c:	f7ff ff3e 	bl	80031bc <__NVIC_GetPriorityGrouping>
 8003340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68b9      	ldr	r1, [r7, #8]
 8003346:	6978      	ldr	r0, [r7, #20]
 8003348:	f7ff ff8e 	bl	8003268 <NVIC_EncodePriority>
 800334c:	4602      	mov	r2, r0
 800334e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff ff5d 	bl	8003214 <__NVIC_SetPriority>
}
 800335a:	bf00      	nop
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800336c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff ff31 	bl	80031d8 <__NVIC_EnableIRQ>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b082      	sub	sp, #8
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff ffa2 	bl	80032d0 <SysTick_Config>
 800338c:	4603      	mov	r3, r0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e159      	b.n	8003668 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f040 8148 	bne.w	8003662 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d005      	beq.n	80033ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d130      	bne.n	800344c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2203      	movs	r2, #3
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4013      	ands	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0201 	and.w	r2, r3, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b03      	cmp	r3, #3
 8003456:	d017      	beq.n	8003488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	2203      	movs	r2, #3
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d123      	bne.n	80034dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08da      	lsrs	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80a2 	beq.w	8003662 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b57      	ldr	r3, [pc, #348]	; (8003680 <HAL_GPIO_Init+0x2e8>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	4a56      	ldr	r2, [pc, #344]	; (8003680 <HAL_GPIO_Init+0x2e8>)
 8003528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352c:	6453      	str	r3, [r2, #68]	; 0x44
 800352e:	4b54      	ldr	r3, [pc, #336]	; (8003680 <HAL_GPIO_Init+0x2e8>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353a:	4a52      	ldr	r2, [pc, #328]	; (8003684 <HAL_GPIO_Init+0x2ec>)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a49      	ldr	r2, [pc, #292]	; (8003688 <HAL_GPIO_Init+0x2f0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d019      	beq.n	800359a <HAL_GPIO_Init+0x202>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a48      	ldr	r2, [pc, #288]	; (800368c <HAL_GPIO_Init+0x2f4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_GPIO_Init+0x1fe>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a47      	ldr	r2, [pc, #284]	; (8003690 <HAL_GPIO_Init+0x2f8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_GPIO_Init+0x1fa>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a46      	ldr	r2, [pc, #280]	; (8003694 <HAL_GPIO_Init+0x2fc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_GPIO_Init+0x1f6>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a45      	ldr	r2, [pc, #276]	; (8003698 <HAL_GPIO_Init+0x300>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_GPIO_Init+0x1f2>
 8003586:	2304      	movs	r3, #4
 8003588:	e008      	b.n	800359c <HAL_GPIO_Init+0x204>
 800358a:	2307      	movs	r3, #7
 800358c:	e006      	b.n	800359c <HAL_GPIO_Init+0x204>
 800358e:	2303      	movs	r3, #3
 8003590:	e004      	b.n	800359c <HAL_GPIO_Init+0x204>
 8003592:	2302      	movs	r3, #2
 8003594:	e002      	b.n	800359c <HAL_GPIO_Init+0x204>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <HAL_GPIO_Init+0x204>
 800359a:	2300      	movs	r3, #0
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	f002 0203 	and.w	r2, r2, #3
 80035a2:	0092      	lsls	r2, r2, #2
 80035a4:	4093      	lsls	r3, r2
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ac:	4935      	ldr	r1, [pc, #212]	; (8003684 <HAL_GPIO_Init+0x2ec>)
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	089b      	lsrs	r3, r3, #2
 80035b2:	3302      	adds	r3, #2
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ba:	4b38      	ldr	r3, [pc, #224]	; (800369c <HAL_GPIO_Init+0x304>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035de:	4a2f      	ldr	r2, [pc, #188]	; (800369c <HAL_GPIO_Init+0x304>)
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035e4:	4b2d      	ldr	r3, [pc, #180]	; (800369c <HAL_GPIO_Init+0x304>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4013      	ands	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003608:	4a24      	ldr	r2, [pc, #144]	; (800369c <HAL_GPIO_Init+0x304>)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800360e:	4b23      	ldr	r3, [pc, #140]	; (800369c <HAL_GPIO_Init+0x304>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	43db      	mvns	r3, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4013      	ands	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003632:	4a1a      	ldr	r2, [pc, #104]	; (800369c <HAL_GPIO_Init+0x304>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003638:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_GPIO_Init+0x304>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d003      	beq.n	800365c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800365c:	4a0f      	ldr	r2, [pc, #60]	; (800369c <HAL_GPIO_Init+0x304>)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3301      	adds	r3, #1
 8003666:	61fb      	str	r3, [r7, #28]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b0f      	cmp	r3, #15
 800366c:	f67f aea2 	bls.w	80033b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003670:	bf00      	nop
 8003672:	bf00      	nop
 8003674:	3724      	adds	r7, #36	; 0x24
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40023800 	.word	0x40023800
 8003684:	40013800 	.word	0x40013800
 8003688:	40020000 	.word	0x40020000
 800368c:	40020400 	.word	0x40020400
 8003690:	40020800 	.word	0x40020800
 8003694:	40020c00 	.word	0x40020c00
 8003698:	40021000 	.word	0x40021000
 800369c:	40013c00 	.word	0x40013c00

080036a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	e001      	b.n	80036c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
 80036dc:	4613      	mov	r3, r2
 80036de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036e0:	787b      	ldrb	r3, [r7, #1]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e6:	887a      	ldrh	r2, [r7, #2]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036ec:	e003      	b.n	80036f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ee:	887b      	ldrh	r3, [r7, #2]
 80036f0:	041a      	lsls	r2, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	619a      	str	r2, [r3, #24]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4013      	ands	r3, r2
 800371a:	041a      	lsls	r2, r3, #16
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	43d9      	mvns	r1, r3
 8003720:	887b      	ldrh	r3, [r7, #2]
 8003722:	400b      	ands	r3, r1
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	619a      	str	r2, [r3, #24]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e267      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d075      	beq.n	8003842 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003756:	4b88      	ldr	r3, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b04      	cmp	r3, #4
 8003760:	d00c      	beq.n	800377c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003762:	4b85      	ldr	r3, [pc, #532]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376a:	2b08      	cmp	r3, #8
 800376c:	d112      	bne.n	8003794 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376e:	4b82      	ldr	r3, [pc, #520]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003776:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377a:	d10b      	bne.n	8003794 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	4b7e      	ldr	r3, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d05b      	beq.n	8003840 <HAL_RCC_OscConfig+0x108>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d157      	bne.n	8003840 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e242      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800379c:	d106      	bne.n	80037ac <HAL_RCC_OscConfig+0x74>
 800379e:	4b76      	ldr	r3, [pc, #472]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a75      	ldr	r2, [pc, #468]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	e01d      	b.n	80037e8 <HAL_RCC_OscConfig+0xb0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x98>
 80037b6:	4b70      	ldr	r3, [pc, #448]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6f      	ldr	r2, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	4b6d      	ldr	r3, [pc, #436]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a6c      	ldr	r2, [pc, #432]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e00b      	b.n	80037e8 <HAL_RCC_OscConfig+0xb0>
 80037d0:	4b69      	ldr	r3, [pc, #420]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a68      	ldr	r2, [pc, #416]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a65      	ldr	r2, [pc, #404]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80037e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7ff fc90 	bl	8003114 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f8:	f7ff fc8c 	bl	8003114 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e207      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380a:	4b5b      	ldr	r3, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCC_OscConfig+0xc0>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003818:	f7ff fc7c 	bl	8003114 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381e:	e008      	b.n	8003832 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003820:	f7ff fc78 	bl	8003114 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	2b64      	cmp	r3, #100	; 0x64
 800382c:	d901      	bls.n	8003832 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e1f3      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003832:	4b51      	ldr	r3, [pc, #324]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1f0      	bne.n	8003820 <HAL_RCC_OscConfig+0xe8>
 800383e:	e000      	b.n	8003842 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d063      	beq.n	8003916 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384e:	4b4a      	ldr	r3, [pc, #296]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00b      	beq.n	8003872 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385a:	4b47      	ldr	r3, [pc, #284]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003862:	2b08      	cmp	r3, #8
 8003864:	d11c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003866:	4b44      	ldr	r3, [pc, #272]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d116      	bne.n	80038a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003872:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_RCC_OscConfig+0x152>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d001      	beq.n	800388a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e1c7      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4937      	ldr	r1, [pc, #220]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389e:	e03a      	b.n	8003916 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a8:	4b34      	ldr	r3, [pc, #208]	; (800397c <HAL_RCC_OscConfig+0x244>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7ff fc31 	bl	8003114 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b6:	f7ff fc2d 	bl	8003114 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e1a8      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0f0      	beq.n	80038b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4925      	ldr	r1, [pc, #148]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ea:	4b24      	ldr	r3, [pc, #144]	; (800397c <HAL_RCC_OscConfig+0x244>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7ff fc10 	bl	8003114 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f8:	f7ff fc0c 	bl	8003114 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e187      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390a:	4b1b      	ldr	r3, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0308 	and.w	r3, r3, #8
 800391e:	2b00      	cmp	r3, #0
 8003920:	d036      	beq.n	8003990 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d016      	beq.n	8003958 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392a:	4b15      	ldr	r3, [pc, #84]	; (8003980 <HAL_RCC_OscConfig+0x248>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003930:	f7ff fbf0 	bl	8003114 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003938:	f7ff fbec 	bl	8003114 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e167      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394a:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <HAL_RCC_OscConfig+0x240>)
 800394c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x200>
 8003956:	e01b      	b.n	8003990 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <HAL_RCC_OscConfig+0x248>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395e:	f7ff fbd9 	bl	8003114 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003964:	e00e      	b.n	8003984 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003966:	f7ff fbd5 	bl	8003114 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d907      	bls.n	8003984 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e150      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
 8003978:	40023800 	.word	0x40023800
 800397c:	42470000 	.word	0x42470000
 8003980:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003984:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ea      	bne.n	8003966 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8097 	beq.w	8003acc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a2:	4b81      	ldr	r3, [pc, #516]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10f      	bne.n	80039ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b7d      	ldr	r3, [pc, #500]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a7c      	ldr	r2, [pc, #496]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b7a      	ldr	r3, [pc, #488]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ce:	4b77      	ldr	r3, [pc, #476]	; (8003bac <HAL_RCC_OscConfig+0x474>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d118      	bne.n	8003a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039da:	4b74      	ldr	r3, [pc, #464]	; (8003bac <HAL_RCC_OscConfig+0x474>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a73      	ldr	r2, [pc, #460]	; (8003bac <HAL_RCC_OscConfig+0x474>)
 80039e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039e6:	f7ff fb95 	bl	8003114 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ee:	f7ff fb91 	bl	8003114 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e10c      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCC_OscConfig+0x474>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0f0      	beq.n	80039ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d106      	bne.n	8003a22 <HAL_RCC_OscConfig+0x2ea>
 8003a14:	4b64      	ldr	r3, [pc, #400]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a63      	ldr	r2, [pc, #396]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	e01c      	b.n	8003a5c <HAL_RCC_OscConfig+0x324>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b05      	cmp	r3, #5
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0x30c>
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a5e      	ldr	r2, [pc, #376]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b5c      	ldr	r3, [pc, #368]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a5b      	ldr	r2, [pc, #364]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
 8003a42:	e00b      	b.n	8003a5c <HAL_RCC_OscConfig+0x324>
 8003a44:	4b58      	ldr	r3, [pc, #352]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a48:	4a57      	ldr	r2, [pc, #348]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a4a:	f023 0301 	bic.w	r3, r3, #1
 8003a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a50:	4b55      	ldr	r3, [pc, #340]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a54:	4a54      	ldr	r2, [pc, #336]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a56:	f023 0304 	bic.w	r3, r3, #4
 8003a5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a64:	f7ff fb56 	bl	8003114 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7ff fb52 	bl	8003114 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0cb      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a82:	4b49      	ldr	r3, [pc, #292]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ee      	beq.n	8003a6c <HAL_RCC_OscConfig+0x334>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7ff fb40 	bl	8003114 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a96:	e00a      	b.n	8003aae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7ff fb3c 	bl	8003114 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e0b5      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aae:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1ee      	bne.n	8003a98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d105      	bne.n	8003acc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80a1 	beq.w	8003c18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad6:	4b34      	ldr	r3, [pc, #208]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 030c 	and.w	r3, r3, #12
 8003ade:	2b08      	cmp	r3, #8
 8003ae0:	d05c      	beq.n	8003b9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d141      	bne.n	8003b6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7ff fb10 	bl	8003114 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af8:	f7ff fb0c 	bl	8003114 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e087      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	019b      	lsls	r3, r3, #6
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2c:	085b      	lsrs	r3, r3, #1
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	041b      	lsls	r3, r3, #16
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b38:	061b      	lsls	r3, r3, #24
 8003b3a:	491b      	ldr	r1, [pc, #108]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7ff fae5 	bl	8003114 <HAL_GetTick>
 8003b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4c:	e008      	b.n	8003b60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4e:	f7ff fae1 	bl	8003114 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e05c      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b60:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <HAL_RCC_OscConfig+0x416>
 8003b6c:	e054      	b.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <HAL_RCC_OscConfig+0x478>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b74:	f7ff face 	bl	8003114 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7ff faca 	bl	8003114 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e045      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_OscConfig+0x470>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x444>
 8003b9a:	e03d      	b.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d107      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e038      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_RCC_OscConfig+0x4ec>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d028      	beq.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d121      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d11a      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be4:	4013      	ands	r3, r2
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d111      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800

08003c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0cc      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c3c:	4b68      	ldr	r3, [pc, #416]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d90c      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4a:	4b65      	ldr	r3, [pc, #404]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	4b63      	ldr	r3, [pc, #396]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d001      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0b8      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d020      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c7c:	4b59      	ldr	r3, [pc, #356]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4a58      	ldr	r2, [pc, #352]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c94:	4b53      	ldr	r3, [pc, #332]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a52      	ldr	r2, [pc, #328]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b50      	ldr	r3, [pc, #320]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	494d      	ldr	r1, [pc, #308]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d044      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d107      	bne.n	8003cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d119      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e07f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce2:	2b03      	cmp	r3, #3
 8003ce4:	d107      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ce6:	4b3f      	ldr	r3, [pc, #252]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e067      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d06:	4b37      	ldr	r3, [pc, #220]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 0203 	bic.w	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4934      	ldr	r1, [pc, #208]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d18:	f7ff f9fc 	bl	8003114 <HAL_GetTick>
 8003d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1e:	e00a      	b.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d20:	f7ff f9f8 	bl	8003114 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e04f      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d36:	4b2b      	ldr	r3, [pc, #172]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 020c 	and.w	r2, r3, #12
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d1eb      	bne.n	8003d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d48:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d20c      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	b2d2      	uxtb	r2, r2
 8003d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <HAL_RCC_ClockConfig+0x1b8>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d001      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e032      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	4916      	ldr	r1, [pc, #88]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d009      	beq.n	8003dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9a:	4b12      	ldr	r3, [pc, #72]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	490e      	ldr	r1, [pc, #56]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dae:	f000 f821 	bl	8003df4 <HAL_RCC_GetSysClockFreq>
 8003db2:	4602      	mov	r2, r0
 8003db4:	4b0b      	ldr	r3, [pc, #44]	; (8003de4 <HAL_RCC_ClockConfig+0x1bc>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	490a      	ldr	r1, [pc, #40]	; (8003de8 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc0:	5ccb      	ldrb	r3, [r1, r3]
 8003dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <HAL_RCC_ClockConfig+0x1c4>)
 8003dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1c8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff f95c 	bl	800308c <HAL_InitTick>

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023c00 	.word	0x40023c00
 8003de4:	40023800 	.word	0x40023800
 8003de8:	080069a8 	.word	0x080069a8
 8003dec:	20000008 	.word	0x20000008
 8003df0:	2000000c 	.word	0x2000000c

08003df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df8:	b094      	sub	sp, #80	; 0x50
 8003dfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003e00:	2300      	movs	r3, #0
 8003e02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e04:	2300      	movs	r3, #0
 8003e06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e0c:	4b79      	ldr	r3, [pc, #484]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d00d      	beq.n	8003e34 <HAL_RCC_GetSysClockFreq+0x40>
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	f200 80e1 	bhi.w	8003fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0x34>
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d003      	beq.n	8003e2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e26:	e0db      	b.n	8003fe0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b73      	ldr	r3, [pc, #460]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e2c:	e0db      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e2e:	4b73      	ldr	r3, [pc, #460]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x208>)
 8003e30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e32:	e0d8      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e34:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d063      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4a:	4b6a      	ldr	r3, [pc, #424]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	099b      	lsrs	r3, r3, #6
 8003e50:	2200      	movs	r2, #0
 8003e52:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e5e:	2300      	movs	r3, #0
 8003e60:	637b      	str	r3, [r7, #52]	; 0x34
 8003e62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	0159      	lsls	r1, r3, #5
 8003e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e78:	0150      	lsls	r0, r2, #5
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4621      	mov	r1, r4
 8003e80:	1a51      	subs	r1, r2, r1
 8003e82:	6139      	str	r1, [r7, #16]
 8003e84:	4629      	mov	r1, r5
 8003e86:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e98:	4659      	mov	r1, fp
 8003e9a:	018b      	lsls	r3, r1, #6
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	018a      	lsls	r2, r1, #6
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	ebb2 0801 	subs.w	r8, r2, r1
 8003eac:	4659      	mov	r1, fp
 8003eae:	eb63 0901 	sbc.w	r9, r3, r1
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ec6:	4690      	mov	r8, r2
 8003ec8:	4699      	mov	r9, r3
 8003eca:	4623      	mov	r3, r4
 8003ecc:	eb18 0303 	adds.w	r3, r8, r3
 8003ed0:	60bb      	str	r3, [r7, #8]
 8003ed2:	462b      	mov	r3, r5
 8003ed4:	eb49 0303 	adc.w	r3, r9, r3
 8003ed8:	60fb      	str	r3, [r7, #12]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	024b      	lsls	r3, r1, #9
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	024a      	lsls	r2, r1, #9
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efa:	2200      	movs	r2, #0
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003efe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f04:	f7fc feb2 	bl	8000c6c <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f10:	e058      	b.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f12:	4b38      	ldr	r3, [pc, #224]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	099b      	lsrs	r3, r3, #6
 8003f18:	2200      	movs	r2, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	2300      	movs	r3, #0
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
 8003f28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f2c:	4642      	mov	r2, r8
 8003f2e:	464b      	mov	r3, r9
 8003f30:	f04f 0000 	mov.w	r0, #0
 8003f34:	f04f 0100 	mov.w	r1, #0
 8003f38:	0159      	lsls	r1, r3, #5
 8003f3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3e:	0150      	lsls	r0, r2, #5
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4641      	mov	r1, r8
 8003f46:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f64:	ebb2 040a 	subs.w	r4, r2, sl
 8003f68:	eb63 050b 	sbc.w	r5, r3, fp
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	00eb      	lsls	r3, r5, #3
 8003f76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7a:	00e2      	lsls	r2, r4, #3
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	461d      	mov	r5, r3
 8003f80:	4643      	mov	r3, r8
 8003f82:	18e3      	adds	r3, r4, r3
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	464b      	mov	r3, r9
 8003f88:	eb45 0303 	adc.w	r3, r5, r3
 8003f8c:	607b      	str	r3, [r7, #4]
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f9a:	4629      	mov	r1, r5
 8003f9c:	028b      	lsls	r3, r1, #10
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa4:	4621      	mov	r1, r4
 8003fa6:	028a      	lsls	r2, r1, #10
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	61fa      	str	r2, [r7, #28]
 8003fb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb8:	f7fc fe58 	bl	8000c6c <__aeabi_uldivmod>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	0c1b      	lsrs	r3, r3, #16
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3750      	adds	r7, #80	; 0x50
 8003fec:	46bd      	mov	sp, r7
 8003fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff2:	bf00      	nop
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	00f42400 	.word	0x00f42400
 8003ffc:	007a1200 	.word	0x007a1200

08004000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e07b      	b.n	800410a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d108      	bne.n	800402c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004022:	d009      	beq.n	8004038 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	61da      	str	r2, [r3, #28]
 800402a:	e005      	b.n	8004038 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d106      	bne.n	8004058 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fe fe2c 	bl	8002cb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	ea42 0103 	orr.w	r1, r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0104 	and.w	r1, r3, #4
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	f003 0210 	and.w	r2, r3, #16
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3708      	adds	r7, #8
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b088      	sub	sp, #32
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	4613      	mov	r3, r2
 8004120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_SPI_Transmit+0x22>
 8004130:	2302      	movs	r3, #2
 8004132:	e126      	b.n	8004382 <HAL_SPI_Transmit+0x270>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800413c:	f7fe ffea 	bl	8003114 <HAL_GetTick>
 8004140:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004142:	88fb      	ldrh	r3, [r7, #6]
 8004144:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b01      	cmp	r3, #1
 8004150:	d002      	beq.n	8004158 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004152:	2302      	movs	r3, #2
 8004154:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004156:	e10b      	b.n	8004370 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_SPI_Transmit+0x52>
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004168:	e102      	b.n	8004370 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2203      	movs	r2, #3
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	88fa      	ldrh	r2, [r7, #6]
 8004182:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	88fa      	ldrh	r2, [r7, #6]
 8004188:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b0:	d10f      	bne.n	80041d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d007      	beq.n	80041f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f8:	d14b      	bne.n	8004292 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Transmit+0xf6>
 8004202:	8afb      	ldrh	r3, [r7, #22]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d13e      	bne.n	8004286 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	881a      	ldrh	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	1c9a      	adds	r2, r3, #2
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800422c:	e02b      	b.n	8004286 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d112      	bne.n	8004262 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	881a      	ldrh	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	1c9a      	adds	r2, r3, #2
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004260:	e011      	b.n	8004286 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004262:	f7fe ff57 	bl	8003114 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d803      	bhi.n	800427a <HAL_SPI_Transmit+0x168>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d102      	bne.n	8004280 <HAL_SPI_Transmit+0x16e>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d102      	bne.n	8004286 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004284:	e074      	b.n	8004370 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ce      	bne.n	800422e <HAL_SPI_Transmit+0x11c>
 8004290:	e04c      	b.n	800432c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d002      	beq.n	80042a0 <HAL_SPI_Transmit+0x18e>
 800429a:	8afb      	ldrh	r3, [r7, #22]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d140      	bne.n	8004322 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	7812      	ldrb	r2, [r2, #0]
 80042ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042c6:	e02c      	b.n	8004322 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d113      	bne.n	80042fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	7812      	ldrb	r2, [r2, #0]
 80042e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80042fc:	e011      	b.n	8004322 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042fe:	f7fe ff09 	bl	8003114 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	429a      	cmp	r2, r3
 800430c:	d803      	bhi.n	8004316 <HAL_SPI_Transmit+0x204>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d102      	bne.n	800431c <HAL_SPI_Transmit+0x20a>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004320:	e026      	b.n	8004370 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1cd      	bne.n	80042c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	6839      	ldr	r1, [r7, #0]
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f8b3 	bl	800449c <SPI_EndRxTxTransaction>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2220      	movs	r2, #32
 8004340:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800434a:	2300      	movs	r3, #0
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	77fb      	strb	r3, [r7, #31]
 800436c:	e000      	b.n	8004370 <HAL_SPI_Transmit+0x25e>
  }

error:
 800436e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004380:	7ffb      	ldrb	r3, [r7, #31]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800439c:	f7fe feba 	bl	8003114 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	4413      	add	r3, r2
 80043aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043ac:	f7fe feb2 	bl	8003114 <HAL_GetTick>
 80043b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043b2:	4b39      	ldr	r3, [pc, #228]	; (8004498 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	015b      	lsls	r3, r3, #5
 80043b8:	0d1b      	lsrs	r3, r3, #20
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	fb02 f303 	mul.w	r3, r2, r3
 80043c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043c2:	e054      	b.n	800446e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d050      	beq.n	800446e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043cc:	f7fe fea2 	bl	8003114 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d902      	bls.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d13d      	bne.n	800445e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fa:	d111      	bne.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004404:	d004      	beq.n	8004410 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440e:	d107      	bne.n	8004420 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800441e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004428:	d10f      	bne.n	800444a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004448:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e017      	b.n	800448e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	3b01      	subs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4013      	ands	r3, r2
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	bf0c      	ite	eq
 800447e:	2301      	moveq	r3, #1
 8004480:	2300      	movne	r3, #0
 8004482:	b2db      	uxtb	r3, r3
 8004484:	461a      	mov	r2, r3
 8004486:	79fb      	ldrb	r3, [r7, #7]
 8004488:	429a      	cmp	r2, r3
 800448a:	d19b      	bne.n	80043c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	20000008 	.word	0x20000008

0800449c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044a8:	4b1b      	ldr	r3, [pc, #108]	; (8004518 <SPI_EndRxTxTransaction+0x7c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1b      	ldr	r2, [pc, #108]	; (800451c <SPI_EndRxTxTransaction+0x80>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	0d5b      	lsrs	r3, r3, #21
 80044b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044b8:	fb02 f303 	mul.w	r3, r2, r3
 80044bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c6:	d112      	bne.n	80044ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2200      	movs	r2, #0
 80044d0:	2180      	movs	r1, #128	; 0x80
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff ff5a 	bl	800438c <SPI_WaitFlagStateUntilTimeout>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e00f      	b.n	800450e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d0f2      	beq.n	80044ee <SPI_EndRxTxTransaction+0x52>
 8004508:	e000      	b.n	800450c <SPI_EndRxTxTransaction+0x70>
        break;
 800450a:	bf00      	nop
  }

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000008 	.word	0x20000008
 800451c:	165e9f81 	.word	0x165e9f81

08004520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e041      	b.n	80045b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7fe fbfa 	bl	8002d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4619      	mov	r1, r3
 800455e:	4610      	mov	r0, r2
 8004560:	f000 fa88 	bl	8004a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d001      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e044      	b.n	8004662 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1e      	ldr	r2, [pc, #120]	; (8004670 <HAL_TIM_Base_Start_IT+0xb0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d018      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x6c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004602:	d013      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x6c>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a1a      	ldr	r2, [pc, #104]	; (8004674 <HAL_TIM_Base_Start_IT+0xb4>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00e      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x6c>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a19      	ldr	r2, [pc, #100]	; (8004678 <HAL_TIM_Base_Start_IT+0xb8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d009      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x6c>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a17      	ldr	r2, [pc, #92]	; (800467c <HAL_TIM_Base_Start_IT+0xbc>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d004      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x6c>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a16      	ldr	r2, [pc, #88]	; (8004680 <HAL_TIM_Base_Start_IT+0xc0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d111      	bne.n	8004650 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b06      	cmp	r3, #6
 800463c:	d010      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800464e:	e007      	b.n	8004660 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f042 0201 	orr.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	40000400 	.word	0x40000400
 8004678:	40000800 	.word	0x40000800
 800467c:	40000c00 	.word	0x40000c00
 8004680:	40014000 	.word	0x40014000

08004684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d122      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d11b      	bne.n	80046e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0202 	mvn.w	r2, #2
 80046b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f9b5 	bl	8004a36 <HAL_TIM_IC_CaptureCallback>
 80046cc:	e005      	b.n	80046da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f9a7 	bl	8004a22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f9b8 	bl	8004a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d122      	bne.n	8004734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d11b      	bne.n	8004734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0204 	mvn.w	r2, #4
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f98b 	bl	8004a36 <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f97d 	bl	8004a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f98e 	bl	8004a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b08      	cmp	r3, #8
 8004740:	d122      	bne.n	8004788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b08      	cmp	r3, #8
 800474e:	d11b      	bne.n	8004788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f06f 0208 	mvn.w	r2, #8
 8004758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2204      	movs	r2, #4
 800475e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f961 	bl	8004a36 <HAL_TIM_IC_CaptureCallback>
 8004774:	e005      	b.n	8004782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f953 	bl	8004a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f964 	bl	8004a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b10      	cmp	r3, #16
 8004794:	d122      	bne.n	80047dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d11b      	bne.n	80047dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f06f 0210 	mvn.w	r2, #16
 80047ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2208      	movs	r2, #8
 80047b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f937 	bl	8004a36 <HAL_TIM_IC_CaptureCallback>
 80047c8:	e005      	b.n	80047d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f929 	bl	8004a22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f93a 	bl	8004a4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d10e      	bne.n	8004808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d107      	bne.n	8004808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0201 	mvn.w	r2, #1
 8004800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7fe f9ba 	bl	8002b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004812:	2b80      	cmp	r3, #128	; 0x80
 8004814:	d10e      	bne.n	8004834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004820:	2b80      	cmp	r3, #128	; 0x80
 8004822:	d107      	bne.n	8004834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800482c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fab2 	bl	8004d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d10e      	bne.n	8004860 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	2b40      	cmp	r3, #64	; 0x40
 800484e:	d107      	bne.n	8004860 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f8ff 	bl	8004a5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d10e      	bne.n	800488c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0320 	and.w	r3, r3, #32
 8004878:	2b20      	cmp	r3, #32
 800487a:	d107      	bne.n	800488c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0220 	mvn.w	r2, #32
 8004884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fa7c 	bl	8004d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_TIM_ConfigClockSource+0x1c>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e0b4      	b.n	8004a1a <HAL_TIM_ConfigClockSource+0x186>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048e8:	d03e      	beq.n	8004968 <HAL_TIM_ConfigClockSource+0xd4>
 80048ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ee:	f200 8087 	bhi.w	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	f000 8086 	beq.w	8004a06 <HAL_TIM_ConfigClockSource+0x172>
 80048fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048fe:	d87f      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b70      	cmp	r3, #112	; 0x70
 8004902:	d01a      	beq.n	800493a <HAL_TIM_ConfigClockSource+0xa6>
 8004904:	2b70      	cmp	r3, #112	; 0x70
 8004906:	d87b      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004908:	2b60      	cmp	r3, #96	; 0x60
 800490a:	d050      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x11a>
 800490c:	2b60      	cmp	r3, #96	; 0x60
 800490e:	d877      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004910:	2b50      	cmp	r3, #80	; 0x50
 8004912:	d03c      	beq.n	800498e <HAL_TIM_ConfigClockSource+0xfa>
 8004914:	2b50      	cmp	r3, #80	; 0x50
 8004916:	d873      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004918:	2b40      	cmp	r3, #64	; 0x40
 800491a:	d058      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0x13a>
 800491c:	2b40      	cmp	r3, #64	; 0x40
 800491e:	d86f      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004920:	2b30      	cmp	r3, #48	; 0x30
 8004922:	d064      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x15a>
 8004924:	2b30      	cmp	r3, #48	; 0x30
 8004926:	d86b      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004928:	2b20      	cmp	r3, #32
 800492a:	d060      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x15a>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d867      	bhi.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d05c      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x15a>
 8004934:	2b10      	cmp	r3, #16
 8004936:	d05a      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x15a>
 8004938:	e062      	b.n	8004a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6899      	ldr	r1, [r3, #8]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f000 f98d 	bl	8004c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800495c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	609a      	str	r2, [r3, #8]
      break;
 8004966:	e04f      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6899      	ldr	r1, [r3, #8]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f000 f976 	bl	8004c68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498a:	609a      	str	r2, [r3, #8]
      break;
 800498c:	e03c      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	461a      	mov	r2, r3
 800499c:	f000 f8ea 	bl	8004b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2150      	movs	r1, #80	; 0x50
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f943 	bl	8004c32 <TIM_ITRx_SetConfig>
      break;
 80049ac:	e02c      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	6859      	ldr	r1, [r3, #4]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	461a      	mov	r2, r3
 80049bc:	f000 f909 	bl	8004bd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2160      	movs	r1, #96	; 0x60
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f933 	bl	8004c32 <TIM_ITRx_SetConfig>
      break;
 80049cc:	e01c      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6859      	ldr	r1, [r3, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	461a      	mov	r2, r3
 80049dc:	f000 f8ca 	bl	8004b74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2140      	movs	r1, #64	; 0x40
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f923 	bl	8004c32 <TIM_ITRx_SetConfig>
      break;
 80049ec:	e00c      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f000 f91a 	bl	8004c32 <TIM_ITRx_SetConfig>
      break;
 80049fe:	e003      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      break;
 8004a04:	e000      	b.n	8004a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a34      	ldr	r2, [pc, #208]	; (8004b58 <TIM_Base_SetConfig+0xe4>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00f      	beq.n	8004aac <TIM_Base_SetConfig+0x38>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a92:	d00b      	beq.n	8004aac <TIM_Base_SetConfig+0x38>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a31      	ldr	r2, [pc, #196]	; (8004b5c <TIM_Base_SetConfig+0xe8>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d007      	beq.n	8004aac <TIM_Base_SetConfig+0x38>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a30      	ldr	r2, [pc, #192]	; (8004b60 <TIM_Base_SetConfig+0xec>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d003      	beq.n	8004aac <TIM_Base_SetConfig+0x38>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	; (8004b64 <TIM_Base_SetConfig+0xf0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d108      	bne.n	8004abe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a25      	ldr	r2, [pc, #148]	; (8004b58 <TIM_Base_SetConfig+0xe4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01b      	beq.n	8004afe <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004acc:	d017      	beq.n	8004afe <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a22      	ldr	r2, [pc, #136]	; (8004b5c <TIM_Base_SetConfig+0xe8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d013      	beq.n	8004afe <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <TIM_Base_SetConfig+0xec>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00f      	beq.n	8004afe <TIM_Base_SetConfig+0x8a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a20      	ldr	r2, [pc, #128]	; (8004b64 <TIM_Base_SetConfig+0xf0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00b      	beq.n	8004afe <TIM_Base_SetConfig+0x8a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a1f      	ldr	r2, [pc, #124]	; (8004b68 <TIM_Base_SetConfig+0xf4>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d007      	beq.n	8004afe <TIM_Base_SetConfig+0x8a>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <TIM_Base_SetConfig+0xf8>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d003      	beq.n	8004afe <TIM_Base_SetConfig+0x8a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <TIM_Base_SetConfig+0xfc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d108      	bne.n	8004b10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <TIM_Base_SetConfig+0xe4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d103      	bne.n	8004b44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	615a      	str	r2, [r3, #20]
}
 8004b4a:	bf00      	nop
 8004b4c:	3714      	adds	r7, #20
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	40010000 	.word	0x40010000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40000800 	.word	0x40000800
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400
 8004b70:	40014800 	.word	0x40014800

08004b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0201 	bic.w	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f023 030a 	bic.w	r3, r3, #10
 8004bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b087      	sub	sp, #28
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f023 0210 	bic.w	r2, r3, #16
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	031b      	lsls	r3, r3, #12
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	621a      	str	r2, [r3, #32]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f043 0307 	orr.w	r3, r3, #7
 8004c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	021a      	lsls	r2, r3, #8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e050      	b.n	8004d62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1c      	ldr	r2, [pc, #112]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0c:	d013      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a16      	ldr	r2, [pc, #88]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10c      	bne.n	8004d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40010000 	.word	0x40010000
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00
 8004d80:	40014000 	.word	0x40014000

08004d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <__errno>:
 8004dac:	4b01      	ldr	r3, [pc, #4]	; (8004db4 <__errno+0x8>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000014 	.word	0x20000014

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	4d0d      	ldr	r5, [pc, #52]	; (8004df0 <__libc_init_array+0x38>)
 8004dbc:	4c0d      	ldr	r4, [pc, #52]	; (8004df4 <__libc_init_array+0x3c>)
 8004dbe:	1b64      	subs	r4, r4, r5
 8004dc0:	10a4      	asrs	r4, r4, #2
 8004dc2:	2600      	movs	r6, #0
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	4d0b      	ldr	r5, [pc, #44]	; (8004df8 <__libc_init_array+0x40>)
 8004dca:	4c0c      	ldr	r4, [pc, #48]	; (8004dfc <__libc_init_array+0x44>)
 8004dcc:	f001 f98c 	bl	80060e8 <_init>
 8004dd0:	1b64      	subs	r4, r4, r5
 8004dd2:	10a4      	asrs	r4, r4, #2
 8004dd4:	2600      	movs	r6, #0
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de0:	4798      	blx	r3
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dea:	4798      	blx	r3
 8004dec:	3601      	adds	r6, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	08006b08 	.word	0x08006b08
 8004df4:	08006b08 	.word	0x08006b08
 8004df8:	08006b08 	.word	0x08006b08
 8004dfc:	08006b0c 	.word	0x08006b0c

08004e00 <malloc>:
 8004e00:	4b02      	ldr	r3, [pc, #8]	; (8004e0c <malloc+0xc>)
 8004e02:	4601      	mov	r1, r0
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	f000 b877 	b.w	8004ef8 <_malloc_r>
 8004e0a:	bf00      	nop
 8004e0c:	20000014 	.word	0x20000014

08004e10 <memset>:
 8004e10:	4402      	add	r2, r0
 8004e12:	4603      	mov	r3, r0
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d100      	bne.n	8004e1a <memset+0xa>
 8004e18:	4770      	bx	lr
 8004e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1e:	e7f9      	b.n	8004e14 <memset+0x4>

08004e20 <_free_r>:
 8004e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e22:	2900      	cmp	r1, #0
 8004e24:	d044      	beq.n	8004eb0 <_free_r+0x90>
 8004e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e2a:	9001      	str	r0, [sp, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e32:	bfb8      	it	lt
 8004e34:	18e4      	addlt	r4, r4, r3
 8004e36:	f000 f97f 	bl	8005138 <__malloc_lock>
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	; (8004eb4 <_free_r+0x94>)
 8004e3c:	9801      	ldr	r0, [sp, #4]
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	b933      	cbnz	r3, 8004e50 <_free_r+0x30>
 8004e42:	6063      	str	r3, [r4, #4]
 8004e44:	6014      	str	r4, [r2, #0]
 8004e46:	b003      	add	sp, #12
 8004e48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e4c:	f000 b97a 	b.w	8005144 <__malloc_unlock>
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d908      	bls.n	8004e66 <_free_r+0x46>
 8004e54:	6825      	ldr	r5, [r4, #0]
 8004e56:	1961      	adds	r1, r4, r5
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	bf01      	itttt	eq
 8004e5c:	6819      	ldreq	r1, [r3, #0]
 8004e5e:	685b      	ldreq	r3, [r3, #4]
 8004e60:	1949      	addeq	r1, r1, r5
 8004e62:	6021      	streq	r1, [r4, #0]
 8004e64:	e7ed      	b.n	8004e42 <_free_r+0x22>
 8004e66:	461a      	mov	r2, r3
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	b10b      	cbz	r3, 8004e70 <_free_r+0x50>
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	d9fa      	bls.n	8004e66 <_free_r+0x46>
 8004e70:	6811      	ldr	r1, [r2, #0]
 8004e72:	1855      	adds	r5, r2, r1
 8004e74:	42a5      	cmp	r5, r4
 8004e76:	d10b      	bne.n	8004e90 <_free_r+0x70>
 8004e78:	6824      	ldr	r4, [r4, #0]
 8004e7a:	4421      	add	r1, r4
 8004e7c:	1854      	adds	r4, r2, r1
 8004e7e:	42a3      	cmp	r3, r4
 8004e80:	6011      	str	r1, [r2, #0]
 8004e82:	d1e0      	bne.n	8004e46 <_free_r+0x26>
 8004e84:	681c      	ldr	r4, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	6053      	str	r3, [r2, #4]
 8004e8a:	4421      	add	r1, r4
 8004e8c:	6011      	str	r1, [r2, #0]
 8004e8e:	e7da      	b.n	8004e46 <_free_r+0x26>
 8004e90:	d902      	bls.n	8004e98 <_free_r+0x78>
 8004e92:	230c      	movs	r3, #12
 8004e94:	6003      	str	r3, [r0, #0]
 8004e96:	e7d6      	b.n	8004e46 <_free_r+0x26>
 8004e98:	6825      	ldr	r5, [r4, #0]
 8004e9a:	1961      	adds	r1, r4, r5
 8004e9c:	428b      	cmp	r3, r1
 8004e9e:	bf04      	itt	eq
 8004ea0:	6819      	ldreq	r1, [r3, #0]
 8004ea2:	685b      	ldreq	r3, [r3, #4]
 8004ea4:	6063      	str	r3, [r4, #4]
 8004ea6:	bf04      	itt	eq
 8004ea8:	1949      	addeq	r1, r1, r5
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	6054      	str	r4, [r2, #4]
 8004eae:	e7ca      	b.n	8004e46 <_free_r+0x26>
 8004eb0:	b003      	add	sp, #12
 8004eb2:	bd30      	pop	{r4, r5, pc}
 8004eb4:	200001d4 	.word	0x200001d4

08004eb8 <sbrk_aligned>:
 8004eb8:	b570      	push	{r4, r5, r6, lr}
 8004eba:	4e0e      	ldr	r6, [pc, #56]	; (8004ef4 <sbrk_aligned+0x3c>)
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	6831      	ldr	r1, [r6, #0]
 8004ec0:	4605      	mov	r5, r0
 8004ec2:	b911      	cbnz	r1, 8004eca <sbrk_aligned+0x12>
 8004ec4:	f000 f8f8 	bl	80050b8 <_sbrk_r>
 8004ec8:	6030      	str	r0, [r6, #0]
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f000 f8f3 	bl	80050b8 <_sbrk_r>
 8004ed2:	1c43      	adds	r3, r0, #1
 8004ed4:	d00a      	beq.n	8004eec <sbrk_aligned+0x34>
 8004ed6:	1cc4      	adds	r4, r0, #3
 8004ed8:	f024 0403 	bic.w	r4, r4, #3
 8004edc:	42a0      	cmp	r0, r4
 8004ede:	d007      	beq.n	8004ef0 <sbrk_aligned+0x38>
 8004ee0:	1a21      	subs	r1, r4, r0
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 f8e8 	bl	80050b8 <_sbrk_r>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d101      	bne.n	8004ef0 <sbrk_aligned+0x38>
 8004eec:	f04f 34ff 	mov.w	r4, #4294967295
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	bd70      	pop	{r4, r5, r6, pc}
 8004ef4:	200001d8 	.word	0x200001d8

08004ef8 <_malloc_r>:
 8004ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004efc:	1ccd      	adds	r5, r1, #3
 8004efe:	f025 0503 	bic.w	r5, r5, #3
 8004f02:	3508      	adds	r5, #8
 8004f04:	2d0c      	cmp	r5, #12
 8004f06:	bf38      	it	cc
 8004f08:	250c      	movcc	r5, #12
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	db01      	blt.n	8004f14 <_malloc_r+0x1c>
 8004f10:	42a9      	cmp	r1, r5
 8004f12:	d905      	bls.n	8004f20 <_malloc_r+0x28>
 8004f14:	230c      	movs	r3, #12
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	2600      	movs	r6, #0
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f20:	4e2e      	ldr	r6, [pc, #184]	; (8004fdc <_malloc_r+0xe4>)
 8004f22:	f000 f909 	bl	8005138 <__malloc_lock>
 8004f26:	6833      	ldr	r3, [r6, #0]
 8004f28:	461c      	mov	r4, r3
 8004f2a:	bb34      	cbnz	r4, 8004f7a <_malloc_r+0x82>
 8004f2c:	4629      	mov	r1, r5
 8004f2e:	4638      	mov	r0, r7
 8004f30:	f7ff ffc2 	bl	8004eb8 <sbrk_aligned>
 8004f34:	1c43      	adds	r3, r0, #1
 8004f36:	4604      	mov	r4, r0
 8004f38:	d14d      	bne.n	8004fd6 <_malloc_r+0xde>
 8004f3a:	6834      	ldr	r4, [r6, #0]
 8004f3c:	4626      	mov	r6, r4
 8004f3e:	2e00      	cmp	r6, #0
 8004f40:	d140      	bne.n	8004fc4 <_malloc_r+0xcc>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	4631      	mov	r1, r6
 8004f46:	4638      	mov	r0, r7
 8004f48:	eb04 0803 	add.w	r8, r4, r3
 8004f4c:	f000 f8b4 	bl	80050b8 <_sbrk_r>
 8004f50:	4580      	cmp	r8, r0
 8004f52:	d13a      	bne.n	8004fca <_malloc_r+0xd2>
 8004f54:	6821      	ldr	r1, [r4, #0]
 8004f56:	3503      	adds	r5, #3
 8004f58:	1a6d      	subs	r5, r5, r1
 8004f5a:	f025 0503 	bic.w	r5, r5, #3
 8004f5e:	3508      	adds	r5, #8
 8004f60:	2d0c      	cmp	r5, #12
 8004f62:	bf38      	it	cc
 8004f64:	250c      	movcc	r5, #12
 8004f66:	4629      	mov	r1, r5
 8004f68:	4638      	mov	r0, r7
 8004f6a:	f7ff ffa5 	bl	8004eb8 <sbrk_aligned>
 8004f6e:	3001      	adds	r0, #1
 8004f70:	d02b      	beq.n	8004fca <_malloc_r+0xd2>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	442b      	add	r3, r5
 8004f76:	6023      	str	r3, [r4, #0]
 8004f78:	e00e      	b.n	8004f98 <_malloc_r+0xa0>
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	1b52      	subs	r2, r2, r5
 8004f7e:	d41e      	bmi.n	8004fbe <_malloc_r+0xc6>
 8004f80:	2a0b      	cmp	r2, #11
 8004f82:	d916      	bls.n	8004fb2 <_malloc_r+0xba>
 8004f84:	1961      	adds	r1, r4, r5
 8004f86:	42a3      	cmp	r3, r4
 8004f88:	6025      	str	r5, [r4, #0]
 8004f8a:	bf18      	it	ne
 8004f8c:	6059      	strne	r1, [r3, #4]
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	bf08      	it	eq
 8004f92:	6031      	streq	r1, [r6, #0]
 8004f94:	5162      	str	r2, [r4, r5]
 8004f96:	604b      	str	r3, [r1, #4]
 8004f98:	4638      	mov	r0, r7
 8004f9a:	f104 060b 	add.w	r6, r4, #11
 8004f9e:	f000 f8d1 	bl	8005144 <__malloc_unlock>
 8004fa2:	f026 0607 	bic.w	r6, r6, #7
 8004fa6:	1d23      	adds	r3, r4, #4
 8004fa8:	1af2      	subs	r2, r6, r3
 8004faa:	d0b6      	beq.n	8004f1a <_malloc_r+0x22>
 8004fac:	1b9b      	subs	r3, r3, r6
 8004fae:	50a3      	str	r3, [r4, r2]
 8004fb0:	e7b3      	b.n	8004f1a <_malloc_r+0x22>
 8004fb2:	6862      	ldr	r2, [r4, #4]
 8004fb4:	42a3      	cmp	r3, r4
 8004fb6:	bf0c      	ite	eq
 8004fb8:	6032      	streq	r2, [r6, #0]
 8004fba:	605a      	strne	r2, [r3, #4]
 8004fbc:	e7ec      	b.n	8004f98 <_malloc_r+0xa0>
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	6864      	ldr	r4, [r4, #4]
 8004fc2:	e7b2      	b.n	8004f2a <_malloc_r+0x32>
 8004fc4:	4634      	mov	r4, r6
 8004fc6:	6876      	ldr	r6, [r6, #4]
 8004fc8:	e7b9      	b.n	8004f3e <_malloc_r+0x46>
 8004fca:	230c      	movs	r3, #12
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4638      	mov	r0, r7
 8004fd0:	f000 f8b8 	bl	8005144 <__malloc_unlock>
 8004fd4:	e7a1      	b.n	8004f1a <_malloc_r+0x22>
 8004fd6:	6025      	str	r5, [r4, #0]
 8004fd8:	e7de      	b.n	8004f98 <_malloc_r+0xa0>
 8004fda:	bf00      	nop
 8004fdc:	200001d4 	.word	0x200001d4

08004fe0 <srand>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4b10      	ldr	r3, [pc, #64]	; (8005024 <srand+0x44>)
 8004fe4:	681d      	ldr	r5, [r3, #0]
 8004fe6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004fe8:	4604      	mov	r4, r0
 8004fea:	b9b3      	cbnz	r3, 800501a <srand+0x3a>
 8004fec:	2018      	movs	r0, #24
 8004fee:	f7ff ff07 	bl	8004e00 <malloc>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	63a8      	str	r0, [r5, #56]	; 0x38
 8004ff6:	b920      	cbnz	r0, 8005002 <srand+0x22>
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <srand+0x48>)
 8004ffa:	480c      	ldr	r0, [pc, #48]	; (800502c <srand+0x4c>)
 8004ffc:	2142      	movs	r1, #66	; 0x42
 8004ffe:	f000 f86b 	bl	80050d8 <__assert_func>
 8005002:	490b      	ldr	r1, [pc, #44]	; (8005030 <srand+0x50>)
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <srand+0x54>)
 8005006:	e9c0 1300 	strd	r1, r3, [r0]
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <srand+0x58>)
 800500c:	6083      	str	r3, [r0, #8]
 800500e:	230b      	movs	r3, #11
 8005010:	8183      	strh	r3, [r0, #12]
 8005012:	2100      	movs	r1, #0
 8005014:	2001      	movs	r0, #1
 8005016:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800501a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800501c:	2200      	movs	r2, #0
 800501e:	611c      	str	r4, [r3, #16]
 8005020:	615a      	str	r2, [r3, #20]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20000014 	.word	0x20000014
 8005028:	080069bc 	.word	0x080069bc
 800502c:	080069d3 	.word	0x080069d3
 8005030:	abcd330e 	.word	0xabcd330e
 8005034:	e66d1234 	.word	0xe66d1234
 8005038:	0005deec 	.word	0x0005deec

0800503c <rand>:
 800503c:	4b16      	ldr	r3, [pc, #88]	; (8005098 <rand+0x5c>)
 800503e:	b510      	push	{r4, lr}
 8005040:	681c      	ldr	r4, [r3, #0]
 8005042:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005044:	b9b3      	cbnz	r3, 8005074 <rand+0x38>
 8005046:	2018      	movs	r0, #24
 8005048:	f7ff feda 	bl	8004e00 <malloc>
 800504c:	63a0      	str	r0, [r4, #56]	; 0x38
 800504e:	b928      	cbnz	r0, 800505c <rand+0x20>
 8005050:	4602      	mov	r2, r0
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <rand+0x60>)
 8005054:	4812      	ldr	r0, [pc, #72]	; (80050a0 <rand+0x64>)
 8005056:	214e      	movs	r1, #78	; 0x4e
 8005058:	f000 f83e 	bl	80050d8 <__assert_func>
 800505c:	4a11      	ldr	r2, [pc, #68]	; (80050a4 <rand+0x68>)
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <rand+0x6c>)
 8005060:	e9c0 2300 	strd	r2, r3, [r0]
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <rand+0x70>)
 8005066:	6083      	str	r3, [r0, #8]
 8005068:	230b      	movs	r3, #11
 800506a:	8183      	strh	r3, [r0, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	2300      	movs	r3, #0
 8005070:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005074:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005076:	4a0e      	ldr	r2, [pc, #56]	; (80050b0 <rand+0x74>)
 8005078:	6920      	ldr	r0, [r4, #16]
 800507a:	6963      	ldr	r3, [r4, #20]
 800507c:	490d      	ldr	r1, [pc, #52]	; (80050b4 <rand+0x78>)
 800507e:	4342      	muls	r2, r0
 8005080:	fb01 2203 	mla	r2, r1, r3, r2
 8005084:	fba0 0101 	umull	r0, r1, r0, r1
 8005088:	1c43      	adds	r3, r0, #1
 800508a:	eb42 0001 	adc.w	r0, r2, r1
 800508e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005092:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005096:	bd10      	pop	{r4, pc}
 8005098:	20000014 	.word	0x20000014
 800509c:	080069bc 	.word	0x080069bc
 80050a0:	080069d3 	.word	0x080069d3
 80050a4:	abcd330e 	.word	0xabcd330e
 80050a8:	e66d1234 	.word	0xe66d1234
 80050ac:	0005deec 	.word	0x0005deec
 80050b0:	5851f42d 	.word	0x5851f42d
 80050b4:	4c957f2d 	.word	0x4c957f2d

080050b8 <_sbrk_r>:
 80050b8:	b538      	push	{r3, r4, r5, lr}
 80050ba:	4d06      	ldr	r5, [pc, #24]	; (80050d4 <_sbrk_r+0x1c>)
 80050bc:	2300      	movs	r3, #0
 80050be:	4604      	mov	r4, r0
 80050c0:	4608      	mov	r0, r1
 80050c2:	602b      	str	r3, [r5, #0]
 80050c4:	f7fd ff4e 	bl	8002f64 <_sbrk>
 80050c8:	1c43      	adds	r3, r0, #1
 80050ca:	d102      	bne.n	80050d2 <_sbrk_r+0x1a>
 80050cc:	682b      	ldr	r3, [r5, #0]
 80050ce:	b103      	cbz	r3, 80050d2 <_sbrk_r+0x1a>
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	200001dc 	.word	0x200001dc

080050d8 <__assert_func>:
 80050d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050da:	4614      	mov	r4, r2
 80050dc:	461a      	mov	r2, r3
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <__assert_func+0x2c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4605      	mov	r5, r0
 80050e4:	68d8      	ldr	r0, [r3, #12]
 80050e6:	b14c      	cbz	r4, 80050fc <__assert_func+0x24>
 80050e8:	4b07      	ldr	r3, [pc, #28]	; (8005108 <__assert_func+0x30>)
 80050ea:	9100      	str	r1, [sp, #0]
 80050ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050f0:	4906      	ldr	r1, [pc, #24]	; (800510c <__assert_func+0x34>)
 80050f2:	462b      	mov	r3, r5
 80050f4:	f000 f80e 	bl	8005114 <fiprintf>
 80050f8:	f000 fbd8 	bl	80058ac <abort>
 80050fc:	4b04      	ldr	r3, [pc, #16]	; (8005110 <__assert_func+0x38>)
 80050fe:	461c      	mov	r4, r3
 8005100:	e7f3      	b.n	80050ea <__assert_func+0x12>
 8005102:	bf00      	nop
 8005104:	20000014 	.word	0x20000014
 8005108:	08006a2e 	.word	0x08006a2e
 800510c:	08006a3b 	.word	0x08006a3b
 8005110:	08006a69 	.word	0x08006a69

08005114 <fiprintf>:
 8005114:	b40e      	push	{r1, r2, r3}
 8005116:	b503      	push	{r0, r1, lr}
 8005118:	4601      	mov	r1, r0
 800511a:	ab03      	add	r3, sp, #12
 800511c:	4805      	ldr	r0, [pc, #20]	; (8005134 <fiprintf+0x20>)
 800511e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005122:	6800      	ldr	r0, [r0, #0]
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	f000 f83d 	bl	80051a4 <_vfiprintf_r>
 800512a:	b002      	add	sp, #8
 800512c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005130:	b003      	add	sp, #12
 8005132:	4770      	bx	lr
 8005134:	20000014 	.word	0x20000014

08005138 <__malloc_lock>:
 8005138:	4801      	ldr	r0, [pc, #4]	; (8005140 <__malloc_lock+0x8>)
 800513a:	f000 bd77 	b.w	8005c2c <__retarget_lock_acquire_recursive>
 800513e:	bf00      	nop
 8005140:	200001e0 	.word	0x200001e0

08005144 <__malloc_unlock>:
 8005144:	4801      	ldr	r0, [pc, #4]	; (800514c <__malloc_unlock+0x8>)
 8005146:	f000 bd72 	b.w	8005c2e <__retarget_lock_release_recursive>
 800514a:	bf00      	nop
 800514c:	200001e0 	.word	0x200001e0

08005150 <__sfputc_r>:
 8005150:	6893      	ldr	r3, [r2, #8]
 8005152:	3b01      	subs	r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	b410      	push	{r4}
 8005158:	6093      	str	r3, [r2, #8]
 800515a:	da08      	bge.n	800516e <__sfputc_r+0x1e>
 800515c:	6994      	ldr	r4, [r2, #24]
 800515e:	42a3      	cmp	r3, r4
 8005160:	db01      	blt.n	8005166 <__sfputc_r+0x16>
 8005162:	290a      	cmp	r1, #10
 8005164:	d103      	bne.n	800516e <__sfputc_r+0x1e>
 8005166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800516a:	f000 badf 	b.w	800572c <__swbuf_r>
 800516e:	6813      	ldr	r3, [r2, #0]
 8005170:	1c58      	adds	r0, r3, #1
 8005172:	6010      	str	r0, [r2, #0]
 8005174:	7019      	strb	r1, [r3, #0]
 8005176:	4608      	mov	r0, r1
 8005178:	f85d 4b04 	ldr.w	r4, [sp], #4
 800517c:	4770      	bx	lr

0800517e <__sfputs_r>:
 800517e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005180:	4606      	mov	r6, r0
 8005182:	460f      	mov	r7, r1
 8005184:	4614      	mov	r4, r2
 8005186:	18d5      	adds	r5, r2, r3
 8005188:	42ac      	cmp	r4, r5
 800518a:	d101      	bne.n	8005190 <__sfputs_r+0x12>
 800518c:	2000      	movs	r0, #0
 800518e:	e007      	b.n	80051a0 <__sfputs_r+0x22>
 8005190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005194:	463a      	mov	r2, r7
 8005196:	4630      	mov	r0, r6
 8005198:	f7ff ffda 	bl	8005150 <__sfputc_r>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d1f3      	bne.n	8005188 <__sfputs_r+0xa>
 80051a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051a4 <_vfiprintf_r>:
 80051a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a8:	460d      	mov	r5, r1
 80051aa:	b09d      	sub	sp, #116	; 0x74
 80051ac:	4614      	mov	r4, r2
 80051ae:	4698      	mov	r8, r3
 80051b0:	4606      	mov	r6, r0
 80051b2:	b118      	cbz	r0, 80051bc <_vfiprintf_r+0x18>
 80051b4:	6983      	ldr	r3, [r0, #24]
 80051b6:	b90b      	cbnz	r3, 80051bc <_vfiprintf_r+0x18>
 80051b8:	f000 fc9a 	bl	8005af0 <__sinit>
 80051bc:	4b89      	ldr	r3, [pc, #548]	; (80053e4 <_vfiprintf_r+0x240>)
 80051be:	429d      	cmp	r5, r3
 80051c0:	d11b      	bne.n	80051fa <_vfiprintf_r+0x56>
 80051c2:	6875      	ldr	r5, [r6, #4]
 80051c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051c6:	07d9      	lsls	r1, r3, #31
 80051c8:	d405      	bmi.n	80051d6 <_vfiprintf_r+0x32>
 80051ca:	89ab      	ldrh	r3, [r5, #12]
 80051cc:	059a      	lsls	r2, r3, #22
 80051ce:	d402      	bmi.n	80051d6 <_vfiprintf_r+0x32>
 80051d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051d2:	f000 fd2b 	bl	8005c2c <__retarget_lock_acquire_recursive>
 80051d6:	89ab      	ldrh	r3, [r5, #12]
 80051d8:	071b      	lsls	r3, r3, #28
 80051da:	d501      	bpl.n	80051e0 <_vfiprintf_r+0x3c>
 80051dc:	692b      	ldr	r3, [r5, #16]
 80051de:	b9eb      	cbnz	r3, 800521c <_vfiprintf_r+0x78>
 80051e0:	4629      	mov	r1, r5
 80051e2:	4630      	mov	r0, r6
 80051e4:	f000 faf4 	bl	80057d0 <__swsetup_r>
 80051e8:	b1c0      	cbz	r0, 800521c <_vfiprintf_r+0x78>
 80051ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051ec:	07dc      	lsls	r4, r3, #31
 80051ee:	d50e      	bpl.n	800520e <_vfiprintf_r+0x6a>
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295
 80051f4:	b01d      	add	sp, #116	; 0x74
 80051f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fa:	4b7b      	ldr	r3, [pc, #492]	; (80053e8 <_vfiprintf_r+0x244>)
 80051fc:	429d      	cmp	r5, r3
 80051fe:	d101      	bne.n	8005204 <_vfiprintf_r+0x60>
 8005200:	68b5      	ldr	r5, [r6, #8]
 8005202:	e7df      	b.n	80051c4 <_vfiprintf_r+0x20>
 8005204:	4b79      	ldr	r3, [pc, #484]	; (80053ec <_vfiprintf_r+0x248>)
 8005206:	429d      	cmp	r5, r3
 8005208:	bf08      	it	eq
 800520a:	68f5      	ldreq	r5, [r6, #12]
 800520c:	e7da      	b.n	80051c4 <_vfiprintf_r+0x20>
 800520e:	89ab      	ldrh	r3, [r5, #12]
 8005210:	0598      	lsls	r0, r3, #22
 8005212:	d4ed      	bmi.n	80051f0 <_vfiprintf_r+0x4c>
 8005214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005216:	f000 fd0a 	bl	8005c2e <__retarget_lock_release_recursive>
 800521a:	e7e9      	b.n	80051f0 <_vfiprintf_r+0x4c>
 800521c:	2300      	movs	r3, #0
 800521e:	9309      	str	r3, [sp, #36]	; 0x24
 8005220:	2320      	movs	r3, #32
 8005222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005226:	f8cd 800c 	str.w	r8, [sp, #12]
 800522a:	2330      	movs	r3, #48	; 0x30
 800522c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053f0 <_vfiprintf_r+0x24c>
 8005230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005234:	f04f 0901 	mov.w	r9, #1
 8005238:	4623      	mov	r3, r4
 800523a:	469a      	mov	sl, r3
 800523c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005240:	b10a      	cbz	r2, 8005246 <_vfiprintf_r+0xa2>
 8005242:	2a25      	cmp	r2, #37	; 0x25
 8005244:	d1f9      	bne.n	800523a <_vfiprintf_r+0x96>
 8005246:	ebba 0b04 	subs.w	fp, sl, r4
 800524a:	d00b      	beq.n	8005264 <_vfiprintf_r+0xc0>
 800524c:	465b      	mov	r3, fp
 800524e:	4622      	mov	r2, r4
 8005250:	4629      	mov	r1, r5
 8005252:	4630      	mov	r0, r6
 8005254:	f7ff ff93 	bl	800517e <__sfputs_r>
 8005258:	3001      	adds	r0, #1
 800525a:	f000 80aa 	beq.w	80053b2 <_vfiprintf_r+0x20e>
 800525e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005260:	445a      	add	r2, fp
 8005262:	9209      	str	r2, [sp, #36]	; 0x24
 8005264:	f89a 3000 	ldrb.w	r3, [sl]
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 80a2 	beq.w	80053b2 <_vfiprintf_r+0x20e>
 800526e:	2300      	movs	r3, #0
 8005270:	f04f 32ff 	mov.w	r2, #4294967295
 8005274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005278:	f10a 0a01 	add.w	sl, sl, #1
 800527c:	9304      	str	r3, [sp, #16]
 800527e:	9307      	str	r3, [sp, #28]
 8005280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005284:	931a      	str	r3, [sp, #104]	; 0x68
 8005286:	4654      	mov	r4, sl
 8005288:	2205      	movs	r2, #5
 800528a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528e:	4858      	ldr	r0, [pc, #352]	; (80053f0 <_vfiprintf_r+0x24c>)
 8005290:	f7fa ffae 	bl	80001f0 <memchr>
 8005294:	9a04      	ldr	r2, [sp, #16]
 8005296:	b9d8      	cbnz	r0, 80052d0 <_vfiprintf_r+0x12c>
 8005298:	06d1      	lsls	r1, r2, #27
 800529a:	bf44      	itt	mi
 800529c:	2320      	movmi	r3, #32
 800529e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052a2:	0713      	lsls	r3, r2, #28
 80052a4:	bf44      	itt	mi
 80052a6:	232b      	movmi	r3, #43	; 0x2b
 80052a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052ac:	f89a 3000 	ldrb.w	r3, [sl]
 80052b0:	2b2a      	cmp	r3, #42	; 0x2a
 80052b2:	d015      	beq.n	80052e0 <_vfiprintf_r+0x13c>
 80052b4:	9a07      	ldr	r2, [sp, #28]
 80052b6:	4654      	mov	r4, sl
 80052b8:	2000      	movs	r0, #0
 80052ba:	f04f 0c0a 	mov.w	ip, #10
 80052be:	4621      	mov	r1, r4
 80052c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052c4:	3b30      	subs	r3, #48	; 0x30
 80052c6:	2b09      	cmp	r3, #9
 80052c8:	d94e      	bls.n	8005368 <_vfiprintf_r+0x1c4>
 80052ca:	b1b0      	cbz	r0, 80052fa <_vfiprintf_r+0x156>
 80052cc:	9207      	str	r2, [sp, #28]
 80052ce:	e014      	b.n	80052fa <_vfiprintf_r+0x156>
 80052d0:	eba0 0308 	sub.w	r3, r0, r8
 80052d4:	fa09 f303 	lsl.w	r3, r9, r3
 80052d8:	4313      	orrs	r3, r2
 80052da:	9304      	str	r3, [sp, #16]
 80052dc:	46a2      	mov	sl, r4
 80052de:	e7d2      	b.n	8005286 <_vfiprintf_r+0xe2>
 80052e0:	9b03      	ldr	r3, [sp, #12]
 80052e2:	1d19      	adds	r1, r3, #4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	9103      	str	r1, [sp, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bfbb      	ittet	lt
 80052ec:	425b      	neglt	r3, r3
 80052ee:	f042 0202 	orrlt.w	r2, r2, #2
 80052f2:	9307      	strge	r3, [sp, #28]
 80052f4:	9307      	strlt	r3, [sp, #28]
 80052f6:	bfb8      	it	lt
 80052f8:	9204      	strlt	r2, [sp, #16]
 80052fa:	7823      	ldrb	r3, [r4, #0]
 80052fc:	2b2e      	cmp	r3, #46	; 0x2e
 80052fe:	d10c      	bne.n	800531a <_vfiprintf_r+0x176>
 8005300:	7863      	ldrb	r3, [r4, #1]
 8005302:	2b2a      	cmp	r3, #42	; 0x2a
 8005304:	d135      	bne.n	8005372 <_vfiprintf_r+0x1ce>
 8005306:	9b03      	ldr	r3, [sp, #12]
 8005308:	1d1a      	adds	r2, r3, #4
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	9203      	str	r2, [sp, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	bfb8      	it	lt
 8005312:	f04f 33ff 	movlt.w	r3, #4294967295
 8005316:	3402      	adds	r4, #2
 8005318:	9305      	str	r3, [sp, #20]
 800531a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005400 <_vfiprintf_r+0x25c>
 800531e:	7821      	ldrb	r1, [r4, #0]
 8005320:	2203      	movs	r2, #3
 8005322:	4650      	mov	r0, sl
 8005324:	f7fa ff64 	bl	80001f0 <memchr>
 8005328:	b140      	cbz	r0, 800533c <_vfiprintf_r+0x198>
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	eba0 000a 	sub.w	r0, r0, sl
 8005330:	fa03 f000 	lsl.w	r0, r3, r0
 8005334:	9b04      	ldr	r3, [sp, #16]
 8005336:	4303      	orrs	r3, r0
 8005338:	3401      	adds	r4, #1
 800533a:	9304      	str	r3, [sp, #16]
 800533c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005340:	482c      	ldr	r0, [pc, #176]	; (80053f4 <_vfiprintf_r+0x250>)
 8005342:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005346:	2206      	movs	r2, #6
 8005348:	f7fa ff52 	bl	80001f0 <memchr>
 800534c:	2800      	cmp	r0, #0
 800534e:	d03f      	beq.n	80053d0 <_vfiprintf_r+0x22c>
 8005350:	4b29      	ldr	r3, [pc, #164]	; (80053f8 <_vfiprintf_r+0x254>)
 8005352:	bb1b      	cbnz	r3, 800539c <_vfiprintf_r+0x1f8>
 8005354:	9b03      	ldr	r3, [sp, #12]
 8005356:	3307      	adds	r3, #7
 8005358:	f023 0307 	bic.w	r3, r3, #7
 800535c:	3308      	adds	r3, #8
 800535e:	9303      	str	r3, [sp, #12]
 8005360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005362:	443b      	add	r3, r7
 8005364:	9309      	str	r3, [sp, #36]	; 0x24
 8005366:	e767      	b.n	8005238 <_vfiprintf_r+0x94>
 8005368:	fb0c 3202 	mla	r2, ip, r2, r3
 800536c:	460c      	mov	r4, r1
 800536e:	2001      	movs	r0, #1
 8005370:	e7a5      	b.n	80052be <_vfiprintf_r+0x11a>
 8005372:	2300      	movs	r3, #0
 8005374:	3401      	adds	r4, #1
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	4619      	mov	r1, r3
 800537a:	f04f 0c0a 	mov.w	ip, #10
 800537e:	4620      	mov	r0, r4
 8005380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005384:	3a30      	subs	r2, #48	; 0x30
 8005386:	2a09      	cmp	r2, #9
 8005388:	d903      	bls.n	8005392 <_vfiprintf_r+0x1ee>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0c5      	beq.n	800531a <_vfiprintf_r+0x176>
 800538e:	9105      	str	r1, [sp, #20]
 8005390:	e7c3      	b.n	800531a <_vfiprintf_r+0x176>
 8005392:	fb0c 2101 	mla	r1, ip, r1, r2
 8005396:	4604      	mov	r4, r0
 8005398:	2301      	movs	r3, #1
 800539a:	e7f0      	b.n	800537e <_vfiprintf_r+0x1da>
 800539c:	ab03      	add	r3, sp, #12
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	462a      	mov	r2, r5
 80053a2:	4b16      	ldr	r3, [pc, #88]	; (80053fc <_vfiprintf_r+0x258>)
 80053a4:	a904      	add	r1, sp, #16
 80053a6:	4630      	mov	r0, r6
 80053a8:	f3af 8000 	nop.w
 80053ac:	4607      	mov	r7, r0
 80053ae:	1c78      	adds	r0, r7, #1
 80053b0:	d1d6      	bne.n	8005360 <_vfiprintf_r+0x1bc>
 80053b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80053b4:	07d9      	lsls	r1, r3, #31
 80053b6:	d405      	bmi.n	80053c4 <_vfiprintf_r+0x220>
 80053b8:	89ab      	ldrh	r3, [r5, #12]
 80053ba:	059a      	lsls	r2, r3, #22
 80053bc:	d402      	bmi.n	80053c4 <_vfiprintf_r+0x220>
 80053be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80053c0:	f000 fc35 	bl	8005c2e <__retarget_lock_release_recursive>
 80053c4:	89ab      	ldrh	r3, [r5, #12]
 80053c6:	065b      	lsls	r3, r3, #25
 80053c8:	f53f af12 	bmi.w	80051f0 <_vfiprintf_r+0x4c>
 80053cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ce:	e711      	b.n	80051f4 <_vfiprintf_r+0x50>
 80053d0:	ab03      	add	r3, sp, #12
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	462a      	mov	r2, r5
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <_vfiprintf_r+0x258>)
 80053d8:	a904      	add	r1, sp, #16
 80053da:	4630      	mov	r0, r6
 80053dc:	f000 f880 	bl	80054e0 <_printf_i>
 80053e0:	e7e4      	b.n	80053ac <_vfiprintf_r+0x208>
 80053e2:	bf00      	nop
 80053e4:	08006ac0 	.word	0x08006ac0
 80053e8:	08006ae0 	.word	0x08006ae0
 80053ec:	08006aa0 	.word	0x08006aa0
 80053f0:	08006a6a 	.word	0x08006a6a
 80053f4:	08006a74 	.word	0x08006a74
 80053f8:	00000000 	.word	0x00000000
 80053fc:	0800517f 	.word	0x0800517f
 8005400:	08006a70 	.word	0x08006a70

08005404 <_printf_common>:
 8005404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005408:	4616      	mov	r6, r2
 800540a:	4699      	mov	r9, r3
 800540c:	688a      	ldr	r2, [r1, #8]
 800540e:	690b      	ldr	r3, [r1, #16]
 8005410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005414:	4293      	cmp	r3, r2
 8005416:	bfb8      	it	lt
 8005418:	4613      	movlt	r3, r2
 800541a:	6033      	str	r3, [r6, #0]
 800541c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005420:	4607      	mov	r7, r0
 8005422:	460c      	mov	r4, r1
 8005424:	b10a      	cbz	r2, 800542a <_printf_common+0x26>
 8005426:	3301      	adds	r3, #1
 8005428:	6033      	str	r3, [r6, #0]
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	0699      	lsls	r1, r3, #26
 800542e:	bf42      	ittt	mi
 8005430:	6833      	ldrmi	r3, [r6, #0]
 8005432:	3302      	addmi	r3, #2
 8005434:	6033      	strmi	r3, [r6, #0]
 8005436:	6825      	ldr	r5, [r4, #0]
 8005438:	f015 0506 	ands.w	r5, r5, #6
 800543c:	d106      	bne.n	800544c <_printf_common+0x48>
 800543e:	f104 0a19 	add.w	sl, r4, #25
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	6832      	ldr	r2, [r6, #0]
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	42ab      	cmp	r3, r5
 800544a:	dc26      	bgt.n	800549a <_printf_common+0x96>
 800544c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005450:	1e13      	subs	r3, r2, #0
 8005452:	6822      	ldr	r2, [r4, #0]
 8005454:	bf18      	it	ne
 8005456:	2301      	movne	r3, #1
 8005458:	0692      	lsls	r2, r2, #26
 800545a:	d42b      	bmi.n	80054b4 <_printf_common+0xb0>
 800545c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005460:	4649      	mov	r1, r9
 8005462:	4638      	mov	r0, r7
 8005464:	47c0      	blx	r8
 8005466:	3001      	adds	r0, #1
 8005468:	d01e      	beq.n	80054a8 <_printf_common+0xa4>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	68e5      	ldr	r5, [r4, #12]
 800546e:	6832      	ldr	r2, [r6, #0]
 8005470:	f003 0306 	and.w	r3, r3, #6
 8005474:	2b04      	cmp	r3, #4
 8005476:	bf08      	it	eq
 8005478:	1aad      	subeq	r5, r5, r2
 800547a:	68a3      	ldr	r3, [r4, #8]
 800547c:	6922      	ldr	r2, [r4, #16]
 800547e:	bf0c      	ite	eq
 8005480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005484:	2500      	movne	r5, #0
 8005486:	4293      	cmp	r3, r2
 8005488:	bfc4      	itt	gt
 800548a:	1a9b      	subgt	r3, r3, r2
 800548c:	18ed      	addgt	r5, r5, r3
 800548e:	2600      	movs	r6, #0
 8005490:	341a      	adds	r4, #26
 8005492:	42b5      	cmp	r5, r6
 8005494:	d11a      	bne.n	80054cc <_printf_common+0xc8>
 8005496:	2000      	movs	r0, #0
 8005498:	e008      	b.n	80054ac <_printf_common+0xa8>
 800549a:	2301      	movs	r3, #1
 800549c:	4652      	mov	r2, sl
 800549e:	4649      	mov	r1, r9
 80054a0:	4638      	mov	r0, r7
 80054a2:	47c0      	blx	r8
 80054a4:	3001      	adds	r0, #1
 80054a6:	d103      	bne.n	80054b0 <_printf_common+0xac>
 80054a8:	f04f 30ff 	mov.w	r0, #4294967295
 80054ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b0:	3501      	adds	r5, #1
 80054b2:	e7c6      	b.n	8005442 <_printf_common+0x3e>
 80054b4:	18e1      	adds	r1, r4, r3
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	2030      	movs	r0, #48	; 0x30
 80054ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054be:	4422      	add	r2, r4
 80054c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c8:	3302      	adds	r3, #2
 80054ca:	e7c7      	b.n	800545c <_printf_common+0x58>
 80054cc:	2301      	movs	r3, #1
 80054ce:	4622      	mov	r2, r4
 80054d0:	4649      	mov	r1, r9
 80054d2:	4638      	mov	r0, r7
 80054d4:	47c0      	blx	r8
 80054d6:	3001      	adds	r0, #1
 80054d8:	d0e6      	beq.n	80054a8 <_printf_common+0xa4>
 80054da:	3601      	adds	r6, #1
 80054dc:	e7d9      	b.n	8005492 <_printf_common+0x8e>
	...

080054e0 <_printf_i>:
 80054e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e4:	7e0f      	ldrb	r7, [r1, #24]
 80054e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e8:	2f78      	cmp	r7, #120	; 0x78
 80054ea:	4691      	mov	r9, r2
 80054ec:	4680      	mov	r8, r0
 80054ee:	460c      	mov	r4, r1
 80054f0:	469a      	mov	sl, r3
 80054f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054f6:	d807      	bhi.n	8005508 <_printf_i+0x28>
 80054f8:	2f62      	cmp	r7, #98	; 0x62
 80054fa:	d80a      	bhi.n	8005512 <_printf_i+0x32>
 80054fc:	2f00      	cmp	r7, #0
 80054fe:	f000 80d8 	beq.w	80056b2 <_printf_i+0x1d2>
 8005502:	2f58      	cmp	r7, #88	; 0x58
 8005504:	f000 80a3 	beq.w	800564e <_printf_i+0x16e>
 8005508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800550c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005510:	e03a      	b.n	8005588 <_printf_i+0xa8>
 8005512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005516:	2b15      	cmp	r3, #21
 8005518:	d8f6      	bhi.n	8005508 <_printf_i+0x28>
 800551a:	a101      	add	r1, pc, #4	; (adr r1, 8005520 <_printf_i+0x40>)
 800551c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005520:	08005579 	.word	0x08005579
 8005524:	0800558d 	.word	0x0800558d
 8005528:	08005509 	.word	0x08005509
 800552c:	08005509 	.word	0x08005509
 8005530:	08005509 	.word	0x08005509
 8005534:	08005509 	.word	0x08005509
 8005538:	0800558d 	.word	0x0800558d
 800553c:	08005509 	.word	0x08005509
 8005540:	08005509 	.word	0x08005509
 8005544:	08005509 	.word	0x08005509
 8005548:	08005509 	.word	0x08005509
 800554c:	08005699 	.word	0x08005699
 8005550:	080055bd 	.word	0x080055bd
 8005554:	0800567b 	.word	0x0800567b
 8005558:	08005509 	.word	0x08005509
 800555c:	08005509 	.word	0x08005509
 8005560:	080056bb 	.word	0x080056bb
 8005564:	08005509 	.word	0x08005509
 8005568:	080055bd 	.word	0x080055bd
 800556c:	08005509 	.word	0x08005509
 8005570:	08005509 	.word	0x08005509
 8005574:	08005683 	.word	0x08005683
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	1d1a      	adds	r2, r3, #4
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	602a      	str	r2, [r5, #0]
 8005580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005588:	2301      	movs	r3, #1
 800558a:	e0a3      	b.n	80056d4 <_printf_i+0x1f4>
 800558c:	6820      	ldr	r0, [r4, #0]
 800558e:	6829      	ldr	r1, [r5, #0]
 8005590:	0606      	lsls	r6, r0, #24
 8005592:	f101 0304 	add.w	r3, r1, #4
 8005596:	d50a      	bpl.n	80055ae <_printf_i+0xce>
 8005598:	680e      	ldr	r6, [r1, #0]
 800559a:	602b      	str	r3, [r5, #0]
 800559c:	2e00      	cmp	r6, #0
 800559e:	da03      	bge.n	80055a8 <_printf_i+0xc8>
 80055a0:	232d      	movs	r3, #45	; 0x2d
 80055a2:	4276      	negs	r6, r6
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a8:	485e      	ldr	r0, [pc, #376]	; (8005724 <_printf_i+0x244>)
 80055aa:	230a      	movs	r3, #10
 80055ac:	e019      	b.n	80055e2 <_printf_i+0x102>
 80055ae:	680e      	ldr	r6, [r1, #0]
 80055b0:	602b      	str	r3, [r5, #0]
 80055b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b6:	bf18      	it	ne
 80055b8:	b236      	sxthne	r6, r6
 80055ba:	e7ef      	b.n	800559c <_printf_i+0xbc>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1d19      	adds	r1, r3, #4
 80055c2:	6029      	str	r1, [r5, #0]
 80055c4:	0601      	lsls	r1, r0, #24
 80055c6:	d501      	bpl.n	80055cc <_printf_i+0xec>
 80055c8:	681e      	ldr	r6, [r3, #0]
 80055ca:	e002      	b.n	80055d2 <_printf_i+0xf2>
 80055cc:	0646      	lsls	r6, r0, #25
 80055ce:	d5fb      	bpl.n	80055c8 <_printf_i+0xe8>
 80055d0:	881e      	ldrh	r6, [r3, #0]
 80055d2:	4854      	ldr	r0, [pc, #336]	; (8005724 <_printf_i+0x244>)
 80055d4:	2f6f      	cmp	r7, #111	; 0x6f
 80055d6:	bf0c      	ite	eq
 80055d8:	2308      	moveq	r3, #8
 80055da:	230a      	movne	r3, #10
 80055dc:	2100      	movs	r1, #0
 80055de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e2:	6865      	ldr	r5, [r4, #4]
 80055e4:	60a5      	str	r5, [r4, #8]
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	bfa2      	ittt	ge
 80055ea:	6821      	ldrge	r1, [r4, #0]
 80055ec:	f021 0104 	bicge.w	r1, r1, #4
 80055f0:	6021      	strge	r1, [r4, #0]
 80055f2:	b90e      	cbnz	r6, 80055f8 <_printf_i+0x118>
 80055f4:	2d00      	cmp	r5, #0
 80055f6:	d04d      	beq.n	8005694 <_printf_i+0x1b4>
 80055f8:	4615      	mov	r5, r2
 80055fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80055fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005602:	5dc7      	ldrb	r7, [r0, r7]
 8005604:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005608:	4637      	mov	r7, r6
 800560a:	42bb      	cmp	r3, r7
 800560c:	460e      	mov	r6, r1
 800560e:	d9f4      	bls.n	80055fa <_printf_i+0x11a>
 8005610:	2b08      	cmp	r3, #8
 8005612:	d10b      	bne.n	800562c <_printf_i+0x14c>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	07de      	lsls	r6, r3, #31
 8005618:	d508      	bpl.n	800562c <_printf_i+0x14c>
 800561a:	6923      	ldr	r3, [r4, #16]
 800561c:	6861      	ldr	r1, [r4, #4]
 800561e:	4299      	cmp	r1, r3
 8005620:	bfde      	ittt	le
 8005622:	2330      	movle	r3, #48	; 0x30
 8005624:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005628:	f105 35ff 	addle.w	r5, r5, #4294967295
 800562c:	1b52      	subs	r2, r2, r5
 800562e:	6122      	str	r2, [r4, #16]
 8005630:	f8cd a000 	str.w	sl, [sp]
 8005634:	464b      	mov	r3, r9
 8005636:	aa03      	add	r2, sp, #12
 8005638:	4621      	mov	r1, r4
 800563a:	4640      	mov	r0, r8
 800563c:	f7ff fee2 	bl	8005404 <_printf_common>
 8005640:	3001      	adds	r0, #1
 8005642:	d14c      	bne.n	80056de <_printf_i+0x1fe>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	b004      	add	sp, #16
 800564a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564e:	4835      	ldr	r0, [pc, #212]	; (8005724 <_printf_i+0x244>)
 8005650:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005654:	6829      	ldr	r1, [r5, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	f851 6b04 	ldr.w	r6, [r1], #4
 800565c:	6029      	str	r1, [r5, #0]
 800565e:	061d      	lsls	r5, r3, #24
 8005660:	d514      	bpl.n	800568c <_printf_i+0x1ac>
 8005662:	07df      	lsls	r7, r3, #31
 8005664:	bf44      	itt	mi
 8005666:	f043 0320 	orrmi.w	r3, r3, #32
 800566a:	6023      	strmi	r3, [r4, #0]
 800566c:	b91e      	cbnz	r6, 8005676 <_printf_i+0x196>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	f023 0320 	bic.w	r3, r3, #32
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	2310      	movs	r3, #16
 8005678:	e7b0      	b.n	80055dc <_printf_i+0xfc>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f043 0320 	orr.w	r3, r3, #32
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	2378      	movs	r3, #120	; 0x78
 8005684:	4828      	ldr	r0, [pc, #160]	; (8005728 <_printf_i+0x248>)
 8005686:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800568a:	e7e3      	b.n	8005654 <_printf_i+0x174>
 800568c:	0659      	lsls	r1, r3, #25
 800568e:	bf48      	it	mi
 8005690:	b2b6      	uxthmi	r6, r6
 8005692:	e7e6      	b.n	8005662 <_printf_i+0x182>
 8005694:	4615      	mov	r5, r2
 8005696:	e7bb      	b.n	8005610 <_printf_i+0x130>
 8005698:	682b      	ldr	r3, [r5, #0]
 800569a:	6826      	ldr	r6, [r4, #0]
 800569c:	6961      	ldr	r1, [r4, #20]
 800569e:	1d18      	adds	r0, r3, #4
 80056a0:	6028      	str	r0, [r5, #0]
 80056a2:	0635      	lsls	r5, r6, #24
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	d501      	bpl.n	80056ac <_printf_i+0x1cc>
 80056a8:	6019      	str	r1, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <_printf_i+0x1d2>
 80056ac:	0670      	lsls	r0, r6, #25
 80056ae:	d5fb      	bpl.n	80056a8 <_printf_i+0x1c8>
 80056b0:	8019      	strh	r1, [r3, #0]
 80056b2:	2300      	movs	r3, #0
 80056b4:	6123      	str	r3, [r4, #16]
 80056b6:	4615      	mov	r5, r2
 80056b8:	e7ba      	b.n	8005630 <_printf_i+0x150>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	1d1a      	adds	r2, r3, #4
 80056be:	602a      	str	r2, [r5, #0]
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	6862      	ldr	r2, [r4, #4]
 80056c4:	2100      	movs	r1, #0
 80056c6:	4628      	mov	r0, r5
 80056c8:	f7fa fd92 	bl	80001f0 <memchr>
 80056cc:	b108      	cbz	r0, 80056d2 <_printf_i+0x1f2>
 80056ce:	1b40      	subs	r0, r0, r5
 80056d0:	6060      	str	r0, [r4, #4]
 80056d2:	6863      	ldr	r3, [r4, #4]
 80056d4:	6123      	str	r3, [r4, #16]
 80056d6:	2300      	movs	r3, #0
 80056d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056dc:	e7a8      	b.n	8005630 <_printf_i+0x150>
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	462a      	mov	r2, r5
 80056e2:	4649      	mov	r1, r9
 80056e4:	4640      	mov	r0, r8
 80056e6:	47d0      	blx	sl
 80056e8:	3001      	adds	r0, #1
 80056ea:	d0ab      	beq.n	8005644 <_printf_i+0x164>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	079b      	lsls	r3, r3, #30
 80056f0:	d413      	bmi.n	800571a <_printf_i+0x23a>
 80056f2:	68e0      	ldr	r0, [r4, #12]
 80056f4:	9b03      	ldr	r3, [sp, #12]
 80056f6:	4298      	cmp	r0, r3
 80056f8:	bfb8      	it	lt
 80056fa:	4618      	movlt	r0, r3
 80056fc:	e7a4      	b.n	8005648 <_printf_i+0x168>
 80056fe:	2301      	movs	r3, #1
 8005700:	4632      	mov	r2, r6
 8005702:	4649      	mov	r1, r9
 8005704:	4640      	mov	r0, r8
 8005706:	47d0      	blx	sl
 8005708:	3001      	adds	r0, #1
 800570a:	d09b      	beq.n	8005644 <_printf_i+0x164>
 800570c:	3501      	adds	r5, #1
 800570e:	68e3      	ldr	r3, [r4, #12]
 8005710:	9903      	ldr	r1, [sp, #12]
 8005712:	1a5b      	subs	r3, r3, r1
 8005714:	42ab      	cmp	r3, r5
 8005716:	dcf2      	bgt.n	80056fe <_printf_i+0x21e>
 8005718:	e7eb      	b.n	80056f2 <_printf_i+0x212>
 800571a:	2500      	movs	r5, #0
 800571c:	f104 0619 	add.w	r6, r4, #25
 8005720:	e7f5      	b.n	800570e <_printf_i+0x22e>
 8005722:	bf00      	nop
 8005724:	08006a7b 	.word	0x08006a7b
 8005728:	08006a8c 	.word	0x08006a8c

0800572c <__swbuf_r>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	460e      	mov	r6, r1
 8005730:	4614      	mov	r4, r2
 8005732:	4605      	mov	r5, r0
 8005734:	b118      	cbz	r0, 800573e <__swbuf_r+0x12>
 8005736:	6983      	ldr	r3, [r0, #24]
 8005738:	b90b      	cbnz	r3, 800573e <__swbuf_r+0x12>
 800573a:	f000 f9d9 	bl	8005af0 <__sinit>
 800573e:	4b21      	ldr	r3, [pc, #132]	; (80057c4 <__swbuf_r+0x98>)
 8005740:	429c      	cmp	r4, r3
 8005742:	d12b      	bne.n	800579c <__swbuf_r+0x70>
 8005744:	686c      	ldr	r4, [r5, #4]
 8005746:	69a3      	ldr	r3, [r4, #24]
 8005748:	60a3      	str	r3, [r4, #8]
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	071a      	lsls	r2, r3, #28
 800574e:	d52f      	bpl.n	80057b0 <__swbuf_r+0x84>
 8005750:	6923      	ldr	r3, [r4, #16]
 8005752:	b36b      	cbz	r3, 80057b0 <__swbuf_r+0x84>
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	6820      	ldr	r0, [r4, #0]
 8005758:	1ac0      	subs	r0, r0, r3
 800575a:	6963      	ldr	r3, [r4, #20]
 800575c:	b2f6      	uxtb	r6, r6
 800575e:	4283      	cmp	r3, r0
 8005760:	4637      	mov	r7, r6
 8005762:	dc04      	bgt.n	800576e <__swbuf_r+0x42>
 8005764:	4621      	mov	r1, r4
 8005766:	4628      	mov	r0, r5
 8005768:	f000 f92e 	bl	80059c8 <_fflush_r>
 800576c:	bb30      	cbnz	r0, 80057bc <__swbuf_r+0x90>
 800576e:	68a3      	ldr	r3, [r4, #8]
 8005770:	3b01      	subs	r3, #1
 8005772:	60a3      	str	r3, [r4, #8]
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	6022      	str	r2, [r4, #0]
 800577a:	701e      	strb	r6, [r3, #0]
 800577c:	6963      	ldr	r3, [r4, #20]
 800577e:	3001      	adds	r0, #1
 8005780:	4283      	cmp	r3, r0
 8005782:	d004      	beq.n	800578e <__swbuf_r+0x62>
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	07db      	lsls	r3, r3, #31
 8005788:	d506      	bpl.n	8005798 <__swbuf_r+0x6c>
 800578a:	2e0a      	cmp	r6, #10
 800578c:	d104      	bne.n	8005798 <__swbuf_r+0x6c>
 800578e:	4621      	mov	r1, r4
 8005790:	4628      	mov	r0, r5
 8005792:	f000 f919 	bl	80059c8 <_fflush_r>
 8005796:	b988      	cbnz	r0, 80057bc <__swbuf_r+0x90>
 8005798:	4638      	mov	r0, r7
 800579a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <__swbuf_r+0x9c>)
 800579e:	429c      	cmp	r4, r3
 80057a0:	d101      	bne.n	80057a6 <__swbuf_r+0x7a>
 80057a2:	68ac      	ldr	r4, [r5, #8]
 80057a4:	e7cf      	b.n	8005746 <__swbuf_r+0x1a>
 80057a6:	4b09      	ldr	r3, [pc, #36]	; (80057cc <__swbuf_r+0xa0>)
 80057a8:	429c      	cmp	r4, r3
 80057aa:	bf08      	it	eq
 80057ac:	68ec      	ldreq	r4, [r5, #12]
 80057ae:	e7ca      	b.n	8005746 <__swbuf_r+0x1a>
 80057b0:	4621      	mov	r1, r4
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 f80c 	bl	80057d0 <__swsetup_r>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d0cb      	beq.n	8005754 <__swbuf_r+0x28>
 80057bc:	f04f 37ff 	mov.w	r7, #4294967295
 80057c0:	e7ea      	b.n	8005798 <__swbuf_r+0x6c>
 80057c2:	bf00      	nop
 80057c4:	08006ac0 	.word	0x08006ac0
 80057c8:	08006ae0 	.word	0x08006ae0
 80057cc:	08006aa0 	.word	0x08006aa0

080057d0 <__swsetup_r>:
 80057d0:	4b32      	ldr	r3, [pc, #200]	; (800589c <__swsetup_r+0xcc>)
 80057d2:	b570      	push	{r4, r5, r6, lr}
 80057d4:	681d      	ldr	r5, [r3, #0]
 80057d6:	4606      	mov	r6, r0
 80057d8:	460c      	mov	r4, r1
 80057da:	b125      	cbz	r5, 80057e6 <__swsetup_r+0x16>
 80057dc:	69ab      	ldr	r3, [r5, #24]
 80057de:	b913      	cbnz	r3, 80057e6 <__swsetup_r+0x16>
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 f985 	bl	8005af0 <__sinit>
 80057e6:	4b2e      	ldr	r3, [pc, #184]	; (80058a0 <__swsetup_r+0xd0>)
 80057e8:	429c      	cmp	r4, r3
 80057ea:	d10f      	bne.n	800580c <__swsetup_r+0x3c>
 80057ec:	686c      	ldr	r4, [r5, #4]
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057f4:	0719      	lsls	r1, r3, #28
 80057f6:	d42c      	bmi.n	8005852 <__swsetup_r+0x82>
 80057f8:	06dd      	lsls	r5, r3, #27
 80057fa:	d411      	bmi.n	8005820 <__swsetup_r+0x50>
 80057fc:	2309      	movs	r3, #9
 80057fe:	6033      	str	r3, [r6, #0]
 8005800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005804:	81a3      	strh	r3, [r4, #12]
 8005806:	f04f 30ff 	mov.w	r0, #4294967295
 800580a:	e03e      	b.n	800588a <__swsetup_r+0xba>
 800580c:	4b25      	ldr	r3, [pc, #148]	; (80058a4 <__swsetup_r+0xd4>)
 800580e:	429c      	cmp	r4, r3
 8005810:	d101      	bne.n	8005816 <__swsetup_r+0x46>
 8005812:	68ac      	ldr	r4, [r5, #8]
 8005814:	e7eb      	b.n	80057ee <__swsetup_r+0x1e>
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <__swsetup_r+0xd8>)
 8005818:	429c      	cmp	r4, r3
 800581a:	bf08      	it	eq
 800581c:	68ec      	ldreq	r4, [r5, #12]
 800581e:	e7e6      	b.n	80057ee <__swsetup_r+0x1e>
 8005820:	0758      	lsls	r0, r3, #29
 8005822:	d512      	bpl.n	800584a <__swsetup_r+0x7a>
 8005824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005826:	b141      	cbz	r1, 800583a <__swsetup_r+0x6a>
 8005828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800582c:	4299      	cmp	r1, r3
 800582e:	d002      	beq.n	8005836 <__swsetup_r+0x66>
 8005830:	4630      	mov	r0, r6
 8005832:	f7ff faf5 	bl	8004e20 <_free_r>
 8005836:	2300      	movs	r3, #0
 8005838:	6363      	str	r3, [r4, #52]	; 0x34
 800583a:	89a3      	ldrh	r3, [r4, #12]
 800583c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005840:	81a3      	strh	r3, [r4, #12]
 8005842:	2300      	movs	r3, #0
 8005844:	6063      	str	r3, [r4, #4]
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f043 0308 	orr.w	r3, r3, #8
 8005850:	81a3      	strh	r3, [r4, #12]
 8005852:	6923      	ldr	r3, [r4, #16]
 8005854:	b94b      	cbnz	r3, 800586a <__swsetup_r+0x9a>
 8005856:	89a3      	ldrh	r3, [r4, #12]
 8005858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800585c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005860:	d003      	beq.n	800586a <__swsetup_r+0x9a>
 8005862:	4621      	mov	r1, r4
 8005864:	4630      	mov	r0, r6
 8005866:	f000 fa09 	bl	8005c7c <__smakebuf_r>
 800586a:	89a0      	ldrh	r0, [r4, #12]
 800586c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005870:	f010 0301 	ands.w	r3, r0, #1
 8005874:	d00a      	beq.n	800588c <__swsetup_r+0xbc>
 8005876:	2300      	movs	r3, #0
 8005878:	60a3      	str	r3, [r4, #8]
 800587a:	6963      	ldr	r3, [r4, #20]
 800587c:	425b      	negs	r3, r3
 800587e:	61a3      	str	r3, [r4, #24]
 8005880:	6923      	ldr	r3, [r4, #16]
 8005882:	b943      	cbnz	r3, 8005896 <__swsetup_r+0xc6>
 8005884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005888:	d1ba      	bne.n	8005800 <__swsetup_r+0x30>
 800588a:	bd70      	pop	{r4, r5, r6, pc}
 800588c:	0781      	lsls	r1, r0, #30
 800588e:	bf58      	it	pl
 8005890:	6963      	ldrpl	r3, [r4, #20]
 8005892:	60a3      	str	r3, [r4, #8]
 8005894:	e7f4      	b.n	8005880 <__swsetup_r+0xb0>
 8005896:	2000      	movs	r0, #0
 8005898:	e7f7      	b.n	800588a <__swsetup_r+0xba>
 800589a:	bf00      	nop
 800589c:	20000014 	.word	0x20000014
 80058a0:	08006ac0 	.word	0x08006ac0
 80058a4:	08006ae0 	.word	0x08006ae0
 80058a8:	08006aa0 	.word	0x08006aa0

080058ac <abort>:
 80058ac:	b508      	push	{r3, lr}
 80058ae:	2006      	movs	r0, #6
 80058b0:	f000 fa4c 	bl	8005d4c <raise>
 80058b4:	2001      	movs	r0, #1
 80058b6:	f7fd fadd 	bl	8002e74 <_exit>
	...

080058bc <__sflush_r>:
 80058bc:	898a      	ldrh	r2, [r1, #12]
 80058be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c2:	4605      	mov	r5, r0
 80058c4:	0710      	lsls	r0, r2, #28
 80058c6:	460c      	mov	r4, r1
 80058c8:	d458      	bmi.n	800597c <__sflush_r+0xc0>
 80058ca:	684b      	ldr	r3, [r1, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dc05      	bgt.n	80058dc <__sflush_r+0x20>
 80058d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	dc02      	bgt.n	80058dc <__sflush_r+0x20>
 80058d6:	2000      	movs	r0, #0
 80058d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058de:	2e00      	cmp	r6, #0
 80058e0:	d0f9      	beq.n	80058d6 <__sflush_r+0x1a>
 80058e2:	2300      	movs	r3, #0
 80058e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058e8:	682f      	ldr	r7, [r5, #0]
 80058ea:	602b      	str	r3, [r5, #0]
 80058ec:	d032      	beq.n	8005954 <__sflush_r+0x98>
 80058ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	075a      	lsls	r2, r3, #29
 80058f4:	d505      	bpl.n	8005902 <__sflush_r+0x46>
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	1ac0      	subs	r0, r0, r3
 80058fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058fc:	b10b      	cbz	r3, 8005902 <__sflush_r+0x46>
 80058fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005900:	1ac0      	subs	r0, r0, r3
 8005902:	2300      	movs	r3, #0
 8005904:	4602      	mov	r2, r0
 8005906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005908:	6a21      	ldr	r1, [r4, #32]
 800590a:	4628      	mov	r0, r5
 800590c:	47b0      	blx	r6
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	d106      	bne.n	8005922 <__sflush_r+0x66>
 8005914:	6829      	ldr	r1, [r5, #0]
 8005916:	291d      	cmp	r1, #29
 8005918:	d82c      	bhi.n	8005974 <__sflush_r+0xb8>
 800591a:	4a2a      	ldr	r2, [pc, #168]	; (80059c4 <__sflush_r+0x108>)
 800591c:	40ca      	lsrs	r2, r1
 800591e:	07d6      	lsls	r6, r2, #31
 8005920:	d528      	bpl.n	8005974 <__sflush_r+0xb8>
 8005922:	2200      	movs	r2, #0
 8005924:	6062      	str	r2, [r4, #4]
 8005926:	04d9      	lsls	r1, r3, #19
 8005928:	6922      	ldr	r2, [r4, #16]
 800592a:	6022      	str	r2, [r4, #0]
 800592c:	d504      	bpl.n	8005938 <__sflush_r+0x7c>
 800592e:	1c42      	adds	r2, r0, #1
 8005930:	d101      	bne.n	8005936 <__sflush_r+0x7a>
 8005932:	682b      	ldr	r3, [r5, #0]
 8005934:	b903      	cbnz	r3, 8005938 <__sflush_r+0x7c>
 8005936:	6560      	str	r0, [r4, #84]	; 0x54
 8005938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800593a:	602f      	str	r7, [r5, #0]
 800593c:	2900      	cmp	r1, #0
 800593e:	d0ca      	beq.n	80058d6 <__sflush_r+0x1a>
 8005940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005944:	4299      	cmp	r1, r3
 8005946:	d002      	beq.n	800594e <__sflush_r+0x92>
 8005948:	4628      	mov	r0, r5
 800594a:	f7ff fa69 	bl	8004e20 <_free_r>
 800594e:	2000      	movs	r0, #0
 8005950:	6360      	str	r0, [r4, #52]	; 0x34
 8005952:	e7c1      	b.n	80058d8 <__sflush_r+0x1c>
 8005954:	6a21      	ldr	r1, [r4, #32]
 8005956:	2301      	movs	r3, #1
 8005958:	4628      	mov	r0, r5
 800595a:	47b0      	blx	r6
 800595c:	1c41      	adds	r1, r0, #1
 800595e:	d1c7      	bne.n	80058f0 <__sflush_r+0x34>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0c4      	beq.n	80058f0 <__sflush_r+0x34>
 8005966:	2b1d      	cmp	r3, #29
 8005968:	d001      	beq.n	800596e <__sflush_r+0xb2>
 800596a:	2b16      	cmp	r3, #22
 800596c:	d101      	bne.n	8005972 <__sflush_r+0xb6>
 800596e:	602f      	str	r7, [r5, #0]
 8005970:	e7b1      	b.n	80058d6 <__sflush_r+0x1a>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005978:	81a3      	strh	r3, [r4, #12]
 800597a:	e7ad      	b.n	80058d8 <__sflush_r+0x1c>
 800597c:	690f      	ldr	r7, [r1, #16]
 800597e:	2f00      	cmp	r7, #0
 8005980:	d0a9      	beq.n	80058d6 <__sflush_r+0x1a>
 8005982:	0793      	lsls	r3, r2, #30
 8005984:	680e      	ldr	r6, [r1, #0]
 8005986:	bf08      	it	eq
 8005988:	694b      	ldreq	r3, [r1, #20]
 800598a:	600f      	str	r7, [r1, #0]
 800598c:	bf18      	it	ne
 800598e:	2300      	movne	r3, #0
 8005990:	eba6 0807 	sub.w	r8, r6, r7
 8005994:	608b      	str	r3, [r1, #8]
 8005996:	f1b8 0f00 	cmp.w	r8, #0
 800599a:	dd9c      	ble.n	80058d6 <__sflush_r+0x1a>
 800599c:	6a21      	ldr	r1, [r4, #32]
 800599e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059a0:	4643      	mov	r3, r8
 80059a2:	463a      	mov	r2, r7
 80059a4:	4628      	mov	r0, r5
 80059a6:	47b0      	blx	r6
 80059a8:	2800      	cmp	r0, #0
 80059aa:	dc06      	bgt.n	80059ba <__sflush_r+0xfe>
 80059ac:	89a3      	ldrh	r3, [r4, #12]
 80059ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059b2:	81a3      	strh	r3, [r4, #12]
 80059b4:	f04f 30ff 	mov.w	r0, #4294967295
 80059b8:	e78e      	b.n	80058d8 <__sflush_r+0x1c>
 80059ba:	4407      	add	r7, r0
 80059bc:	eba8 0800 	sub.w	r8, r8, r0
 80059c0:	e7e9      	b.n	8005996 <__sflush_r+0xda>
 80059c2:	bf00      	nop
 80059c4:	20400001 	.word	0x20400001

080059c8 <_fflush_r>:
 80059c8:	b538      	push	{r3, r4, r5, lr}
 80059ca:	690b      	ldr	r3, [r1, #16]
 80059cc:	4605      	mov	r5, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	b913      	cbnz	r3, 80059d8 <_fflush_r+0x10>
 80059d2:	2500      	movs	r5, #0
 80059d4:	4628      	mov	r0, r5
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
 80059d8:	b118      	cbz	r0, 80059e2 <_fflush_r+0x1a>
 80059da:	6983      	ldr	r3, [r0, #24]
 80059dc:	b90b      	cbnz	r3, 80059e2 <_fflush_r+0x1a>
 80059de:	f000 f887 	bl	8005af0 <__sinit>
 80059e2:	4b14      	ldr	r3, [pc, #80]	; (8005a34 <_fflush_r+0x6c>)
 80059e4:	429c      	cmp	r4, r3
 80059e6:	d11b      	bne.n	8005a20 <_fflush_r+0x58>
 80059e8:	686c      	ldr	r4, [r5, #4]
 80059ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0ef      	beq.n	80059d2 <_fflush_r+0xa>
 80059f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059f4:	07d0      	lsls	r0, r2, #31
 80059f6:	d404      	bmi.n	8005a02 <_fflush_r+0x3a>
 80059f8:	0599      	lsls	r1, r3, #22
 80059fa:	d402      	bmi.n	8005a02 <_fflush_r+0x3a>
 80059fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059fe:	f000 f915 	bl	8005c2c <__retarget_lock_acquire_recursive>
 8005a02:	4628      	mov	r0, r5
 8005a04:	4621      	mov	r1, r4
 8005a06:	f7ff ff59 	bl	80058bc <__sflush_r>
 8005a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a0c:	07da      	lsls	r2, r3, #31
 8005a0e:	4605      	mov	r5, r0
 8005a10:	d4e0      	bmi.n	80059d4 <_fflush_r+0xc>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	059b      	lsls	r3, r3, #22
 8005a16:	d4dd      	bmi.n	80059d4 <_fflush_r+0xc>
 8005a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a1a:	f000 f908 	bl	8005c2e <__retarget_lock_release_recursive>
 8005a1e:	e7d9      	b.n	80059d4 <_fflush_r+0xc>
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <_fflush_r+0x70>)
 8005a22:	429c      	cmp	r4, r3
 8005a24:	d101      	bne.n	8005a2a <_fflush_r+0x62>
 8005a26:	68ac      	ldr	r4, [r5, #8]
 8005a28:	e7df      	b.n	80059ea <_fflush_r+0x22>
 8005a2a:	4b04      	ldr	r3, [pc, #16]	; (8005a3c <_fflush_r+0x74>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	bf08      	it	eq
 8005a30:	68ec      	ldreq	r4, [r5, #12]
 8005a32:	e7da      	b.n	80059ea <_fflush_r+0x22>
 8005a34:	08006ac0 	.word	0x08006ac0
 8005a38:	08006ae0 	.word	0x08006ae0
 8005a3c:	08006aa0 	.word	0x08006aa0

08005a40 <std>:
 8005a40:	2300      	movs	r3, #0
 8005a42:	b510      	push	{r4, lr}
 8005a44:	4604      	mov	r4, r0
 8005a46:	e9c0 3300 	strd	r3, r3, [r0]
 8005a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a4e:	6083      	str	r3, [r0, #8]
 8005a50:	8181      	strh	r1, [r0, #12]
 8005a52:	6643      	str	r3, [r0, #100]	; 0x64
 8005a54:	81c2      	strh	r2, [r0, #14]
 8005a56:	6183      	str	r3, [r0, #24]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	305c      	adds	r0, #92	; 0x5c
 8005a5e:	f7ff f9d7 	bl	8004e10 <memset>
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <std+0x38>)
 8005a64:	6263      	str	r3, [r4, #36]	; 0x24
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <std+0x3c>)
 8005a68:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <std+0x40>)
 8005a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <std+0x44>)
 8005a70:	6224      	str	r4, [r4, #32]
 8005a72:	6323      	str	r3, [r4, #48]	; 0x30
 8005a74:	bd10      	pop	{r4, pc}
 8005a76:	bf00      	nop
 8005a78:	08005d85 	.word	0x08005d85
 8005a7c:	08005da7 	.word	0x08005da7
 8005a80:	08005ddf 	.word	0x08005ddf
 8005a84:	08005e03 	.word	0x08005e03

08005a88 <_cleanup_r>:
 8005a88:	4901      	ldr	r1, [pc, #4]	; (8005a90 <_cleanup_r+0x8>)
 8005a8a:	f000 b8af 	b.w	8005bec <_fwalk_reent>
 8005a8e:	bf00      	nop
 8005a90:	080059c9 	.word	0x080059c9

08005a94 <__sfmoreglue>:
 8005a94:	b570      	push	{r4, r5, r6, lr}
 8005a96:	2268      	movs	r2, #104	; 0x68
 8005a98:	1e4d      	subs	r5, r1, #1
 8005a9a:	4355      	muls	r5, r2
 8005a9c:	460e      	mov	r6, r1
 8005a9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005aa2:	f7ff fa29 	bl	8004ef8 <_malloc_r>
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	b140      	cbz	r0, 8005abc <__sfmoreglue+0x28>
 8005aaa:	2100      	movs	r1, #0
 8005aac:	e9c0 1600 	strd	r1, r6, [r0]
 8005ab0:	300c      	adds	r0, #12
 8005ab2:	60a0      	str	r0, [r4, #8]
 8005ab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ab8:	f7ff f9aa 	bl	8004e10 <memset>
 8005abc:	4620      	mov	r0, r4
 8005abe:	bd70      	pop	{r4, r5, r6, pc}

08005ac0 <__sfp_lock_acquire>:
 8005ac0:	4801      	ldr	r0, [pc, #4]	; (8005ac8 <__sfp_lock_acquire+0x8>)
 8005ac2:	f000 b8b3 	b.w	8005c2c <__retarget_lock_acquire_recursive>
 8005ac6:	bf00      	nop
 8005ac8:	200001e1 	.word	0x200001e1

08005acc <__sfp_lock_release>:
 8005acc:	4801      	ldr	r0, [pc, #4]	; (8005ad4 <__sfp_lock_release+0x8>)
 8005ace:	f000 b8ae 	b.w	8005c2e <__retarget_lock_release_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	200001e1 	.word	0x200001e1

08005ad8 <__sinit_lock_acquire>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	; (8005ae0 <__sinit_lock_acquire+0x8>)
 8005ada:	f000 b8a7 	b.w	8005c2c <__retarget_lock_acquire_recursive>
 8005ade:	bf00      	nop
 8005ae0:	200001e2 	.word	0x200001e2

08005ae4 <__sinit_lock_release>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	; (8005aec <__sinit_lock_release+0x8>)
 8005ae6:	f000 b8a2 	b.w	8005c2e <__retarget_lock_release_recursive>
 8005aea:	bf00      	nop
 8005aec:	200001e2 	.word	0x200001e2

08005af0 <__sinit>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	4604      	mov	r4, r0
 8005af4:	f7ff fff0 	bl	8005ad8 <__sinit_lock_acquire>
 8005af8:	69a3      	ldr	r3, [r4, #24]
 8005afa:	b11b      	cbz	r3, 8005b04 <__sinit+0x14>
 8005afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b00:	f7ff bff0 	b.w	8005ae4 <__sinit_lock_release>
 8005b04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b08:	6523      	str	r3, [r4, #80]	; 0x50
 8005b0a:	4b13      	ldr	r3, [pc, #76]	; (8005b58 <__sinit+0x68>)
 8005b0c:	4a13      	ldr	r2, [pc, #76]	; (8005b5c <__sinit+0x6c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b12:	42a3      	cmp	r3, r4
 8005b14:	bf04      	itt	eq
 8005b16:	2301      	moveq	r3, #1
 8005b18:	61a3      	streq	r3, [r4, #24]
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f000 f820 	bl	8005b60 <__sfp>
 8005b20:	6060      	str	r0, [r4, #4]
 8005b22:	4620      	mov	r0, r4
 8005b24:	f000 f81c 	bl	8005b60 <__sfp>
 8005b28:	60a0      	str	r0, [r4, #8]
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f818 	bl	8005b60 <__sfp>
 8005b30:	2200      	movs	r2, #0
 8005b32:	60e0      	str	r0, [r4, #12]
 8005b34:	2104      	movs	r1, #4
 8005b36:	6860      	ldr	r0, [r4, #4]
 8005b38:	f7ff ff82 	bl	8005a40 <std>
 8005b3c:	68a0      	ldr	r0, [r4, #8]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	2109      	movs	r1, #9
 8005b42:	f7ff ff7d 	bl	8005a40 <std>
 8005b46:	68e0      	ldr	r0, [r4, #12]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	2112      	movs	r1, #18
 8005b4c:	f7ff ff78 	bl	8005a40 <std>
 8005b50:	2301      	movs	r3, #1
 8005b52:	61a3      	str	r3, [r4, #24]
 8005b54:	e7d2      	b.n	8005afc <__sinit+0xc>
 8005b56:	bf00      	nop
 8005b58:	080069b8 	.word	0x080069b8
 8005b5c:	08005a89 	.word	0x08005a89

08005b60 <__sfp>:
 8005b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b62:	4607      	mov	r7, r0
 8005b64:	f7ff ffac 	bl	8005ac0 <__sfp_lock_acquire>
 8005b68:	4b1e      	ldr	r3, [pc, #120]	; (8005be4 <__sfp+0x84>)
 8005b6a:	681e      	ldr	r6, [r3, #0]
 8005b6c:	69b3      	ldr	r3, [r6, #24]
 8005b6e:	b913      	cbnz	r3, 8005b76 <__sfp+0x16>
 8005b70:	4630      	mov	r0, r6
 8005b72:	f7ff ffbd 	bl	8005af0 <__sinit>
 8005b76:	3648      	adds	r6, #72	; 0x48
 8005b78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	d503      	bpl.n	8005b88 <__sfp+0x28>
 8005b80:	6833      	ldr	r3, [r6, #0]
 8005b82:	b30b      	cbz	r3, 8005bc8 <__sfp+0x68>
 8005b84:	6836      	ldr	r6, [r6, #0]
 8005b86:	e7f7      	b.n	8005b78 <__sfp+0x18>
 8005b88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b8c:	b9d5      	cbnz	r5, 8005bc4 <__sfp+0x64>
 8005b8e:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <__sfp+0x88>)
 8005b90:	60e3      	str	r3, [r4, #12]
 8005b92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005b96:	6665      	str	r5, [r4, #100]	; 0x64
 8005b98:	f000 f847 	bl	8005c2a <__retarget_lock_init_recursive>
 8005b9c:	f7ff ff96 	bl	8005acc <__sfp_lock_release>
 8005ba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ba8:	6025      	str	r5, [r4, #0]
 8005baa:	61a5      	str	r5, [r4, #24]
 8005bac:	2208      	movs	r2, #8
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bb4:	f7ff f92c 	bl	8004e10 <memset>
 8005bb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005bbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bc4:	3468      	adds	r4, #104	; 0x68
 8005bc6:	e7d9      	b.n	8005b7c <__sfp+0x1c>
 8005bc8:	2104      	movs	r1, #4
 8005bca:	4638      	mov	r0, r7
 8005bcc:	f7ff ff62 	bl	8005a94 <__sfmoreglue>
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	6030      	str	r0, [r6, #0]
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d1d5      	bne.n	8005b84 <__sfp+0x24>
 8005bd8:	f7ff ff78 	bl	8005acc <__sfp_lock_release>
 8005bdc:	230c      	movs	r3, #12
 8005bde:	603b      	str	r3, [r7, #0]
 8005be0:	e7ee      	b.n	8005bc0 <__sfp+0x60>
 8005be2:	bf00      	nop
 8005be4:	080069b8 	.word	0x080069b8
 8005be8:	ffff0001 	.word	0xffff0001

08005bec <_fwalk_reent>:
 8005bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	4688      	mov	r8, r1
 8005bf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005bf8:	2700      	movs	r7, #0
 8005bfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bfe:	f1b9 0901 	subs.w	r9, r9, #1
 8005c02:	d505      	bpl.n	8005c10 <_fwalk_reent+0x24>
 8005c04:	6824      	ldr	r4, [r4, #0]
 8005c06:	2c00      	cmp	r4, #0
 8005c08:	d1f7      	bne.n	8005bfa <_fwalk_reent+0xe>
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c10:	89ab      	ldrh	r3, [r5, #12]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d907      	bls.n	8005c26 <_fwalk_reent+0x3a>
 8005c16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	d003      	beq.n	8005c26 <_fwalk_reent+0x3a>
 8005c1e:	4629      	mov	r1, r5
 8005c20:	4630      	mov	r0, r6
 8005c22:	47c0      	blx	r8
 8005c24:	4307      	orrs	r7, r0
 8005c26:	3568      	adds	r5, #104	; 0x68
 8005c28:	e7e9      	b.n	8005bfe <_fwalk_reent+0x12>

08005c2a <__retarget_lock_init_recursive>:
 8005c2a:	4770      	bx	lr

08005c2c <__retarget_lock_acquire_recursive>:
 8005c2c:	4770      	bx	lr

08005c2e <__retarget_lock_release_recursive>:
 8005c2e:	4770      	bx	lr

08005c30 <__swhatbuf_r>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	460e      	mov	r6, r1
 8005c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c38:	2900      	cmp	r1, #0
 8005c3a:	b096      	sub	sp, #88	; 0x58
 8005c3c:	4614      	mov	r4, r2
 8005c3e:	461d      	mov	r5, r3
 8005c40:	da08      	bge.n	8005c54 <__swhatbuf_r+0x24>
 8005c42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	602a      	str	r2, [r5, #0]
 8005c4a:	061a      	lsls	r2, r3, #24
 8005c4c:	d410      	bmi.n	8005c70 <__swhatbuf_r+0x40>
 8005c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c52:	e00e      	b.n	8005c72 <__swhatbuf_r+0x42>
 8005c54:	466a      	mov	r2, sp
 8005c56:	f000 f8fb 	bl	8005e50 <_fstat_r>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	dbf1      	blt.n	8005c42 <__swhatbuf_r+0x12>
 8005c5e:	9a01      	ldr	r2, [sp, #4]
 8005c60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005c64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005c68:	425a      	negs	r2, r3
 8005c6a:	415a      	adcs	r2, r3
 8005c6c:	602a      	str	r2, [r5, #0]
 8005c6e:	e7ee      	b.n	8005c4e <__swhatbuf_r+0x1e>
 8005c70:	2340      	movs	r3, #64	; 0x40
 8005c72:	2000      	movs	r0, #0
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	b016      	add	sp, #88	; 0x58
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
	...

08005c7c <__smakebuf_r>:
 8005c7c:	898b      	ldrh	r3, [r1, #12]
 8005c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005c80:	079d      	lsls	r5, r3, #30
 8005c82:	4606      	mov	r6, r0
 8005c84:	460c      	mov	r4, r1
 8005c86:	d507      	bpl.n	8005c98 <__smakebuf_r+0x1c>
 8005c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	6123      	str	r3, [r4, #16]
 8005c90:	2301      	movs	r3, #1
 8005c92:	6163      	str	r3, [r4, #20]
 8005c94:	b002      	add	sp, #8
 8005c96:	bd70      	pop	{r4, r5, r6, pc}
 8005c98:	ab01      	add	r3, sp, #4
 8005c9a:	466a      	mov	r2, sp
 8005c9c:	f7ff ffc8 	bl	8005c30 <__swhatbuf_r>
 8005ca0:	9900      	ldr	r1, [sp, #0]
 8005ca2:	4605      	mov	r5, r0
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	f7ff f927 	bl	8004ef8 <_malloc_r>
 8005caa:	b948      	cbnz	r0, 8005cc0 <__smakebuf_r+0x44>
 8005cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cb0:	059a      	lsls	r2, r3, #22
 8005cb2:	d4ef      	bmi.n	8005c94 <__smakebuf_r+0x18>
 8005cb4:	f023 0303 	bic.w	r3, r3, #3
 8005cb8:	f043 0302 	orr.w	r3, r3, #2
 8005cbc:	81a3      	strh	r3, [r4, #12]
 8005cbe:	e7e3      	b.n	8005c88 <__smakebuf_r+0xc>
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <__smakebuf_r+0x7c>)
 8005cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	6020      	str	r0, [r4, #0]
 8005cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ccc:	81a3      	strh	r3, [r4, #12]
 8005cce:	9b00      	ldr	r3, [sp, #0]
 8005cd0:	6163      	str	r3, [r4, #20]
 8005cd2:	9b01      	ldr	r3, [sp, #4]
 8005cd4:	6120      	str	r0, [r4, #16]
 8005cd6:	b15b      	cbz	r3, 8005cf0 <__smakebuf_r+0x74>
 8005cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f000 f8c9 	bl	8005e74 <_isatty_r>
 8005ce2:	b128      	cbz	r0, 8005cf0 <__smakebuf_r+0x74>
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	f043 0301 	orr.w	r3, r3, #1
 8005cee:	81a3      	strh	r3, [r4, #12]
 8005cf0:	89a0      	ldrh	r0, [r4, #12]
 8005cf2:	4305      	orrs	r5, r0
 8005cf4:	81a5      	strh	r5, [r4, #12]
 8005cf6:	e7cd      	b.n	8005c94 <__smakebuf_r+0x18>
 8005cf8:	08005a89 	.word	0x08005a89

08005cfc <_raise_r>:
 8005cfc:	291f      	cmp	r1, #31
 8005cfe:	b538      	push	{r3, r4, r5, lr}
 8005d00:	4604      	mov	r4, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	d904      	bls.n	8005d10 <_raise_r+0x14>
 8005d06:	2316      	movs	r3, #22
 8005d08:	6003      	str	r3, [r0, #0]
 8005d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d12:	b112      	cbz	r2, 8005d1a <_raise_r+0x1e>
 8005d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d18:	b94b      	cbnz	r3, 8005d2e <_raise_r+0x32>
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	f000 f830 	bl	8005d80 <_getpid_r>
 8005d20:	462a      	mov	r2, r5
 8005d22:	4601      	mov	r1, r0
 8005d24:	4620      	mov	r0, r4
 8005d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d2a:	f000 b817 	b.w	8005d5c <_kill_r>
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d00a      	beq.n	8005d48 <_raise_r+0x4c>
 8005d32:	1c59      	adds	r1, r3, #1
 8005d34:	d103      	bne.n	8005d3e <_raise_r+0x42>
 8005d36:	2316      	movs	r3, #22
 8005d38:	6003      	str	r3, [r0, #0]
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	e7e7      	b.n	8005d0e <_raise_r+0x12>
 8005d3e:	2400      	movs	r4, #0
 8005d40:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d44:	4628      	mov	r0, r5
 8005d46:	4798      	blx	r3
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e7e0      	b.n	8005d0e <_raise_r+0x12>

08005d4c <raise>:
 8005d4c:	4b02      	ldr	r3, [pc, #8]	; (8005d58 <raise+0xc>)
 8005d4e:	4601      	mov	r1, r0
 8005d50:	6818      	ldr	r0, [r3, #0]
 8005d52:	f7ff bfd3 	b.w	8005cfc <_raise_r>
 8005d56:	bf00      	nop
 8005d58:	20000014 	.word	0x20000014

08005d5c <_kill_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4d07      	ldr	r5, [pc, #28]	; (8005d7c <_kill_r+0x20>)
 8005d60:	2300      	movs	r3, #0
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	602b      	str	r3, [r5, #0]
 8005d6a:	f7fd f873 	bl	8002e54 <_kill>
 8005d6e:	1c43      	adds	r3, r0, #1
 8005d70:	d102      	bne.n	8005d78 <_kill_r+0x1c>
 8005d72:	682b      	ldr	r3, [r5, #0]
 8005d74:	b103      	cbz	r3, 8005d78 <_kill_r+0x1c>
 8005d76:	6023      	str	r3, [r4, #0]
 8005d78:	bd38      	pop	{r3, r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200001dc 	.word	0x200001dc

08005d80 <_getpid_r>:
 8005d80:	f7fd b860 	b.w	8002e44 <_getpid>

08005d84 <__sread>:
 8005d84:	b510      	push	{r4, lr}
 8005d86:	460c      	mov	r4, r1
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	f000 f894 	bl	8005eb8 <_read_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	bfab      	itete	ge
 8005d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d96:	89a3      	ldrhlt	r3, [r4, #12]
 8005d98:	181b      	addge	r3, r3, r0
 8005d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d9e:	bfac      	ite	ge
 8005da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005da2:	81a3      	strhlt	r3, [r4, #12]
 8005da4:	bd10      	pop	{r4, pc}

08005da6 <__swrite>:
 8005da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005daa:	461f      	mov	r7, r3
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	05db      	lsls	r3, r3, #23
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	4616      	mov	r6, r2
 8005db6:	d505      	bpl.n	8005dc4 <__swrite+0x1e>
 8005db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f000 f868 	bl	8005e94 <_lseek_r>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dda:	f000 b817 	b.w	8005e0c <_write_r>

08005dde <__sseek>:
 8005dde:	b510      	push	{r4, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de6:	f000 f855 	bl	8005e94 <_lseek_r>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	bf15      	itete	ne
 8005df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dfa:	81a3      	strheq	r3, [r4, #12]
 8005dfc:	bf18      	it	ne
 8005dfe:	81a3      	strhne	r3, [r4, #12]
 8005e00:	bd10      	pop	{r4, pc}

08005e02 <__sclose>:
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 b813 	b.w	8005e30 <_close_r>
	...

08005e0c <_write_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4d07      	ldr	r5, [pc, #28]	; (8005e2c <_write_r+0x20>)
 8005e10:	4604      	mov	r4, r0
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	602a      	str	r2, [r5, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7fd f851 	bl	8002ec2 <_write>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_write_r+0x1e>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_write_r+0x1e>
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	200001dc 	.word	0x200001dc

08005e30 <_close_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4d06      	ldr	r5, [pc, #24]	; (8005e4c <_close_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	f7fd f85d 	bl	8002efa <_close>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_close_r+0x1a>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_close_r+0x1a>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	200001dc 	.word	0x200001dc

08005e50 <_fstat_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4d07      	ldr	r5, [pc, #28]	; (8005e70 <_fstat_r+0x20>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4604      	mov	r4, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	f7fd f858 	bl	8002f12 <_fstat>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d102      	bne.n	8005e6c <_fstat_r+0x1c>
 8005e66:	682b      	ldr	r3, [r5, #0]
 8005e68:	b103      	cbz	r3, 8005e6c <_fstat_r+0x1c>
 8005e6a:	6023      	str	r3, [r4, #0]
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	200001dc 	.word	0x200001dc

08005e74 <_isatty_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4d06      	ldr	r5, [pc, #24]	; (8005e90 <_isatty_r+0x1c>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	602b      	str	r3, [r5, #0]
 8005e80:	f7fd f857 	bl	8002f32 <_isatty>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_isatty_r+0x1a>
 8005e88:	682b      	ldr	r3, [r5, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_isatty_r+0x1a>
 8005e8c:	6023      	str	r3, [r4, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	200001dc 	.word	0x200001dc

08005e94 <_lseek_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4d07      	ldr	r5, [pc, #28]	; (8005eb4 <_lseek_r+0x20>)
 8005e98:	4604      	mov	r4, r0
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	602a      	str	r2, [r5, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f7fd f850 	bl	8002f48 <_lseek>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_lseek_r+0x1e>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_lseek_r+0x1e>
 8005eb0:	6023      	str	r3, [r4, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	200001dc 	.word	0x200001dc

08005eb8 <_read_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d07      	ldr	r5, [pc, #28]	; (8005ed8 <_read_r+0x20>)
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f7fc ffde 	bl	8002e88 <_read>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_read_r+0x1e>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_read_r+0x1e>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	200001dc 	.word	0x200001dc
 8005edc:	00000000 	.word	0x00000000

08005ee0 <ceil>:
 8005ee0:	ec51 0b10 	vmov	r0, r1, d0
 8005ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005eec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005ef0:	2e13      	cmp	r6, #19
 8005ef2:	ee10 5a10 	vmov	r5, s0
 8005ef6:	ee10 8a10 	vmov	r8, s0
 8005efa:	460c      	mov	r4, r1
 8005efc:	dc30      	bgt.n	8005f60 <ceil+0x80>
 8005efe:	2e00      	cmp	r6, #0
 8005f00:	da12      	bge.n	8005f28 <ceil+0x48>
 8005f02:	a335      	add	r3, pc, #212	; (adr r3, 8005fd8 <ceil+0xf8>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa f9c8 	bl	800029c <__adddf3>
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f7fa fe0a 	bl	8000b28 <__aeabi_dcmpgt>
 8005f14:	b128      	cbz	r0, 8005f22 <ceil+0x42>
 8005f16:	2c00      	cmp	r4, #0
 8005f18:	db55      	blt.n	8005fc6 <ceil+0xe6>
 8005f1a:	432c      	orrs	r4, r5
 8005f1c:	d057      	beq.n	8005fce <ceil+0xee>
 8005f1e:	4c30      	ldr	r4, [pc, #192]	; (8005fe0 <ceil+0x100>)
 8005f20:	2500      	movs	r5, #0
 8005f22:	4621      	mov	r1, r4
 8005f24:	4628      	mov	r0, r5
 8005f26:	e025      	b.n	8005f74 <ceil+0x94>
 8005f28:	4f2e      	ldr	r7, [pc, #184]	; (8005fe4 <ceil+0x104>)
 8005f2a:	4137      	asrs	r7, r6
 8005f2c:	ea01 0307 	and.w	r3, r1, r7
 8005f30:	4303      	orrs	r3, r0
 8005f32:	d01f      	beq.n	8005f74 <ceil+0x94>
 8005f34:	a328      	add	r3, pc, #160	; (adr r3, 8005fd8 <ceil+0xf8>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f9af 	bl	800029c <__adddf3>
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2300      	movs	r3, #0
 8005f42:	f7fa fdf1 	bl	8000b28 <__aeabi_dcmpgt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0eb      	beq.n	8005f22 <ceil+0x42>
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	bfc2      	ittt	gt
 8005f4e:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8005f52:	fa43 f606 	asrgt.w	r6, r3, r6
 8005f56:	19a4      	addgt	r4, r4, r6
 8005f58:	ea24 0407 	bic.w	r4, r4, r7
 8005f5c:	2500      	movs	r5, #0
 8005f5e:	e7e0      	b.n	8005f22 <ceil+0x42>
 8005f60:	2e33      	cmp	r6, #51	; 0x33
 8005f62:	dd0b      	ble.n	8005f7c <ceil+0x9c>
 8005f64:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005f68:	d104      	bne.n	8005f74 <ceil+0x94>
 8005f6a:	ee10 2a10 	vmov	r2, s0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	f7fa f994 	bl	800029c <__adddf3>
 8005f74:	ec41 0b10 	vmov	d0, r0, r1
 8005f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f7c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005f80:	f04f 33ff 	mov.w	r3, #4294967295
 8005f84:	fa23 f707 	lsr.w	r7, r3, r7
 8005f88:	4207      	tst	r7, r0
 8005f8a:	d0f3      	beq.n	8005f74 <ceil+0x94>
 8005f8c:	a312      	add	r3, pc, #72	; (adr r3, 8005fd8 <ceil+0xf8>)
 8005f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f92:	f7fa f983 	bl	800029c <__adddf3>
 8005f96:	2200      	movs	r2, #0
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f7fa fdc5 	bl	8000b28 <__aeabi_dcmpgt>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d0bf      	beq.n	8005f22 <ceil+0x42>
 8005fa2:	2c00      	cmp	r4, #0
 8005fa4:	dd02      	ble.n	8005fac <ceil+0xcc>
 8005fa6:	2e14      	cmp	r6, #20
 8005fa8:	d103      	bne.n	8005fb2 <ceil+0xd2>
 8005faa:	3401      	adds	r4, #1
 8005fac:	ea25 0507 	bic.w	r5, r5, r7
 8005fb0:	e7b7      	b.n	8005f22 <ceil+0x42>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005fb8:	fa03 f606 	lsl.w	r6, r3, r6
 8005fbc:	4435      	add	r5, r6
 8005fbe:	4545      	cmp	r5, r8
 8005fc0:	bf38      	it	cc
 8005fc2:	18e4      	addcc	r4, r4, r3
 8005fc4:	e7f2      	b.n	8005fac <ceil+0xcc>
 8005fc6:	2500      	movs	r5, #0
 8005fc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005fcc:	e7a9      	b.n	8005f22 <ceil+0x42>
 8005fce:	4625      	mov	r5, r4
 8005fd0:	e7a7      	b.n	8005f22 <ceil+0x42>
 8005fd2:	bf00      	nop
 8005fd4:	f3af 8000 	nop.w
 8005fd8:	8800759c 	.word	0x8800759c
 8005fdc:	7e37e43c 	.word	0x7e37e43c
 8005fe0:	3ff00000 	.word	0x3ff00000
 8005fe4:	000fffff 	.word	0x000fffff

08005fe8 <floor>:
 8005fe8:	ec51 0b10 	vmov	r0, r1, d0
 8005fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005ff4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005ff8:	2e13      	cmp	r6, #19
 8005ffa:	ee10 5a10 	vmov	r5, s0
 8005ffe:	ee10 8a10 	vmov	r8, s0
 8006002:	460c      	mov	r4, r1
 8006004:	dc32      	bgt.n	800606c <floor+0x84>
 8006006:	2e00      	cmp	r6, #0
 8006008:	da14      	bge.n	8006034 <floor+0x4c>
 800600a:	a333      	add	r3, pc, #204	; (adr r3, 80060d8 <floor+0xf0>)
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f7fa f944 	bl	800029c <__adddf3>
 8006014:	2200      	movs	r2, #0
 8006016:	2300      	movs	r3, #0
 8006018:	f7fa fd86 	bl	8000b28 <__aeabi_dcmpgt>
 800601c:	b138      	cbz	r0, 800602e <floor+0x46>
 800601e:	2c00      	cmp	r4, #0
 8006020:	da57      	bge.n	80060d2 <floor+0xea>
 8006022:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006026:	431d      	orrs	r5, r3
 8006028:	d001      	beq.n	800602e <floor+0x46>
 800602a:	4c2d      	ldr	r4, [pc, #180]	; (80060e0 <floor+0xf8>)
 800602c:	2500      	movs	r5, #0
 800602e:	4621      	mov	r1, r4
 8006030:	4628      	mov	r0, r5
 8006032:	e025      	b.n	8006080 <floor+0x98>
 8006034:	4f2b      	ldr	r7, [pc, #172]	; (80060e4 <floor+0xfc>)
 8006036:	4137      	asrs	r7, r6
 8006038:	ea01 0307 	and.w	r3, r1, r7
 800603c:	4303      	orrs	r3, r0
 800603e:	d01f      	beq.n	8006080 <floor+0x98>
 8006040:	a325      	add	r3, pc, #148	; (adr r3, 80060d8 <floor+0xf0>)
 8006042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006046:	f7fa f929 	bl	800029c <__adddf3>
 800604a:	2200      	movs	r2, #0
 800604c:	2300      	movs	r3, #0
 800604e:	f7fa fd6b 	bl	8000b28 <__aeabi_dcmpgt>
 8006052:	2800      	cmp	r0, #0
 8006054:	d0eb      	beq.n	800602e <floor+0x46>
 8006056:	2c00      	cmp	r4, #0
 8006058:	bfbe      	ittt	lt
 800605a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800605e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006062:	19a4      	addlt	r4, r4, r6
 8006064:	ea24 0407 	bic.w	r4, r4, r7
 8006068:	2500      	movs	r5, #0
 800606a:	e7e0      	b.n	800602e <floor+0x46>
 800606c:	2e33      	cmp	r6, #51	; 0x33
 800606e:	dd0b      	ble.n	8006088 <floor+0xa0>
 8006070:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006074:	d104      	bne.n	8006080 <floor+0x98>
 8006076:	ee10 2a10 	vmov	r2, s0
 800607a:	460b      	mov	r3, r1
 800607c:	f7fa f90e 	bl	800029c <__adddf3>
 8006080:	ec41 0b10 	vmov	d0, r0, r1
 8006084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006088:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800608c:	f04f 33ff 	mov.w	r3, #4294967295
 8006090:	fa23 f707 	lsr.w	r7, r3, r7
 8006094:	4207      	tst	r7, r0
 8006096:	d0f3      	beq.n	8006080 <floor+0x98>
 8006098:	a30f      	add	r3, pc, #60	; (adr r3, 80060d8 <floor+0xf0>)
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f7fa f8fd 	bl	800029c <__adddf3>
 80060a2:	2200      	movs	r2, #0
 80060a4:	2300      	movs	r3, #0
 80060a6:	f7fa fd3f 	bl	8000b28 <__aeabi_dcmpgt>
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0bf      	beq.n	800602e <floor+0x46>
 80060ae:	2c00      	cmp	r4, #0
 80060b0:	da02      	bge.n	80060b8 <floor+0xd0>
 80060b2:	2e14      	cmp	r6, #20
 80060b4:	d103      	bne.n	80060be <floor+0xd6>
 80060b6:	3401      	adds	r4, #1
 80060b8:	ea25 0507 	bic.w	r5, r5, r7
 80060bc:	e7b7      	b.n	800602e <floor+0x46>
 80060be:	2301      	movs	r3, #1
 80060c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80060c4:	fa03 f606 	lsl.w	r6, r3, r6
 80060c8:	4435      	add	r5, r6
 80060ca:	4545      	cmp	r5, r8
 80060cc:	bf38      	it	cc
 80060ce:	18e4      	addcc	r4, r4, r3
 80060d0:	e7f2      	b.n	80060b8 <floor+0xd0>
 80060d2:	2500      	movs	r5, #0
 80060d4:	462c      	mov	r4, r5
 80060d6:	e7aa      	b.n	800602e <floor+0x46>
 80060d8:	8800759c 	.word	0x8800759c
 80060dc:	7e37e43c 	.word	0x7e37e43c
 80060e0:	bff00000 	.word	0xbff00000
 80060e4:	000fffff 	.word	0x000fffff

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
