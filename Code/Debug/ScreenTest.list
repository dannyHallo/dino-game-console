
ScreenTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003d48  08003d48  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d48  08003d48  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000007c  08003dcc  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08003dcc  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac81  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b37  00000000  00000000  0002ad26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002c860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002d408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001787c  00000000  00000000  0002ded8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c15a  00000000  00000000  00045754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000891df  00000000  00000000  000518ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daa8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d8  00000000  00000000  000daae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003980 	.word	0x08003980

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08003980 	.word	0x08003980

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2iz>:
 8000d64:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30f      	bcc.n	8000d8e <__aeabi_f2iz+0x2a>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d90d      	bls.n	8000d94 <__aeabi_f2iz+0x30>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d84:	fa23 f002 	lsr.w	r0, r3, r2
 8000d88:	bf18      	it	ne
 8000d8a:	4240      	negne	r0, r0
 8000d8c:	4770      	bx	lr
 8000d8e:	f04f 0000 	mov.w	r0, #0
 8000d92:	4770      	bx	lr
 8000d94:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d98:	d101      	bne.n	8000d9e <__aeabi_f2iz+0x3a>
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	d105      	bne.n	8000daa <__aeabi_f2iz+0x46>
 8000d9e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000da8:	4770      	bx	lr
 8000daa:	f04f 0000 	mov.w	r0, #0
 8000dae:	4770      	bx	lr

08000db0 <__aeabi_f2uiz>:
 8000db0:	0042      	lsls	r2, r0, #1
 8000db2:	d20e      	bcs.n	8000dd2 <__aeabi_f2uiz+0x22>
 8000db4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000db8:	d30b      	bcc.n	8000dd2 <__aeabi_f2uiz+0x22>
 8000dba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000dbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dc2:	d409      	bmi.n	8000dd8 <__aeabi_f2uiz+0x28>
 8000dc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dcc:	fa23 f002 	lsr.w	r0, r3, r2
 8000dd0:	4770      	bx	lr
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	4770      	bx	lr
 8000dd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_f2uiz+0x32>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d102      	bne.n	8000de8 <__aeabi_f2uiz+0x38>
 8000de2:	f04f 30ff 	mov.w	r0, #4294967295
 8000de6:	4770      	bx	lr
 8000de8:	f04f 0000 	mov.w	r0, #0
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <smallRbit>:

//These variables required for print function
static uint8_t YLine = 1;
static uint8_t Xcol = 1;

uint8_t smallRbit(uint8_t re) {
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	return (uint8_t) (__RBIT(re) >> 24);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	fa93 f3a3 	rbit	r3, r3
 8000e04:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	0e1b      	lsrs	r3, r3, #24
 8000e0a:	b2db      	uxtb	r3, r3
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
	...

08000e18 <LCD_Init>:
//
//}

// Display Initialization
void LCD_Init(LS013B4DN04 *MemDisp, SPI_HandleTypeDef *Bus,
		GPIO_TypeDef *dispGPIO, uint16_t LCDcs) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
 8000e24:	807b      	strh	r3, [r7, #2]

	//Store params into our struct
	MemDisp->Bus = Bus;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	601a      	str	r2, [r3, #0]
	MemDisp->dispGPIO = dispGPIO;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	605a      	str	r2, [r3, #4]
	MemDisp->LCDcs = LCDcs;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	887a      	ldrh	r2, [r7, #2]
 8000e36:	811a      	strh	r2, [r3, #8]

	DispBuf = malloc(1152);
 8000e38:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8000e3c:	f002 fcde 	bl	80037fc <malloc>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <LCD_Init+0x78>)
 8000e46:	601a      	str	r2, [r3, #0]

	memset(DispBuf, 0x00, 1152);
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <LCD_Init+0x78>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fcda 	bl	800380c <memset>

	//At lease 3 + 13 clock is needed for Display clear (16 Clock = 8x2 bit = 2 byte)
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6858      	ldr	r0, [r3, #4]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	891b      	ldrh	r3, [r3, #8]
 8000e60:	2201      	movs	r2, #1
 8000e62:	4619      	mov	r1, r3
 8000e64:	f001 fa3f 	bl	80022e6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to data sheet
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	6818      	ldr	r0, [r3, #0]
 8000e6c:	2396      	movs	r3, #150	; 0x96
 8000e6e:	2202      	movs	r2, #2
 8000e70:	4908      	ldr	r1, [pc, #32]	; (8000e94 <LCD_Init+0x7c>)
 8000e72:	f001 febd 	bl	8002bf0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6858      	ldr	r0, [r3, #4]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	891b      	ldrh	r3, [r3, #8]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4619      	mov	r1, r3
 8000e82:	f001 fa30 	bl	80022e6 <HAL_GPIO_WritePin>
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	2000009c 	.word	0x2000009c
 8000e94:	20000000 	.word	0x20000000

08000e98 <LCD_Update>:

// Display update (Transmit data)
void LCD_Update(LS013B4DN04 *MemDisp) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8000ea0:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <LCD_Update+0xd0>)
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <LCD_Update+0xd4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	4b2e      	ldr	r3, [pc, #184]	; (8000f68 <LCD_Update+0xd0>)
 8000eae:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 8000eb0:	4b2d      	ldr	r3, [pc, #180]	; (8000f68 <LCD_Update+0xd0>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <LCD_Update+0xd0>)
 8000ebc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6858      	ldr	r0, [r3, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	891b      	ldrh	r3, [r3, #8]
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f001 fa0c 	bl	80022e6 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	2396      	movs	r3, #150	; 0x96
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	4924      	ldr	r1, [pc, #144]	; (8000f68 <LCD_Update+0xd0>)
 8000ed8:	f001 fe8a 	bl	8002bf0 <HAL_SPI_Transmit>

	for (uint8_t row = 0; row < 96; row++) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e02b      	b.n	8000f3a <LCD_Update+0xa2>
		SendBuf[1] = smallRbit(row + 1); // counting from row number 1 to row number 96
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff81 	bl	8000df0 <smallRbit>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <LCD_Update+0xd0>)
 8000ef4:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	491d      	ldr	r1, [pc, #116]	; (8000f70 <LCD_Update+0xd8>)
 8000efc:	2396      	movs	r3, #150	; 0x96
 8000efe:	2201      	movs	r2, #1
 8000f00:	f001 fe76 	bl	8002bf0 <HAL_SPI_Transmit>

		uint16_t offset = row * 12;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	0052      	lsls	r2, r2, #1
 8000f0c:	4413      	add	r3, r2
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	81bb      	strh	r3, [r7, #12]
		HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <LCD_Update+0xdc>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	89bb      	ldrh	r3, [r7, #12]
 8000f1c:	18d1      	adds	r1, r2, r3
 8000f1e:	2396      	movs	r3, #150	; 0x96
 8000f20:	220c      	movs	r2, #12
 8000f22:	f001 fe65 	bl	8002bf0 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6818      	ldr	r0, [r3, #0]
 8000f2a:	2396      	movs	r3, #150	; 0x96
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4912      	ldr	r1, [pc, #72]	; (8000f78 <LCD_Update+0xe0>)
 8000f30:	f001 fe5e 	bl	8002bf0 <HAL_SPI_Transmit>
	for (uint8_t row = 0; row < 96; row++) {
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	3301      	adds	r3, #1
 8000f38:	73fb      	strb	r3, [r7, #15]
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	2b5f      	cmp	r3, #95	; 0x5f
 8000f3e:	d9d0      	bls.n	8000ee2 <LCD_Update+0x4a>
	}

	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	2396      	movs	r3, #150	; 0x96
 8000f46:	2201      	movs	r2, #1
 8000f48:	490b      	ldr	r1, [pc, #44]	; (8000f78 <LCD_Update+0xe0>)
 8000f4a:	f001 fe51 	bl	8002bf0 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6858      	ldr	r0, [r3, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	891b      	ldrh	r3, [r3, #8]
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f001 f9c4 	bl	80022e6 <HAL_GPIO_WritePin>
}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000a0 	.word	0x200000a0
 8000f6c:	20000004 	.word	0x20000004
 8000f70:	200000a1 	.word	0x200000a1
 8000f74:	2000009c 	.word	0x2000009c
 8000f78:	20000098 	.word	0x20000098

08000f7c <LCD_LoadPart>:
	memcpy(DispBuf, BMP, 1152);
}

// Buffer update (with X,Y Coordinate and image WxH) X,Y Coordinate start at (0,0) to (12,96)
void LCD_LoadPart(uint8_t *BMP, uint8_t Xcord, uint8_t Ycord, uint8_t bmpW,
		uint8_t bmpH, bool toggle) {
 8000f7c:	b490      	push	{r4, r7}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	4608      	mov	r0, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	70fb      	strb	r3, [r7, #3]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	70bb      	strb	r3, [r7, #2]
 8000f92:	4613      	mov	r3, r2
 8000f94:	707b      	strb	r3, [r7, #1]

	uint8_t displayRow = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	74fb      	strb	r3, [r7, #19]
	uint16_t displayRowOffset = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	823b      	strh	r3, [r7, #16]

	//Counting from Y origin point to bmpH using for loop
	for (uint8_t y = 0; y < bmpH; y++) {
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	75fb      	strb	r3, [r7, #23]
 8000fa2:	e09f      	b.n	80010e4 <LCD_LoadPart+0x168>
		displayRow = (Ycord + y) % 96;
 8000fa4:	78ba      	ldrb	r2, [r7, #2]
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	441a      	add	r2, r3
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <LCD_LoadPart+0x180>)
 8000fac:	fb83 1302 	smull	r1, r3, r3, r2
 8000fb0:	1119      	asrs	r1, r3, #4
 8000fb2:	17d3      	asrs	r3, r2, #31
 8000fb4:	1ac9      	subs	r1, r1, r3
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	440b      	add	r3, r1
 8000fbc:	015b      	lsls	r3, r3, #5
 8000fbe:	1ad1      	subs	r1, r2, r3
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	74fb      	strb	r3, [r7, #19]
		displayRowOffset = displayRow * 12;
 8000fc4:	7cfb      	ldrb	r3, [r7, #19]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	461a      	mov	r2, r3
 8000fca:	0052      	lsls	r2, r2, #1
 8000fcc:	4413      	add	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	823b      	strh	r3, [r7, #16]

		uint8_t firstXByte = Xcord / 8;
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	08db      	lsrs	r3, r3, #3
 8000fd6:	73fb      	strb	r3, [r7, #15]
		uint8_t leftOffset = Xcord % 8;
 8000fd8:	78fb      	ldrb	r3, [r7, #3]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	73bb      	strb	r3, [r7, #14]

		uint8_t v1, v2 = 0x00;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]

		for (uint8_t j = 0; j < bmpW + 1; j++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	753b      	strb	r3, [r7, #20]
 8000fe8:	e075      	b.n	80010d6 <LCD_LoadPart+0x15a>
			if (j == bmpW)
 8000fea:	7d3a      	ldrb	r2, [r7, #20]
 8000fec:	787b      	ldrb	r3, [r7, #1]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d102      	bne.n	8000ff8 <LCD_LoadPart+0x7c>
				v2 = 0x00;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	757b      	strb	r3, [r7, #21]
 8000ff6:	e00a      	b.n	800100e <LCD_LoadPart+0x92>
			else
				v2 = *(BMP + bmpW * y + j);
 8000ff8:	787b      	ldrb	r3, [r7, #1]
 8000ffa:	7dfa      	ldrb	r2, [r7, #23]
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	461a      	mov	r2, r3
 8001002:	7d3b      	ldrb	r3, [r7, #20]
 8001004:	4413      	add	r3, r2
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	757b      	strb	r3, [r7, #21]

			if (toggle) {
 800100e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001012:	2b00      	cmp	r3, #0
 8001014:	d02d      	beq.n	8001072 <LCD_LoadPart+0xf6>
				*(DispBuf + displayRowOffset + (firstXByte + j) % 12) ^= ((v1
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <LCD_LoadPart+0x184>)
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	8a3c      	ldrh	r4, [r7, #16]
 800101c:	7bfa      	ldrb	r2, [r7, #15]
 800101e:	7d3b      	ldrb	r3, [r7, #20]
 8001020:	441a      	add	r2, r3
 8001022:	4b36      	ldr	r3, [pc, #216]	; (80010fc <LCD_LoadPart+0x180>)
 8001024:	fb83 1302 	smull	r1, r3, r3, r2
 8001028:	1059      	asrs	r1, r3, #1
 800102a:	17d3      	asrs	r3, r2, #31
 800102c:	1ac9      	subs	r1, r1, r3
 800102e:	460b      	mov	r3, r1
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	440b      	add	r3, r1
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	1ad1      	subs	r1, r2, r3
 8001038:	460b      	mov	r3, r1
 800103a:	4423      	add	r3, r4
 800103c:	4403      	add	r3, r0
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b25a      	sxtb	r2, r3
						<< (8 - leftOffset)) | (v2 >> leftOffset));
 8001042:	7db8      	ldrb	r0, [r7, #22]
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	f1c3 0308 	rsb	r3, r3, #8
 800104a:	fa00 f303 	lsl.w	r3, r0, r3
 800104e:	b258      	sxtb	r0, r3
 8001050:	7d7c      	ldrb	r4, [r7, #21]
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	fa44 f303 	asr.w	r3, r4, r3
 8001058:	b25b      	sxtb	r3, r3
 800105a:	4303      	orrs	r3, r0
 800105c:	b25b      	sxtb	r3, r3
				*(DispBuf + displayRowOffset + (firstXByte + j) % 12) ^= ((v1
 800105e:	4053      	eors	r3, r2
 8001060:	b258      	sxtb	r0, r3
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <LCD_LoadPart+0x184>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	8a3b      	ldrh	r3, [r7, #16]
 8001068:	440b      	add	r3, r1
 800106a:	4413      	add	r3, r2
 800106c:	b2c2      	uxtb	r2, r0
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e02c      	b.n	80010cc <LCD_LoadPart+0x150>
			} else {
				*(DispBuf + displayRowOffset + (firstXByte + j) % 12) |= ((v1
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <LCD_LoadPart+0x184>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	8a3c      	ldrh	r4, [r7, #16]
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	7d3b      	ldrb	r3, [r7, #20]
 800107c:	441a      	add	r2, r3
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <LCD_LoadPart+0x180>)
 8001080:	fb83 1302 	smull	r1, r3, r3, r2
 8001084:	1059      	asrs	r1, r3, #1
 8001086:	17d3      	asrs	r3, r2, #31
 8001088:	1ac9      	subs	r1, r1, r3
 800108a:	460b      	mov	r3, r1
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	440b      	add	r3, r1
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	1ad1      	subs	r1, r2, r3
 8001094:	460b      	mov	r3, r1
 8001096:	4423      	add	r3, r4
 8001098:	4403      	add	r3, r0
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b25a      	sxtb	r2, r3
						<< (8 - leftOffset)) | (v2 >> leftOffset));
 800109e:	7db8      	ldrb	r0, [r7, #22]
 80010a0:	7bbb      	ldrb	r3, [r7, #14]
 80010a2:	f1c3 0308 	rsb	r3, r3, #8
 80010a6:	fa00 f303 	lsl.w	r3, r0, r3
 80010aa:	b258      	sxtb	r0, r3
 80010ac:	7d7c      	ldrb	r4, [r7, #21]
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	fa44 f303 	asr.w	r3, r4, r3
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	4303      	orrs	r3, r0
 80010b8:	b25b      	sxtb	r3, r3
				*(DispBuf + displayRowOffset + (firstXByte + j) % 12) |= ((v1
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b258      	sxtb	r0, r3
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <LCD_LoadPart+0x184>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	8a3b      	ldrh	r3, [r7, #16]
 80010c4:	440b      	add	r3, r1
 80010c6:	4413      	add	r3, r2
 80010c8:	b2c2      	uxtb	r2, r0
 80010ca:	701a      	strb	r2, [r3, #0]
			}

			v1 = v2;
 80010cc:	7d7b      	ldrb	r3, [r7, #21]
 80010ce:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < bmpW + 1; j++) {
 80010d0:	7d3b      	ldrb	r3, [r7, #20]
 80010d2:	3301      	adds	r3, #1
 80010d4:	753b      	strb	r3, [r7, #20]
 80010d6:	787a      	ldrb	r2, [r7, #1]
 80010d8:	7d3b      	ldrb	r3, [r7, #20]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d285      	bcs.n	8000fea <LCD_LoadPart+0x6e>
	for (uint8_t y = 0; y < bmpH; y++) {
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	3301      	adds	r3, #1
 80010e2:	75fb      	strb	r3, [r7, #23]
 80010e4:	7dfa      	ldrb	r2, [r7, #23]
 80010e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	f4ff af5a 	bcc.w	8000fa4 <LCD_LoadPart+0x28>
		}
	}
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc90      	pop	{r4, r7}
 80010fa:	4770      	bx	lr
 80010fc:	2aaaaaab 	.word	0x2aaaaaab
 8001100:	2000009c 	.word	0x2000009c

08001104 <LCD_DrawLine>:

void LCD_DrawLine(uint8_t startingRow, uint8_t startingPoint, uint8_t length, bool negative) {
 8001104:	b490      	push	{r4, r7}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	71fb      	strb	r3, [r7, #7]
 8001116:	4603      	mov	r3, r0
 8001118:	71bb      	strb	r3, [r7, #6]
 800111a:	460b      	mov	r3, r1
 800111c:	717b      	strb	r3, [r7, #5]
 800111e:	4613      	mov	r3, r2
 8001120:	713b      	strb	r3, [r7, #4]
	uint16_t rowOffset = (startingRow % 96) * 12;
 8001122:	79fa      	ldrb	r2, [r7, #7]
 8001124:	4b38      	ldr	r3, [pc, #224]	; (8001208 <LCD_DrawLine+0x104>)
 8001126:	fba3 1302 	umull	r1, r3, r3, r2
 800112a:	0999      	lsrs	r1, r3, #6
 800112c:	460b      	mov	r3, r1
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	440b      	add	r3, r1
 8001132:	015b      	lsls	r3, r3, #5
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	b2db      	uxtb	r3, r3
 8001138:	b29b      	uxth	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	0052      	lsls	r2, r2, #1
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	81bb      	strh	r3, [r7, #12]

	for (uint8_t j = 0; j < length; j++) {
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e054      	b.n	80011f4 <LCD_DrawLine+0xf0>
		uint8_t additionalOffset = ((startingPoint + j) % 96) / 8;
 800114a:	79ba      	ldrb	r2, [r7, #6]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	441a      	add	r2, r3
 8001150:	4b2e      	ldr	r3, [pc, #184]	; (800120c <LCD_DrawLine+0x108>)
 8001152:	fb83 1302 	smull	r1, r3, r3, r2
 8001156:	1119      	asrs	r1, r3, #4
 8001158:	17d3      	asrs	r3, r2, #31
 800115a:	1ac9      	subs	r1, r1, r3
 800115c:	460b      	mov	r3, r1
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	440b      	add	r3, r1
 8001162:	015b      	lsls	r3, r3, #5
 8001164:	1ad1      	subs	r1, r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	2b00      	cmp	r3, #0
 800116a:	da00      	bge.n	800116e <LCD_DrawLine+0x6a>
 800116c:	3307      	adds	r3, #7
 800116e:	10db      	asrs	r3, r3, #3
 8001170:	72fb      	strb	r3, [r7, #11]
		if(negative){
 8001172:	793b      	ldrb	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d01e      	beq.n	80011b6 <LCD_DrawLine+0xb2>
			*(DispBuf + rowOffset + additionalOffset) &= ~(0x80
 8001178:	4b25      	ldr	r3, [pc, #148]	; (8001210 <LCD_DrawLine+0x10c>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	89b9      	ldrh	r1, [r7, #12]
 800117e:	7afb      	ldrb	r3, [r7, #11]
 8001180:	440b      	add	r3, r1
 8001182:	4413      	add	r3, r2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25a      	sxtb	r2, r3
							>> ((startingPoint + j) % 8));
 8001188:	79b9      	ldrb	r1, [r7, #6]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	440b      	add	r3, r1
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	2180      	movs	r1, #128	; 0x80
 8001196:	fa41 f303 	asr.w	r3, r1, r3
			*(DispBuf + rowOffset + additionalOffset) &= ~(0x80
 800119a:	b25b      	sxtb	r3, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	b25b      	sxtb	r3, r3
 80011a0:	4013      	ands	r3, r2
 80011a2:	b258      	sxtb	r0, r3
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <LCD_DrawLine+0x10c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	89b9      	ldrh	r1, [r7, #12]
 80011aa:	7afb      	ldrb	r3, [r7, #11]
 80011ac:	440b      	add	r3, r1
 80011ae:	4413      	add	r3, r2
 80011b0:	b2c2      	uxtb	r2, r0
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	e01b      	b.n	80011ee <LCD_DrawLine+0xea>
		}else{
			*(DispBuf + rowOffset + additionalOffset) |= (0x80
 80011b6:	4b16      	ldr	r3, [pc, #88]	; (8001210 <LCD_DrawLine+0x10c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	89b9      	ldrh	r1, [r7, #12]
 80011bc:	7afb      	ldrb	r3, [r7, #11]
 80011be:	440b      	add	r3, r1
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b25a      	sxtb	r2, r3
				>> ((startingPoint + j) % 8));
 80011c6:	79b9      	ldrb	r1, [r7, #6]
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	440b      	add	r3, r1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	2180      	movs	r1, #128	; 0x80
 80011d4:	fa41 f303 	asr.w	r3, r1, r3
			*(DispBuf + rowOffset + additionalOffset) |= (0x80
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b258      	sxtb	r0, r3
 80011de:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <LCD_DrawLine+0x10c>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	89b9      	ldrh	r1, [r7, #12]
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	440b      	add	r3, r1
 80011e8:	4413      	add	r3, r2
 80011ea:	b2c2      	uxtb	r2, r0
 80011ec:	701a      	strb	r2, [r3, #0]
	for (uint8_t j = 0; j < length; j++) {
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	3301      	adds	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d3a6      	bcc.n	800114a <LCD_DrawLine+0x46>
		}

	}
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bc90      	pop	{r4, r7}
 8001206:	4770      	bx	lr
 8001208:	aaaaaaab 	.word	0xaaaaaaab
 800120c:	2aaaaaab 	.word	0x2aaaaaab
 8001210:	2000009c 	.word	0x2000009c

08001214 <LCD_Fill>:
		DispBuf[invt] = ~DispBuf[invt];
	} while (invt);
}

//Fill screen with either black or white color
void LCD_Fill(bool fill) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	memset(DispBuf, (fill ? 0 : 0xFF), 1152);
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <LCD_Fill+0x2c>)
 8001220:	6818      	ldr	r0, [r3, #0]
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <LCD_Fill+0x18>
 8001228:	2300      	movs	r3, #0
 800122a:	e000      	b.n	800122e <LCD_Fill+0x1a>
 800122c:	23ff      	movs	r3, #255	; 0xff
 800122e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001232:	4619      	mov	r1, r3
 8001234:	f002 faea 	bl	800380c <memset>
//	HAL_Delay(10);
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	2000009c 	.word	0x2000009c
 8001244:	00000000 	.word	0x00000000

08001248 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800124e:	f000 fd3f 	bl	8001cd0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001252:	f000 fa67 	bl	8001724 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001256:	f000 fb31 	bl	80018bc <MX_GPIO_Init>
	MX_SPI1_Init();
 800125a:	f000 faa9 	bl	80017b0 <MX_SPI1_Init>
	MX_TIM1_Init();
 800125e:	f000 fadd 	bl	800181c <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8001262:	4867      	ldr	r0, [pc, #412]	; (8001400 <main+0x1b8>)
 8001264:	f001 fef6 	bl	8003054 <HAL_TIM_Base_Start_IT>

	// ALL GPIO AND BUSES MUST BE INITED BEFORE CALL THIS FUNCTION
	LCD_Init(&MemDisp, &hspi1, GPIOA, CS_Pin);
 8001268:	2310      	movs	r3, #16
 800126a:	4a66      	ldr	r2, [pc, #408]	; (8001404 <main+0x1bc>)
 800126c:	4966      	ldr	r1, [pc, #408]	; (8001408 <main+0x1c0>)
 800126e:	4867      	ldr	r0, [pc, #412]	; (800140c <main+0x1c4>)
 8001270:	f7ff fdd2 	bl	8000e18 <LCD_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// Game tick
		tick++;
 8001274:	4b66      	ldr	r3, [pc, #408]	; (8001410 <main+0x1c8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	3301      	adds	r3, #1
 800127a:	4a65      	ldr	r2, [pc, #404]	; (8001410 <main+0x1c8>)
 800127c:	6013      	str	r3, [r2, #0]

		// Speed Gredual Control
		if (overallSpeed < 2) {
 800127e:	4b65      	ldr	r3, [pc, #404]	; (8001414 <main+0x1cc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fd44 	bl	8000d14 <__aeabi_fcmplt>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d012      	beq.n	80012b8 <main+0x70>
			overallSpeed += 0.0001;
 8001292:	4b60      	ldr	r3, [pc, #384]	; (8001414 <main+0x1cc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f9e8 	bl	800066c <__aeabi_f2d>
 800129c:	a356      	add	r3, pc, #344	; (adr r3, 80013f8 <main+0x1b0>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f885 	bl	80003b0 <__adddf3>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fa35 	bl	800071c <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a57      	ldr	r2, [pc, #348]	; (8001414 <main+0x1cc>)
 80012b6:	6013      	str	r3, [r2, #0]
		}

		if (JUMP_BUTTON_PRESSED) {
 80012b8:	4b57      	ldr	r3, [pc, #348]	; (8001418 <main+0x1d0>)
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00d      	beq.n	80012dc <main+0x94>
			if(!isJumping) {
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <main+0x1d4>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	f083 0301 	eor.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <main+0x8e>
				isJumping = 1;
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <main+0x1d4>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e002      	b.n	80012dc <main+0x94>
			} else {
				JUMP_BUTTON_PRESSED = 0;
 80012d6:	4b50      	ldr	r3, [pc, #320]	; (8001418 <main+0x1d0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	705a      	strb	r2, [r3, #1]
			}
		}

		if (isJumping) {
 80012dc:	4b4f      	ldr	r3, [pc, #316]	; (800141c <main+0x1d4>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80a7 	beq.w	8001434 <main+0x1ec>
			if (jumpTick < JumpTickMax / overallSpeed - 1) {
 80012e6:	4b4e      	ldr	r3, [pc, #312]	; (8001420 <main+0x1d8>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fb20 	bl	8000930 <__aeabi_i2f>
 80012f0:	4604      	mov	r4, r0
 80012f2:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <main+0x1dc>)
 80012f4:	4b47      	ldr	r3, [pc, #284]	; (8001414 <main+0x1cc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	4610      	mov	r0, r2
 80012fc:	f7ff fc20 	bl	8000b40 <__aeabi_fdiv>
 8001300:	4603      	mov	r3, r0
 8001302:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fa5c 	bl	80007c4 <__aeabi_fsub>
 800130c:	4603      	mov	r3, r0
 800130e:	4619      	mov	r1, r3
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff fcff 	bl	8000d14 <__aeabi_fcmplt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d05b      	beq.n	80013d4 <main+0x18c>
				jumpTick++;
 800131c:	4b40      	ldr	r3, [pc, #256]	; (8001420 <main+0x1d8>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b3e      	ldr	r3, [pc, #248]	; (8001420 <main+0x1d8>)
 8001326:	701a      	strb	r2, [r3, #0]
				dinoVerticalMovement = jumpTick
						* (jumpTick - JumpTickMax / overallSpeed)
 8001328:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <main+0x1d8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff faff 	bl	8000930 <__aeabi_i2f>
 8001332:	4604      	mov	r4, r0
 8001334:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <main+0x1d8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff faf9 	bl	8000930 <__aeabi_i2f>
 800133e:	4605      	mov	r5, r0
 8001340:	4a38      	ldr	r2, [pc, #224]	; (8001424 <main+0x1dc>)
 8001342:	4b34      	ldr	r3, [pc, #208]	; (8001414 <main+0x1cc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4619      	mov	r1, r3
 8001348:	4610      	mov	r0, r2
 800134a:	f7ff fbf9 	bl	8000b40 <__aeabi_fdiv>
 800134e:	4603      	mov	r3, r0
 8001350:	4619      	mov	r1, r3
 8001352:	4628      	mov	r0, r5
 8001354:	f7ff fa36 	bl	80007c4 <__aeabi_fsub>
 8001358:	4603      	mov	r3, r0
 800135a:	4619      	mov	r1, r3
 800135c:	4620      	mov	r0, r4
 800135e:	f7ff fb3b 	bl	80009d8 <__aeabi_fmul>
 8001362:	4603      	mov	r3, r0
 8001364:	461c      	mov	r4, r3
						* (4
								/ ((JumpTickMax / overallSpeed)
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <main+0x1dc>)
 8001368:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <main+0x1cc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	4610      	mov	r0, r2
 8001370:	f7ff fbe6 	bl	8000b40 <__aeabi_fdiv>
 8001374:	4603      	mov	r3, r0
 8001376:	461d      	mov	r5, r3
										* (JumpTickMax / overallSpeed)))
 8001378:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <main+0x1dc>)
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <main+0x1cc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f7ff fbdd 	bl	8000b40 <__aeabi_fdiv>
 8001386:	4603      	mov	r3, r0
 8001388:	4619      	mov	r1, r3
 800138a:	4628      	mov	r0, r5
 800138c:	f7ff fb24 	bl	80009d8 <__aeabi_fmul>
 8001390:	4603      	mov	r3, r0
								/ ((JumpTickMax / overallSpeed)
 8001392:	4619      	mov	r1, r3
 8001394:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8001398:	f7ff fbd2 	bl	8000b40 <__aeabi_fdiv>
 800139c:	4603      	mov	r3, r0
						* (4
 800139e:	4619      	mov	r1, r3
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff fb19 	bl	80009d8 <__aeabi_fmul>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
						* DinoJumpHeight + DinoGroundPos;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <main+0x1e0>)
 80013ac:	4619      	mov	r1, r3
 80013ae:	4610      	mov	r0, r2
 80013b0:	f7ff fb12 	bl	80009d8 <__aeabi_fmul>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b1c      	ldr	r3, [pc, #112]	; (800142c <main+0x1e4>)
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff fa03 	bl	80007c8 <__addsf3>
 80013c2:	4603      	mov	r3, r0
				dinoVerticalMovement = jumpTick
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fcf3 	bl	8000db0 <__aeabi_f2uiz>
 80013ca:	4603      	mov	r3, r0
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <main+0x1e8>)
 80013d0:	701a      	strb	r2, [r3, #0]
 80013d2:	e037      	b.n	8001444 <main+0x1fc>
			} else {
				isJumping = 0;
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <main+0x1d4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
				jumpTick = 0;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <main+0x1d8>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
				dinoVerticalMovement = DinoGroundPos;
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <main+0x1e4>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fce4 	bl	8000db0 <__aeabi_f2uiz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <main+0x1e8>)
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	e028      	b.n	8001444 <main+0x1fc>
 80013f2:	bf00      	nop
 80013f4:	f3af 8000 	nop.w
 80013f8:	eb1c432d 	.word	0xeb1c432d
 80013fc:	3f1a36e2 	.word	0x3f1a36e2
 8001400:	200000fc 	.word	0x200000fc
 8001404:	40010800 	.word	0x40010800
 8001408:	200000a4 	.word	0x200000a4
 800140c:	20000144 	.word	0x20000144
 8001410:	20000150 	.word	0x20000150
 8001414:	20000008 	.word	0x20000008
 8001418:	20000158 	.word	0x20000158
 800141c:	2000015e 	.word	0x2000015e
 8001420:	2000015f 	.word	0x2000015f
 8001424:	43700000 	.word	0x43700000
 8001428:	42200000 	.word	0x42200000
 800142c:	42680000 	.word	0x42680000
 8001430:	20000160 	.word	0x20000160
			}
		} else {
			dinoVerticalMovement = DinoGroundPos;
 8001434:	4ba4      	ldr	r3, [pc, #656]	; (80016c8 <main+0x480>)
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fcba 	bl	8000db0 <__aeabi_f2uiz>
 800143c:	4603      	mov	r3, r0
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4ba2      	ldr	r3, [pc, #648]	; (80016cc <main+0x484>)
 8001442:	701a      	strb	r2, [r3, #0]
		}

		groundMovement += 0.25 * overallSpeed;
 8001444:	4ba2      	ldr	r3, [pc, #648]	; (80016d0 <main+0x488>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f90f 	bl	800066c <__aeabi_f2d>
 800144e:	4604      	mov	r4, r0
 8001450:	460d      	mov	r5, r1
 8001452:	4ba0      	ldr	r3, [pc, #640]	; (80016d4 <main+0x48c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f908 	bl	800066c <__aeabi_f2d>
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b9d      	ldr	r3, [pc, #628]	; (80016d8 <main+0x490>)
 8001462:	f7fe fe75 	bl	8000150 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7fe ff9f 	bl	80003b0 <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4610      	mov	r0, r2
 8001478:	4619      	mov	r1, r3
 800147a:	f7ff f94f 	bl	800071c <__aeabi_d2f>
 800147e:	4603      	mov	r3, r0
 8001480:	4a93      	ldr	r2, [pc, #588]	; (80016d0 <main+0x488>)
 8001482:	6013      	str	r3, [r2, #0]
		skyMovement += 0.05 * overallSpeed;
 8001484:	4b95      	ldr	r3, [pc, #596]	; (80016dc <main+0x494>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f8ef 	bl	800066c <__aeabi_f2d>
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
 8001492:	4b90      	ldr	r3, [pc, #576]	; (80016d4 <main+0x48c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f8e8 	bl	800066c <__aeabi_f2d>
 800149c:	a388      	add	r3, pc, #544	; (adr r3, 80016c0 <main+0x478>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7fe fe55 	bl	8000150 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe ff7f 	bl	80003b0 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4610      	mov	r0, r2
 80014b8:	4619      	mov	r1, r3
 80014ba:	f7ff f92f 	bl	800071c <__aeabi_d2f>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a86      	ldr	r2, [pc, #536]	; (80016dc <main+0x494>)
 80014c2:	6013      	str	r3, [r2, #0]

		plantX = (int) (96 - groundMovement);
 80014c4:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <main+0x488>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4885      	ldr	r0, [pc, #532]	; (80016e0 <main+0x498>)
 80014cc:	f7ff f97a 	bl	80007c4 <__aeabi_fsub>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fc46 	bl	8000d64 <__aeabi_f2iz>
 80014d8:	4603      	mov	r3, r0
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <main+0x49c>)
 80014de:	701a      	strb	r2, [r3, #0]
		dinoX = (int) 4;
 80014e0:	4b81      	ldr	r3, [pc, #516]	; (80016e8 <main+0x4a0>)
 80014e2:	2204      	movs	r2, #4
 80014e4:	701a      	strb	r2, [r3, #0]
		cloudX = (int) (96 - skyMovement);
 80014e6:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <main+0x494>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	487c      	ldr	r0, [pc, #496]	; (80016e0 <main+0x498>)
 80014ee:	f7ff f969 	bl	80007c4 <__aeabi_fsub>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fc35 	bl	8000d64 <__aeabi_f2iz>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <main+0x4a4>)
 8001500:	701a      	strb	r2, [r3, #0]
		dinoY = dinoVerticalMovement;
 8001502:	4b72      	ldr	r3, [pc, #456]	; (80016cc <main+0x484>)
 8001504:	781a      	ldrb	r2, [r3, #0]
 8001506:	4b7a      	ldr	r3, [pc, #488]	; (80016f0 <main+0x4a8>)
 8001508:	701a      	strb	r2, [r3, #0]

		if (groundMovement >= 96)
 800150a:	4b71      	ldr	r3, [pc, #452]	; (80016d0 <main+0x488>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4974      	ldr	r1, [pc, #464]	; (80016e0 <main+0x498>)
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fc13 	bl	8000d3c <__aeabi_fcmpge>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <main+0x2dc>
			groundMovement = 0;
 800151c:	4b6c      	ldr	r3, [pc, #432]	; (80016d0 <main+0x488>)
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
		if (skyMovement >= 96)
 8001524:	4b6d      	ldr	r3, [pc, #436]	; (80016dc <main+0x494>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	496d      	ldr	r1, [pc, #436]	; (80016e0 <main+0x498>)
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fc06 	bl	8000d3c <__aeabi_fcmpge>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <main+0x2f6>
			skyMovement = 0;
 8001536:	4b69      	ldr	r3, [pc, #420]	; (80016dc <main+0x494>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

		// Reset canvas
		LCD_Fill(true);
 800153e:	2001      	movs	r0, #1
 8001540:	f7ff fe68 	bl	8001214 <LCD_Fill>
		LCD_DrawLine(77, 0, 96, false);
 8001544:	2300      	movs	r3, #0
 8001546:	2260      	movs	r2, #96	; 0x60
 8001548:	2100      	movs	r1, #0
 800154a:	204d      	movs	r0, #77	; 0x4d
 800154c:	f7ff fdda 	bl	8001104 <LCD_DrawLine>

		// Culling masks
		// Plant
		LCD_DrawLine(77, plantX + 2, 6, true);
 8001550:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <main+0x49c>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	3302      	adds	r3, #2
 8001556:	b2d9      	uxtb	r1, r3
 8001558:	2301      	movs	r3, #1
 800155a:	2206      	movs	r2, #6
 800155c:	204d      	movs	r0, #77	; 0x4d
 800155e:	f7ff fdd1 	bl	8001104 <LCD_DrawLine>
		// Dino
		LCD_DrawLine(dinoY + 19, dinoX + 3, 10, true);
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <main+0x4a8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	3313      	adds	r3, #19
 8001568:	b2d8      	uxtb	r0, r3
 800156a:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <main+0x4a0>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	3303      	adds	r3, #3
 8001570:	b2d9      	uxtb	r1, r3
 8001572:	2301      	movs	r3, #1
 8001574:	220a      	movs	r2, #10
 8001576:	f7ff fdc5 	bl	8001104 <LCD_DrawLine>
		LCD_DrawLine(dinoY + 6, dinoX + 15, 5, true);
 800157a:	4b5d      	ldr	r3, [pc, #372]	; (80016f0 <main+0x4a8>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	3306      	adds	r3, #6
 8001580:	b2d8      	uxtb	r0, r3
 8001582:	4b59      	ldr	r3, [pc, #356]	; (80016e8 <main+0x4a0>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	330f      	adds	r3, #15
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	2301      	movs	r3, #1
 800158c:	2205      	movs	r2, #5
 800158e:	f7ff fdb9 	bl	8001104 <LCD_DrawLine>

		// Render plants
		LCD_LoadPart((uint8_t*) Plant1, plantX, 59, 2, 22, false);
 8001592:	4b54      	ldr	r3, [pc, #336]	; (80016e4 <main+0x49c>)
 8001594:	7819      	ldrb	r1, [r3, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	2316      	movs	r3, #22
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	2302      	movs	r3, #2
 80015a0:	223b      	movs	r2, #59	; 0x3b
 80015a2:	4854      	ldr	r0, [pc, #336]	; (80016f4 <main+0x4ac>)
 80015a4:	f7ff fcea 	bl	8000f7c <LCD_LoadPart>

		// Render fire
		if (!isJumping) {
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <main+0x4b0>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f083 0301 	eor.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01b      	beq.n	80015ee <main+0x3a6>
			if (FIRE_BUTTON_PRESSED) {
 80015b6:	4b51      	ldr	r3, [pc, #324]	; (80016fc <main+0x4b4>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d017      	beq.n	80015ee <main+0x3a6>
				LCD_LoadPart((uint8_t*) Fire[(tick / 50) % 2], 24, 52, 9, 25, false);
 80015be:	4b50      	ldr	r3, [pc, #320]	; (8001700 <main+0x4b8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a50      	ldr	r2, [pc, #320]	; (8001704 <main+0x4bc>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 0201 	and.w	r2, r3, #1
 80015ce:	4613      	mov	r3, r2
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	011a      	lsls	r2, r3, #4
 80015d6:	1ad2      	subs	r2, r2, r3
 80015d8:	4b4b      	ldr	r3, [pc, #300]	; (8001708 <main+0x4c0>)
 80015da:	18d0      	adds	r0, r2, r3
 80015dc:	2300      	movs	r3, #0
 80015de:	9301      	str	r3, [sp, #4]
 80015e0:	2319      	movs	r3, #25
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2309      	movs	r3, #9
 80015e6:	2234      	movs	r2, #52	; 0x34
 80015e8:	2118      	movs	r1, #24
 80015ea:	f7ff fcc7 	bl	8000f7c <LCD_LoadPart>
			}
		}

		// Render dino!
		if (isJumping) {
 80015ee:	4b42      	ldr	r3, [pc, #264]	; (80016f8 <main+0x4b0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00c      	beq.n	8001610 <main+0x3c8>
			LCD_LoadPart((uint8_t*) DinoNormalS, dinoX, dinoY, 3, 22, false);
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <main+0x4a0>)
 80015f8:	7819      	ldrb	r1, [r3, #0]
 80015fa:	4b3d      	ldr	r3, [pc, #244]	; (80016f0 <main+0x4a8>)
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	2300      	movs	r3, #0
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	2316      	movs	r3, #22
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2303      	movs	r3, #3
 8001608:	4840      	ldr	r0, [pc, #256]	; (800170c <main+0x4c4>)
 800160a:	f7ff fcb7 	bl	8000f7c <LCD_LoadPart>
 800160e:	e048      	b.n	80016a2 <main+0x45a>
		} else {
			// Fire dino
			if (FIRE_BUTTON_PRESSED) {
 8001610:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <main+0x4b4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d022      	beq.n	800165e <main+0x416>
				LCD_LoadPart((uint8_t*) DinoFireRunning[(tick / (int)(60 / overallSpeed)) % 2],
 8001618:	4b39      	ldr	r3, [pc, #228]	; (8001700 <main+0x4b8>)
 800161a:	681c      	ldr	r4, [r3, #0]
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <main+0x48c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	483b      	ldr	r0, [pc, #236]	; (8001710 <main+0x4c8>)
 8001624:	f7ff fa8c 	bl	8000b40 <__aeabi_fdiv>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fb9a 	bl	8000d64 <__aeabi_f2iz>
 8001630:	4603      	mov	r3, r0
 8001632:	fbb4 f3f3 	udiv	r3, r4, r3
 8001636:	f003 0201 	and.w	r2, r3, #1
 800163a:	4613      	mov	r3, r2
 800163c:	015b      	lsls	r3, r3, #5
 800163e:	4413      	add	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4a34      	ldr	r2, [pc, #208]	; (8001714 <main+0x4cc>)
 8001644:	1898      	adds	r0, r3, r2
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <main+0x4a0>)
 8001648:	7819      	ldrb	r1, [r3, #0]
 800164a:	4b29      	ldr	r3, [pc, #164]	; (80016f0 <main+0x4a8>)
 800164c:	781a      	ldrb	r2, [r3, #0]
 800164e:	2300      	movs	r3, #0
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	2316      	movs	r3, #22
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2303      	movs	r3, #3
 8001658:	f7ff fc90 	bl	8000f7c <LCD_LoadPart>
 800165c:	e021      	b.n	80016a2 <main+0x45a>
						dinoX, dinoY, 3, 22, false);
			} else {
				LCD_LoadPart((uint8_t*) DinoNormalRunning[(tick / (int)(60 / overallSpeed)) % 2],
 800165e:	4b28      	ldr	r3, [pc, #160]	; (8001700 <main+0x4b8>)
 8001660:	681c      	ldr	r4, [r3, #0]
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <main+0x48c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	4829      	ldr	r0, [pc, #164]	; (8001710 <main+0x4c8>)
 800166a:	f7ff fa69 	bl	8000b40 <__aeabi_fdiv>
 800166e:	4603      	mov	r3, r0
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fb77 	bl	8000d64 <__aeabi_f2iz>
 8001676:	4603      	mov	r3, r0
 8001678:	fbb4 f3f3 	udiv	r3, r4, r3
 800167c:	f003 0201 	and.w	r2, r3, #1
 8001680:	4613      	mov	r3, r2
 8001682:	015b      	lsls	r3, r3, #5
 8001684:	4413      	add	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4a23      	ldr	r2, [pc, #140]	; (8001718 <main+0x4d0>)
 800168a:	1898      	adds	r0, r3, r2
 800168c:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <main+0x4a0>)
 800168e:	7819      	ldrb	r1, [r3, #0]
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <main+0x4a8>)
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2316      	movs	r3, #22
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2303      	movs	r3, #3
 800169e:	f7ff fc6d 	bl	8000f7c <LCD_LoadPart>
						dinoX, dinoY, 3, 22, false);
			}
		}

		LCD_LoadPart((uint8_t*) Cloud, cloudX, 18, 6, 14, false);
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <main+0x4a4>)
 80016a4:	7819      	ldrb	r1, [r3, #0]
 80016a6:	2300      	movs	r3, #0
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	230e      	movs	r3, #14
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2306      	movs	r3, #6
 80016b0:	2212      	movs	r2, #18
 80016b2:	481a      	ldr	r0, [pc, #104]	; (800171c <main+0x4d4>)
 80016b4:	f7ff fc62 	bl	8000f7c <LCD_LoadPart>
		LCD_Update(&MemDisp);
 80016b8:	4819      	ldr	r0, [pc, #100]	; (8001720 <main+0x4d8>)
 80016ba:	f7ff fbed 	bl	8000e98 <LCD_Update>
		tick++;
 80016be:	e5d9      	b.n	8001274 <main+0x2c>
 80016c0:	9999999a 	.word	0x9999999a
 80016c4:	3fa99999 	.word	0x3fa99999
 80016c8:	42680000 	.word	0x42680000
 80016cc:	20000160 	.word	0x20000160
 80016d0:	20000164 	.word	0x20000164
 80016d4:	20000008 	.word	0x20000008
 80016d8:	3fd00000 	.word	0x3fd00000
 80016dc:	20000168 	.word	0x20000168
 80016e0:	42c00000 	.word	0x42c00000
 80016e4:	2000016c 	.word	0x2000016c
 80016e8:	2000016d 	.word	0x2000016d
 80016ec:	2000016e 	.word	0x2000016e
 80016f0:	2000016f 	.word	0x2000016f
 80016f4:	080039fc 	.word	0x080039fc
 80016f8:	2000015e 	.word	0x2000015e
 80016fc:	20000154 	.word	0x20000154
 8001700:	20000150 	.word	0x20000150
 8001704:	51eb851f 	.word	0x51eb851f
 8001708:	08003b74 	.word	0x08003b74
 800170c:	08003aac 	.word	0x08003aac
 8001710:	42700000 	.word	0x42700000
 8001714:	08003af0 	.word	0x08003af0
 8001718:	08003a28 	.word	0x08003a28
 800171c:	080039a8 	.word	0x080039a8
 8001720:	20000144 	.word	0x20000144

08001724 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b090      	sub	sp, #64	; 0x40
 8001728:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800172a:	f107 0318 	add.w	r3, r7, #24
 800172e:	2228      	movs	r2, #40	; 0x28
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f002 f86a 	bl	800380c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001746:	2301      	movs	r3, #1
 8001748:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800174a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800174e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001754:	2301      	movs	r3, #1
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001758:	2302      	movs	r3, #2
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001760:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001762:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001768:	f107 0318 	add.w	r3, r7, #24
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fdd3 	bl	8002318 <HAL_RCC_OscConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <SystemClock_Config+0x58>
		Error_Handler();
 8001778:	f000 f97a 	bl	8001a70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800177c:	230f      	movs	r3, #15
 800177e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001780:	2302      	movs	r3, #2
 8001782:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800178c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2102      	movs	r1, #2
 8001796:	4618      	mov	r0, r3
 8001798:	f001 f840 	bl	800281c <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x82>
		Error_Handler();
 80017a2:	f000 f965 	bl	8001a70 <Error_Handler>
	}
}
 80017a6:	bf00      	nop
 80017a8:	3740      	adds	r7, #64	; 0x40
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <MX_SPI1_Init+0x64>)
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <MX_SPI1_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_SPI1_Init+0x64>)
 80017bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_SPI1_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_SPI1_Init+0x64>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_SPI1_Init+0x64>)
 80017dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017e0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_SPI1_Init+0x64>)
 80017e4:	2210      	movs	r2, #16
 80017e6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_SPI1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_SPI1_Init+0x64>)
 80017fc:	220a      	movs	r2, #10
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_SPI1_Init+0x64>)
 8001802:	f001 f971 	bl	8002ae8 <HAL_SPI_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_SPI1_Init+0x60>
		Error_Handler();
 800180c:	f000 f930 	bl	8001a70 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200000a4 	.word	0x200000a4
 8001818:	40013000 	.word	0x40013000

0800181c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001830:	463b      	mov	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <MX_TIM1_Init+0x98>)
 800183a:	4a1f      	ldr	r2, [pc, #124]	; (80018b8 <MX_TIM1_Init+0x9c>)
 800183c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 6000 - 1;
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_TIM1_Init+0x98>)
 8001840:	f241 726f 	movw	r2, #5999	; 0x176f
 8001844:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <MX_TIM1_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_TIM1_Init+0x98>)
 800184e:	2263      	movs	r2, #99	; 0x63
 8001850:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_TIM1_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MX_TIM1_Init+0x98>)
 800185a:	2200      	movs	r2, #0
 800185c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_TIM1_Init+0x98>)
 8001860:	2280      	movs	r2, #128	; 0x80
 8001862:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001864:	4813      	ldr	r0, [pc, #76]	; (80018b4 <MX_TIM1_Init+0x98>)
 8001866:	f001 fba5 	bl	8002fb4 <HAL_TIM_Base_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0x58>
		Error_Handler();
 8001870:	f000 f8fe 	bl	8001a70 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001878:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4619      	mov	r1, r3
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <MX_TIM1_Init+0x98>)
 8001882:	f001 fd41 	bl	8003308 <HAL_TIM_ConfigClockSource>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM1_Init+0x74>
		Error_Handler();
 800188c:	f000 f8f0 	bl	8001a70 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001890:	2300      	movs	r3, #0
 8001892:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001898:	463b      	mov	r3, r7
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_TIM1_Init+0x98>)
 800189e:	f001 ff13 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80018a8:	f000 f8e2 	bl	8001a70 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	200000fc 	.word	0x200000fc
 80018b8:	40012c00 	.word	0x40012c00

080018bc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80018d0:	4b25      	ldr	r3, [pc, #148]	; (8001968 <MX_GPIO_Init+0xac>)
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	4a24      	ldr	r2, [pc, #144]	; (8001968 <MX_GPIO_Init+0xac>)
 80018d6:	f043 0320 	orr.w	r3, r3, #32
 80018da:	6193      	str	r3, [r2, #24]
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <MX_GPIO_Init+0xac>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018e8:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <MX_GPIO_Init+0xac>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <MX_GPIO_Init+0xac>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b1c      	ldr	r3, [pc, #112]	; (8001968 <MX_GPIO_Init+0xac>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <MX_GPIO_Init+0xac>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a18      	ldr	r2, [pc, #96]	; (8001968 <MX_GPIO_Init+0xac>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b16      	ldr	r3, [pc, #88]	; (8001968 <MX_GPIO_Init+0xac>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001918:	2201      	movs	r2, #1
 800191a:	2104      	movs	r1, #4
 800191c:	4813      	ldr	r0, [pc, #76]	; (800196c <MX_GPIO_Init+0xb0>)
 800191e:	f000 fce2 	bl	80022e6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001922:	2200      	movs	r2, #0
 8001924:	2110      	movs	r1, #16
 8001926:	4811      	ldr	r0, [pc, #68]	; (800196c <MX_GPIO_Init+0xb0>)
 8001928:	f000 fcdd 	bl	80022e6 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_B_Pin CS_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | CS_Pin;
 800192c:	2314      	movs	r3, #20
 800192e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001930:	2301      	movs	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2302      	movs	r3, #2
 800193a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193c:	f107 0310 	add.w	r3, r7, #16
 8001940:	4619      	mov	r1, r3
 8001942:	480a      	ldr	r0, [pc, #40]	; (800196c <MX_GPIO_Init+0xb0>)
 8001944:	f000 fb34 	bl	8001fb0 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY0_Pin KEY1_Pin */
	GPIO_InitStruct.Pin = KEY0_Pin | KEY1_Pin;
 8001948:	2303      	movs	r3, #3
 800194a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	4619      	mov	r1, r3
 800195a:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_GPIO_Init+0xb4>)
 800195c:	f000 fb28 	bl	8001fb0 <HAL_GPIO_Init>

}
 8001960:	bf00      	nop
 8001962:	3720      	adds	r7, #32
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	40021000 	.word	0x40021000
 800196c:	40010800 	.word	0x40010800
 8001970:	40010c00 	.word	0x40010c00

08001974 <KeyScan>:

/* USER CODE BEGIN 4 */
void KeyScan() {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0

	static uint8_t KeyBuffer[2] = { 0x00, 0x00 };

	KeyBuffer[0] = ((KeyBuffer[0] << 1) | (KEY0_STATE & 0x01));
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <KeyScan+0xc8>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	b25c      	sxtb	r4, r3
 8001982:	2101      	movs	r1, #1
 8001984:	482e      	ldr	r0, [pc, #184]	; (8001a40 <KeyScan+0xcc>)
 8001986:	f000 fc97 	bl	80022b8 <HAL_GPIO_ReadPin>
 800198a:	4603      	mov	r3, r0
 800198c:	b25b      	sxtb	r3, r3
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	b25b      	sxtb	r3, r3
 8001994:	4323      	orrs	r3, r4
 8001996:	b25b      	sxtb	r3, r3
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <KeyScan+0xc8>)
 800199c:	701a      	strb	r2, [r3, #0]
	KeyBuffer[1] = ((KeyBuffer[1] << 1) | (KEY1_STATE & 0x01));
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <KeyScan+0xc8>)
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b25c      	sxtb	r4, r3
 80019a6:	2102      	movs	r1, #2
 80019a8:	4825      	ldr	r0, [pc, #148]	; (8001a40 <KeyScan+0xcc>)
 80019aa:	f000 fc85 	bl	80022b8 <HAL_GPIO_ReadPin>
 80019ae:	4603      	mov	r3, r0
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	b25b      	sxtb	r3, r3
 80019b8:	4323      	orrs	r3, r4
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <KeyScan+0xc8>)
 80019c0:	705a      	strb	r2, [r3, #1]

	for (uint8_t j = 0; j < 2; j++) {
 80019c2:	2300      	movs	r3, #0
 80019c4:	71fb      	strb	r3, [r7, #7]
 80019c6:	e030      	b.n	8001a2a <KeyScan+0xb6>
		if ((KeyBuffer[j] | 0xf0) == 0xff) {
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <KeyScan+0xc8>)
 80019cc:	5cd3      	ldrb	r3, [r2, r3]
 80019ce:	f063 030f 	orn	r3, r3, #15
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2bff      	cmp	r3, #255	; 0xff
 80019d6:	d110      	bne.n	80019fa <KeyScan+0x86>
			if (!KeyState[j]) {
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	4a1a      	ldr	r2, [pc, #104]	; (8001a44 <KeyScan+0xd0>)
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	f083 0301 	eor.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <KeyScan+0x7c>
				KeyPressed[j] = 1;
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <KeyScan+0xd4>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 1;
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <KeyScan+0xd0>)
 80019f4:	2101      	movs	r1, #1
 80019f6:	54d1      	strb	r1, [r2, r3]
 80019f8:	e014      	b.n	8001a24 <KeyScan+0xb0>
		} else if ((KeyBuffer[j] | 0xf0) == 0xf0) {
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <KeyScan+0xc8>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	f063 030f 	orn	r3, r3, #15
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2bf0      	cmp	r3, #240	; 0xf0
 8001a08:	d10c      	bne.n	8001a24 <KeyScan+0xb0>
			if (KeyState[j]) {
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <KeyScan+0xd0>)
 8001a0e:	5cd3      	ldrb	r3, [r2, r3]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <KeyScan+0xa8>
				KeyReleased[j] = 1;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <KeyScan+0xd8>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 0;
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <KeyScan+0xd0>)
 8001a20:	2100      	movs	r1, #0
 8001a22:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < 2; j++) {
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	3301      	adds	r3, #1
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d9cb      	bls.n	80019c8 <KeyScan+0x54>
		}
	}
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000170 	.word	0x20000170
 8001a40:	40010c00 	.word	0x40010c00
 8001a44:	20000154 	.word	0x20000154
 8001a48:	20000158 	.word	0x20000158
 8001a4c:	2000015c 	.word	0x2000015c

08001a50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x14>
//		LEDB_TOGGLE;
		KeyScan();
 8001a60:	f7ff ff88 	bl	8001974 <KeyScan>

	}
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200000fc 	.word	0x200000fc

08001a70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a78:	e7fe      	b.n	8001a78 <Error_Handler+0x8>
	...

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <HAL_MspInit+0x5c>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_MspInit+0x60>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	4a04      	ldr	r2, [pc, #16]	; (8001adc <HAL_MspInit+0x60>)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000

08001ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b088      	sub	sp, #32
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0310 	add.w	r3, r7, #16
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_SPI_MspInit+0x70>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d123      	bne.n	8001b48 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <HAL_SPI_MspInit+0x74>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <HAL_SPI_MspInit+0x74>)
 8001b06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_SPI_MspInit+0x74>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_SPI_MspInit+0x74>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_SPI_MspInit+0x74>)
 8001b1e:	f043 0304 	orr.w	r3, r3, #4
 8001b22:	6193      	str	r3, [r2, #24]
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_SPI_MspInit+0x74>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b30:	23a0      	movs	r3, #160	; 0xa0
 8001b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4619      	mov	r1, r3
 8001b42:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_SPI_MspInit+0x78>)
 8001b44:	f000 fa34 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3720      	adds	r7, #32
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40013000 	.word	0x40013000
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40010800 	.word	0x40010800

08001b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_TIM_Base_MspInit+0x44>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d113      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <HAL_TIM_Base_MspInit+0x48>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <HAL_TIM_Base_MspInit+0x48>)
 8001b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b78:	6193      	str	r3, [r2, #24]
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <HAL_TIM_Base_MspInit+0x48>)
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2019      	movs	r0, #25
 8001b8c:	f000 f9d9 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b90:	2019      	movs	r0, #25
 8001b92:	f000 f9f2 	bl	8001f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <NMI_Handler+0x4>

08001bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <BusFault_Handler+0x4>

08001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <UsageFault_Handler+0x4>

08001bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr

08001bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bee:	f000 f8b5 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <TIM1_UP_IRQHandler+0x10>)
 8001bfe:	f001 fa7b 	bl	80030f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200000fc 	.word	0x200000fc

08001c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c14:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <_sbrk+0x5c>)
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <_sbrk+0x60>)
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c20:	4b13      	ldr	r3, [pc, #76]	; (8001c70 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d102      	bne.n	8001c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <_sbrk+0x64>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <_sbrk+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2e:	4b10      	ldr	r3, [pc, #64]	; (8001c70 <_sbrk+0x64>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4413      	add	r3, r2
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c3c:	f001 fdb4 	bl	80037a8 <__errno>
 8001c40:	4603      	mov	r3, r0
 8001c42:	220c      	movs	r2, #12
 8001c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	e009      	b.n	8001c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <_sbrk+0x64>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c52:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <_sbrk+0x64>)
 8001c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20005000 	.word	0x20005000
 8001c6c:	00000400 	.word	0x00000400
 8001c70:	20000174 	.word	0x20000174
 8001c74:	20000190 	.word	0x20000190

08001c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c86:	490d      	ldr	r1, [pc, #52]	; (8001cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c9c:	4c0a      	ldr	r4, [pc, #40]	; (8001cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001caa:	f7ff ffe5 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cae:	f001 fd81 	bl	80037b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cb2:	f7ff fac9 	bl	8001248 <main>
  bx lr
 8001cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cbc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001cc0:	08003d50 	.word	0x08003d50
  ldr r2, =_sbss
 8001cc4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001cc8:	2000018c 	.word	0x2000018c

08001ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_2_IRQHandler>
	...

08001cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x28>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x28>)
 8001cda:	f043 0310 	orr.w	r3, r3, #16
 8001cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 f923 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fec6 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40022000 	.word	0x40022000

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f93b 	bl	8001f96 <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f000 f903 	bl	8001f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000014 	.word	0x20000014
 8001d58:	20000010 	.word	0x20000010

08001d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_IncTick+0x1c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_IncTick+0x20>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <HAL_IncTick+0x20>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	20000014 	.word	0x20000014
 8001d7c:	20000178 	.word	0x20000178

08001d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return uwTick;
 8001d84:	4b02      	ldr	r3, [pc, #8]	; (8001d90 <HAL_GetTick+0x10>)
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	20000178 	.word	0x20000178

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4906      	ldr	r1, [pc, #24]	; (8001e2c <__NVIC_EnableIRQ+0x34>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	; (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	; (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	; 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff90 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff2d 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f54:	f7ff ff42 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	68b9      	ldr	r1, [r7, #8]
 8001f5e:	6978      	ldr	r0, [r7, #20]
 8001f60:	f7ff ff90 	bl	8001e84 <NVIC_EncodePriority>
 8001f64:	4602      	mov	r2, r0
 8001f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff5f 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f72:	bf00      	nop
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff35 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ffa2 	bl	8001ee8 <SysTick_Config>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b08b      	sub	sp, #44	; 0x2c
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	e169      	b.n	8002298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f040 8158 	bne.w	8002292 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a9a      	ldr	r2, [pc, #616]	; (8002250 <HAL_GPIO_Init+0x2a0>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d05e      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8001fec:	4a98      	ldr	r2, [pc, #608]	; (8002250 <HAL_GPIO_Init+0x2a0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d875      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8001ff2:	4a98      	ldr	r2, [pc, #608]	; (8002254 <HAL_GPIO_Init+0x2a4>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d058      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8001ff8:	4a96      	ldr	r2, [pc, #600]	; (8002254 <HAL_GPIO_Init+0x2a4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d86f      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8001ffe:	4a96      	ldr	r2, [pc, #600]	; (8002258 <HAL_GPIO_Init+0x2a8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d052      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8002004:	4a94      	ldr	r2, [pc, #592]	; (8002258 <HAL_GPIO_Init+0x2a8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d869      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 800200a:	4a94      	ldr	r2, [pc, #592]	; (800225c <HAL_GPIO_Init+0x2ac>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d04c      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 8002010:	4a92      	ldr	r2, [pc, #584]	; (800225c <HAL_GPIO_Init+0x2ac>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d863      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8002016:	4a92      	ldr	r2, [pc, #584]	; (8002260 <HAL_GPIO_Init+0x2b0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d046      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
 800201c:	4a90      	ldr	r2, [pc, #576]	; (8002260 <HAL_GPIO_Init+0x2b0>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d85d      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 8002022:	2b12      	cmp	r3, #18
 8002024:	d82a      	bhi.n	800207c <HAL_GPIO_Init+0xcc>
 8002026:	2b12      	cmp	r3, #18
 8002028:	d859      	bhi.n	80020de <HAL_GPIO_Init+0x12e>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <HAL_GPIO_Init+0x80>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	080020ab 	.word	0x080020ab
 8002034:	08002085 	.word	0x08002085
 8002038:	08002097 	.word	0x08002097
 800203c:	080020d9 	.word	0x080020d9
 8002040:	080020df 	.word	0x080020df
 8002044:	080020df 	.word	0x080020df
 8002048:	080020df 	.word	0x080020df
 800204c:	080020df 	.word	0x080020df
 8002050:	080020df 	.word	0x080020df
 8002054:	080020df 	.word	0x080020df
 8002058:	080020df 	.word	0x080020df
 800205c:	080020df 	.word	0x080020df
 8002060:	080020df 	.word	0x080020df
 8002064:	080020df 	.word	0x080020df
 8002068:	080020df 	.word	0x080020df
 800206c:	080020df 	.word	0x080020df
 8002070:	080020df 	.word	0x080020df
 8002074:	0800208d 	.word	0x0800208d
 8002078:	080020a1 	.word	0x080020a1
 800207c:	4a79      	ldr	r2, [pc, #484]	; (8002264 <HAL_GPIO_Init+0x2b4>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d013      	beq.n	80020aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002082:	e02c      	b.n	80020de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	623b      	str	r3, [r7, #32]
          break;
 800208a:	e029      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	3304      	adds	r3, #4
 8002092:	623b      	str	r3, [r7, #32]
          break;
 8002094:	e024      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	3308      	adds	r3, #8
 800209c:	623b      	str	r3, [r7, #32]
          break;
 800209e:	e01f      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	330c      	adds	r3, #12
 80020a6:	623b      	str	r3, [r7, #32]
          break;
 80020a8:	e01a      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020b2:	2304      	movs	r3, #4
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e013      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d105      	bne.n	80020cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c0:	2308      	movs	r3, #8
 80020c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69fa      	ldr	r2, [r7, #28]
 80020c8:	611a      	str	r2, [r3, #16]
          break;
 80020ca:	e009      	b.n	80020e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020cc:	2308      	movs	r3, #8
 80020ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69fa      	ldr	r2, [r7, #28]
 80020d4:	615a      	str	r2, [r3, #20]
          break;
 80020d6:	e003      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
          break;
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x130>
          break;
 80020de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2bff      	cmp	r3, #255	; 0xff
 80020e4:	d801      	bhi.n	80020ea <HAL_GPIO_Init+0x13a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	e001      	b.n	80020ee <HAL_GPIO_Init+0x13e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	3304      	adds	r3, #4
 80020ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	2bff      	cmp	r3, #255	; 0xff
 80020f4:	d802      	bhi.n	80020fc <HAL_GPIO_Init+0x14c>
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0x152>
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	3b08      	subs	r3, #8
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	210f      	movs	r1, #15
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	401a      	ands	r2, r3
 8002114:	6a39      	ldr	r1, [r7, #32]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	431a      	orrs	r2, r3
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80b1 	beq.w	8002292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002130:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <HAL_GPIO_Init+0x2b8>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	4a4c      	ldr	r2, [pc, #304]	; (8002268 <HAL_GPIO_Init+0x2b8>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6193      	str	r3, [r2, #24]
 800213c:	4b4a      	ldr	r3, [pc, #296]	; (8002268 <HAL_GPIO_Init+0x2b8>)
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002148:	4a48      	ldr	r2, [pc, #288]	; (800226c <HAL_GPIO_Init+0x2bc>)
 800214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214c:	089b      	lsrs	r3, r3, #2
 800214e:	3302      	adds	r3, #2
 8002150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002154:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a40      	ldr	r2, [pc, #256]	; (8002270 <HAL_GPIO_Init+0x2c0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d013      	beq.n	800219c <HAL_GPIO_Init+0x1ec>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3f      	ldr	r2, [pc, #252]	; (8002274 <HAL_GPIO_Init+0x2c4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00d      	beq.n	8002198 <HAL_GPIO_Init+0x1e8>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3e      	ldr	r2, [pc, #248]	; (8002278 <HAL_GPIO_Init+0x2c8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <HAL_GPIO_Init+0x1e4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3d      	ldr	r2, [pc, #244]	; (800227c <HAL_GPIO_Init+0x2cc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <HAL_GPIO_Init+0x1e0>
 800218c:	2303      	movs	r3, #3
 800218e:	e006      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002190:	2304      	movs	r3, #4
 8002192:	e004      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002194:	2302      	movs	r3, #2
 8002196:	e002      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_GPIO_Init+0x1ee>
 800219c:	2300      	movs	r3, #0
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	f002 0203 	and.w	r2, r2, #3
 80021a4:	0092      	lsls	r2, r2, #2
 80021a6:	4093      	lsls	r3, r2
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ae:	492f      	ldr	r1, [pc, #188]	; (800226c <HAL_GPIO_Init+0x2bc>)
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d006      	beq.n	80021d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	492c      	ldr	r1, [pc, #176]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d6:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	43db      	mvns	r3, r3
 80021de:	4928      	ldr	r1, [pc, #160]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d006      	beq.n	80021fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021f0:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4922      	ldr	r1, [pc, #136]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	604b      	str	r3, [r1, #4]
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 8002200:	685a      	ldr	r2, [r3, #4]
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	43db      	mvns	r3, r3
 8002206:	491e      	ldr	r1, [pc, #120]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 8002208:	4013      	ands	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4918      	ldr	r1, [pc, #96]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	4914      	ldr	r1, [pc, #80]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 8002230:	4013      	ands	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d021      	beq.n	8002284 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	490e      	ldr	r1, [pc, #56]	; (8002280 <HAL_GPIO_Init+0x2d0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
 800224c:	e021      	b.n	8002292 <HAL_GPIO_Init+0x2e2>
 800224e:	bf00      	nop
 8002250:	10320000 	.word	0x10320000
 8002254:	10310000 	.word	0x10310000
 8002258:	10220000 	.word	0x10220000
 800225c:	10210000 	.word	0x10210000
 8002260:	10120000 	.word	0x10120000
 8002264:	10110000 	.word	0x10110000
 8002268:	40021000 	.word	0x40021000
 800226c:	40010000 	.word	0x40010000
 8002270:	40010800 	.word	0x40010800
 8002274:	40010c00 	.word	0x40010c00
 8002278:	40011000 	.word	0x40011000
 800227c:	40011400 	.word	0x40011400
 8002280:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_GPIO_Init+0x304>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	43db      	mvns	r3, r3
 800228c:	4909      	ldr	r1, [pc, #36]	; (80022b4 <HAL_GPIO_Init+0x304>)
 800228e:	4013      	ands	r3, r2
 8002290:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	3301      	adds	r3, #1
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f47f ae8e 	bne.w	8001fc4 <HAL_GPIO_Init+0x14>
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	372c      	adds	r7, #44	; 0x2c
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40010400 	.word	0x40010400

080022b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	887b      	ldrh	r3, [r7, #2]
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d0:	2301      	movs	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e001      	b.n	80022da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022da:	7bfb      	ldrb	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	460b      	mov	r3, r1
 80022f0:	807b      	strh	r3, [r7, #2]
 80022f2:	4613      	mov	r3, r2
 80022f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f6:	787b      	ldrb	r3, [r7, #1]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002302:	e003      	b.n	800230c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	041a      	lsls	r2, r3, #16
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	611a      	str	r2, [r3, #16]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
	...

08002318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e272      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8087 	beq.w	8002446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002338:	4b92      	ldr	r3, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 030c 	and.w	r3, r3, #12
 8002340:	2b04      	cmp	r3, #4
 8002342:	d00c      	beq.n	800235e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002344:	4b8f      	ldr	r3, [pc, #572]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d112      	bne.n	8002376 <HAL_RCC_OscConfig+0x5e>
 8002350:	4b8c      	ldr	r3, [pc, #560]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235c:	d10b      	bne.n	8002376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235e:	4b89      	ldr	r3, [pc, #548]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d06c      	beq.n	8002444 <HAL_RCC_OscConfig+0x12c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d168      	bne.n	8002444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e24c      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x76>
 8002380:	4b80      	ldr	r3, [pc, #512]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a7f      	ldr	r2, [pc, #508]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	e02e      	b.n	80023ec <HAL_RCC_OscConfig+0xd4>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x98>
 8002396:	4b7b      	ldr	r3, [pc, #492]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a7a      	ldr	r2, [pc, #488]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 800239c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b78      	ldr	r3, [pc, #480]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a77      	ldr	r2, [pc, #476]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e01d      	b.n	80023ec <HAL_RCC_OscConfig+0xd4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0xbc>
 80023ba:	4b72      	ldr	r3, [pc, #456]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a71      	ldr	r2, [pc, #452]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0xd4>
 80023d4:	4b6b      	ldr	r3, [pc, #428]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6a      	ldr	r2, [pc, #424]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b68      	ldr	r3, [pc, #416]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a67      	ldr	r2, [pc, #412]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fcc4 	bl	8001d80 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff fcc0 	bl	8001d80 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e200      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0xe4>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241c:	f7ff fcb0 	bl	8001d80 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff fcac 	bl	8001d80 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e1ec      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x10c>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d063      	beq.n	800251a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002452:	4b4c      	ldr	r3, [pc, #304]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00b      	beq.n	8002476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800245e:	4b49      	ldr	r3, [pc, #292]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 030c 	and.w	r3, r3, #12
 8002466:	2b08      	cmp	r3, #8
 8002468:	d11c      	bne.n	80024a4 <HAL_RCC_OscConfig+0x18c>
 800246a:	4b46      	ldr	r3, [pc, #280]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d116      	bne.n	80024a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002476:	4b43      	ldr	r3, [pc, #268]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_RCC_OscConfig+0x176>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d001      	beq.n	800248e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e1c0      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4939      	ldr	r1, [pc, #228]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	e03a      	b.n	800251a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ac:	4b36      	ldr	r3, [pc, #216]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b2:	f7ff fc65 	bl	8001d80 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7ff fc61 	bl	8001d80 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e1a1      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	4b2d      	ldr	r3, [pc, #180]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0f0      	beq.n	80024ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4927      	ldr	r1, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	600b      	str	r3, [r1, #0]
 80024ec:	e015      	b.n	800251a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ee:	4b26      	ldr	r3, [pc, #152]	; (8002588 <HAL_RCC_OscConfig+0x270>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7ff fc44 	bl	8001d80 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fc:	f7ff fc40 	bl	8001d80 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e180      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1f0      	bne.n	80024fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d03a      	beq.n	800259c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d019      	beq.n	8002562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252e:	4b17      	ldr	r3, [pc, #92]	; (800258c <HAL_RCC_OscConfig+0x274>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002534:	f7ff fc24 	bl	8001d80 <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff fc20 	bl	8001d80 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e160      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCC_OscConfig+0x26c>)
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800255a:	2001      	movs	r0, #1
 800255c:	f000 faa6 	bl	8002aac <RCC_Delay>
 8002560:	e01c      	b.n	800259c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_RCC_OscConfig+0x274>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002568:	f7ff fc0a 	bl	8001d80 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256e:	e00f      	b.n	8002590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002570:	f7ff fc06 	bl	8001d80 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d908      	bls.n	8002590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e146      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	42420000 	.word	0x42420000
 800258c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	4b92      	ldr	r3, [pc, #584]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e9      	bne.n	8002570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a6 	beq.w	80026f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ae:	4b8b      	ldr	r3, [pc, #556]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10d      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b88      	ldr	r3, [pc, #544]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4a87      	ldr	r2, [pc, #540]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	61d3      	str	r3, [r2, #28]
 80025c6:	4b85      	ldr	r3, [pc, #532]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b82      	ldr	r3, [pc, #520]	; (80027e0 <HAL_RCC_OscConfig+0x4c8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b7f      	ldr	r3, [pc, #508]	; (80027e0 <HAL_RCC_OscConfig+0x4c8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a7e      	ldr	r2, [pc, #504]	; (80027e0 <HAL_RCC_OscConfig+0x4c8>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7ff fbc7 	bl	8001d80 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7ff fbc3 	bl	8001d80 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b64      	cmp	r3, #100	; 0x64
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e103      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b75      	ldr	r3, [pc, #468]	; (80027e0 <HAL_RCC_OscConfig+0x4c8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x312>
 800261c:	4b6f      	ldr	r3, [pc, #444]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a6e      	ldr	r2, [pc, #440]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6213      	str	r3, [r2, #32]
 8002628:	e02d      	b.n	8002686 <HAL_RCC_OscConfig+0x36e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x334>
 8002632:	4b6a      	ldr	r3, [pc, #424]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	4a69      	ldr	r2, [pc, #420]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	6213      	str	r3, [r2, #32]
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4a66      	ldr	r2, [pc, #408]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	6213      	str	r3, [r2, #32]
 800264a:	e01c      	b.n	8002686 <HAL_RCC_OscConfig+0x36e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b05      	cmp	r3, #5
 8002652:	d10c      	bne.n	800266e <HAL_RCC_OscConfig+0x356>
 8002654:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4a60      	ldr	r2, [pc, #384]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6213      	str	r3, [r2, #32]
 8002660:	4b5e      	ldr	r3, [pc, #376]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a5d      	ldr	r2, [pc, #372]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e00b      	b.n	8002686 <HAL_RCC_OscConfig+0x36e>
 800266e:	4b5b      	ldr	r3, [pc, #364]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	4a5a      	ldr	r2, [pc, #360]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6213      	str	r3, [r2, #32]
 800267a:	4b58      	ldr	r3, [pc, #352]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	4a57      	ldr	r2, [pc, #348]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002680:	f023 0304 	bic.w	r3, r3, #4
 8002684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d015      	beq.n	80026ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7ff fb77 	bl	8001d80 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7ff fb73 	bl	8001d80 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e0b1      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ee      	beq.n	8002696 <HAL_RCC_OscConfig+0x37e>
 80026b8:	e014      	b.n	80026e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fb61 	bl	8001d80 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c0:	e00a      	b.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c2:	f7ff fb5d 	bl	8001d80 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e09b      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	4b40      	ldr	r3, [pc, #256]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ee      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d105      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ea:	4b3c      	ldr	r3, [pc, #240]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	4a3b      	ldr	r2, [pc, #236]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f000 8087 	beq.w	800280e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002700:	4b36      	ldr	r3, [pc, #216]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d061      	beq.n	80027d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d146      	bne.n	80027a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002714:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271a:	f7ff fb31 	bl	8001d80 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002722:	f7ff fb2d 	bl	8001d80 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e06d      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002734:	4b29      	ldr	r3, [pc, #164]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f0      	bne.n	8002722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002748:	d108      	bne.n	800275c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	4921      	ldr	r1, [pc, #132]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275c:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a19      	ldr	r1, [r3, #32]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	430b      	orrs	r3, r1
 800276e:	491b      	ldr	r1, [pc, #108]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002774:	4b1b      	ldr	r3, [pc, #108]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 8002776:	2201      	movs	r2, #1
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7ff fb01 	bl	8001d80 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002782:	f7ff fafd 	bl	8001d80 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03d      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002794:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x46a>
 80027a0:	e035      	b.n	800280e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_RCC_OscConfig+0x4cc>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a8:	f7ff faea 	bl	8001d80 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b0:	f7ff fae6 	bl	8001d80 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e026      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x498>
 80027ce:	e01e      	b.n	800280e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e019      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40007000 	.word	0x40007000
 80027e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCC_OscConfig+0x500>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d001      	beq.n	800280e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0d0      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b6a      	ldr	r3, [pc, #424]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d910      	bls.n	8002860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b67      	ldr	r3, [pc, #412]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 0207 	bic.w	r2, r3, #7
 8002846:	4965      	ldr	r1, [pc, #404]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284e:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d001      	beq.n	8002860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b8      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d020      	beq.n	80028ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002878:	4b59      	ldr	r3, [pc, #356]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002890:	4b53      	ldr	r3, [pc, #332]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a52      	ldr	r2, [pc, #328]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800289a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800289c:	4b50      	ldr	r3, [pc, #320]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	494d      	ldr	r1, [pc, #308]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d040      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d115      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e07f      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e073      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e06b      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4936      	ldr	r1, [pc, #216]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7ff fa38 	bl	8001d80 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7ff fa34 	bl	8001d80 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e053      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d210      	bcs.n	800296c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0207 	bic.w	r2, r3, #7
 8002952:	4922      	ldr	r1, [pc, #136]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	429a      	cmp	r2, r3
 8002966:	d001      	beq.n	800296c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e032      	b.n	80029d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002978:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4916      	ldr	r1, [pc, #88]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002986:	4313      	orrs	r3, r2
 8002988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	490e      	ldr	r1, [pc, #56]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029aa:	f000 f821 	bl	80029f0 <HAL_RCC_GetSysClockFreq>
 80029ae:	4602      	mov	r2, r0
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	490a      	ldr	r1, [pc, #40]	; (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029bc:	5ccb      	ldrb	r3, [r1, r3]
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1cc>)
 80029c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1d0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f996 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40022000 	.word	0x40022000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	08003d38 	.word	0x08003d38
 80029e8:	2000000c 	.word	0x2000000c
 80029ec:	20000010 	.word	0x20000010

080029f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f0:	b490      	push	{r4, r7}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029f6:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xac>)
 80029f8:	1d3c      	adds	r4, r7, #4
 80029fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a00:	f240 2301 	movw	r3, #513	; 0x201
 8002a04:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d002      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x40>
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x46>
 8002a2e:	e02b      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a30:	4b1c      	ldr	r3, [pc, #112]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a32:	623b      	str	r3, [r7, #32]
      break;
 8002a34:	e02b      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	0c9b      	lsrs	r3, r3, #18
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3328      	adds	r3, #40	; 0x28
 8002a40:	443b      	add	r3, r7
 8002a42:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a46:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	0c5b      	lsrs	r3, r3, #17
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	3328      	adds	r3, #40	; 0x28
 8002a5e:	443b      	add	r3, r7
 8002a60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a6a:	fb03 f202 	mul.w	r2, r3, r2
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
 8002a76:	e004      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	4a0b      	ldr	r2, [pc, #44]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	623b      	str	r3, [r7, #32]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a8a:	623b      	str	r3, [r7, #32]
      break;
 8002a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3728      	adds	r7, #40	; 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc90      	pop	{r4, r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	08003998 	.word	0x08003998
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	007a1200 	.word	0x007a1200
 8002aa8:	003d0900 	.word	0x003d0900

08002aac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <RCC_Delay+0x34>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <RCC_Delay+0x38>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0a5b      	lsrs	r3, r3, #9
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ac8:	bf00      	nop
  }
  while (Delay --);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1e5a      	subs	r2, r3, #1
 8002ace:	60fa      	str	r2, [r7, #12]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f9      	bne.n	8002ac8 <RCC_Delay+0x1c>
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	10624dd3 	.word	0x10624dd3

08002ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e076      	b.n	8002be8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d108      	bne.n	8002b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b0a:	d009      	beq.n	8002b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61da      	str	r2, [r3, #28]
 8002b12:	e005      	b.n	8002b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe ffd0 	bl	8001ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	ea42 0103 	orr.w	r1, r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	0c1a      	lsrs	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f002 0204 	and.w	r2, r2, #4
 8002bc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69da      	ldr	r2, [r3, #28]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b088      	sub	sp, #32
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_SPI_Transmit+0x22>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e126      	b.n	8002e60 <HAL_SPI_Transmit+0x270>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c1a:	f7ff f8b1 	bl	8001d80 <HAL_GetTick>
 8002c1e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c20:	88fb      	ldrh	r3, [r7, #6]
 8002c22:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d002      	beq.n	8002c36 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c34:	e10b      	b.n	8002e4e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_SPI_Transmit+0x52>
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d102      	bne.n	8002c48 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c46:	e102      	b.n	8002e4e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	88fa      	ldrh	r2, [r7, #6]
 8002c66:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cba:	2b40      	cmp	r3, #64	; 0x40
 8002cbc:	d007      	beq.n	8002cce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ccc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cd6:	d14b      	bne.n	8002d70 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_SPI_Transmit+0xf6>
 8002ce0:	8afb      	ldrh	r3, [r7, #22]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d13e      	bne.n	8002d64 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	881a      	ldrh	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf6:	1c9a      	adds	r2, r3, #2
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d0a:	e02b      	b.n	8002d64 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d112      	bne.n	8002d40 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	881a      	ldrh	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	1c9a      	adds	r2, r3, #2
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d3e:	e011      	b.n	8002d64 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d40:	f7ff f81e 	bl	8001d80 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d803      	bhi.n	8002d58 <HAL_SPI_Transmit+0x168>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d56:	d102      	bne.n	8002d5e <HAL_SPI_Transmit+0x16e>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d62:	e074      	b.n	8002e4e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1ce      	bne.n	8002d0c <HAL_SPI_Transmit+0x11c>
 8002d6e:	e04c      	b.n	8002e0a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_Transmit+0x18e>
 8002d78:	8afb      	ldrh	r3, [r7, #22]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d140      	bne.n	8002e00 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	330c      	adds	r3, #12
 8002d88:	7812      	ldrb	r2, [r2, #0]
 8002d8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002da4:	e02c      	b.n	8002e00 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d113      	bne.n	8002ddc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	330c      	adds	r3, #12
 8002dbe:	7812      	ldrb	r2, [r2, #0]
 8002dc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002dda:	e011      	b.n	8002e00 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ddc:	f7fe ffd0 	bl	8001d80 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d803      	bhi.n	8002df4 <HAL_SPI_Transmit+0x204>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df2:	d102      	bne.n	8002dfa <HAL_SPI_Transmit+0x20a>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dfe:	e026      	b.n	8002e4e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1cd      	bne.n	8002da6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	6839      	ldr	r1, [r7, #0]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f8b2 	bl	8002f78 <SPI_EndRxTxTransaction>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d002      	beq.n	8002e4c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e000      	b.n	8002e4e <HAL_SPI_Transmit+0x25e>
  }

error:
 8002e4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002e5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	603b      	str	r3, [r7, #0]
 8002e74:	4613      	mov	r3, r2
 8002e76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e78:	f7fe ff82 	bl	8001d80 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e88:	f7fe ff7a 	bl	8001d80 <HAL_GetTick>
 8002e8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	015b      	lsls	r3, r3, #5
 8002e94:	0d1b      	lsrs	r3, r3, #20
 8002e96:	69fa      	ldr	r2, [r7, #28]
 8002e98:	fb02 f303 	mul.w	r3, r2, r3
 8002e9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e9e:	e054      	b.n	8002f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d050      	beq.n	8002f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ea8:	f7fe ff6a 	bl	8001d80 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	69fa      	ldr	r2, [r7, #28]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d902      	bls.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0x56>
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d13d      	bne.n	8002f3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ed6:	d111      	bne.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee0:	d004      	beq.n	8002eec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	d107      	bne.n	8002efc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f04:	d10f      	bne.n	8002f26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e017      	b.n	8002f6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d19b      	bne.n	8002ea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3720      	adds	r7, #32
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	2000000c 	.word	0x2000000c

08002f78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff ff6a 	bl	8002e68 <SPI_WaitFlagStateUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e000      	b.n	8002fac <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e041      	b.n	800304a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe fdbe 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f000 fa70 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d001      	beq.n	800306c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e03a      	b.n	80030e2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a18      	ldr	r2, [pc, #96]	; (80030ec <HAL_TIM_Base_Start_IT+0x98>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00e      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x58>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d009      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x58>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <HAL_TIM_Base_Start_IT+0x9c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d004      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0x58>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <HAL_TIM_Base_Start_IT+0xa0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d111      	bne.n	80030d0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d010      	beq.n	80030e0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 0201 	orr.w	r2, r2, #1
 80030cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ce:	e007      	b.n	80030e0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bc80      	pop	{r7}
 80030ea:	4770      	bx	lr
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	40000400 	.word	0x40000400
 80030f4:	40000800 	.word	0x40000800

080030f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d122      	bne.n	8003154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b02      	cmp	r3, #2
 800311a:	d11b      	bne.n	8003154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0202 	mvn.w	r2, #2
 8003124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f9b1 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f9a4 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f9b3 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d122      	bne.n	80031a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d11b      	bne.n	80031a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0204 	mvn.w	r2, #4
 8003178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f987 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 8003194:	e005      	b.n	80031a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f97a 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 f989 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d122      	bne.n	80031fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d11b      	bne.n	80031fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0208 	mvn.w	r2, #8
 80031cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2204      	movs	r2, #4
 80031d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f95d 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f950 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f95f 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b10      	cmp	r3, #16
 8003208:	d122      	bne.n	8003250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b10      	cmp	r3, #16
 8003216:	d11b      	bne.n	8003250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0210 	mvn.w	r2, #16
 8003220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2208      	movs	r2, #8
 8003226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f933 	bl	80034a2 <HAL_TIM_IC_CaptureCallback>
 800323c:	e005      	b.n	800324a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f926 	bl	8003490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f935 	bl	80034b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b01      	cmp	r3, #1
 800325c:	d10e      	bne.n	800327c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f06f 0201 	mvn.w	r2, #1
 8003274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7fe fbea 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d10e      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d107      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa77 	bl	8003796 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b40      	cmp	r3, #64	; 0x40
 80032b4:	d10e      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c0:	2b40      	cmp	r3, #64	; 0x40
 80032c2:	d107      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8f9 	bl	80034c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0320 	and.w	r3, r3, #32
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0220 	mvn.w	r2, #32
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fa42 	bl	8003784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003300:	bf00      	nop
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_TIM_ConfigClockSource+0x18>
 800331c:	2302      	movs	r3, #2
 800331e:	e0b3      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x180>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800333e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003346:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003358:	d03e      	beq.n	80033d8 <HAL_TIM_ConfigClockSource+0xd0>
 800335a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800335e:	f200 8087 	bhi.w	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003366:	f000 8085 	beq.w	8003474 <HAL_TIM_ConfigClockSource+0x16c>
 800336a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336e:	d87f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003370:	2b70      	cmp	r3, #112	; 0x70
 8003372:	d01a      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xa2>
 8003374:	2b70      	cmp	r3, #112	; 0x70
 8003376:	d87b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003378:	2b60      	cmp	r3, #96	; 0x60
 800337a:	d050      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x116>
 800337c:	2b60      	cmp	r3, #96	; 0x60
 800337e:	d877      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003380:	2b50      	cmp	r3, #80	; 0x50
 8003382:	d03c      	beq.n	80033fe <HAL_TIM_ConfigClockSource+0xf6>
 8003384:	2b50      	cmp	r3, #80	; 0x50
 8003386:	d873      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003388:	2b40      	cmp	r3, #64	; 0x40
 800338a:	d058      	beq.n	800343e <HAL_TIM_ConfigClockSource+0x136>
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d86f      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003390:	2b30      	cmp	r3, #48	; 0x30
 8003392:	d064      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x156>
 8003394:	2b30      	cmp	r3, #48	; 0x30
 8003396:	d86b      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 8003398:	2b20      	cmp	r3, #32
 800339a:	d060      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x156>
 800339c:	2b20      	cmp	r3, #32
 800339e:	d867      	bhi.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d05c      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x156>
 80033a4:	2b10      	cmp	r3, #16
 80033a6:	d05a      	beq.n	800345e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033a8:	e062      	b.n	8003470 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f000 f966 	bl	800368a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	609a      	str	r2, [r3, #8]
      break;
 80033d6:	e04e      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6899      	ldr	r1, [r3, #8]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f000 f94f 	bl	800368a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fa:	609a      	str	r2, [r3, #8]
      break;
 80033fc:	e03b      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	461a      	mov	r2, r3
 800340c:	f000 f8c6 	bl	800359c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2150      	movs	r1, #80	; 0x50
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f91d 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 800341c:	e02b      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6859      	ldr	r1, [r3, #4]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f000 f8e4 	bl	80035f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2160      	movs	r1, #96	; 0x60
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f90d 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 800343c:	e01b      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	f000 f8a6 	bl	800359c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2140      	movs	r1, #64	; 0x40
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f8fd 	bl	8003656 <TIM_ITRx_SetConfig>
      break;
 800345c:	e00b      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f000 f8f4 	bl	8003656 <TIM_ITRx_SetConfig>
        break;
 800346e:	e002      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003470:	bf00      	nop
 8003472:	e000      	b.n	8003476 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003474:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr

080034a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a29      	ldr	r2, [pc, #164]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00b      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d007      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a26      	ldr	r2, [pc, #152]	; (8003594 <TIM_Base_SetConfig+0xbc>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d003      	beq.n	8003508 <TIM_Base_SetConfig+0x30>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a25      	ldr	r2, [pc, #148]	; (8003598 <TIM_Base_SetConfig+0xc0>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d108      	bne.n	800351a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a1c      	ldr	r2, [pc, #112]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a19      	ldr	r2, [pc, #100]	; (8003594 <TIM_Base_SetConfig+0xbc>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a18      	ldr	r2, [pc, #96]	; (8003598 <TIM_Base_SetConfig+0xc0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a07      	ldr	r2, [pc, #28]	; (8003590 <TIM_Base_SetConfig+0xb8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	615a      	str	r2, [r3, #20]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	40012c00 	.word	0x40012c00
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800

0800359c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	f023 0201 	bic.w	r2, r3, #1
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f023 030a 	bic.w	r3, r3, #10
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	621a      	str	r2, [r3, #32]
}
 80035ee:	bf00      	nop
 80035f0:	371c      	adds	r7, #28
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 0210 	bic.w	r2, r3, #16
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003622:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	031b      	lsls	r3, r3, #12
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003634:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	621a      	str	r2, [r3, #32]
}
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003656:	b480      	push	{r7}
 8003658:	b085      	sub	sp, #20
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	4313      	orrs	r3, r2
 8003674:	f043 0307 	orr.w	r3, r3, #7
 8003678:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr

0800368a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800368a:	b480      	push	{r7}
 800368c:	b087      	sub	sp, #28
 800368e:	af00      	add	r7, sp, #0
 8003690:	60f8      	str	r0, [r7, #12]
 8003692:	60b9      	str	r1, [r7, #8]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	021a      	lsls	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	bf00      	nop
 80036c0:	371c      	adds	r7, #28
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e046      	b.n	800376e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a16      	ldr	r2, [pc, #88]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d00e      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372c:	d009      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a12      	ldr	r2, [pc, #72]	; (800377c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a10      	ldr	r2, [pc, #64]	; (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d10c      	bne.n	800375c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	4313      	orrs	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800

08003784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <__errno>:
 80037a8:	4b01      	ldr	r3, [pc, #4]	; (80037b0 <__errno+0x8>)
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	20000018 	.word	0x20000018

080037b4 <__libc_init_array>:
 80037b4:	b570      	push	{r4, r5, r6, lr}
 80037b6:	2600      	movs	r6, #0
 80037b8:	4d0c      	ldr	r5, [pc, #48]	; (80037ec <__libc_init_array+0x38>)
 80037ba:	4c0d      	ldr	r4, [pc, #52]	; (80037f0 <__libc_init_array+0x3c>)
 80037bc:	1b64      	subs	r4, r4, r5
 80037be:	10a4      	asrs	r4, r4, #2
 80037c0:	42a6      	cmp	r6, r4
 80037c2:	d109      	bne.n	80037d8 <__libc_init_array+0x24>
 80037c4:	f000 f8dc 	bl	8003980 <_init>
 80037c8:	2600      	movs	r6, #0
 80037ca:	4d0a      	ldr	r5, [pc, #40]	; (80037f4 <__libc_init_array+0x40>)
 80037cc:	4c0a      	ldr	r4, [pc, #40]	; (80037f8 <__libc_init_array+0x44>)
 80037ce:	1b64      	subs	r4, r4, r5
 80037d0:	10a4      	asrs	r4, r4, #2
 80037d2:	42a6      	cmp	r6, r4
 80037d4:	d105      	bne.n	80037e2 <__libc_init_array+0x2e>
 80037d6:	bd70      	pop	{r4, r5, r6, pc}
 80037d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037dc:	4798      	blx	r3
 80037de:	3601      	adds	r6, #1
 80037e0:	e7ee      	b.n	80037c0 <__libc_init_array+0xc>
 80037e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e6:	4798      	blx	r3
 80037e8:	3601      	adds	r6, #1
 80037ea:	e7f2      	b.n	80037d2 <__libc_init_array+0x1e>
 80037ec:	08003d48 	.word	0x08003d48
 80037f0:	08003d48 	.word	0x08003d48
 80037f4:	08003d48 	.word	0x08003d48
 80037f8:	08003d4c 	.word	0x08003d4c

080037fc <malloc>:
 80037fc:	4b02      	ldr	r3, [pc, #8]	; (8003808 <malloc+0xc>)
 80037fe:	4601      	mov	r1, r0
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	f000 b82b 	b.w	800385c <_malloc_r>
 8003806:	bf00      	nop
 8003808:	20000018 	.word	0x20000018

0800380c <memset>:
 800380c:	4603      	mov	r3, r0
 800380e:	4402      	add	r2, r0
 8003810:	4293      	cmp	r3, r2
 8003812:	d100      	bne.n	8003816 <memset+0xa>
 8003814:	4770      	bx	lr
 8003816:	f803 1b01 	strb.w	r1, [r3], #1
 800381a:	e7f9      	b.n	8003810 <memset+0x4>

0800381c <sbrk_aligned>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	4e0e      	ldr	r6, [pc, #56]	; (8003858 <sbrk_aligned+0x3c>)
 8003820:	460c      	mov	r4, r1
 8003822:	6831      	ldr	r1, [r6, #0]
 8003824:	4605      	mov	r5, r0
 8003826:	b911      	cbnz	r1, 800382e <sbrk_aligned+0x12>
 8003828:	f000 f88c 	bl	8003944 <_sbrk_r>
 800382c:	6030      	str	r0, [r6, #0]
 800382e:	4621      	mov	r1, r4
 8003830:	4628      	mov	r0, r5
 8003832:	f000 f887 	bl	8003944 <_sbrk_r>
 8003836:	1c43      	adds	r3, r0, #1
 8003838:	d00a      	beq.n	8003850 <sbrk_aligned+0x34>
 800383a:	1cc4      	adds	r4, r0, #3
 800383c:	f024 0403 	bic.w	r4, r4, #3
 8003840:	42a0      	cmp	r0, r4
 8003842:	d007      	beq.n	8003854 <sbrk_aligned+0x38>
 8003844:	1a21      	subs	r1, r4, r0
 8003846:	4628      	mov	r0, r5
 8003848:	f000 f87c 	bl	8003944 <_sbrk_r>
 800384c:	3001      	adds	r0, #1
 800384e:	d101      	bne.n	8003854 <sbrk_aligned+0x38>
 8003850:	f04f 34ff 	mov.w	r4, #4294967295
 8003854:	4620      	mov	r0, r4
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	20000180 	.word	0x20000180

0800385c <_malloc_r>:
 800385c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003860:	1ccd      	adds	r5, r1, #3
 8003862:	f025 0503 	bic.w	r5, r5, #3
 8003866:	3508      	adds	r5, #8
 8003868:	2d0c      	cmp	r5, #12
 800386a:	bf38      	it	cc
 800386c:	250c      	movcc	r5, #12
 800386e:	2d00      	cmp	r5, #0
 8003870:	4607      	mov	r7, r0
 8003872:	db01      	blt.n	8003878 <_malloc_r+0x1c>
 8003874:	42a9      	cmp	r1, r5
 8003876:	d905      	bls.n	8003884 <_malloc_r+0x28>
 8003878:	230c      	movs	r3, #12
 800387a:	2600      	movs	r6, #0
 800387c:	603b      	str	r3, [r7, #0]
 800387e:	4630      	mov	r0, r6
 8003880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003884:	4e2e      	ldr	r6, [pc, #184]	; (8003940 <_malloc_r+0xe4>)
 8003886:	f000 f86d 	bl	8003964 <__malloc_lock>
 800388a:	6833      	ldr	r3, [r6, #0]
 800388c:	461c      	mov	r4, r3
 800388e:	bb34      	cbnz	r4, 80038de <_malloc_r+0x82>
 8003890:	4629      	mov	r1, r5
 8003892:	4638      	mov	r0, r7
 8003894:	f7ff ffc2 	bl	800381c <sbrk_aligned>
 8003898:	1c43      	adds	r3, r0, #1
 800389a:	4604      	mov	r4, r0
 800389c:	d14d      	bne.n	800393a <_malloc_r+0xde>
 800389e:	6834      	ldr	r4, [r6, #0]
 80038a0:	4626      	mov	r6, r4
 80038a2:	2e00      	cmp	r6, #0
 80038a4:	d140      	bne.n	8003928 <_malloc_r+0xcc>
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	4631      	mov	r1, r6
 80038aa:	4638      	mov	r0, r7
 80038ac:	eb04 0803 	add.w	r8, r4, r3
 80038b0:	f000 f848 	bl	8003944 <_sbrk_r>
 80038b4:	4580      	cmp	r8, r0
 80038b6:	d13a      	bne.n	800392e <_malloc_r+0xd2>
 80038b8:	6821      	ldr	r1, [r4, #0]
 80038ba:	3503      	adds	r5, #3
 80038bc:	1a6d      	subs	r5, r5, r1
 80038be:	f025 0503 	bic.w	r5, r5, #3
 80038c2:	3508      	adds	r5, #8
 80038c4:	2d0c      	cmp	r5, #12
 80038c6:	bf38      	it	cc
 80038c8:	250c      	movcc	r5, #12
 80038ca:	4638      	mov	r0, r7
 80038cc:	4629      	mov	r1, r5
 80038ce:	f7ff ffa5 	bl	800381c <sbrk_aligned>
 80038d2:	3001      	adds	r0, #1
 80038d4:	d02b      	beq.n	800392e <_malloc_r+0xd2>
 80038d6:	6823      	ldr	r3, [r4, #0]
 80038d8:	442b      	add	r3, r5
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	e00e      	b.n	80038fc <_malloc_r+0xa0>
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	1b52      	subs	r2, r2, r5
 80038e2:	d41e      	bmi.n	8003922 <_malloc_r+0xc6>
 80038e4:	2a0b      	cmp	r2, #11
 80038e6:	d916      	bls.n	8003916 <_malloc_r+0xba>
 80038e8:	1961      	adds	r1, r4, r5
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	6025      	str	r5, [r4, #0]
 80038ee:	bf18      	it	ne
 80038f0:	6059      	strne	r1, [r3, #4]
 80038f2:	6863      	ldr	r3, [r4, #4]
 80038f4:	bf08      	it	eq
 80038f6:	6031      	streq	r1, [r6, #0]
 80038f8:	5162      	str	r2, [r4, r5]
 80038fa:	604b      	str	r3, [r1, #4]
 80038fc:	4638      	mov	r0, r7
 80038fe:	f104 060b 	add.w	r6, r4, #11
 8003902:	f000 f835 	bl	8003970 <__malloc_unlock>
 8003906:	f026 0607 	bic.w	r6, r6, #7
 800390a:	1d23      	adds	r3, r4, #4
 800390c:	1af2      	subs	r2, r6, r3
 800390e:	d0b6      	beq.n	800387e <_malloc_r+0x22>
 8003910:	1b9b      	subs	r3, r3, r6
 8003912:	50a3      	str	r3, [r4, r2]
 8003914:	e7b3      	b.n	800387e <_malloc_r+0x22>
 8003916:	6862      	ldr	r2, [r4, #4]
 8003918:	42a3      	cmp	r3, r4
 800391a:	bf0c      	ite	eq
 800391c:	6032      	streq	r2, [r6, #0]
 800391e:	605a      	strne	r2, [r3, #4]
 8003920:	e7ec      	b.n	80038fc <_malloc_r+0xa0>
 8003922:	4623      	mov	r3, r4
 8003924:	6864      	ldr	r4, [r4, #4]
 8003926:	e7b2      	b.n	800388e <_malloc_r+0x32>
 8003928:	4634      	mov	r4, r6
 800392a:	6876      	ldr	r6, [r6, #4]
 800392c:	e7b9      	b.n	80038a2 <_malloc_r+0x46>
 800392e:	230c      	movs	r3, #12
 8003930:	4638      	mov	r0, r7
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	f000 f81c 	bl	8003970 <__malloc_unlock>
 8003938:	e7a1      	b.n	800387e <_malloc_r+0x22>
 800393a:	6025      	str	r5, [r4, #0]
 800393c:	e7de      	b.n	80038fc <_malloc_r+0xa0>
 800393e:	bf00      	nop
 8003940:	2000017c 	.word	0x2000017c

08003944 <_sbrk_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	2300      	movs	r3, #0
 8003948:	4d05      	ldr	r5, [pc, #20]	; (8003960 <_sbrk_r+0x1c>)
 800394a:	4604      	mov	r4, r0
 800394c:	4608      	mov	r0, r1
 800394e:	602b      	str	r3, [r5, #0]
 8003950:	f7fe f95c 	bl	8001c0c <_sbrk>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d102      	bne.n	800395e <_sbrk_r+0x1a>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	b103      	cbz	r3, 800395e <_sbrk_r+0x1a>
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	20000184 	.word	0x20000184

08003964 <__malloc_lock>:
 8003964:	4801      	ldr	r0, [pc, #4]	; (800396c <__malloc_lock+0x8>)
 8003966:	f000 b809 	b.w	800397c <__retarget_lock_acquire_recursive>
 800396a:	bf00      	nop
 800396c:	20000188 	.word	0x20000188

08003970 <__malloc_unlock>:
 8003970:	4801      	ldr	r0, [pc, #4]	; (8003978 <__malloc_unlock+0x8>)
 8003972:	f000 b804 	b.w	800397e <__retarget_lock_release_recursive>
 8003976:	bf00      	nop
 8003978:	20000188 	.word	0x20000188

0800397c <__retarget_lock_acquire_recursive>:
 800397c:	4770      	bx	lr

0800397e <__retarget_lock_release_recursive>:
 800397e:	4770      	bx	lr

08003980 <_init>:
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003982:	bf00      	nop
 8003984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003986:	bc08      	pop	{r3}
 8003988:	469e      	mov	lr, r3
 800398a:	4770      	bx	lr

0800398c <_fini>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr
