
ScreenTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cbc  08005a98  08005a98  00015a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006754  08006754  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006754  08006754  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006754  08006754  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006754  08006754  00016754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006758  08006758  00016758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800675c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000078  080067d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  080067d4  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1cc  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002174  00000000  00000000  0002c26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  0002f110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d51  00000000  00000000  0002fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e011  00000000  00000000  00048a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf4b  00000000  00000000  00056a82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e29cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b4  00000000  00000000  000e2a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005a80 	.word	0x08005a80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005a80 	.word	0x08005a80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	3a01      	subs	r2, #1
 8000bb6:	bf28      	it	cs
 8000bb8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bbc:	d2ed      	bcs.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__gesf2>:
 8000fb8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fbc:	e006      	b.n	8000fcc <__cmpsf2+0x4>
 8000fbe:	bf00      	nop

08000fc0 <__lesf2>:
 8000fc0:	f04f 0c01 	mov.w	ip, #1
 8000fc4:	e002      	b.n	8000fcc <__cmpsf2+0x4>
 8000fc6:	bf00      	nop

08000fc8 <__cmpsf2>:
 8000fc8:	f04f 0c01 	mov.w	ip, #1
 8000fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fdc:	bf18      	it	ne
 8000fde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe2:	d011      	beq.n	8001008 <__cmpsf2+0x40>
 8000fe4:	b001      	add	sp, #4
 8000fe6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fea:	bf18      	it	ne
 8000fec:	ea90 0f01 	teqne	r0, r1
 8000ff0:	bf58      	it	pl
 8000ff2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ff6:	bf88      	it	hi
 8000ff8:	17c8      	asrhi	r0, r1, #31
 8000ffa:	bf38      	it	cc
 8000ffc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001000:	bf18      	it	ne
 8001002:	f040 0001 	orrne.w	r0, r0, #1
 8001006:	4770      	bx	lr
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	d102      	bne.n	8001014 <__cmpsf2+0x4c>
 800100e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001012:	d105      	bne.n	8001020 <__cmpsf2+0x58>
 8001014:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001018:	d1e4      	bne.n	8000fe4 <__cmpsf2+0x1c>
 800101a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800101e:	d0e1      	beq.n	8000fe4 <__cmpsf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cfrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4661      	mov	r1, ip
 800102e:	e7ff      	b.n	8001030 <__aeabi_cfcmpeq>

08001030 <__aeabi_cfcmpeq>:
 8001030:	b50f      	push	{r0, r1, r2, r3, lr}
 8001032:	f7ff ffc9 	bl	8000fc8 <__cmpsf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	bf48      	it	mi
 800103a:	f110 0f00 	cmnmi.w	r0, #0
 800103e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001040 <__aeabi_fcmpeq>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff fff4 	bl	8001030 <__aeabi_cfcmpeq>
 8001048:	bf0c      	ite	eq
 800104a:	2001      	moveq	r0, #1
 800104c:	2000      	movne	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmplt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffea 	bl	8001030 <__aeabi_cfcmpeq>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmple>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffe0 	bl	8001030 <__aeabi_cfcmpeq>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmpge>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffd2 	bl	8001028 <__aeabi_cfrcmple>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpgt>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffc8 	bl	8001028 <__aeabi_cfrcmple>
 8001098:	bf34      	ite	cc
 800109a:	2001      	movcc	r0, #1
 800109c:	2000      	movcs	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <__aeabi_f2iz>:
 80010a4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ac:	d30f      	bcc.n	80010ce <__aeabi_f2iz+0x2a>
 80010ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010b6:	d90d      	bls.n	80010d4 <__aeabi_f2iz+0x30>
 80010b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	bf18      	it	ne
 80010ca:	4240      	negne	r0, r0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4770      	bx	lr
 80010d4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d8:	d101      	bne.n	80010de <__aeabi_f2iz+0x3a>
 80010da:	0242      	lsls	r2, r0, #9
 80010dc:	d105      	bne.n	80010ea <__aeabi_f2iz+0x46>
 80010de:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010e2:	bf08      	it	eq
 80010e4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr

080010f0 <__aeabi_f2uiz>:
 80010f0:	0042      	lsls	r2, r0, #1
 80010f2:	d20e      	bcs.n	8001112 <__aeabi_f2uiz+0x22>
 80010f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f8:	d30b      	bcc.n	8001112 <__aeabi_f2uiz+0x22>
 80010fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001102:	d409      	bmi.n	8001118 <__aeabi_f2uiz+0x28>
 8001104:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001108:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	4770      	bx	lr
 8001112:	f04f 0000 	mov.w	r0, #0
 8001116:	4770      	bx	lr
 8001118:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800111c:	d101      	bne.n	8001122 <__aeabi_f2uiz+0x32>
 800111e:	0242      	lsls	r2, r0, #9
 8001120:	d102      	bne.n	8001128 <__aeabi_f2uiz+0x38>
 8001122:	f04f 30ff 	mov.w	r0, #4294967295
 8001126:	4770      	bx	lr
 8001128:	f04f 0000 	mov.w	r0, #0
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <smallRbit>:
static uint8_t SendBuf[2];

//This buffer holds 1 Character bitmap image (8x8)
//static uint8_t chBuf[8];

uint8_t smallRbit(uint8_t re) {
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	return (uint8_t) (__RBIT(re) >> 24);
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	0e1b      	lsrs	r3, r3, #24
 800114a:	b2db      	uxtb	r3, r3
}
 800114c:	4618      	mov	r0, r3
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <modulo>:

int modulo(int x, int N) {
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
	return (x % N + N) % N;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	fb93 f2f2 	sdiv	r2, r3, r2
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	fb01 f202 	mul.w	r2, r1, r2
 800116e:	1a9a      	subs	r2, r3, r2
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	4413      	add	r3, r2
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	fb93 f2f2 	sdiv	r2, r3, r2
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	fb01 f202 	mul.w	r2, r1, r2
 8001180:	1a9b      	subs	r3, r3, r2
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <LCD_Init>:

// Display Initialization
void LCD_Init(LS013B4DN04 *MemDisp, SPI_HandleTypeDef *Bus,
		GPIO_TypeDef *dispGPIO, uint16_t LCDcs) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	807b      	strh	r3, [r7, #2]

	//Store params into our struct
	MemDisp->Bus = Bus;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	601a      	str	r2, [r3, #0]
	MemDisp->dispGPIO = dispGPIO;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	605a      	str	r2, [r3, #4]
	MemDisp->LCDcs = LCDcs;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	887a      	ldrh	r2, [r7, #2]
 80011aa:	811a      	strh	r2, [r3, #8]

	DispBuf = malloc(1152);
 80011ac:	f44f 6090 	mov.w	r0, #1152	; 0x480
 80011b0:	f003 fb64 	bl	800487c <malloc>
 80011b4:	4603      	mov	r3, r0
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <LCD_Init+0xb4>)
 80011ba:	601a      	str	r2, [r3, #0]
	DispBuf2 = malloc(1152);
 80011bc:	f44f 6090 	mov.w	r0, #1152	; 0x480
 80011c0:	f003 fb5c 	bl	800487c <malloc>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <LCD_Init+0xb8>)
 80011ca:	601a      	str	r2, [r3, #0]
	TextBuf = malloc(8);
 80011cc:	2008      	movs	r0, #8
 80011ce:	f003 fb55 	bl	800487c <malloc>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <LCD_Init+0xbc>)
 80011d8:	601a      	str	r2, [r3, #0]

	memset(DispBuf, 0x00, 1152);
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <LCD_Init+0xb4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 fb5f 	bl	80048a8 <memset>
	memset(DispBuf2, 0x00, 1152);
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <LCD_Init+0xb8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f003 fb57 	bl	80048a8 <memset>
	memset(TextBuf, 0x00, 1152);
 80011fa:	4b13      	ldr	r3, [pc, #76]	; (8001248 <LCD_Init+0xbc>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001202:	2100      	movs	r1, #0
 8001204:	4618      	mov	r0, r3
 8001206:	f003 fb4f 	bl	80048a8 <memset>

	//At lease 3 + 13 clock is needed for Display clear (16 Clock = 8x2 bit = 2 byte)
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6858      	ldr	r0, [r3, #4]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	891b      	ldrh	r3, [r3, #8]
 8001212:	2201      	movs	r2, #1
 8001214:	4619      	mov	r1, r3
 8001216:	f002 f8a6 	bl	8003366 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to data sheet
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	2396      	movs	r3, #150	; 0x96
 8001220:	2202      	movs	r2, #2
 8001222:	490a      	ldr	r1, [pc, #40]	; (800124c <LCD_Init+0xc0>)
 8001224:	f002 fd24 	bl	8003c70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6858      	ldr	r0, [r3, #4]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	891b      	ldrh	r3, [r3, #8]
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	f002 f897 	bl	8003366 <HAL_GPIO_WritePin>
}
 8001238:	bf00      	nop
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000098 	.word	0x20000098
 8001244:	2000009c 	.word	0x2000009c
 8001248:	200000a0 	.word	0x200000a0
 800124c:	20000000 	.word	0x20000000

08001250 <LCD_Update>:

// Display update (Transmit data)
void LCD_Update(LS013B4DN04 *MemDisp) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8001258:	4b31      	ldr	r3, [pc, #196]	; (8001320 <LCD_Update+0xd0>)
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	4b31      	ldr	r3, [pc, #196]	; (8001324 <LCD_Update+0xd4>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4313      	orrs	r3, r2
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <LCD_Update+0xd0>)
 8001266:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <LCD_Update+0xd0>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <LCD_Update+0xd0>)
 8001274:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6858      	ldr	r0, [r3, #4]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	891b      	ldrh	r3, [r3, #8]
 800127e:	2201      	movs	r2, #1
 8001280:	4619      	mov	r1, r3
 8001282:	f002 f870 	bl	8003366 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	2396      	movs	r3, #150	; 0x96
 800128c:	2201      	movs	r2, #1
 800128e:	4924      	ldr	r1, [pc, #144]	; (8001320 <LCD_Update+0xd0>)
 8001290:	f002 fcee 	bl	8003c70 <HAL_SPI_Transmit>

	for (uint8_t row = 0; row < 96; row++) {
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e02b      	b.n	80012f2 <LCD_Update+0xa2>
		SendBuf[1] = smallRbit(row + 1); // counting from row number 1 to row number 96
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	3301      	adds	r3, #1
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff45 	bl	8001130 <smallRbit>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <LCD_Update+0xd0>)
 80012ac:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	491d      	ldr	r1, [pc, #116]	; (8001328 <LCD_Update+0xd8>)
 80012b4:	2396      	movs	r3, #150	; 0x96
 80012b6:	2201      	movs	r2, #1
 80012b8:	f002 fcda 	bl	8003c70 <HAL_SPI_Transmit>

		uint16_t offset = row * 12;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	0052      	lsls	r2, r2, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	81bb      	strh	r3, [r7, #12]
		HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <LCD_Update+0xdc>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	89bb      	ldrh	r3, [r7, #12]
 80012d4:	18d1      	adds	r1, r2, r3
 80012d6:	2396      	movs	r3, #150	; 0x96
 80012d8:	220c      	movs	r2, #12
 80012da:	f002 fcc9 	bl	8003c70 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	2396      	movs	r3, #150	; 0x96
 80012e4:	2201      	movs	r2, #1
 80012e6:	4912      	ldr	r1, [pc, #72]	; (8001330 <LCD_Update+0xe0>)
 80012e8:	f002 fcc2 	bl	8003c70 <HAL_SPI_Transmit>
	for (uint8_t row = 0; row < 96; row++) {
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	3301      	adds	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	2b5f      	cmp	r3, #95	; 0x5f
 80012f6:	d9d0      	bls.n	800129a <LCD_Update+0x4a>
	}

	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	2396      	movs	r3, #150	; 0x96
 80012fe:	2201      	movs	r2, #1
 8001300:	490b      	ldr	r1, [pc, #44]	; (8001330 <LCD_Update+0xe0>)
 8001302:	f002 fcb5 	bl	8003c70 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6858      	ldr	r0, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	891b      	ldrh	r3, [r3, #8]
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	f002 f828 	bl	8003366 <HAL_GPIO_WritePin>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	200000a4 	.word	0x200000a4
 8001324:	20000004 	.word	0x20000004
 8001328:	200000a5 	.word	0x200000a5
 800132c:	20000098 	.word	0x20000098
 8001330:	20000094 	.word	0x20000094

08001334 <LCD_LoadFull>:
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to Datasheet
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
}

// Load full pic
void LCD_LoadFull(uint8_t *BMP) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	memcpy(DispBuf, BMP, 1152);
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <LCD_LoadFull+0x20>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f003 faa0 	bl	800488c <memcpy>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000098 	.word	0x20000098

08001358 <LCD_LoadObjs>:

void LCD_LoadObjs(GameObj *header, uint8_t drawMode, uint8_t repeatMode,
bool flip) {
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b088      	sub	sp, #32
 800135c:	af04      	add	r7, sp, #16
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	4608      	mov	r0, r1
 8001362:	4611      	mov	r1, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4603      	mov	r3, r0
 8001368:	70fb      	strb	r3, [r7, #3]
 800136a:	460b      	mov	r3, r1
 800136c:	70bb      	strb	r3, [r7, #2]
 800136e:	4613      	mov	r3, r2
 8001370:	707b      	strb	r3, [r7, #1]
	GameObj *ptr = header;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

	if (!ptr->full)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	7b9b      	ldrb	r3, [r3, #14]
 800137a:	f083 0301 	eor.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	d125      	bne.n	80013d0 <LCD_LoadObjs+0x78>
		return;

	for (;;) {
		LCD_LoadObj(ptr->bmp, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6818      	ldr	r0, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	689c      	ldr	r4, [r3, #8]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	7b1d      	ldrb	r5, [r3, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	7b5b      	ldrb	r3, [r3, #13]
 8001398:	787a      	ldrb	r2, [r7, #1]
 800139a:	9203      	str	r2, [sp, #12]
 800139c:	78ba      	ldrb	r2, [r7, #2]
 800139e:	9202      	str	r2, [sp, #8]
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	9201      	str	r2, [sp, #4]
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	462b      	mov	r3, r5
 80013a8:	4622      	mov	r2, r4
 80013aa:	f000 f817 	bl	80013dc <LCD_LoadObj>
				repeatMode, flip);

		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == header)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	7b9b      	ldrb	r3, [r3, #14]
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10a      	bne.n	80013d4 <LCD_LoadObjs+0x7c>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d005      	beq.n	80013d4 <LCD_LoadObjs+0x7c>
			return;
		ptr = ptr->next;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	60fb      	str	r3, [r7, #12]
		LCD_LoadObj(ptr->bmp, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 80013ce:	e7d9      	b.n	8001384 <LCD_LoadObjs+0x2c>
		return;
 80013d0:	bf00      	nop
 80013d2:	e000      	b.n	80013d6 <LCD_LoadObjs+0x7e>
			return;
 80013d4:	bf00      	nop
	}
}
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}

080013dc <LCD_LoadObj>:

void LCD_LoadObj(uint8_t *bmp, float posX, float posY, uint8_t width,
		uint8_t height, uint8_t drawMode, uint8_t repeatMode, bool flip) {
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	70fb      	strb	r3, [r7, #3]
	short displayRow;
	short displayRowOffset;

	//Counting from Y origin point to bmpH using for loop
	for (uint8_t y = 0; y < height; y++) {
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80013f0:	e181      	b.n	80016f6 <LCD_LoadObj+0x31a>
		displayRow = modulo(floor(posY) + y, 96);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff f818 	bl	8000428 <__aeabi_f2d>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	f004 fabe 	bl	8005980 <floor>
 8001404:	4604      	mov	r4, r0
 8001406:	460d      	mov	r5, r1
 8001408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fff9 	bl	8000404 <__aeabi_i2d>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4620      	mov	r0, r4
 8001418:	4629      	mov	r1, r5
 800141a:	f7fe fea7 	bl	800016c <__adddf3>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4610      	mov	r0, r2
 8001424:	4619      	mov	r1, r3
 8001426:	f7ff faf1 	bl	8000a0c <__aeabi_d2iz>
 800142a:	4603      	mov	r3, r0
 800142c:	2160      	movs	r1, #96	; 0x60
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fe91 	bl	8001156 <modulo>
 8001434:	4603      	mov	r3, r0
 8001436:	847b      	strh	r3, [r7, #34]	; 0x22

		if ((repeatMode == REPEATMODE_NONE)
 8001438:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800143c:	2b00      	cmp	r3, #0
 800143e:	d109      	bne.n	8001454 <LCD_LoadObj+0x78>
				&& (displayRow < 0 || displayRow >= 96)) {
 8001440:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001444:	2b00      	cmp	r3, #0
 8001446:	f2c0 8150 	blt.w	80016ea <LCD_LoadObj+0x30e>
 800144a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800144e:	2b5f      	cmp	r3, #95	; 0x5f
 8001450:	f300 814b 	bgt.w	80016ea <LCD_LoadObj+0x30e>
			continue;
		}

		displayRowOffset = displayRow * 12;
 8001454:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001456:	461a      	mov	r2, r3
 8001458:	0052      	lsls	r2, r2, #1
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	b29b      	uxth	r3, r3
 8001460:	843b      	strh	r3, [r7, #32]

		int firstXByte = floor(floor(posX) / 8);
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7fe ffe0 	bl	8000428 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f004 fa86 	bl	8005980 <floor>
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	4ba5      	ldr	r3, [pc, #660]	; (8001710 <LCD_LoadObj+0x334>)
 800147a:	f7ff f957 	bl	800072c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f004 fa7b 	bl	8005980 <floor>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fabb 	bl	8000a0c <__aeabi_d2iz>
 8001496:	4603      	mov	r3, r0
 8001498:	61fb      	str	r3, [r7, #28]
		uint8_t leftOffset = modulo(floor(posX), 8);
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7fe ffc4 	bl	8000428 <__aeabi_f2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f004 fa6a 	bl	8005980 <floor>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	f7ff faaa 	bl	8000a0c <__aeabi_d2iz>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2108      	movs	r1, #8
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe4a 	bl	8001156 <modulo>
 80014c2:	4603      	mov	r3, r0
 80014c4:	76fb      	strb	r3, [r7, #27]

		uint8_t v1 = 0x00, v2 = 0x00;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014cc:	2300      	movs	r3, #0
 80014ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t *currentEditingBuf;

		for (uint8_t j = 0; j < width + 1; j++) {
 80014d2:	2300      	movs	r3, #0
 80014d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80014d8:	e100      	b.n	80016dc <LCD_LoadObj+0x300>
			if (j == width)
 80014da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80014de:	78fb      	ldrb	r3, [r7, #3]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d103      	bne.n	80014ec <LCD_LoadObj+0x110>
				v2 = 0x00;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80014ea:	e00d      	b.n	8001508 <LCD_LoadObj+0x12c>
			else
				v2 = *(bmp + width * y + j);
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014fc:	4413      	add	r3, r2
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			if (repeatMode == REPEATMODE_NONE
 8001508:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800150c:	2b00      	cmp	r3, #0
 800150e:	d110      	bne.n	8001532 <LCD_LoadObj+0x156>
					&& (firstXByte + j < 0 || firstXByte + j > 11)) {
 8001510:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	4413      	add	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	db05      	blt.n	8001528 <LCD_LoadObj+0x14c>
 800151c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	2b0b      	cmp	r3, #11
 8001526:	dd04      	ble.n	8001532 <LCD_LoadObj+0x156>
				v1 = v2;
 8001528:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800152c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				continue;
 8001530:	e0cf      	b.n	80016d2 <LCD_LoadObj+0x2f6>
			}

			currentEditingBuf = DispBuf + displayRowOffset
					+ (firstXByte + j) % 12;
 8001532:	4b78      	ldr	r3, [pc, #480]	; (8001714 <LCD_LoadObj+0x338>)
 8001534:	6818      	ldr	r0, [r3, #0]
 8001536:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 800153a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	441a      	add	r2, r3
 8001542:	4b75      	ldr	r3, [pc, #468]	; (8001718 <LCD_LoadObj+0x33c>)
 8001544:	fb83 1302 	smull	r1, r3, r3, r2
 8001548:	1059      	asrs	r1, r3, #1
 800154a:	17d3      	asrs	r3, r2, #31
 800154c:	1ac9      	subs	r1, r1, r3
 800154e:	460b      	mov	r3, r1
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	440b      	add	r3, r1
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	1ad1      	subs	r1, r2, r3
 8001558:	460b      	mov	r3, r1
 800155a:	4423      	add	r3, r4
			currentEditingBuf = DispBuf + displayRowOffset
 800155c:	4403      	add	r3, r0
 800155e:	617b      	str	r3, [r7, #20]

			if (flip) {
 8001560:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001564:	2b00      	cmp	r3, #0
 8001566:	d058      	beq.n	800161a <LCD_LoadObj+0x23e>
				switch (drawMode) {
 8001568:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800156c:	2b02      	cmp	r3, #2
 800156e:	d03b      	beq.n	80015e8 <LCD_LoadObj+0x20c>
 8001570:	2b02      	cmp	r3, #2
 8001572:	f300 80aa 	bgt.w	80016ca <LCD_LoadObj+0x2ee>
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <LCD_LoadObj+0x1a4>
 800157a:	2b01      	cmp	r3, #1
 800157c:	d01b      	beq.n	80015b6 <LCD_LoadObj+0x1da>
 800157e:	e0a4      	b.n	80016ca <LCD_LoadObj+0x2ee>
				case DRAWMODE_ADD:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b25a      	sxtb	r2, r3
 8001586:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800158a:	7efb      	ldrb	r3, [r7, #27]
 800158c:	f1c3 0308 	rsb	r3, r3, #8
 8001590:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 8001594:	b259      	sxtb	r1, r3
 8001596:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800159a:	7efb      	ldrb	r3, [r7, #27]
 800159c:	fa40 f303 	asr.w	r3, r0, r3
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	430b      	orrs	r3, r1
 80015a4:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80015a6:	43db      	mvns	r3, r3
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	4013      	ands	r3, r2
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	701a      	strb	r2, [r3, #0]
					break;
 80015b4:	e089      	b.n	80016ca <LCD_LoadObj+0x2ee>
				case DRAWMODE_CULL:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b25a      	sxtb	r2, r3
 80015bc:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80015c0:	7efb      	ldrb	r3, [r7, #27]
 80015c2:	f1c3 0308 	rsb	r3, r3, #8
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80015ca:	b259      	sxtb	r1, r3
 80015cc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80015d0:	7efb      	ldrb	r3, [r7, #27]
 80015d2:	fa40 f303 	asr.w	r3, r0, r3
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	430b      	orrs	r3, r1
 80015da:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80015dc:	4313      	orrs	r3, r2
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	701a      	strb	r2, [r3, #0]
					break;
 80015e6:	e070      	b.n	80016ca <LCD_LoadObj+0x2ee>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b25a      	sxtb	r2, r3
 80015ee:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80015f2:	7efb      	ldrb	r3, [r7, #27]
 80015f4:	f1c3 0308 	rsb	r3, r3, #8
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80015fc:	b259      	sxtb	r1, r3
 80015fe:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001602:	7efb      	ldrb	r3, [r7, #27]
 8001604:	fa40 f303 	asr.w	r3, r0, r3
 8001608:	b25b      	sxtb	r3, r3
 800160a:	430b      	orrs	r3, r1
 800160c:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 800160e:	4053      	eors	r3, r2
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2da      	uxtb	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	701a      	strb	r2, [r3, #0]
					break;
 8001618:	e057      	b.n	80016ca <LCD_LoadObj+0x2ee>
				}
			} else {
				switch (drawMode) {
 800161a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800161e:	2b02      	cmp	r3, #2
 8001620:	d03a      	beq.n	8001698 <LCD_LoadObj+0x2bc>
 8001622:	2b02      	cmp	r3, #2
 8001624:	dc51      	bgt.n	80016ca <LCD_LoadObj+0x2ee>
 8001626:	2b00      	cmp	r3, #0
 8001628:	d002      	beq.n	8001630 <LCD_LoadObj+0x254>
 800162a:	2b01      	cmp	r3, #1
 800162c:	d019      	beq.n	8001662 <LCD_LoadObj+0x286>
 800162e:	e04c      	b.n	80016ca <LCD_LoadObj+0x2ee>
				case DRAWMODE_ADD:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b25a      	sxtb	r2, r3
 8001636:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800163a:	7efb      	ldrb	r3, [r7, #27]
 800163c:	f1c3 0308 	rsb	r3, r3, #8
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 8001644:	b259      	sxtb	r1, r3
 8001646:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800164a:	7efb      	ldrb	r3, [r7, #27]
 800164c:	fa40 f303 	asr.w	r3, r0, r3
 8001650:	b25b      	sxtb	r3, r3
 8001652:	430b      	orrs	r3, r1
 8001654:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001656:	4313      	orrs	r3, r2
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2da      	uxtb	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	701a      	strb	r2, [r3, #0]
					break;
 8001660:	e033      	b.n	80016ca <LCD_LoadObj+0x2ee>
				case DRAWMODE_CULL:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25a      	sxtb	r2, r3
 8001668:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 800166c:	7efb      	ldrb	r3, [r7, #27]
 800166e:	f1c3 0308 	rsb	r3, r3, #8
 8001672:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 8001676:	b259      	sxtb	r1, r3
 8001678:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800167c:	7efb      	ldrb	r3, [r7, #27]
 800167e:	fa40 f303 	asr.w	r3, r0, r3
 8001682:	b25b      	sxtb	r3, r3
 8001684:	430b      	orrs	r3, r1
 8001686:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001688:	43db      	mvns	r3, r3
 800168a:	b25b      	sxtb	r3, r3
 800168c:	4013      	ands	r3, r2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	b2da      	uxtb	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	701a      	strb	r2, [r3, #0]
					break;
 8001696:	e018      	b.n	80016ca <LCD_LoadObj+0x2ee>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b25a      	sxtb	r2, r3
 800169e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80016a2:	7efb      	ldrb	r3, [r7, #27]
 80016a4:	f1c3 0308 	rsb	r3, r3, #8
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80016ac:	b259      	sxtb	r1, r3
 80016ae:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80016b2:	7efb      	ldrb	r3, [r7, #27]
 80016b4:	fa40 f303 	asr.w	r3, r0, r3
 80016b8:	b25b      	sxtb	r3, r3
 80016ba:	430b      	orrs	r3, r1
 80016bc:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80016be:	4053      	eors	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	701a      	strb	r2, [r3, #0]
					break;
 80016c8:	bf00      	nop
				}
			}

			v1 = v2;
 80016ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t j = 0; j < width + 1; j++) {
 80016d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016d6:	3301      	adds	r3, #1
 80016d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80016e2:	429a      	cmp	r2, r3
 80016e4:	f4bf aef9 	bcs.w	80014da <LCD_LoadObj+0xfe>
 80016e8:	e000      	b.n	80016ec <LCD_LoadObj+0x310>
			continue;
 80016ea:	bf00      	nop
	for (uint8_t y = 0; y < height; y++) {
 80016ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016f0:	3301      	adds	r3, #1
 80016f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016fa:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80016fe:	429a      	cmp	r2, r3
 8001700:	f4ff ae77 	bcc.w	80013f2 <LCD_LoadObj+0x16>
		}
	}
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bdb0      	pop	{r4, r5, r7, pc}
 800170e:	bf00      	nop
 8001710:	40200000 	.word	0x40200000
 8001714:	20000098 	.word	0x20000098
 8001718:	2aaaaaab 	.word	0x2aaaaaab

0800171c <LCD_DrawLine>:

void LCD_DrawLine(uint8_t startingRow, int startingPoint, uint8_t length,
		uint8_t drawMode, bool flip) {
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6039      	str	r1, [r7, #0]
 8001724:	4611      	mov	r1, r2
 8001726:	461a      	mov	r2, r3
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
 800172c:	460b      	mov	r3, r1
 800172e:	71bb      	strb	r3, [r7, #6]
 8001730:	4613      	mov	r3, r2
 8001732:	717b      	strb	r3, [r7, #5]
	uint16_t rowOffset = (startingRow % 96) * 12;
 8001734:	79fa      	ldrb	r2, [r7, #7]
 8001736:	4b78      	ldr	r3, [pc, #480]	; (8001918 <LCD_DrawLine+0x1fc>)
 8001738:	fba3 1302 	umull	r1, r3, r3, r2
 800173c:	0999      	lsrs	r1, r3, #6
 800173e:	460b      	mov	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	440b      	add	r3, r1
 8001744:	015b      	lsls	r3, r3, #5
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	0052      	lsls	r2, r2, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	82bb      	strh	r3, [r7, #20]

	for (uint8_t j = 0; j < length; j++) {
 8001756:	2300      	movs	r3, #0
 8001758:	75fb      	strb	r3, [r7, #23]
 800175a:	e0d1      	b.n	8001900 <LCD_DrawLine+0x1e4>
		if (startingPoint + j < 0 || startingPoint + j > 95)
 800175c:	7dfa      	ldrb	r2, [r7, #23]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	4413      	add	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	f2c0 80c8 	blt.w	80018f8 <LCD_DrawLine+0x1dc>
 8001768:	7dfa      	ldrb	r2, [r7, #23]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	4413      	add	r3, r2
 800176e:	2b5f      	cmp	r3, #95	; 0x5f
 8001770:	f300 80c2 	bgt.w	80018f8 <LCD_DrawLine+0x1dc>
			continue;
		uint8_t additionalOffset = ((startingPoint + j) % 96) / 8;
 8001774:	7dfa      	ldrb	r2, [r7, #23]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	441a      	add	r2, r3
 800177a:	4b68      	ldr	r3, [pc, #416]	; (800191c <LCD_DrawLine+0x200>)
 800177c:	fb83 1302 	smull	r1, r3, r3, r2
 8001780:	1119      	asrs	r1, r3, #4
 8001782:	17d3      	asrs	r3, r2, #31
 8001784:	1ac9      	subs	r1, r1, r3
 8001786:	460b      	mov	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	440b      	add	r3, r1
 800178c:	015b      	lsls	r3, r3, #5
 800178e:	1ad1      	subs	r1, r2, r3
 8001790:	460b      	mov	r3, r1
 8001792:	2b00      	cmp	r3, #0
 8001794:	da00      	bge.n	8001798 <LCD_DrawLine+0x7c>
 8001796:	3307      	adds	r3, #7
 8001798:	10db      	asrs	r3, r3, #3
 800179a:	74fb      	strb	r3, [r7, #19]

		uint8_t *currentEditingBuf = DispBuf + rowOffset + additionalOffset;
 800179c:	4b60      	ldr	r3, [pc, #384]	; (8001920 <LCD_DrawLine+0x204>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	8ab9      	ldrh	r1, [r7, #20]
 80017a2:	7cfb      	ldrb	r3, [r7, #19]
 80017a4:	440b      	add	r3, r1
 80017a6:	4413      	add	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
		if (flip) {
 80017aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d051      	beq.n	8001856 <LCD_DrawLine+0x13a>
			switch (drawMode) {
 80017b2:	797b      	ldrb	r3, [r7, #5]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d037      	beq.n	8001828 <LCD_DrawLine+0x10c>
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	f300 809e 	bgt.w	80018fa <LCD_DrawLine+0x1de>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <LCD_DrawLine+0xac>
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d019      	beq.n	80017fa <LCD_DrawLine+0xde>
 80017c6:	e098      	b.n	80018fa <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	b25a      	sxtb	r2, r3
 80017ce:	7df9      	ldrb	r1, [r7, #23]
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	440b      	add	r3, r1
 80017d4:	4259      	negs	r1, r3
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	f001 0107 	and.w	r1, r1, #7
 80017de:	bf58      	it	pl
 80017e0:	424b      	negpl	r3, r1
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	fa41 f303 	asr.w	r3, r1, r3
 80017e8:	b25b      	sxtb	r3, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	b25b      	sxtb	r3, r3
 80017ee:	4013      	ands	r3, r2
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	701a      	strb	r2, [r3, #0]
				break;
 80017f8:	e07f      	b.n	80018fa <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b25a      	sxtb	r2, r3
 8001800:	7df9      	ldrb	r1, [r7, #23]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	440b      	add	r3, r1
 8001806:	4259      	negs	r1, r3
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	f001 0107 	and.w	r1, r1, #7
 8001810:	bf58      	it	pl
 8001812:	424b      	negpl	r3, r1
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	fa41 f303 	asr.w	r3, r1, r3
 800181a:	b25b      	sxtb	r3, r3
 800181c:	4313      	orrs	r3, r2
 800181e:	b25b      	sxtb	r3, r3
 8001820:	b2da      	uxtb	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	701a      	strb	r2, [r3, #0]
				break;
 8001826:	e068      	b.n	80018fa <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b25a      	sxtb	r2, r3
 800182e:	7df9      	ldrb	r1, [r7, #23]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	440b      	add	r3, r1
 8001834:	4259      	negs	r1, r3
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	f001 0107 	and.w	r1, r1, #7
 800183e:	bf58      	it	pl
 8001840:	424b      	negpl	r3, r1
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	fa41 f303 	asr.w	r3, r1, r3
 8001848:	b25b      	sxtb	r3, r3
 800184a:	4053      	eors	r3, r2
 800184c:	b25b      	sxtb	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	701a      	strb	r2, [r3, #0]
				break;
 8001854:	e051      	b.n	80018fa <LCD_DrawLine+0x1de>
			}
		} else {
			switch (drawMode) {
 8001856:	797b      	ldrb	r3, [r7, #5]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d036      	beq.n	80018ca <LCD_DrawLine+0x1ae>
 800185c:	2b02      	cmp	r3, #2
 800185e:	dc4c      	bgt.n	80018fa <LCD_DrawLine+0x1de>
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <LCD_DrawLine+0x14e>
 8001864:	2b01      	cmp	r3, #1
 8001866:	d017      	beq.n	8001898 <LCD_DrawLine+0x17c>
 8001868:	e047      	b.n	80018fa <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	b25a      	sxtb	r2, r3
 8001870:	7df9      	ldrb	r1, [r7, #23]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	440b      	add	r3, r1
 8001876:	4259      	negs	r1, r3
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	f001 0107 	and.w	r1, r1, #7
 8001880:	bf58      	it	pl
 8001882:	424b      	negpl	r3, r1
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	fa41 f303 	asr.w	r3, r1, r3
 800188a:	b25b      	sxtb	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b25b      	sxtb	r3, r3
 8001890:	b2da      	uxtb	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	701a      	strb	r2, [r3, #0]
				break;
 8001896:	e030      	b.n	80018fa <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b25a      	sxtb	r2, r3
 800189e:	7df9      	ldrb	r1, [r7, #23]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	440b      	add	r3, r1
 80018a4:	4259      	negs	r1, r3
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	f001 0107 	and.w	r1, r1, #7
 80018ae:	bf58      	it	pl
 80018b0:	424b      	negpl	r3, r1
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	fa41 f303 	asr.w	r3, r1, r3
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	b25b      	sxtb	r3, r3
 80018be:	4013      	ands	r3, r2
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	701a      	strb	r2, [r3, #0]
				break;
 80018c8:	e017      	b.n	80018fa <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b25a      	sxtb	r2, r3
 80018d0:	7df9      	ldrb	r1, [r7, #23]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	440b      	add	r3, r1
 80018d6:	4259      	negs	r1, r3
 80018d8:	f003 0307 	and.w	r3, r3, #7
 80018dc:	f001 0107 	and.w	r1, r1, #7
 80018e0:	bf58      	it	pl
 80018e2:	424b      	negpl	r3, r1
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	fa41 f303 	asr.w	r3, r1, r3
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	4053      	eors	r3, r2
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	701a      	strb	r2, [r3, #0]
				break;
 80018f6:	e000      	b.n	80018fa <LCD_DrawLine+0x1de>
			continue;
 80018f8:	bf00      	nop
	for (uint8_t j = 0; j < length; j++) {
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	3301      	adds	r3, #1
 80018fe:	75fb      	strb	r3, [r7, #23]
 8001900:	7dfa      	ldrb	r2, [r7, #23]
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	429a      	cmp	r2, r3
 8001906:	f4ff af29 	bcc.w	800175c <LCD_DrawLine+0x40>
			}
		}

	}
}
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	371c      	adds	r7, #28
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	aaaaaaab 	.word	0xaaaaaaab
 800191c:	2aaaaaab 	.word	0x2aaaaaab
 8001920:	20000098 	.word	0x20000098

08001924 <LCD_Invert>:

// Inverts color, WILL CAUSE PERFORMANCE LOSS
void LCD_Invert(void) {
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
	uint16_t invt = 1152;
 800192a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800192e:	80fb      	strh	r3, [r7, #6]
	do {
		invt--;
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	3b01      	subs	r3, #1
 8001934:	80fb      	strh	r3, [r7, #6]
		DispBuf[invt] = ~DispBuf[invt];
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <LCD_Invert+0x3c>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4413      	add	r3, r2
 800193e:	781a      	ldrb	r2, [r3, #0]
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <LCD_Invert+0x3c>)
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	440b      	add	r3, r1
 8001948:	43d2      	mvns	r2, r2
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]
	} while (invt);
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ed      	bne.n	8001930 <LCD_Invert+0xc>
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	20000098 	.word	0x20000098

08001964 <LCD_Fill>:

//Fill screen with either black or white color
void LCD_Fill(bool flip) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
	memset(DispBuf, (flip ? 0xFF : 0x00), 1152);
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <LCD_Fill+0x2c>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <LCD_Fill+0x18>
 8001978:	23ff      	movs	r3, #255	; 0xff
 800197a:	e000      	b.n	800197e <LCD_Fill+0x1a>
 800197c:	2300      	movs	r3, #0
 800197e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001982:	4619      	mov	r1, r3
 8001984:	f002 ff90 	bl	80048a8 <memset>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000098 	.word	0x20000098

08001994 <LCD_Print>:
	}

}

void LCD_Print(char *str, short xPos, short yPos, uint8_t drawMode,
		uint8_t repeatMode, bool flip) {
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af04      	add	r7, sp, #16
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	4608      	mov	r0, r1
 800199e:	4611      	mov	r1, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4603      	mov	r3, r0
 80019a4:	817b      	strh	r3, [r7, #10]
 80019a6:	460b      	mov	r3, r1
 80019a8:	813b      	strh	r3, [r7, #8]
 80019aa:	4613      	mov	r3, r2
 80019ac:	71fb      	strb	r3, [r7, #7]
	short strLength = strlen(str);
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f7fe fbce 	bl	8000150 <strlen>
 80019b4:	4603      	mov	r3, r0
 80019b6:	833b      	strh	r3, [r7, #24]
	short lineSpacing = 1;
 80019b8:	2301      	movs	r3, #1
 80019ba:	82fb      	strh	r3, [r7, #22]
	short charSpacing = -1;
 80019bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c0:	82bb      	strh	r3, [r7, #20]
	short spaceSpacing = 4;
 80019c2:	2304      	movs	r3, #4
 80019c4:	827b      	strh	r3, [r7, #18]
	short tabSpacing = 8 + charSpacing;
 80019c6:	8abb      	ldrh	r3, [r7, #20]
 80019c8:	3308      	adds	r3, #8
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	823b      	strh	r3, [r7, #16]

	short lineOff = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	83fb      	strh	r3, [r7, #30]
	short charOff = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	83bb      	strh	r3, [r7, #28]

	for (short i = 0; i < strLength; i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	837b      	strh	r3, [r7, #26]
 80019da:	e064      	b.n	8001aa6 <LCD_Print+0x112>
		if (str[i] == '\n') {
 80019dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b0a      	cmp	r3, #10
 80019e8:	d109      	bne.n	80019fe <LCD_Print+0x6a>
			lineOff += (8 + lineSpacing);
 80019ea:	8afa      	ldrh	r2, [r7, #22]
 80019ec:	8bfb      	ldrh	r3, [r7, #30]
 80019ee:	4413      	add	r3, r2
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3308      	adds	r3, #8
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	83fb      	strh	r3, [r7, #30]
			charOff = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	83bb      	strh	r3, [r7, #28]
			continue;
 80019fc:	e04d      	b.n	8001a9a <LCD_Print+0x106>
		}
		if (str[i] == ' ') {
 80019fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b20      	cmp	r3, #32
 8001a0a:	d105      	bne.n	8001a18 <LCD_Print+0x84>
			charOff += spaceSpacing;
 8001a0c:	8bba      	ldrh	r2, [r7, #28]
 8001a0e:	8a7b      	ldrh	r3, [r7, #18]
 8001a10:	4413      	add	r3, r2
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	83bb      	strh	r3, [r7, #28]
			continue;
 8001a16:	e040      	b.n	8001a9a <LCD_Print+0x106>
		}
		if (str[i] == '\t') {
 8001a18:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b09      	cmp	r3, #9
 8001a24:	d105      	bne.n	8001a32 <LCD_Print+0x9e>
			charOff += tabSpacing;
 8001a26:	8bba      	ldrh	r2, [r7, #28]
 8001a28:	8a3b      	ldrh	r3, [r7, #16]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	83bb      	strh	r3, [r7, #28]
			continue;
 8001a30:	e033      	b.n	8001a9a <LCD_Print+0x106>
		}

		FetchText(TextBuf, str[i]);
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <LCD_Print+0x128>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4619      	mov	r1, r3
 8001a42:	f000 ff65 	bl	8002910 <FetchText>
		LCD_LoadObj(TextBuf, xPos + charOff, yPos + lineOff, 1, 8, drawMode,
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <LCD_Print+0x128>)
 8001a48:	681c      	ldr	r4, [r3, #0]
 8001a4a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a52:	4413      	add	r3, r2
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f90b 	bl	8000c70 <__aeabi_i2f>
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a60:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a64:	4413      	add	r3, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f902 	bl	8000c70 <__aeabi_i2f>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a72:	9303      	str	r3, [sp, #12]
 8001a74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a78:	9302      	str	r3, [sp, #8]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2308      	movs	r3, #8
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2301      	movs	r3, #1
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fca8 	bl	80013dc <LCD_LoadObj>
				repeatMode, flip);
		charOff += (8 + charSpacing);
 8001a8c:	8aba      	ldrh	r2, [r7, #20]
 8001a8e:	8bbb      	ldrh	r3, [r7, #28]
 8001a90:	4413      	add	r3, r2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	3308      	adds	r3, #8
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	83bb      	strh	r3, [r7, #28]
	for (short i = 0; i < strLength; i++) {
 8001a9a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	837b      	strh	r3, [r7, #26]
 8001aa6:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001aaa:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	db94      	blt.n	80019dc <LCD_Print+0x48>
	}
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bdb0      	pop	{r4, r5, r7, pc}
 8001abc:	200000a0 	.word	0x200000a0

08001ac0 <KeyScan>:

static uint8_t KeyBuffer[2] = { 0x00, 0x00 };
static bool ButtonDownDetectionEnable[2] = { 0, 0 };
static bool ButtonUpDetectionEnable[2] = { 0, 0 };

void KeyScan() {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
	KeyBuffer[0] = ((KeyBuffer[0] << 1) | (KEY0_STATE & 0x01));
 8001ac6:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <KeyScan+0xdc>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	b25c      	sxtb	r4, r3
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4833      	ldr	r0, [pc, #204]	; (8001ba0 <KeyScan+0xe0>)
 8001ad2:	f001 fc31 	bl	8003338 <HAL_GPIO_ReadPin>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b25b      	sxtb	r3, r3
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	4323      	orrs	r3, r4
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <KeyScan+0xdc>)
 8001ae8:	701a      	strb	r2, [r3, #0]
	KeyBuffer[1] = ((KeyBuffer[1] << 1) | (KEY1_STATE & 0x01));
 8001aea:	4b2c      	ldr	r3, [pc, #176]	; (8001b9c <KeyScan+0xdc>)
 8001aec:	785b      	ldrb	r3, [r3, #1]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	b25c      	sxtb	r4, r3
 8001af2:	2102      	movs	r1, #2
 8001af4:	482a      	ldr	r0, [pc, #168]	; (8001ba0 <KeyScan+0xe0>)
 8001af6:	f001 fc1f 	bl	8003338 <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b25b      	sxtb	r3, r3
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	b25b      	sxtb	r3, r3
 8001b04:	4323      	orrs	r3, r4
 8001b06:	b25b      	sxtb	r3, r3
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <KeyScan+0xdc>)
 8001b0c:	705a      	strb	r2, [r3, #1]

	for (uint8_t j = 0; j < 2; j++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	e03a      	b.n	8001b8a <KeyScan+0xca>
		if ((KeyBuffer[j] | 0xf0) == 0xff) {
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <KeyScan+0xdc>)
 8001b18:	5cd3      	ldrb	r3, [r2, r3]
 8001b1a:	f063 030f 	orn	r3, r3, #15
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2bff      	cmp	r3, #255	; 0xff
 8001b22:	d115      	bne.n	8001b50 <KeyScan+0x90>
			if (!KeyState[j] && ButtonDownDetectionEnable[j]) {
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <KeyScan+0xe4>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	f083 0301 	eor.w	r3, r3, #1
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <KeyScan+0x86>
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	4a1c      	ldr	r2, [pc, #112]	; (8001ba8 <KeyScan+0xe8>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <KeyScan+0x86>
				KeyPressed[j] = 1;
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <KeyScan+0xec>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 1;
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <KeyScan+0xe4>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	54d1      	strb	r1, [r2, r3]
 8001b4e:	e019      	b.n	8001b84 <KeyScan+0xc4>
		} else if ((KeyBuffer[j] | 0xf0) == 0xf0) {
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <KeyScan+0xdc>)
 8001b54:	5cd3      	ldrb	r3, [r2, r3]
 8001b56:	f063 030f 	orn	r3, r3, #15
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2bf0      	cmp	r3, #240	; 0xf0
 8001b5e:	d111      	bne.n	8001b84 <KeyScan+0xc4>
			if (KeyState[j] && ButtonUpDetectionEnable[j]) {
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <KeyScan+0xe4>)
 8001b64:	5cd3      	ldrb	r3, [r2, r3]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <KeyScan+0xbc>
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <KeyScan+0xf0>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <KeyScan+0xbc>
				KeyReleased[j] = 1;
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <KeyScan+0xf4>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 0;
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4a09      	ldr	r2, [pc, #36]	; (8001ba4 <KeyScan+0xe4>)
 8001b80:	2100      	movs	r1, #0
 8001b82:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < 2; j++) {
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	3301      	adds	r3, #1
 8001b88:	71fb      	strb	r3, [r7, #7]
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d9c1      	bls.n	8001b14 <KeyScan+0x54>
		}
	}
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200000b4 	.word	0x200000b4
 8001ba0:	40010c00 	.word	0x40010c00
 8001ba4:	200000a8 	.word	0x200000a8
 8001ba8:	200000b8 	.word	0x200000b8
 8001bac:	200000ac 	.word	0x200000ac
 8001bb0:	200000bc 	.word	0x200000bc
 8001bb4:	200000b0 	.word	0x200000b0

08001bb8 <GetButton>:

bool GetButton(uint8_t buttonIndex) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
	return KeyState[buttonIndex];
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <GetButton+0x1c>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	200000a8 	.word	0x200000a8

08001bd8 <GetButtonDown>:

bool GetButtonDown(uint8_t buttonIndex) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
	EnableButtonDownDetection(buttonIndex);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 f813 	bl	8001c10 <EnableButtonDownDetection>
	if (KeyPressed[buttonIndex]) {
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <GetButtonDown+0x34>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <GetButtonDown+0x28>
		KeyPressed[buttonIndex] = 0;
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <GetButtonDown+0x34>)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	54d1      	strb	r1, [r2, r3]
		return 1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <GetButtonDown+0x2a>
	}
	return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200000ac 	.word	0x200000ac

08001c10 <EnableButtonDownDetection>:
		return 1;
	}
	return 0;
}

void EnableButtonDownDetection(uint8_t buttonIndex){
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
	ButtonDownDetectionEnable[buttonIndex] = 1;
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <EnableButtonDownDetection+0x1c>)
 8001c1e:	2101      	movs	r1, #1
 8001c20:	54d1      	strb	r1, [r2, r3]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr
 8001c2c:	200000b8 	.word	0x200000b8

08001c30 <DisableButtonDownDetection>:

void DisableButtonDownDetection(uint8_t buttonIndex){
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	ButtonDownDetectionEnable[buttonIndex] = 0;
 8001c3a:	79fb      	ldrb	r3, [r7, #7]
 8001c3c:	4a03      	ldr	r2, [pc, #12]	; (8001c4c <DisableButtonDownDetection+0x1c>)
 8001c3e:	2100      	movs	r1, #0
 8001c40:	54d1      	strb	r1, [r2, r3]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr
 8001c4c:	200000b8 	.word	0x200000b8

08001c50 <IsOverlapping>:
 */

#include "gamelogic.h"

bool IsOverlapping(short x1, short y1, short x2, short y2, short x3, short y3,
		short x4, short y4) {
 8001c50:	b490      	push	{r4, r7}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4604      	mov	r4, r0
 8001c58:	4608      	mov	r0, r1
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	80fb      	strh	r3, [r7, #6]
 8001c62:	4603      	mov	r3, r0
 8001c64:	80bb      	strh	r3, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	803b      	strh	r3, [r7, #0]
	if (x1 > x4 || x3 > x2 || y1 > y4 || y3 > y2) {
 8001c6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001c72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	dc11      	bgt.n	8001c9e <IsOverlapping+0x4e>
 8001c7a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001c7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dc0b      	bgt.n	8001c9e <IsOverlapping+0x4e>
 8001c86:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c8a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	dc05      	bgt.n	8001c9e <IsOverlapping+0x4e>
 8001c92:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c96:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dd01      	ble.n	8001ca2 <IsOverlapping+0x52>
		return false;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e000      	b.n	8001ca4 <IsOverlapping+0x54>
	}
	return true;
 8001ca2:	2301      	movs	r3, #1
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc90      	pop	{r4, r7}
 8001cac:	4770      	bx	lr

08001cae <IsFadedOutOfScene>:

bool IsFadedOutOfScene(GameObj *obj) {
 8001cae:	b590      	push	{r4, r7, lr}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	if (obj->x + obj->width * 8 < 0) {
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685c      	ldr	r4, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	7b1b      	ldrb	r3, [r3, #12]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe ffd5 	bl	8000c70 <__aeabi_i2f>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f7fe ff1c 	bl	8000b08 <__addsf3>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f04f 0100 	mov.w	r1, #0
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff f9bc 	bl	8001054 <__aeabi_fcmplt>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <IsFadedOutOfScene+0x38>
		return true;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <IsFadedOutOfScene+0x3a>
	} else {
		return false;
 8001ce6:	2300      	movs	r3, #0
	}
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd90      	pop	{r4, r7, pc}

08001cf0 <Append>:

// Append buffer in loop, if buffers are all occupied, use the first buffer
GameObj* Append(GameObj *header, short xPos, short yPos) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	803b      	strh	r3, [r7, #0]
	GameObj *ptr = header;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	60fb      	str	r3, [r7, #12]

	// If the current pointer is occupied, look for the next pos
	while (ptr->full) {
 8001d04:	e028      	b.n	8001d58 <Append+0x68>
		ptr = ptr->next;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	60fb      	str	r3, [r7, #12]
		// Have cycled for a whole loop
		if (ptr == header) {
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d121      	bne.n	8001d58 <Append+0x68>
			ptr->bmp = header->bmp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	601a      	str	r2, [r3, #0]
			ptr->x = xPos;
 8001d1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe ffa5 	bl	8000c70 <__aeabi_i2f>
 8001d26:	4602      	mov	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	605a      	str	r2, [r3, #4]
			ptr->y = yPos;
 8001d2c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ff9d 	bl	8000c70 <__aeabi_i2f>
 8001d36:	4602      	mov	r2, r0
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	609a      	str	r2, [r3, #8]
			ptr->width = header->width;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7b1a      	ldrb	r2, [r3, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	731a      	strb	r2, [r3, #12]
			ptr->height = header->height;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7b5a      	ldrb	r2, [r3, #13]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	735a      	strb	r2, [r3, #13]
			ptr->full = 1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	739a      	strb	r2, [r3, #14]
			return header->next;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	e023      	b.n	8001da0 <Append+0xb0>
	while (ptr->full) {
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	7b9b      	ldrb	r3, [r3, #14]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1d2      	bne.n	8001d06 <Append+0x16>
		}
	}

	ptr->bmp = header->bmp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	601a      	str	r2, [r3, #0]
	ptr->x = xPos;
 8001d68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe ff7f 	bl	8000c70 <__aeabi_i2f>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	605a      	str	r2, [r3, #4]
	ptr->y = yPos;
 8001d78:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe ff77 	bl	8000c70 <__aeabi_i2f>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	609a      	str	r2, [r3, #8]
	ptr->width = header->width;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7b1a      	ldrb	r2, [r3, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	731a      	strb	r2, [r3, #12]
	ptr->height = header->height;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7b5a      	ldrb	r2, [r3, #13]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	735a      	strb	r2, [r3, #13]
	ptr->full = 1;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	739a      	strb	r2, [r3, #14]
	return header;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <GenLoopBuf>:

// Generate loop buffer given certain size
GameObj* GenLoopBuf(uint8_t size) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
	GameObj *head = NULL, *cyclic = NULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
	head = (GameObj*) malloc(sizeof(GameObj));
 8001dba:	2014      	movs	r0, #20
 8001dbc:	f002 fd5e 	bl	800487c <malloc>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]
	head->full = 0;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	739a      	strb	r2, [r3, #14]
	cyclic = head;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8001dce:	2301      	movs	r3, #1
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	e00f      	b.n	8001df4 <GenLoopBuf+0x4c>
		GameObj *body = (GameObj*) malloc(sizeof(GameObj));
 8001dd4:	2014      	movs	r0, #20
 8001dd6:	f002 fd51 	bl	800487c <malloc>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	60bb      	str	r3, [r7, #8]
		body->full = 0;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2200      	movs	r2, #0
 8001de2:	739a      	strb	r2, [r3, #14]
		cyclic->next = body;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	611a      	str	r2, [r3, #16]
		cyclic = body;
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	3301      	adds	r3, #1
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	dbeb      	blt.n	8001dd4 <GenLoopBuf+0x2c>
	}
	cyclic->next = head;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	611a      	str	r2, [r3, #16]
	return head;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HeaderInit>:

// Initializes the head pointer with the given values, n resets other buffers
void HeaderInit(GameObj *header, uint8_t *bmp, uint8_t width, uint8_t height) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	71bb      	strb	r3, [r7, #6]
	GameObj *ptr = header;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	617b      	str	r3, [r7, #20]

	ptr->bmp = bmp;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	601a      	str	r2, [r3, #0]
	ptr->x = 0;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	605a      	str	r2, [r3, #4]
	ptr->y = 0;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
	ptr->width = width;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	79fa      	ldrb	r2, [r7, #7]
 8001e40:	731a      	strb	r2, [r3, #12]
	ptr->height = height;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	79ba      	ldrb	r2, [r7, #6]
 8001e46:	735a      	strb	r2, [r3, #13]
	ptr->full = 0;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	739a      	strb	r2, [r3, #14]

	for (;;) {
		if (ptr->next == header)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d006      	beq.n	8001e66 <HeaderInit+0x5a>
			return;
		ptr = ptr->next;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	617b      	str	r3, [r7, #20]
		ptr->full = 0;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2200      	movs	r2, #0
 8001e62:	739a      	strb	r2, [r3, #14]
		if (ptr->next == header)
 8001e64:	e7f3      	b.n	8001e4e <HeaderInit+0x42>
			return;
 8001e66:	bf00      	nop
	}
}
 8001e68:	371c      	adds	r7, #28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <ShiftX>:

// Shift all buffers and return the first active pointer
GameObj* ShiftX(GameObj *header, float byX) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	GameObj *ptr = header;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

	// Cycle through all valid buffers once and apply the drift
	for (;;) {
		if (ptr->full) {
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	7b9b      	ldrb	r3, [r3, #14]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d009      	beq.n	8001e9a <ShiftX+0x2a>
			ptr->x += byX;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe fe3b 	bl	8000b08 <__addsf3>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461a      	mov	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	605a      	str	r2, [r3, #4]
		}
		// Have cycled through the buffer
		if (!ptr->next->full || ptr->next == header)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	7b9b      	ldrb	r3, [r3, #14]
 8001ea0:	f083 0301 	eor.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d108      	bne.n	8001ebc <ShiftX+0x4c>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d003      	beq.n	8001ebc <ShiftX+0x4c>
			break;
		ptr = ptr->next;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	60fb      	str	r3, [r7, #12]
		if (ptr->full) {
 8001eba:	e7e0      	b.n	8001e7e <ShiftX+0xe>
	}

	ptr = header;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60fb      	str	r3, [r7, #12]
	// Return the first available buffer, if no buf is available, return header
	while (IsFadedOutOfScene(ptr)) {
 8001ec0:	e012      	b.n	8001ee8 <ShiftX+0x78>
		ptr->full = 0;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	739a      	strb	r2, [r3, #14]
		if (!ptr->next->full || ptr->next == header) {
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	7b9b      	ldrb	r3, [r3, #14]
 8001ece:	f083 0301 	eor.w	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <ShiftX+0x84>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d008      	beq.n	8001ef4 <ShiftX+0x84>
			break;
		}
		ptr = ptr->next;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	60fb      	str	r3, [r7, #12]
	while (IsFadedOutOfScene(ptr)) {
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f7ff fee0 	bl	8001cae <IsFadedOutOfScene>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e6      	bne.n	8001ec2 <ShiftX+0x52>
	}
	return ptr;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <Random>:

short Random(unsigned long seed, short lowerLim, short upperLim) {
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	460b      	mov	r3, r1
 8001f08:	807b      	strh	r3, [r7, #2]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	803b      	strh	r3, [r7, #0]
	srand(seed);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f002 fdae 	bl	8004a70 <srand>
	return rand() % (upperLim - lowerLim + 1) + lowerLim;
 8001f14:	f002 fdda 	bl	8004acc <rand>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f22:	1acb      	subs	r3, r1, r3
 8001f24:	3301      	adds	r3, #1
 8001f26:	fb92 f1f3 	sdiv	r1, r2, r3
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	4413      	add	r3, r2
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	b21b      	sxth	r3, r3
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	0000      	movs	r0, r0
 8001f44:	0000      	movs	r0, r0
	...

08001f48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001f48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f4c:	b08b      	sub	sp, #44	; 0x2c
 8001f4e:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001f50:	f000 feda 	bl	8002d08 <HAL_Init>
	/* USER CODE BEGIN Init */
	/* USER CODE END Init */
	/* Configure the system clock */
	SystemClock_Config();
 8001f54:	f000 fbae 	bl	80026b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001f58:	f000 fc74 	bl	8002844 <MX_GPIO_Init>
	MX_SPI1_Init();
 8001f5c:	f000 fbec 	bl	8002738 <MX_SPI1_Init>
	MX_TIM1_Init();
 8001f60:	f000 fc20 	bl	80027a4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 8001f64:	48a6      	ldr	r0, [pc, #664]	; (8002200 <main+0x2b8>)
 8001f66:	f002 f8b5 	bl	80040d4 <HAL_TIM_Base_Start_IT>
	// ALL GPIO AND BUSES MUST BE INITED BEFORE CALL THIS FUNCTION
	LCD_Init(&MemDisp, &hspi1, GPIOA, CS_Pin);
 8001f6a:	2310      	movs	r3, #16
 8001f6c:	4aa5      	ldr	r2, [pc, #660]	; (8002204 <main+0x2bc>)
 8001f6e:	49a6      	ldr	r1, [pc, #664]	; (8002208 <main+0x2c0>)
 8001f70:	48a6      	ldr	r0, [pc, #664]	; (800220c <main+0x2c4>)
 8001f72:	f7ff f90b 	bl	800118c <LCD_Init>

	GameObj *dinoHeader = GenLoopBuf(1);
 8001f76:	2001      	movs	r0, #1
 8001f78:	f7ff ff16 	bl	8001da8 <GenLoopBuf>
 8001f7c:	6178      	str	r0, [r7, #20]
	GameObj *fireHeader = GenLoopBuf(1);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7ff ff12 	bl	8001da8 <GenLoopBuf>
 8001f84:	6138      	str	r0, [r7, #16]
	GameObj *cloudHeader = GenLoopBuf(CLOUD_BUF_SIZE);
 8001f86:	2002      	movs	r0, #2
 8001f88:	f7ff ff0e 	bl	8001da8 <GenLoopBuf>
 8001f8c:	60f8      	str	r0, [r7, #12]
	GameObj *plantHeader = GenLoopBuf(PLANT_BUF_SIZE);
 8001f8e:	2002      	movs	r0, #2
 8001f90:	f7ff ff0a 	bl	8001da8 <GenLoopBuf>
 8001f94:	60b8      	str	r0, [r7, #8]

	LCD_LoadFull((uint8_t*) Title);
 8001f96:	489e      	ldr	r0, [pc, #632]	; (8002210 <main+0x2c8>)
 8001f98:	f7ff f9cc 	bl	8001334 <LCD_LoadFull>
	/// START OVER
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		isJumping = 0;
 8001f9c:	4b9d      	ldr	r3, [pc, #628]	; (8002214 <main+0x2cc>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
		jumpTick = 0, nextPlantTickDel = 0, nextCloudTickDel = 0;
 8001fa2:	4b9d      	ldr	r3, [pc, #628]	; (8002218 <main+0x2d0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	801a      	strh	r2, [r3, #0]
 8001fa8:	4b9c      	ldr	r3, [pc, #624]	; (800221c <main+0x2d4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	801a      	strh	r2, [r3, #0]
 8001fae:	4b9c      	ldr	r3, [pc, #624]	; (8002220 <main+0x2d8>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	801a      	strh	r2, [r3, #0]
		tick = 0, plantSubTick = 0, cloudSubTick = 0;
 8001fb4:	4b9b      	ldr	r3, [pc, #620]	; (8002224 <main+0x2dc>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	4b9b      	ldr	r3, [pc, #620]	; (8002228 <main+0x2e0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	4b9a      	ldr	r3, [pc, #616]	; (800222c <main+0x2e4>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
		overallSpeed = 1;
 8001fc6:	4b9a      	ldr	r3, [pc, #616]	; (8002230 <main+0x2e8>)
 8001fc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fcc:	601a      	str	r2, [r3, #0]

		HeaderInit(dinoHeader, NULL, 3, 22);
 8001fce:	2316      	movs	r3, #22
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f7ff ff19 	bl	8001e0c <HeaderInit>
		HeaderInit(fireHeader, NULL, 9, 25);
 8001fda:	2319      	movs	r3, #25
 8001fdc:	2209      	movs	r2, #9
 8001fde:	2100      	movs	r1, #0
 8001fe0:	6938      	ldr	r0, [r7, #16]
 8001fe2:	f7ff ff13 	bl	8001e0c <HeaderInit>
		HeaderInit(cloudHeader, (uint8_t*) Cloud, 6, 14);
 8001fe6:	230e      	movs	r3, #14
 8001fe8:	2206      	movs	r2, #6
 8001fea:	4992      	ldr	r1, [pc, #584]	; (8002234 <main+0x2ec>)
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7ff ff0d 	bl	8001e0c <HeaderInit>
		HeaderInit(plantHeader, (uint8_t*) Plant1, 2, 22);
 8001ff2:	2316      	movs	r3, #22
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4990      	ldr	r1, [pc, #576]	; (8002238 <main+0x2f0>)
 8001ff8:	68b8      	ldr	r0, [r7, #8]
 8001ffa:	f7ff ff07 	bl	8001e0c <HeaderInit>

		dinoHeader = Append(dinoHeader, 4, DinoGroundPos);
 8001ffe:	4b8f      	ldr	r3, [pc, #572]	; (800223c <main+0x2f4>)
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f84f 	bl	80010a4 <__aeabi_f2iz>
 8002006:	4603      	mov	r3, r0
 8002008:	b21b      	sxth	r3, r3
 800200a:	461a      	mov	r2, r3
 800200c:	2104      	movs	r1, #4
 800200e:	6978      	ldr	r0, [r7, #20]
 8002010:	f7ff fe6e 	bl	8001cf0 <Append>
 8002014:	6178      	str	r0, [r7, #20]
		fireHeader = Append(fireHeader, 24, 52);
 8002016:	2234      	movs	r2, #52	; 0x34
 8002018:	2118      	movs	r1, #24
 800201a:	6938      	ldr	r0, [r7, #16]
 800201c:	f7ff fe68 	bl	8001cf0 <Append>
 8002020:	6138      	str	r0, [r7, #16]

		LCD_Fill(flipStatus);
 8002022:	4b87      	ldr	r3, [pc, #540]	; (8002240 <main+0x2f8>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fc9c 	bl	8001964 <LCD_Fill>
		LCD_DrawLine(77, 0, 28, DRAWMODE_ADD, flipStatus);
 800202c:	4b84      	ldr	r3, [pc, #528]	; (8002240 <main+0x2f8>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	9300      	str	r3, [sp, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	221c      	movs	r2, #28
 8002036:	2100      	movs	r1, #0
 8002038:	204d      	movs	r0, #77	; 0x4d
 800203a:	f7ff fb6f 	bl	800171c <LCD_DrawLine>
		dinoHeader->bmp = (uint8_t*) DinoNormalS;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	4a80      	ldr	r2, [pc, #512]	; (8002244 <main+0x2fc>)
 8002042:	601a      	str	r2, [r3, #0]
		LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8002044:	4b7e      	ldr	r3, [pc, #504]	; (8002240 <main+0x2f8>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2200      	movs	r2, #0
 800204a:	2100      	movs	r1, #0
 800204c:	6978      	ldr	r0, [r7, #20]
 800204e:	f7ff f983 	bl	8001358 <LCD_LoadObjs>
		LCD_Print("Danny&Cecilia\n\n\t\t\t\t\t\t\t\t@2022", 2, 4, DRAWMODE_ADD,
 8002052:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <main+0x2f8>)
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	9301      	str	r3, [sp, #4]
 8002058:	2300      	movs	r3, #0
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	2300      	movs	r3, #0
 800205e:	2204      	movs	r2, #4
 8002060:	2102      	movs	r1, #2
 8002062:	4879      	ldr	r0, [pc, #484]	; (8002248 <main+0x300>)
 8002064:	f7ff fc96 	bl	8001994 <LCD_Print>
		REPEATMODE_NONE, flipStatus);

		while (!GetButtonDown(JUMP_BUTTON))
 8002068:	e002      	b.n	8002070 <main+0x128>
			LCD_Update(&MemDisp);
 800206a:	4868      	ldr	r0, [pc, #416]	; (800220c <main+0x2c4>)
 800206c:	f7ff f8f0 	bl	8001250 <LCD_Update>
		while (!GetButtonDown(JUMP_BUTTON))
 8002070:	2001      	movs	r0, #1
 8002072:	f7ff fdb1 	bl	8001bd8 <GetButtonDown>
 8002076:	4603      	mov	r3, r0
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f3      	bne.n	800206a <main+0x122>

		for (uint8_t l = 28; l <= 96; l++) {
 8002082:	231c      	movs	r3, #28
 8002084:	71fb      	strb	r3, [r7, #7]
 8002086:	e00e      	b.n	80020a6 <main+0x15e>
			LCD_DrawLine(77, 0, l, DRAWMODE_ADD, flipStatus);
 8002088:	4b6d      	ldr	r3, [pc, #436]	; (8002240 <main+0x2f8>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	79fa      	ldrb	r2, [r7, #7]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2300      	movs	r3, #0
 8002092:	2100      	movs	r1, #0
 8002094:	204d      	movs	r0, #77	; 0x4d
 8002096:	f7ff fb41 	bl	800171c <LCD_DrawLine>
			LCD_Update(&MemDisp);
 800209a:	485c      	ldr	r0, [pc, #368]	; (800220c <main+0x2c4>)
 800209c:	f7ff f8d8 	bl	8001250 <LCD_Update>
		for (uint8_t l = 28; l <= 96; l++) {
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	3301      	adds	r3, #1
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b60      	cmp	r3, #96	; 0x60
 80020aa:	d9ed      	bls.n	8002088 <main+0x140>
		}

		/// THE TICK LOOP
		while (1) {
			// Day and night invertion
			flipStatus = ((tick / 800) % 3 == 2) ? 1 : 0;
 80020ac:	4b5d      	ldr	r3, [pc, #372]	; (8002224 <main+0x2dc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a66      	ldr	r2, [pc, #408]	; (800224c <main+0x304>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0a19      	lsrs	r1, r3, #8
 80020b8:	4b65      	ldr	r3, [pc, #404]	; (8002250 <main+0x308>)
 80020ba:	fba3 2301 	umull	r2, r3, r3, r1
 80020be:	085a      	lsrs	r2, r3, #1
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	1aca      	subs	r2, r1, r3
 80020c8:	2a02      	cmp	r2, #2
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2da      	uxtb	r2, r3
 80020d2:	4b5b      	ldr	r3, [pc, #364]	; (8002240 <main+0x2f8>)
 80020d4:	701a      	strb	r2, [r3, #0]

			if (GetButtonDown(JUMP_BUTTON) && !isJumping)
 80020d6:	2001      	movs	r0, #1
 80020d8:	f7ff fd7e 	bl	8001bd8 <GetButtonDown>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <main+0x1ae>
 80020e2:	4b4c      	ldr	r3, [pc, #304]	; (8002214 <main+0x2cc>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <main+0x1ae>
				isJumping = 1;
 80020f0:	4b48      	ldr	r3, [pc, #288]	; (8002214 <main+0x2cc>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]

			dinoVerticalMovement = DinoGroundPos;
 80020f6:	4b51      	ldr	r3, [pc, #324]	; (800223c <main+0x2f4>)
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe ffd3 	bl	80010a4 <__aeabi_f2iz>
 80020fe:	4603      	mov	r3, r0
 8002100:	b21a      	sxth	r2, r3
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <main+0x30c>)
 8002104:	801a      	strh	r2, [r3, #0]
			if (isJumping) {
 8002106:	4b43      	ldr	r3, [pc, #268]	; (8002214 <main+0x2cc>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80ae 	beq.w	800226c <main+0x324>
				if (jumpTick < JumpTickMax / overallSpeed - 1) {
 8002110:	4b41      	ldr	r3, [pc, #260]	; (8002218 <main+0x2d0>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fdab 	bl	8000c70 <__aeabi_i2f>
 800211a:	4604      	mov	r4, r0
 800211c:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <main+0x310>)
 800211e:	4b44      	ldr	r3, [pc, #272]	; (8002230 <main+0x2e8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f7fe feab 	bl	8000e80 <__aeabi_fdiv>
 800212a:	4603      	mov	r3, r0
 800212c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fce7 	bl	8000b04 <__aeabi_fsub>
 8002136:	4603      	mov	r3, r0
 8002138:	4619      	mov	r1, r3
 800213a:	4620      	mov	r0, r4
 800213c:	f7fe ff8a 	bl	8001054 <__aeabi_fcmplt>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 808c 	beq.w	8002260 <main+0x318>
					jumpTick++;
 8002148:	4b33      	ldr	r3, [pc, #204]	; (8002218 <main+0x2d0>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b31      	ldr	r3, [pc, #196]	; (8002218 <main+0x2d0>)
 8002152:	801a      	strh	r2, [r3, #0]
					dinoVerticalMovement = jumpTick
							* (jumpTick - JumpTickMax / overallSpeed)
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <main+0x2d0>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fd89 	bl	8000c70 <__aeabi_i2f>
 800215e:	4604      	mov	r4, r0
 8002160:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <main+0x2d0>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fd83 	bl	8000c70 <__aeabi_i2f>
 800216a:	4605      	mov	r5, r0
 800216c:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <main+0x310>)
 800216e:	4b30      	ldr	r3, [pc, #192]	; (8002230 <main+0x2e8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4619      	mov	r1, r3
 8002174:	4610      	mov	r0, r2
 8002176:	f7fe fe83 	bl	8000e80 <__aeabi_fdiv>
 800217a:	4603      	mov	r3, r0
 800217c:	4619      	mov	r1, r3
 800217e:	4628      	mov	r0, r5
 8002180:	f7fe fcc0 	bl	8000b04 <__aeabi_fsub>
 8002184:	4603      	mov	r3, r0
 8002186:	4619      	mov	r1, r3
 8002188:	4620      	mov	r0, r4
 800218a:	f7fe fdc5 	bl	8000d18 <__aeabi_fmul>
 800218e:	4603      	mov	r3, r0
 8002190:	461c      	mov	r4, r3
							* (4
									/ ((JumpTickMax / overallSpeed)
 8002192:	4a31      	ldr	r2, [pc, #196]	; (8002258 <main+0x310>)
 8002194:	4b26      	ldr	r3, [pc, #152]	; (8002230 <main+0x2e8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f7fe fe70 	bl	8000e80 <__aeabi_fdiv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	461d      	mov	r5, r3
											* (JumpTickMax / overallSpeed)))
 80021a4:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <main+0x310>)
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <main+0x2e8>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f7fe fe67 	bl	8000e80 <__aeabi_fdiv>
 80021b2:	4603      	mov	r3, r0
 80021b4:	4619      	mov	r1, r3
 80021b6:	4628      	mov	r0, r5
 80021b8:	f7fe fdae 	bl	8000d18 <__aeabi_fmul>
 80021bc:	4603      	mov	r3, r0
									/ ((JumpTickMax / overallSpeed)
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80021c4:	f7fe fe5c 	bl	8000e80 <__aeabi_fdiv>
 80021c8:	4603      	mov	r3, r0
							* (4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7fe fda3 	bl	8000d18 <__aeabi_fmul>
 80021d2:	4603      	mov	r3, r0
 80021d4:	461a      	mov	r2, r3
							* DinoJumpHeight + DinoGroundPos;
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <main+0x314>)
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f7fe fd9c 	bl	8000d18 <__aeabi_fmul>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <main+0x2f4>)
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7fe fc8d 	bl	8000b08 <__addsf3>
 80021ee:	4603      	mov	r3, r0
					dinoVerticalMovement = jumpTick
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe ff57 	bl	80010a4 <__aeabi_f2iz>
 80021f6:	4603      	mov	r3, r0
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <main+0x30c>)
 80021fc:	801a      	strh	r2, [r3, #0]
 80021fe:	e035      	b.n	800226c <main+0x324>
 8002200:	20000118 	.word	0x20000118
 8002204:	40010800 	.word	0x40010800
 8002208:	200000c0 	.word	0x200000c0
 800220c:	20000160 	.word	0x20000160
 8002210:	08005e20 	.word	0x08005e20
 8002214:	2000016c 	.word	0x2000016c
 8002218:	2000016e 	.word	0x2000016e
 800221c:	20000170 	.word	0x20000170
 8002220:	20000172 	.word	0x20000172
 8002224:	20000174 	.word	0x20000174
 8002228:	20000178 	.word	0x20000178
 800222c:	2000017c 	.word	0x2000017c
 8002230:	20000184 	.word	0x20000184
 8002234:	08005ad0 	.word	0x08005ad0
 8002238:	08005b24 	.word	0x08005b24
 800223c:	42680000 	.word	0x42680000
 8002240:	2000016d 	.word	0x2000016d
 8002244:	08005c18 	.word	0x08005c18
 8002248:	08005a98 	.word	0x08005a98
 800224c:	51eb851f 	.word	0x51eb851f
 8002250:	aaaaaaab 	.word	0xaaaaaaab
 8002254:	20000180 	.word	0x20000180
 8002258:	428c0000 	.word	0x428c0000
 800225c:	42200000 	.word	0x42200000
				} else {
					isJumping = 0;
 8002260:	4b5b      	ldr	r3, [pc, #364]	; (80023d0 <main+0x488>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
					jumpTick = 0;
 8002266:	4b5b      	ldr	r3, [pc, #364]	; (80023d4 <main+0x48c>)
 8002268:	2200      	movs	r2, #0
 800226a:	801a      	strh	r2, [r3, #0]
				}
			}

			// Plant generation
			if (tick - plantSubTick == nextPlantTickDel) {
 800226c:	4b5a      	ldr	r3, [pc, #360]	; (80023d8 <main+0x490>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b5a      	ldr	r3, [pc, #360]	; (80023dc <main+0x494>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	4a5a      	ldr	r2, [pc, #360]	; (80023e0 <main+0x498>)
 8002278:	8812      	ldrh	r2, [r2, #0]
 800227a:	4293      	cmp	r3, r2
 800227c:	d114      	bne.n	80022a8 <main+0x360>
				plantHeader = Append(plantHeader, 96, 59);
 800227e:	223b      	movs	r2, #59	; 0x3b
 8002280:	2160      	movs	r1, #96	; 0x60
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f7ff fd34 	bl	8001cf0 <Append>
 8002288:	60b8      	str	r0, [r7, #8]
				nextPlantTickDel = Random(tick, 80, 160);
 800228a:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <main+0x490>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	22a0      	movs	r2, #160	; 0xa0
 8002290:	2150      	movs	r1, #80	; 0x50
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe33 	bl	8001efe <Random>
 8002298:	4603      	mov	r3, r0
 800229a:	b29a      	uxth	r2, r3
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <main+0x498>)
 800229e:	801a      	strh	r2, [r3, #0]
				plantSubTick = tick;
 80022a0:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <main+0x490>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a4d      	ldr	r2, [pc, #308]	; (80023dc <main+0x494>)
 80022a6:	6013      	str	r3, [r2, #0]
			}
			// Clound generation
			if (tick - cloudSubTick == nextCloudTickDel) {
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <main+0x490>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <main+0x49c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	4a4d      	ldr	r2, [pc, #308]	; (80023e8 <main+0x4a0>)
 80022b4:	8812      	ldrh	r2, [r2, #0]
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d11e      	bne.n	80022f8 <main+0x3b0>
				cloudHeader = Append(cloudHeader, 96, Random(tick, 12, 20));
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <main+0x490>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2214      	movs	r2, #20
 80022c0:	210c      	movs	r1, #12
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fe1b 	bl	8001efe <Random>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	2160      	movs	r1, #96	; 0x60
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff fd0e 	bl	8001cf0 <Append>
 80022d4:	60f8      	str	r0, [r7, #12]
				nextCloudTickDel = Random(tick, 1200, 2000);
 80022d6:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <main+0x490>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80022de:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff fe0b 	bl	8001efe <Random>
 80022e8:	4603      	mov	r3, r0
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <main+0x4a0>)
 80022ee:	801a      	strh	r2, [r3, #0]
				cloudSubTick = tick;
 80022f0:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <main+0x490>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a3b      	ldr	r2, [pc, #236]	; (80023e4 <main+0x49c>)
 80022f6:	6013      	str	r3, [r2, #0]
			}

			// Reset canvas
			LCD_Fill(flipStatus);
 80022f8:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <main+0x4a4>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff fb31 	bl	8001964 <LCD_Fill>
			// Draw ground
			LCD_DrawLine(77, 0, 96, DRAWMODE_ADD, flipStatus);
 8002302:	4b3a      	ldr	r3, [pc, #232]	; (80023ec <main+0x4a4>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2300      	movs	r3, #0
 800230a:	2260      	movs	r2, #96	; 0x60
 800230c:	2100      	movs	r1, #0
 800230e:	204d      	movs	r0, #77	; 0x4d
 8002310:	f7ff fa04 	bl	800171c <LCD_DrawLine>

			// Obj shift
			plantHeader = ShiftX(plantHeader, -1 * overallSpeed);
 8002314:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <main+0x4a8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800231c:	4619      	mov	r1, r3
 800231e:	68b8      	ldr	r0, [r7, #8]
 8002320:	f7ff fda6 	bl	8001e70 <ShiftX>
 8002324:	60b8      	str	r0, [r7, #8]
			cloudHeader = ShiftX(cloudHeader, -0.1 * overallSpeed);
 8002326:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <main+0x4a8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f87c 	bl	8000428 <__aeabi_f2d>
 8002330:	a325      	add	r3, pc, #148	; (adr r3, 80023c8 <main+0x480>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f7fe f8cf 	bl	80004d8 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	f7fe fb8b 	bl	8000a5c <__aeabi_d2f>
 8002346:	4603      	mov	r3, r0
 8002348:	4619      	mov	r1, r3
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7ff fd90 	bl	8001e70 <ShiftX>
 8002350:	60f8      	str	r0, [r7, #12]

			dinoHeader->y = dinoVerticalMovement;
 8002352:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <main+0x4ac>)
 8002354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fc89 	bl	8000c70 <__aeabi_i2f>
 800235e:	4602      	mov	r2, r0
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	609a      	str	r2, [r3, #8]
			// Culling masks
			ptr = plantHeader;
 8002364:	4a24      	ldr	r2, [pc, #144]	; (80023f8 <main+0x4b0>)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6013      	str	r3, [r2, #0]
			for (;;) {
				if (ptr->full) {
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <main+0x4b0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	7b9b      	ldrb	r3, [r3, #14]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d014      	beq.n	800239e <main+0x456>
					LCD_DrawLine(77, ptr->x + 2, 6, DRAWMODE_CULL, flipStatus);
 8002374:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <main+0x4b0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800237e:	4618      	mov	r0, r3
 8002380:	f7fe fbc2 	bl	8000b08 <__addsf3>
 8002384:	4603      	mov	r3, r0
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe fe8c 	bl	80010a4 <__aeabi_f2iz>
 800238c:	4601      	mov	r1, r0
 800238e:	4b17      	ldr	r3, [pc, #92]	; (80023ec <main+0x4a4>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2301      	movs	r3, #1
 8002396:	2206      	movs	r2, #6
 8002398:	204d      	movs	r0, #77	; 0x4d
 800239a:	f7ff f9bf 	bl	800171c <LCD_DrawLine>
				}
				// If looped through all / next buffer is empty
				if (!ptr->next->full || ptr->next == plantHeader) {
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <main+0x4b0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	7b9b      	ldrb	r3, [r3, #14]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d125      	bne.n	80023fc <main+0x4b4>
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <main+0x4b0>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d01f      	beq.n	80023fc <main+0x4b4>
					break;
				}
				ptr = ptr->next;
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <main+0x4b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <main+0x4b0>)
 80023c4:	6013      	str	r3, [r2, #0]
				if (ptr->full) {
 80023c6:	e7d0      	b.n	800236a <main+0x422>
 80023c8:	9999999a 	.word	0x9999999a
 80023cc:	bfb99999 	.word	0xbfb99999
 80023d0:	2000016c 	.word	0x2000016c
 80023d4:	2000016e 	.word	0x2000016e
 80023d8:	20000174 	.word	0x20000174
 80023dc:	20000178 	.word	0x20000178
 80023e0:	20000170 	.word	0x20000170
 80023e4:	2000017c 	.word	0x2000017c
 80023e8:	20000172 	.word	0x20000172
 80023ec:	2000016d 	.word	0x2000016d
 80023f0:	20000184 	.word	0x20000184
 80023f4:	20000180 	.word	0x20000180
 80023f8:	20000188 	.word	0x20000188
			}
			LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10,
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	499a      	ldr	r1, [pc, #616]	; (800266c <main+0x724>)
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fb80 	bl	8000b08 <__addsf3>
 8002408:	4603      	mov	r3, r0
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fe70 	bl	80010f0 <__aeabi_f2uiz>
 8002410:	4603      	mov	r3, r0
 8002412:	b2dc      	uxtb	r4, r3
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4995      	ldr	r1, [pc, #596]	; (8002670 <main+0x728>)
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe fb74 	bl	8000b08 <__addsf3>
 8002420:	4603      	mov	r3, r0
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fe3e 	bl	80010a4 <__aeabi_f2iz>
 8002428:	4601      	mov	r1, r0
 800242a:	4b92      	ldr	r3, [pc, #584]	; (8002674 <main+0x72c>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2301      	movs	r3, #1
 8002432:	220a      	movs	r2, #10
 8002434:	4620      	mov	r0, r4
 8002436:	f7ff f971 	bl	800171c <LCD_DrawLine>
			DRAWMODE_CULL, flipStatus);
			// Render fire
			if (!isJumping) {
 800243a:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <main+0x730>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d026      	beq.n	8002496 <main+0x54e>
				if (GetButton(FIRE_BUTTON)) {
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff fbb5 	bl	8001bb8 <GetButton>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <main+0x54e>
					fireHeader->bmp = (uint8_t*) Fire[(tick
							/ (int) (30 / overallSpeed)) % 2];
 8002454:	4b89      	ldr	r3, [pc, #548]	; (800267c <main+0x734>)
 8002456:	681c      	ldr	r4, [r3, #0]
 8002458:	4b89      	ldr	r3, [pc, #548]	; (8002680 <main+0x738>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4619      	mov	r1, r3
 800245e:	4889      	ldr	r0, [pc, #548]	; (8002684 <main+0x73c>)
 8002460:	f7fe fd0e 	bl	8000e80 <__aeabi_fdiv>
 8002464:	4603      	mov	r3, r0
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fe1c 	bl	80010a4 <__aeabi_f2iz>
 800246c:	4603      	mov	r3, r0
 800246e:	fbb4 f3f3 	udiv	r3, r4, r3
 8002472:	f003 0201 	and.w	r2, r3, #1
					fireHeader->bmp = (uint8_t*) Fire[(tick
 8002476:	4613      	mov	r3, r2
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	1a9b      	subs	r3, r3, r2
 800247c:	011a      	lsls	r2, r3, #4
 800247e:	1ad2      	subs	r2, r2, r3
 8002480:	4b81      	ldr	r3, [pc, #516]	; (8002688 <main+0x740>)
 8002482:	441a      	add	r2, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	601a      	str	r2, [r3, #0]
					LCD_LoadObjs(fireHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 8002488:	4b7a      	ldr	r3, [pc, #488]	; (8002674 <main+0x72c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f7fe ff61 	bl	8001358 <LCD_LoadObjs>
							flipStatus);
				}
			}

			LCD_LoadObjs(plantHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 8002496:	4b77      	ldr	r3, [pc, #476]	; (8002674 <main+0x72c>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	68b8      	ldr	r0, [r7, #8]
 80024a0:	f7fe ff5a 	bl	8001358 <LCD_LoadObjs>
					flipStatus);
			LCD_LoadObjs(cloudHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80024a4:	4b73      	ldr	r3, [pc, #460]	; (8002674 <main+0x72c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2100      	movs	r1, #0
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f7fe ff53 	bl	8001358 <LCD_LoadObjs>
					flipStatus);

			// Check death
			ptr = plantHeader;
 80024b2:	4a76      	ldr	r2, [pc, #472]	; (800268c <main+0x744>)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6013      	str	r3, [r2, #0]
			for (;;) {
				if (ptr->full) {
 80024b8:	4b74      	ldr	r3, [pc, #464]	; (800268c <main+0x744>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	7b9b      	ldrb	r3, [r3, #14]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d05b      	beq.n	800257a <main+0x632>
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	496a      	ldr	r1, [pc, #424]	; (8002670 <main+0x728>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fb1d 	bl	8000b08 <__addsf3>
 80024ce:	4603      	mov	r3, r0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fde7 	bl	80010a4 <__aeabi_f2iz>
 80024d6:	4603      	mov	r3, r0
 80024d8:	b21d      	sxth	r5, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fde0 	bl	80010a4 <__aeabi_f2iz>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b21e      	sxth	r6, r3
							dinoHeader->x + 23 - 7, dinoHeader->y + 21 - 4,
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4968      	ldr	r1, [pc, #416]	; (8002690 <main+0x748>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe fb0a 	bl	8000b08 <__addsf3>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4967      	ldr	r1, [pc, #412]	; (8002694 <main+0x74c>)
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fb03 	bl	8000b04 <__aeabi_fsub>
 80024fe:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe fdcf 	bl	80010a4 <__aeabi_f2iz>
 8002506:	4603      	mov	r3, r0
 8002508:	fa0f f883 	sxth.w	r8, r3
							dinoHeader->x + 23 - 7, dinoHeader->y + 21 - 4,
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4961      	ldr	r1, [pc, #388]	; (8002698 <main+0x750>)
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe faf8 	bl	8000b08 <__addsf3>
 8002518:	4603      	mov	r3, r0
 800251a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe faf0 	bl	8000b04 <__aeabi_fsub>
 8002524:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fdbc 	bl	80010a4 <__aeabi_f2iz>
 800252c:	4603      	mov	r3, r0
 800252e:	fa0f f983 	sxth.w	r9, r3
							ptr->x, 59, ptr->x + 9, 59 + 21)) {
 8002532:	4b56      	ldr	r3, [pc, #344]	; (800268c <main+0x744>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002538:	4618      	mov	r0, r3
 800253a:	f7fe fdb3 	bl	80010a4 <__aeabi_f2iz>
 800253e:	4603      	mov	r3, r0
 8002540:	b21c      	sxth	r4, r3
							ptr->x, 59, ptr->x + 9, 59 + 21)) {
 8002542:	4b52      	ldr	r3, [pc, #328]	; (800268c <main+0x744>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4954      	ldr	r1, [pc, #336]	; (800269c <main+0x754>)
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fadc 	bl	8000b08 <__addsf3>
 8002550:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fda6 	bl	80010a4 <__aeabi_f2iz>
 8002558:	4603      	mov	r3, r0
 800255a:	b21b      	sxth	r3, r3
 800255c:	2250      	movs	r2, #80	; 0x50
 800255e:	9203      	str	r2, [sp, #12]
 8002560:	9302      	str	r3, [sp, #8]
 8002562:	233b      	movs	r3, #59	; 0x3b
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	9400      	str	r4, [sp, #0]
 8002568:	464b      	mov	r3, r9
 800256a:	4642      	mov	r2, r8
 800256c:	4631      	mov	r1, r6
 800256e:	4628      	mov	r0, r5
 8002570:	f7ff fb6e 	bl	8001c50 <IsOverlapping>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d151      	bne.n	800261e <main+0x6d6>
						goto Dead;
					}
				}
				// If looped through all / next buffer is empty
				if (!ptr->next->full || ptr->next == plantHeader) {
 800257a:	4b44      	ldr	r3, [pc, #272]	; (800268c <main+0x744>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	7b9b      	ldrb	r3, [r3, #14]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <main+0x65c>
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <main+0x744>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	d005      	beq.n	80025a4 <main+0x65c>
					break;
				}
				ptr = ptr->next;
 8002598:	4b3c      	ldr	r3, [pc, #240]	; (800268c <main+0x744>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	4a3b      	ldr	r2, [pc, #236]	; (800268c <main+0x744>)
 80025a0:	6013      	str	r3, [r2, #0]
				if (ptr->full) {
 80025a2:	e789      	b.n	80024b8 <main+0x570>
			}

			// Render dino!
			// Dino is jumping
			if (isJumping) {
 80025a4:	4b34      	ldr	r3, [pc, #208]	; (8002678 <main+0x730>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <main+0x66c>
				dinoHeader->bmp = (uint8_t*) DinoNormalS;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	4a3c      	ldr	r2, [pc, #240]	; (80026a0 <main+0x758>)
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	e019      	b.n	80025e8 <main+0x6a0>
						/ (int) (16 / overallSpeed)) % 2];
			}
			// Dino is running normally
			else {
				dinoHeader->bmp = (uint8_t*) DinoNormalRunning[(tick
						/ (int) (16 / overallSpeed)) % 2];
 80025b4:	4b31      	ldr	r3, [pc, #196]	; (800267c <main+0x734>)
 80025b6:	681c      	ldr	r4, [r3, #0]
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <main+0x738>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	f04f 4083 	mov.w	r0, #1098907648	; 0x41800000
 80025c2:	f7fe fc5d 	bl	8000e80 <__aeabi_fdiv>
 80025c6:	4603      	mov	r3, r0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fd6b 	bl	80010a4 <__aeabi_f2iz>
 80025ce:	4603      	mov	r3, r0
 80025d0:	fbb4 f3f3 	udiv	r3, r4, r3
 80025d4:	f003 0201 	and.w	r2, r3, #1
				dinoHeader->bmp = (uint8_t*) DinoNormalRunning[(tick
 80025d8:	4613      	mov	r3, r2
 80025da:	015b      	lsls	r3, r3, #5
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <main+0x75c>)
 80025e2:	441a      	add	r2, r3
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	601a      	str	r2, [r3, #0]
			}
			LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 80025e8:	4b22      	ldr	r3, [pc, #136]	; (8002674 <main+0x72c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2200      	movs	r2, #0
 80025ee:	2100      	movs	r1, #0
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f7fe feb1 	bl	8001358 <LCD_LoadObjs>

			// Render game process
			LCD_Print("Gogogo~", 4, 4, DRAWMODE_ADD, REPEATMODE_NONE,
 80025f6:	4b1f      	ldr	r3, [pc, #124]	; (8002674 <main+0x72c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	9301      	str	r3, [sp, #4]
 80025fc:	2300      	movs	r3, #0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2300      	movs	r3, #0
 8002602:	2204      	movs	r2, #4
 8002604:	2104      	movs	r1, #4
 8002606:	4828      	ldr	r0, [pc, #160]	; (80026a8 <main+0x760>)
 8002608:	f7ff f9c4 	bl	8001994 <LCD_Print>
					flipStatus);

			tick++;
 800260c:	4b1b      	ldr	r3, [pc, #108]	; (800267c <main+0x734>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3301      	adds	r3, #1
 8002612:	4a1a      	ldr	r2, [pc, #104]	; (800267c <main+0x734>)
 8002614:	6013      	str	r3, [r2, #0]
			LCD_Update(&MemDisp);
 8002616:	4825      	ldr	r0, [pc, #148]	; (80026ac <main+0x764>)
 8002618:	f7fe fe1a 	bl	8001250 <LCD_Update>
			flipStatus = ((tick / 800) % 3 == 2) ? 1 : 0;
 800261c:	e546      	b.n	80020ac <main+0x164>
						goto Dead;
 800261e:	bf00      	nop
		}

		// Dead handler (outer loop)
		if (0) {
			Dead: DisableButtonDownDetection(JUMP_BUTTON);
 8002620:	2001      	movs	r0, #1
 8002622:	f7ff fb05 	bl	8001c30 <DisableButtonDownDetection>
			dinoHeader->bmp = (uint8_t*) DinoDead;
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	4a21      	ldr	r2, [pc, #132]	; (80026b0 <main+0x768>)
 800262a:	601a      	str	r2, [r3, #0]
			LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <main+0x72c>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2200      	movs	r2, #0
 8002632:	2100      	movs	r1, #0
 8002634:	6978      	ldr	r0, [r7, #20]
 8002636:	f7fe fe8f 	bl	8001358 <LCD_LoadObjs>
			LCD_Update(&MemDisp);
 800263a:	481c      	ldr	r0, [pc, #112]	; (80026ac <main+0x764>)
 800263c:	f7fe fe08 	bl	8001250 <LCD_Update>

			HAL_Delay(600);
 8002640:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002644:	f000 fbc2 	bl	8002dcc <HAL_Delay>

			for (uint8_t i = 0; i < 2; i++) {
 8002648:	2300      	movs	r3, #0
 800264a:	71bb      	strb	r3, [r7, #6]
 800264c:	e00a      	b.n	8002664 <main+0x71c>
				LCD_Invert();
 800264e:	f7ff f969 	bl	8001924 <LCD_Invert>
				LCD_Update(&MemDisp);
 8002652:	4816      	ldr	r0, [pc, #88]	; (80026ac <main+0x764>)
 8002654:	f7fe fdfc 	bl	8001250 <LCD_Update>
				HAL_Delay(80);
 8002658:	2050      	movs	r0, #80	; 0x50
 800265a:	f000 fbb7 	bl	8002dcc <HAL_Delay>
			for (uint8_t i = 0; i < 2; i++) {
 800265e:	79bb      	ldrb	r3, [r7, #6]
 8002660:	3301      	adds	r3, #1
 8002662:	71bb      	strb	r3, [r7, #6]
 8002664:	79bb      	ldrb	r3, [r7, #6]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d9f1      	bls.n	800264e <main+0x706>
		isJumping = 0;
 800266a:	e497      	b.n	8001f9c <main+0x54>
 800266c:	41980000 	.word	0x41980000
 8002670:	40400000 	.word	0x40400000
 8002674:	2000016d 	.word	0x2000016d
 8002678:	2000016c 	.word	0x2000016c
 800267c:	20000174 	.word	0x20000174
 8002680:	20000184 	.word	0x20000184
 8002684:	41f00000 	.word	0x41f00000
 8002688:	08005c5c 	.word	0x08005c5c
 800268c:	20000188 	.word	0x20000188
 8002690:	41b80000 	.word	0x41b80000
 8002694:	40e00000 	.word	0x40e00000
 8002698:	41a80000 	.word	0x41a80000
 800269c:	41100000 	.word	0x41100000
 80026a0:	08005c18 	.word	0x08005c18
 80026a4:	08005b94 	.word	0x08005b94
 80026a8:	08005ab8 	.word	0x08005ab8
 80026ac:	20000160 	.word	0x20000160
 80026b0:	08005b50 	.word	0x08005b50

080026b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b090      	sub	sp, #64	; 0x40
 80026b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80026ba:	f107 0318 	add.w	r3, r7, #24
 80026be:	2228      	movs	r2, #40	; 0x28
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 f8f0 	bl	80048a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026d6:	2302      	movs	r3, #2
 80026d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026da:	2301      	movs	r3, #1
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026de:	2310      	movs	r3, #16
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e2:	2302      	movs	r3, #2
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80026e6:	2300      	movs	r3, #0
 80026e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80026ea:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80026f0:	f107 0318 	add.w	r3, r7, #24
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fe4f 	bl	8003398 <HAL_RCC_OscConfig>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <SystemClock_Config+0x50>
		Error_Handler();
 8002700:	f000 f900 	bl	8002904 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002704:	230f      	movs	r3, #15
 8002706:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002708:	2302      	movs	r3, #2
 800270a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002714:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2101      	movs	r1, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f001 f8bc 	bl	800389c <HAL_RCC_ClockConfig>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SystemClock_Config+0x7a>
		Error_Handler();
 800272a:	f000 f8eb 	bl	8002904 <Error_Handler>
	}
}
 800272e:	bf00      	nop
 8002730:	3740      	adds	r7, #64	; 0x40
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <MX_SPI1_Init+0x64>)
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <MX_SPI1_Init+0x68>)
 8002740:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002742:	4b16      	ldr	r3, [pc, #88]	; (800279c <MX_SPI1_Init+0x64>)
 8002744:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002748:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800274a:	4b14      	ldr	r3, [pc, #80]	; (800279c <MX_SPI1_Init+0x64>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <MX_SPI1_Init+0x64>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <MX_SPI1_Init+0x64>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <MX_SPI1_Init+0x64>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <MX_SPI1_Init+0x64>)
 8002764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002768:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800276a:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_SPI1_Init+0x64>)
 800276c:	2210      	movs	r2, #16
 800276e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <MX_SPI1_Init+0x64>)
 8002772:	2200      	movs	r2, #0
 8002774:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_SPI1_Init+0x64>)
 8002778:	2200      	movs	r2, #0
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277c:	4b07      	ldr	r3, [pc, #28]	; (800279c <MX_SPI1_Init+0x64>)
 800277e:	2200      	movs	r2, #0
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002782:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_SPI1_Init+0x64>)
 8002784:	220a      	movs	r2, #10
 8002786:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002788:	4804      	ldr	r0, [pc, #16]	; (800279c <MX_SPI1_Init+0x64>)
 800278a:	f001 f9ed 	bl	8003b68 <HAL_SPI_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002794:	f000 f8b6 	bl	8002904 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}
 800279c:	200000c0 	.word	0x200000c0
 80027a0:	40013000 	.word	0x40013000

080027a4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80027aa:	f107 0308 	add.w	r3, r7, #8
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
 80027b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80027b8:	463b      	mov	r3, r7
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80027c0:	4b1e      	ldr	r3, [pc, #120]	; (800283c <MX_TIM1_Init+0x98>)
 80027c2:	4a1f      	ldr	r2, [pc, #124]	; (8002840 <MX_TIM1_Init+0x9c>)
 80027c4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1000 - 1;
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_TIM1_Init+0x98>)
 80027c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027cc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ce:	4b1b      	ldr	r3, [pc, #108]	; (800283c <MX_TIM1_Init+0x98>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 80027d4:	4b19      	ldr	r3, [pc, #100]	; (800283c <MX_TIM1_Init+0x98>)
 80027d6:	2263      	movs	r2, #99	; 0x63
 80027d8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <MX_TIM1_Init+0x98>)
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <MX_TIM1_Init+0x98>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027e6:	4b15      	ldr	r3, [pc, #84]	; (800283c <MX_TIM1_Init+0x98>)
 80027e8:	2280      	movs	r2, #128	; 0x80
 80027ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80027ec:	4813      	ldr	r0, [pc, #76]	; (800283c <MX_TIM1_Init+0x98>)
 80027ee:	f001 fc21 	bl	8004034 <HAL_TIM_Base_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM1_Init+0x58>
		Error_Handler();
 80027f8:	f000 f884 	bl	8002904 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002800:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002802:	f107 0308 	add.w	r3, r7, #8
 8002806:	4619      	mov	r1, r3
 8002808:	480c      	ldr	r0, [pc, #48]	; (800283c <MX_TIM1_Init+0x98>)
 800280a:	f001 fdbd 	bl	8004388 <HAL_TIM_ConfigClockSource>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_TIM1_Init+0x74>
		Error_Handler();
 8002814:	f000 f876 	bl	8002904 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002820:	463b      	mov	r3, r7
 8002822:	4619      	mov	r1, r3
 8002824:	4805      	ldr	r0, [pc, #20]	; (800283c <MX_TIM1_Init+0x98>)
 8002826:	f001 ff8f 	bl	8004748 <HAL_TIMEx_MasterConfigSynchronization>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8002830:	f000 f868 	bl	8002904 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002834:	bf00      	nop
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000118 	.word	0x20000118
 8002840:	40012c00 	.word	0x40012c00

08002844 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800284a:	f107 0308 	add.w	r3, r7, #8
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002858:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <MX_GPIO_Init+0x94>)
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4a1e      	ldr	r2, [pc, #120]	; (80028d8 <MX_GPIO_Init+0x94>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6193      	str	r3, [r2, #24]
 8002864:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <MX_GPIO_Init+0x94>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <MX_GPIO_Init+0x94>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <MX_GPIO_Init+0x94>)
 8002876:	f043 0308 	orr.w	r3, r3, #8
 800287a:	6193      	str	r3, [r2, #24]
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <MX_GPIO_Init+0x94>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	603b      	str	r3, [r7, #0]
 8002886:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8002888:	2201      	movs	r2, #1
 800288a:	2104      	movs	r1, #4
 800288c:	4813      	ldr	r0, [pc, #76]	; (80028dc <MX_GPIO_Init+0x98>)
 800288e:	f000 fd6a 	bl	8003366 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	2110      	movs	r1, #16
 8002896:	4811      	ldr	r0, [pc, #68]	; (80028dc <MX_GPIO_Init+0x98>)
 8002898:	f000 fd65 	bl	8003366 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_B_Pin CS_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | CS_Pin;
 800289c:	2314      	movs	r3, #20
 800289e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2302      	movs	r3, #2
 80028aa:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ac:	f107 0308 	add.w	r3, r7, #8
 80028b0:	4619      	mov	r1, r3
 80028b2:	480a      	ldr	r0, [pc, #40]	; (80028dc <MX_GPIO_Init+0x98>)
 80028b4:	f000 fbbc 	bl	8003030 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY0_Pin KEY1_Pin */
	GPIO_InitStruct.Pin = KEY0_Pin | KEY1_Pin;
 80028b8:	2303      	movs	r3, #3
 80028ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 0308 	add.w	r3, r7, #8
 80028c8:	4619      	mov	r1, r3
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <MX_GPIO_Init+0x9c>)
 80028cc:	f000 fbb0 	bl	8003030 <HAL_GPIO_Init>

}
 80028d0:	bf00      	nop
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010800 	.word	0x40010800
 80028e0:	40010c00 	.word	0x40010c00

080028e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_TIM_PeriodElapsedCallback+0x14>
//		LEDB_TOGGLE;
		KeyScan();
 80028f4:	f7ff f8e4 	bl	8001ac0 <KeyScan>
	}
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000118 	.word	0x20000118

08002904 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002908:	b672      	cpsid	i
}
 800290a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800290c:	e7fe      	b.n	800290c <Error_Handler+0x8>
	...

08002910 <FetchText>:
		0x00, 0x0c, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x0c, 0x10,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x38, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, };

void FetchText(uint8_t *TextBuf, char chr) {
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
	uint8_t charSerialNum = -1;
 800291c:	23ff      	movs	r3, #255	; 0xff
 800291e:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 92; i++) {
 8002920:	2300      	movs	r3, #0
 8002922:	73bb      	strb	r3, [r7, #14]
 8002924:	e00b      	b.n	800293e <FetchText+0x2e>
		if (chr == CharList[i]) {
 8002926:	7bbb      	ldrb	r3, [r7, #14]
 8002928:	4a1b      	ldr	r2, [pc, #108]	; (8002998 <FetchText+0x88>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	429a      	cmp	r2, r3
 8002930:	d102      	bne.n	8002938 <FetchText+0x28>
			charSerialNum = i;
 8002932:	7bbb      	ldrb	r3, [r7, #14]
 8002934:	73fb      	strb	r3, [r7, #15]
			break;
 8002936:	e005      	b.n	8002944 <FetchText+0x34>
	for (uint8_t i = 0; i < 92; i++) {
 8002938:	7bbb      	ldrb	r3, [r7, #14]
 800293a:	3301      	adds	r3, #1
 800293c:	73bb      	strb	r3, [r7, #14]
 800293e:	7bbb      	ldrb	r3, [r7, #14]
 8002940:	2b5b      	cmp	r3, #91	; 0x5b
 8002942:	d9f0      	bls.n	8002926 <FetchText+0x16>
	if (charSerialNum == -1){
		memset(TextBuf, 0x00, 8);
		return;
	}

	uint8_t charLookupX = charSerialNum % 8;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	72fb      	strb	r3, [r7, #11]
	uint8_t charLookupY = 8 * (charSerialNum / 8);
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	72bb      	strb	r3, [r7, #10]
	uint8_t n = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	737b      	strb	r3, [r7, #13]

	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 800295a:	7abb      	ldrb	r3, [r7, #10]
 800295c:	733b      	strb	r3, [r7, #12]
 800295e:	e011      	b.n	8002984 <FetchText+0x74>
		TextBuf[n] = *((uint8_t*)PressStart + y * 8 + charLookupX);
 8002960:	7b3b      	ldrb	r3, [r7, #12]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	461a      	mov	r2, r3
 8002966:	7afb      	ldrb	r3, [r7, #11]
 8002968:	4413      	add	r3, r2
 800296a:	4a0c      	ldr	r2, [pc, #48]	; (800299c <FetchText+0x8c>)
 800296c:	441a      	add	r2, r3
 800296e:	7b7b      	ldrb	r3, [r7, #13]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	440b      	add	r3, r1
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	701a      	strb	r2, [r3, #0]
		n++;
 8002978:	7b7b      	ldrb	r3, [r7, #13]
 800297a:	3301      	adds	r3, #1
 800297c:	737b      	strb	r3, [r7, #13]
	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 800297e:	7b3b      	ldrb	r3, [r7, #12]
 8002980:	3301      	adds	r3, #1
 8002982:	733b      	strb	r3, [r7, #12]
 8002984:	7abb      	ldrb	r3, [r7, #10]
 8002986:	1dda      	adds	r2, r3, #7
 8002988:	7b3b      	ldrb	r3, [r7, #12]
 800298a:	429a      	cmp	r2, r3
 800298c:	dae8      	bge.n	8002960 <FetchText+0x50>
	}
}
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	080062a0 	.word	0x080062a0
 800299c:	080062fc 	.word	0x080062fc

080029a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_MspInit+0x5c>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	4a14      	ldr	r2, [pc, #80]	; (80029fc <HAL_MspInit+0x5c>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6193      	str	r3, [r2, #24]
 80029b2:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_MspInit+0x5c>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_MspInit+0x5c>)
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	4a0e      	ldr	r2, [pc, #56]	; (80029fc <HAL_MspInit+0x5c>)
 80029c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c8:	61d3      	str	r3, [r2, #28]
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <HAL_MspInit+0x5c>)
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_MspInit+0x60>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_MspInit+0x60>)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40010000 	.word	0x40010000

08002a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_SPI_MspInit+0x70>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d123      	bne.n	8002a6c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_SPI_MspInit+0x74>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <HAL_SPI_MspInit+0x74>)
 8002a2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <HAL_SPI_MspInit+0x74>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_SPI_MspInit+0x74>)
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <HAL_SPI_MspInit+0x74>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	6193      	str	r3, [r2, #24]
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_SPI_MspInit+0x74>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a54:	23a0      	movs	r3, #160	; 0xa0
 8002a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a60:	f107 0310 	add.w	r3, r7, #16
 8002a64:	4619      	mov	r1, r3
 8002a66:	4805      	ldr	r0, [pc, #20]	; (8002a7c <HAL_SPI_MspInit+0x78>)
 8002a68:	f000 fae2 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a6c:	bf00      	nop
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40013000 	.word	0x40013000
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40010800 	.word	0x40010800

08002a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <HAL_TIM_Base_MspInit+0x44>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d113      	bne.n	8002aba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HAL_TIM_Base_MspInit+0x48>)
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	4a0c      	ldr	r2, [pc, #48]	; (8002ac8 <HAL_TIM_Base_MspInit+0x48>)
 8002a98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a9c:	6193      	str	r3, [r2, #24]
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_TIM_Base_MspInit+0x48>)
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	2019      	movs	r0, #25
 8002ab0:	f000 fa87 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002ab4:	2019      	movs	r0, #25
 8002ab6:	f000 faa0 	bl	8002ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40021000 	.word	0x40021000

08002acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <NMI_Handler+0x4>

08002ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad6:	e7fe      	b.n	8002ad6 <HardFault_Handler+0x4>

08002ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <MemManage_Handler+0x4>

08002ade <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <BusFault_Handler+0x4>

08002ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <UsageFault_Handler+0x4>

08002aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr

08002af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b12:	f000 f93f 	bl	8002d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	bd80      	pop	{r7, pc}
	...

08002b1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <TIM1_UP_IRQHandler+0x10>)
 8002b22:	f001 fb29 	bl	8004178 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000118 	.word	0x20000118

08002b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
	return 1;
 8002b34:	2301      	movs	r3, #1
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr

08002b3e <_kill>:

int _kill(int pid, int sig)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b082      	sub	sp, #8
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002b48:	f001 fe6e 	bl	8004828 <__errno>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2216      	movs	r2, #22
 8002b50:	601a      	str	r2, [r3, #0]
	return -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <_exit>:

void _exit (int status)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002b66:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7ff ffe7 	bl	8002b3e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002b70:	e7fe      	b.n	8002b70 <_exit+0x12>

08002b72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e00a      	b.n	8002b9a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b84:	f3af 8000 	nop.w
 8002b88:	4601      	mov	r1, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	60ba      	str	r2, [r7, #8]
 8002b90:	b2ca      	uxtb	r2, r1
 8002b92:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	dbf0      	blt.n	8002b84 <_read+0x12>
	}

return len;
 8002ba2:	687b      	ldr	r3, [r7, #4]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e009      	b.n	8002bd2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	60ba      	str	r2, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	dbf1      	blt.n	8002bbe <_write+0x12>
	}
	return len;
 8002bda:	687b      	ldr	r3, [r7, #4]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_close>:

int _close(int file)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	return -1;
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr

08002bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr

08002c18 <_isatty>:

int _isatty(int file)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	return 1;
 8002c20:	2301      	movs	r3, #1
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
	return 0;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr

08002c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <_sbrk+0x5c>)
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <_sbrk+0x60>)
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <_sbrk+0x64>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <_sbrk+0x64>)
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <_sbrk+0x68>)
 8002c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <_sbrk+0x64>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d207      	bcs.n	8002c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c74:	f001 fdd8 	bl	8004828 <__errno>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	e009      	b.n	8002c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c84:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <_sbrk+0x64>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c8a:	4b07      	ldr	r3, [pc, #28]	; (8002ca8 <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <_sbrk+0x64>)
 8002c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20005000 	.word	0x20005000
 8002ca4:	00000400 	.word	0x00000400
 8002ca8:	2000018c 	.word	0x2000018c
 8002cac:	200001a8 	.word	0x200001a8

08002cb0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <Reset_Handler>:
 8002cbc:	480c      	ldr	r0, [pc, #48]	; (8002cf0 <LoopFillZerobss+0x12>)
 8002cbe:	490d      	ldr	r1, [pc, #52]	; (8002cf4 <LoopFillZerobss+0x16>)
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <LoopFillZerobss+0x1a>)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e002      	b.n	8002ccc <LoopCopyDataInit>

08002cc6 <CopyDataInit>:
 8002cc6:	58d4      	ldr	r4, [r2, r3]
 8002cc8:	50c4      	str	r4, [r0, r3]
 8002cca:	3304      	adds	r3, #4

08002ccc <LoopCopyDataInit>:
 8002ccc:	18c4      	adds	r4, r0, r3
 8002cce:	428c      	cmp	r4, r1
 8002cd0:	d3f9      	bcc.n	8002cc6 <CopyDataInit>
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <LoopFillZerobss+0x1e>)
 8002cd4:	4c0a      	ldr	r4, [pc, #40]	; (8002d00 <LoopFillZerobss+0x22>)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e001      	b.n	8002cde <LoopFillZerobss>

08002cda <FillZerobss>:
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	3204      	adds	r2, #4

08002cde <LoopFillZerobss>:
 8002cde:	42a2      	cmp	r2, r4
 8002ce0:	d3fb      	bcc.n	8002cda <FillZerobss>
 8002ce2:	f7ff ffe5 	bl	8002cb0 <SystemInit>
 8002ce6:	f001 fda5 	bl	8004834 <__libc_init_array>
 8002cea:	f7ff f92d 	bl	8001f48 <main>
 8002cee:	4770      	bx	lr
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000078 	.word	0x20000078
 8002cf8:	0800675c 	.word	0x0800675c
 8002cfc:	20000078 	.word	0x20000078
 8002d00:	200001a4 	.word	0x200001a4

08002d04 <ADC1_2_IRQHandler>:
 8002d04:	e7fe      	b.n	8002d04 <ADC1_2_IRQHandler>
	...

08002d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d0c:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <HAL_Init+0x28>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a07      	ldr	r2, [pc, #28]	; (8002d30 <HAL_Init+0x28>)
 8002d12:	f043 0310 	orr.w	r3, r3, #16
 8002d16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d18:	2003      	movs	r0, #3
 8002d1a:	f000 f947 	bl	8002fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d1e:	200f      	movs	r0, #15
 8002d20:	f000 f808 	bl	8002d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d24:	f7ff fe3c 	bl	80029a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40022000 	.word	0x40022000

08002d34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d3c:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_InitTick+0x54>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_InitTick+0x58>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f95f 	bl	8003016 <HAL_SYSTICK_Config>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00e      	b.n	8002d80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b0f      	cmp	r3, #15
 8002d66:	d80a      	bhi.n	8002d7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f000 f927 	bl	8002fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d74:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <HAL_InitTick+0x5c>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e000      	b.n	8002d80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	20000010 	.word	0x20000010
 8002d90:	2000000c 	.word	0x2000000c

08002d94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_IncTick+0x1c>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_IncTick+0x20>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	4a03      	ldr	r2, [pc, #12]	; (8002db4 <HAL_IncTick+0x20>)
 8002da6:	6013      	str	r3, [r2, #0]
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr
 8002db0:	20000010 	.word	0x20000010
 8002db4:	20000190 	.word	0x20000190

08002db8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  return uwTick;
 8002dbc:	4b02      	ldr	r3, [pc, #8]	; (8002dc8 <HAL_GetTick+0x10>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	20000190 	.word	0x20000190

08002dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd4:	f7ff fff0 	bl	8002db8 <HAL_GetTick>
 8002dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de4:	d005      	beq.n	8002df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de6:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <HAL_Delay+0x44>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4413      	add	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002df2:	bf00      	nop
 8002df4:	f7ff ffe0 	bl	8002db8 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d8f7      	bhi.n	8002df4 <HAL_Delay+0x28>
  {
  }
}
 8002e04:	bf00      	nop
 8002e06:	bf00      	nop
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000010 	.word	0x20000010

08002e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e24:	4b0c      	ldr	r3, [pc, #48]	; (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e46:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	60d3      	str	r3, [r2, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	e000ed00 	.word	0xe000ed00

08002e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e60:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <__NVIC_GetPriorityGrouping+0x18>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0307 	and.w	r3, r3, #7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	db0b      	blt.n	8002ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	4906      	ldr	r1, [pc, #24]	; (8002eac <__NVIC_EnableIRQ+0x34>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2001      	movs	r0, #1
 8002e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	; (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	; 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	; 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f78:	d301      	bcc.n	8002f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e00f      	b.n	8002f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <SysTick_Config+0x40>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f86:	210f      	movs	r1, #15
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f7ff ff90 	bl	8002eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <SysTick_Config+0x40>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <SysTick_Config+0x40>)
 8002f98:	2207      	movs	r2, #7
 8002f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010

08002fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff2d 	bl	8002e14 <__NVIC_SetPriorityGrouping>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd4:	f7ff ff42 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8002fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	6978      	ldr	r0, [r7, #20]
 8002fe0:	f7ff ff90 	bl	8002f04 <NVIC_EncodePriority>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff5f 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff35 	bl	8002e78 <__NVIC_EnableIRQ>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ffa2 	bl	8002f68 <SysTick_Config>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b08b      	sub	sp, #44	; 0x2c
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303a:	2300      	movs	r3, #0
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003042:	e169      	b.n	8003318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003044:	2201      	movs	r2, #1
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	429a      	cmp	r2, r3
 800305e:	f040 8158 	bne.w	8003312 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	4a9a      	ldr	r2, [pc, #616]	; (80032d0 <HAL_GPIO_Init+0x2a0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d05e      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 800306c:	4a98      	ldr	r2, [pc, #608]	; (80032d0 <HAL_GPIO_Init+0x2a0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d875      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 8003072:	4a98      	ldr	r2, [pc, #608]	; (80032d4 <HAL_GPIO_Init+0x2a4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d058      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 8003078:	4a96      	ldr	r2, [pc, #600]	; (80032d4 <HAL_GPIO_Init+0x2a4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d86f      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 800307e:	4a96      	ldr	r2, [pc, #600]	; (80032d8 <HAL_GPIO_Init+0x2a8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d052      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 8003084:	4a94      	ldr	r2, [pc, #592]	; (80032d8 <HAL_GPIO_Init+0x2a8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d869      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 800308a:	4a94      	ldr	r2, [pc, #592]	; (80032dc <HAL_GPIO_Init+0x2ac>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d04c      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 8003090:	4a92      	ldr	r2, [pc, #584]	; (80032dc <HAL_GPIO_Init+0x2ac>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d863      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 8003096:	4a92      	ldr	r2, [pc, #584]	; (80032e0 <HAL_GPIO_Init+0x2b0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d046      	beq.n	800312a <HAL_GPIO_Init+0xfa>
 800309c:	4a90      	ldr	r2, [pc, #576]	; (80032e0 <HAL_GPIO_Init+0x2b0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d85d      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 80030a2:	2b12      	cmp	r3, #18
 80030a4:	d82a      	bhi.n	80030fc <HAL_GPIO_Init+0xcc>
 80030a6:	2b12      	cmp	r3, #18
 80030a8:	d859      	bhi.n	800315e <HAL_GPIO_Init+0x12e>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <HAL_GPIO_Init+0x80>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	0800312b 	.word	0x0800312b
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003117 	.word	0x08003117
 80030bc:	08003159 	.word	0x08003159
 80030c0:	0800315f 	.word	0x0800315f
 80030c4:	0800315f 	.word	0x0800315f
 80030c8:	0800315f 	.word	0x0800315f
 80030cc:	0800315f 	.word	0x0800315f
 80030d0:	0800315f 	.word	0x0800315f
 80030d4:	0800315f 	.word	0x0800315f
 80030d8:	0800315f 	.word	0x0800315f
 80030dc:	0800315f 	.word	0x0800315f
 80030e0:	0800315f 	.word	0x0800315f
 80030e4:	0800315f 	.word	0x0800315f
 80030e8:	0800315f 	.word	0x0800315f
 80030ec:	0800315f 	.word	0x0800315f
 80030f0:	0800315f 	.word	0x0800315f
 80030f4:	0800310d 	.word	0x0800310d
 80030f8:	08003121 	.word	0x08003121
 80030fc:	4a79      	ldr	r2, [pc, #484]	; (80032e4 <HAL_GPIO_Init+0x2b4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003102:	e02c      	b.n	800315e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	623b      	str	r3, [r7, #32]
          break;
 800310a:	e029      	b.n	8003160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	3304      	adds	r3, #4
 8003112:	623b      	str	r3, [r7, #32]
          break;
 8003114:	e024      	b.n	8003160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	3308      	adds	r3, #8
 800311c:	623b      	str	r3, [r7, #32]
          break;
 800311e:	e01f      	b.n	8003160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	330c      	adds	r3, #12
 8003126:	623b      	str	r3, [r7, #32]
          break;
 8003128:	e01a      	b.n	8003160 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003132:	2304      	movs	r3, #4
 8003134:	623b      	str	r3, [r7, #32]
          break;
 8003136:	e013      	b.n	8003160 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003140:	2308      	movs	r3, #8
 8003142:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	611a      	str	r2, [r3, #16]
          break;
 800314a:	e009      	b.n	8003160 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800314c:	2308      	movs	r3, #8
 800314e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	615a      	str	r2, [r3, #20]
          break;
 8003156:	e003      	b.n	8003160 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003158:	2300      	movs	r3, #0
 800315a:	623b      	str	r3, [r7, #32]
          break;
 800315c:	e000      	b.n	8003160 <HAL_GPIO_Init+0x130>
          break;
 800315e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2bff      	cmp	r3, #255	; 0xff
 8003164:	d801      	bhi.n	800316a <HAL_GPIO_Init+0x13a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	e001      	b.n	800316e <HAL_GPIO_Init+0x13e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3304      	adds	r3, #4
 800316e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2bff      	cmp	r3, #255	; 0xff
 8003174:	d802      	bhi.n	800317c <HAL_GPIO_Init+0x14c>
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	e002      	b.n	8003182 <HAL_GPIO_Init+0x152>
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	3b08      	subs	r3, #8
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	210f      	movs	r1, #15
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	fa01 f303 	lsl.w	r3, r1, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	401a      	ands	r2, r3
 8003194:	6a39      	ldr	r1, [r7, #32]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	fa01 f303 	lsl.w	r3, r1, r3
 800319c:	431a      	orrs	r2, r3
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80b1 	beq.w	8003312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031b0:	4b4d      	ldr	r3, [pc, #308]	; (80032e8 <HAL_GPIO_Init+0x2b8>)
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	4a4c      	ldr	r2, [pc, #304]	; (80032e8 <HAL_GPIO_Init+0x2b8>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6193      	str	r3, [r2, #24]
 80031bc:	4b4a      	ldr	r3, [pc, #296]	; (80032e8 <HAL_GPIO_Init+0x2b8>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031c8:	4a48      	ldr	r2, [pc, #288]	; (80032ec <HAL_GPIO_Init+0x2bc>)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	089b      	lsrs	r3, r3, #2
 80031ce:	3302      	adds	r3, #2
 80031d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4013      	ands	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <HAL_GPIO_Init+0x2c0>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d013      	beq.n	800321c <HAL_GPIO_Init+0x1ec>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a3f      	ldr	r2, [pc, #252]	; (80032f4 <HAL_GPIO_Init+0x2c4>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00d      	beq.n	8003218 <HAL_GPIO_Init+0x1e8>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a3e      	ldr	r2, [pc, #248]	; (80032f8 <HAL_GPIO_Init+0x2c8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d007      	beq.n	8003214 <HAL_GPIO_Init+0x1e4>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a3d      	ldr	r2, [pc, #244]	; (80032fc <HAL_GPIO_Init+0x2cc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d101      	bne.n	8003210 <HAL_GPIO_Init+0x1e0>
 800320c:	2303      	movs	r3, #3
 800320e:	e006      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003210:	2304      	movs	r3, #4
 8003212:	e004      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003214:	2302      	movs	r3, #2
 8003216:	e002      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_GPIO_Init+0x1ee>
 800321c:	2300      	movs	r3, #0
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	f002 0203 	and.w	r2, r2, #3
 8003224:	0092      	lsls	r2, r2, #2
 8003226:	4093      	lsls	r3, r2
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800322e:	492f      	ldr	r1, [pc, #188]	; (80032ec <HAL_GPIO_Init+0x2bc>)
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	089b      	lsrs	r3, r3, #2
 8003234:	3302      	adds	r3, #2
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	492c      	ldr	r1, [pc, #176]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e006      	b.n	8003264 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003256:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	43db      	mvns	r3, r3
 800325e:	4928      	ldr	r1, [pc, #160]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003260:	4013      	ands	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d006      	beq.n	800327e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003270:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	4922      	ldr	r1, [pc, #136]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	4313      	orrs	r3, r2
 800327a:	604b      	str	r3, [r1, #4]
 800327c:	e006      	b.n	800328c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	43db      	mvns	r3, r3
 8003286:	491e      	ldr	r1, [pc, #120]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 8003288:	4013      	ands	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d006      	beq.n	80032a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003298:	4b19      	ldr	r3, [pc, #100]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	4918      	ldr	r1, [pc, #96]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	608b      	str	r3, [r1, #8]
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032a6:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	4914      	ldr	r1, [pc, #80]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d021      	beq.n	8003304 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 80032c2:	68da      	ldr	r2, [r3, #12]
 80032c4:	490e      	ldr	r1, [pc, #56]	; (8003300 <HAL_GPIO_Init+0x2d0>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60cb      	str	r3, [r1, #12]
 80032cc:	e021      	b.n	8003312 <HAL_GPIO_Init+0x2e2>
 80032ce:	bf00      	nop
 80032d0:	10320000 	.word	0x10320000
 80032d4:	10310000 	.word	0x10310000
 80032d8:	10220000 	.word	0x10220000
 80032dc:	10210000 	.word	0x10210000
 80032e0:	10120000 	.word	0x10120000
 80032e4:	10110000 	.word	0x10110000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010000 	.word	0x40010000
 80032f0:	40010800 	.word	0x40010800
 80032f4:	40010c00 	.word	0x40010c00
 80032f8:	40011000 	.word	0x40011000
 80032fc:	40011400 	.word	0x40011400
 8003300:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_GPIO_Init+0x304>)
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	43db      	mvns	r3, r3
 800330c:	4909      	ldr	r1, [pc, #36]	; (8003334 <HAL_GPIO_Init+0x304>)
 800330e:	4013      	ands	r3, r2
 8003310:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	3301      	adds	r3, #1
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	fa22 f303 	lsr.w	r3, r2, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	f47f ae8e 	bne.w	8003044 <HAL_GPIO_Init+0x14>
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	372c      	adds	r7, #44	; 0x2c
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	807b      	strh	r3, [r7, #2]
 8003372:	4613      	mov	r3, r2
 8003374:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003376:	787b      	ldrb	r3, [r7, #1]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337c:	887a      	ldrh	r2, [r7, #2]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003382:	e003      	b.n	800338c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	041a      	lsls	r2, r3, #16
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	611a      	str	r2, [r3, #16]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
	...

08003398 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e272      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 8087 	beq.w	80034c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b8:	4b92      	ldr	r3, [pc, #584]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 030c 	and.w	r3, r3, #12
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d00c      	beq.n	80033de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033c4:	4b8f      	ldr	r3, [pc, #572]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d112      	bne.n	80033f6 <HAL_RCC_OscConfig+0x5e>
 80033d0:	4b8c      	ldr	r3, [pc, #560]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033dc:	d10b      	bne.n	80033f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033de:	4b89      	ldr	r3, [pc, #548]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d06c      	beq.n	80034c4 <HAL_RCC_OscConfig+0x12c>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d168      	bne.n	80034c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e24c      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x76>
 8003400:	4b80      	ldr	r3, [pc, #512]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a7f      	ldr	r2, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340a:	6013      	str	r3, [r2, #0]
 800340c:	e02e      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x98>
 8003416:	4b7b      	ldr	r3, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a7a      	ldr	r2, [pc, #488]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800341c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b78      	ldr	r3, [pc, #480]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a77      	ldr	r2, [pc, #476]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0xbc>
 800343a:	4b72      	ldr	r3, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a71      	ldr	r2, [pc, #452]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a6e      	ldr	r2, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xd4>
 8003454:	4b6b      	ldr	r3, [pc, #428]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a6a      	ldr	r2, [pc, #424]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b68      	ldr	r3, [pc, #416]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a67      	ldr	r2, [pc, #412]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800346a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7ff fca0 	bl	8002db8 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7ff fc9c 	bl	8002db8 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	; 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e200      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xe4>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349c:	f7ff fc8c 	bl	8002db8 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7ff fc88 	bl	8002db8 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e1ec      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x10c>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d063      	beq.n	800359a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034d2:	4b4c      	ldr	r3, [pc, #304]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00b      	beq.n	80034f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034de:	4b49      	ldr	r3, [pc, #292]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d11c      	bne.n	8003524 <HAL_RCC_OscConfig+0x18c>
 80034ea:	4b46      	ldr	r3, [pc, #280]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d116      	bne.n	8003524 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d005      	beq.n	800350e <HAL_RCC_OscConfig+0x176>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1c0      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	4939      	ldr	r1, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003522:	e03a      	b.n	800359a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d020      	beq.n	800356e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800352c:	4b36      	ldr	r3, [pc, #216]	; (8003608 <HAL_RCC_OscConfig+0x270>)
 800352e:	2201      	movs	r2, #1
 8003530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003532:	f7ff fc41 	bl	8002db8 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800353a:	f7ff fc3d 	bl	8002db8 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1a1      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f0      	beq.n	800353a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4927      	ldr	r1, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003568:	4313      	orrs	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
 800356c:	e015      	b.n	800359a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356e:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_RCC_OscConfig+0x270>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7ff fc20 	bl	8002db8 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357c:	f7ff fc1c 	bl	8002db8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e180      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d03a      	beq.n	800361c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d019      	beq.n	80035e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ae:	4b17      	ldr	r3, [pc, #92]	; (800360c <HAL_RCC_OscConfig+0x274>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b4:	f7ff fc00 	bl	8002db8 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035bc:	f7ff fbfc 	bl	8002db8 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e160      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035da:	2001      	movs	r0, #1
 80035dc:	f000 faa6 	bl	8003b2c <RCC_Delay>
 80035e0:	e01c      	b.n	800361c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_RCC_OscConfig+0x274>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e8:	f7ff fbe6 	bl	8002db8 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ee:	e00f      	b.n	8003610 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f0:	f7ff fbe2 	bl	8002db8 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d908      	bls.n	8003610 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e146      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	42420000 	.word	0x42420000
 800360c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e9      	bne.n	80035f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a6 	beq.w	8003776 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362e:	4b8b      	ldr	r3, [pc, #556]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b88      	ldr	r3, [pc, #544]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	4a87      	ldr	r2, [pc, #540]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	61d3      	str	r3, [r2, #28]
 8003646:	4b85      	ldr	r3, [pc, #532]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b82      	ldr	r3, [pc, #520]	; (8003860 <HAL_RCC_OscConfig+0x4c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003662:	4b7f      	ldr	r3, [pc, #508]	; (8003860 <HAL_RCC_OscConfig+0x4c8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a7e      	ldr	r2, [pc, #504]	; (8003860 <HAL_RCC_OscConfig+0x4c8>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7ff fba3 	bl	8002db8 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7ff fb9f 	bl	8002db8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b64      	cmp	r3, #100	; 0x64
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e103      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003688:	4b75      	ldr	r3, [pc, #468]	; (8003860 <HAL_RCC_OscConfig+0x4c8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d106      	bne.n	80036aa <HAL_RCC_OscConfig+0x312>
 800369c:	4b6f      	ldr	r3, [pc, #444]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a6e      	ldr	r2, [pc, #440]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e02d      	b.n	8003706 <HAL_RCC_OscConfig+0x36e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0x334>
 80036b2:	4b6a      	ldr	r3, [pc, #424]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a69      	ldr	r2, [pc, #420]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0301 	bic.w	r3, r3, #1
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	4a66      	ldr	r2, [pc, #408]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	f023 0304 	bic.w	r3, r3, #4
 80036c8:	6213      	str	r3, [r2, #32]
 80036ca:	e01c      	b.n	8003706 <HAL_RCC_OscConfig+0x36e>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b05      	cmp	r3, #5
 80036d2:	d10c      	bne.n	80036ee <HAL_RCC_OscConfig+0x356>
 80036d4:	4b61      	ldr	r3, [pc, #388]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4a60      	ldr	r2, [pc, #384]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036da:	f043 0304 	orr.w	r3, r3, #4
 80036de:	6213      	str	r3, [r2, #32]
 80036e0:	4b5e      	ldr	r3, [pc, #376]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4a5d      	ldr	r2, [pc, #372]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6213      	str	r3, [r2, #32]
 80036ec:	e00b      	b.n	8003706 <HAL_RCC_OscConfig+0x36e>
 80036ee:	4b5b      	ldr	r3, [pc, #364]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	4a5a      	ldr	r2, [pc, #360]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6213      	str	r3, [r2, #32]
 80036fa:	4b58      	ldr	r3, [pc, #352]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a57      	ldr	r2, [pc, #348]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d015      	beq.n	800373a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370e:	f7ff fb53 	bl	8002db8 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003716:	f7ff fb4f 	bl	8002db8 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	f241 3288 	movw	r2, #5000	; 0x1388
 8003724:	4293      	cmp	r3, r2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e0b1      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	4b4b      	ldr	r3, [pc, #300]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0ee      	beq.n	8003716 <HAL_RCC_OscConfig+0x37e>
 8003738:	e014      	b.n	8003764 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800373a:	f7ff fb3d 	bl	8002db8 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003740:	e00a      	b.n	8003758 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7ff fb39 	bl	8002db8 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003750:	4293      	cmp	r3, r2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e09b      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	4b40      	ldr	r3, [pc, #256]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1ee      	bne.n	8003742 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4b3c      	ldr	r3, [pc, #240]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4a3b      	ldr	r2, [pc, #236]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003774:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 8087 	beq.w	800388e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003780:	4b36      	ldr	r3, [pc, #216]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 030c 	and.w	r3, r3, #12
 8003788:	2b08      	cmp	r3, #8
 800378a:	d061      	beq.n	8003850 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d146      	bne.n	8003822 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003794:	4b33      	ldr	r3, [pc, #204]	; (8003864 <HAL_RCC_OscConfig+0x4cc>)
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7ff fb0d 	bl	8002db8 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a2:	f7ff fb09 	bl	8002db8 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e06d      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b4:	4b29      	ldr	r3, [pc, #164]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f0      	bne.n	80037a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c8:	d108      	bne.n	80037dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ca:	4b24      	ldr	r3, [pc, #144]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	4921      	ldr	r1, [pc, #132]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a19      	ldr	r1, [r3, #32]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	430b      	orrs	r3, r1
 80037ee:	491b      	ldr	r1, [pc, #108]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f4:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RCC_OscConfig+0x4cc>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fa:	f7ff fadd 	bl	8002db8 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003802:	f7ff fad9 	bl	8002db8 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e03d      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003814:	4b11      	ldr	r3, [pc, #68]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x46a>
 8003820:	e035      	b.n	800388e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_RCC_OscConfig+0x4cc>)
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003828:	f7ff fac6 	bl	8002db8 <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800382e:	e008      	b.n	8003842 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003830:	f7ff fac2 	bl	8002db8 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	2b02      	cmp	r3, #2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e026      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003842:	4b06      	ldr	r3, [pc, #24]	; (800385c <HAL_RCC_OscConfig+0x4c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1f0      	bne.n	8003830 <HAL_RCC_OscConfig+0x498>
 800384e:	e01e      	b.n	800388e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e019      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
 800385c:	40021000 	.word	0x40021000
 8003860:	40007000 	.word	0x40007000
 8003864:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x500>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	429a      	cmp	r2, r3
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	40021000 	.word	0x40021000

0800389c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0d0      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038b0:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d910      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 0207 	bic.w	r2, r3, #7
 80038c6:	4965      	ldr	r1, [pc, #404]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b8      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 80038fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003902:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800391a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	494d      	ldr	r1, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800392a:	4313      	orrs	r3, r2
 800392c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d040      	beq.n	80039bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d115      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395a:	4b41      	ldr	r3, [pc, #260]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e073      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	4b3d      	ldr	r3, [pc, #244]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e06b      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b39      	ldr	r3, [pc, #228]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4936      	ldr	r1, [pc, #216]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800398c:	f7ff fa14 	bl	8002db8 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7ff fa10 	bl	8002db8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e053      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b2d      	ldr	r3, [pc, #180]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039bc:	4b27      	ldr	r3, [pc, #156]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d210      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 0207 	bic.w	r2, r3, #7
 80039d2:	4922      	ldr	r1, [pc, #136]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a2a:	f000 f821 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490a      	ldr	r1, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1cc>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1d0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff f972 	bl	8002d34 <HAL_InitTick>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40022000 	.word	0x40022000
 8003a60:	40021000 	.word	0x40021000
 8003a64:	080065fc 	.word	0x080065fc
 8003a68:	20000008 	.word	0x20000008
 8003a6c:	2000000c 	.word	0x2000000c

08003a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	b490      	push	{r4, r7}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a76:	4b29      	ldr	r3, [pc, #164]	; (8003b1c <HAL_RCC_GetSysClockFreq+0xac>)
 8003a78:	1d3c      	adds	r4, r7, #4
 8003a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a80:	f240 2301 	movw	r3, #513	; 0x201
 8003a84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a96:	2300      	movs	r3, #0
 8003a98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a9a:	4b21      	ldr	r3, [pc, #132]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d002      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x46>
 8003aae:	e02b      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ab0:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ab2:	623b      	str	r3, [r7, #32]
      break;
 8003ab4:	e02b      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	0c9b      	lsrs	r3, r3, #18
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	3328      	adds	r3, #40	; 0x28
 8003ac0:	443b      	add	r3, r7
 8003ac2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ac6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ad2:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	0c5b      	lsrs	r3, r3, #17
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	3328      	adds	r3, #40	; 0x28
 8003ade:	443b      	add	r3, r7
 8003ae0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ae4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003aea:	fb03 f202 	mul.w	r2, r3, r2
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
 8003af6:	e004      	b.n	8003b02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	4a0b      	ldr	r2, [pc, #44]	; (8003b28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	623b      	str	r3, [r7, #32]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b0a:	623b      	str	r3, [r7, #32]
      break;
 8003b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3728      	adds	r7, #40	; 0x28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc90      	pop	{r4, r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	08005ac0 	.word	0x08005ac0
 8003b20:	40021000 	.word	0x40021000
 8003b24:	007a1200 	.word	0x007a1200
 8003b28:	003d0900 	.word	0x003d0900

08003b2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b34:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <RCC_Delay+0x34>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <RCC_Delay+0x38>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	0a5b      	lsrs	r3, r3, #9
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	fb02 f303 	mul.w	r3, r2, r3
 8003b46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b48:	bf00      	nop
  }
  while (Delay --);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1e5a      	subs	r2, r3, #1
 8003b4e:	60fa      	str	r2, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1f9      	bne.n	8003b48 <RCC_Delay+0x1c>
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	20000008 	.word	0x20000008
 8003b64:	10624dd3 	.word	0x10624dd3

08003b68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e076      	b.n	8003c68 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d108      	bne.n	8003b94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b8a:	d009      	beq.n	8003ba0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
 8003b92:	e005      	b.n	8003ba0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe ff22 	bl	8002a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c10:	431a      	orrs	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c24:	ea42 0103 	orr.w	r1, r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	0c1a      	lsrs	r2, r3, #16
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f002 0204 	and.w	r2, r2, #4
 8003c46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	69da      	ldr	r2, [r3, #28]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_SPI_Transmit+0x22>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e126      	b.n	8003ee0 <HAL_SPI_Transmit+0x270>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c9a:	f7ff f88d 	bl	8002db8 <HAL_GetTick>
 8003c9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d002      	beq.n	8003cb6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cb4:	e10b      	b.n	8003ece <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_SPI_Transmit+0x52>
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cc6:	e102      	b.n	8003ece <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2203      	movs	r2, #3
 8003ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	88fa      	ldrh	r2, [r7, #6]
 8003ce0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	88fa      	ldrh	r2, [r7, #6]
 8003ce6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0e:	d10f      	bne.n	8003d30 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d007      	beq.n	8003d4e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d56:	d14b      	bne.n	8003df0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_SPI_Transmit+0xf6>
 8003d60:	8afb      	ldrh	r3, [r7, #22]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d13e      	bne.n	8003de4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	881a      	ldrh	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	1c9a      	adds	r2, r3, #2
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d8a:	e02b      	b.n	8003de4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d112      	bne.n	8003dc0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	881a      	ldrh	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	1c9a      	adds	r2, r3, #2
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dbe:	e011      	b.n	8003de4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc0:	f7fe fffa 	bl	8002db8 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d803      	bhi.n	8003dd8 <HAL_SPI_Transmit+0x168>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd6:	d102      	bne.n	8003dde <HAL_SPI_Transmit+0x16e>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003de2:	e074      	b.n	8003ece <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1ce      	bne.n	8003d8c <HAL_SPI_Transmit+0x11c>
 8003dee:	e04c      	b.n	8003e8a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d002      	beq.n	8003dfe <HAL_SPI_Transmit+0x18e>
 8003df8:	8afb      	ldrh	r3, [r7, #22]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d140      	bne.n	8003e80 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	7812      	ldrb	r2, [r2, #0]
 8003e0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e24:	e02c      	b.n	8003e80 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d113      	bne.n	8003e5c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	7812      	ldrb	r2, [r2, #0]
 8003e40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e5a:	e011      	b.n	8003e80 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e5c:	f7fe ffac 	bl	8002db8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d803      	bhi.n	8003e74 <HAL_SPI_Transmit+0x204>
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d102      	bne.n	8003e7a <HAL_SPI_Transmit+0x20a>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e7e:	e026      	b.n	8003ece <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1cd      	bne.n	8003e26 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f8b2 	bl	8003ff8 <SPI_EndRxTxTransaction>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e000      	b.n	8003ece <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ecc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3720      	adds	r7, #32
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ef8:	f7fe ff5e 	bl	8002db8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	4413      	add	r3, r2
 8003f06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f08:	f7fe ff56 	bl	8002db8 <HAL_GetTick>
 8003f0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f0e:	4b39      	ldr	r3, [pc, #228]	; (8003ff4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	015b      	lsls	r3, r3, #5
 8003f14:	0d1b      	lsrs	r3, r3, #20
 8003f16:	69fa      	ldr	r2, [r7, #28]
 8003f18:	fb02 f303 	mul.w	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1e:	e054      	b.n	8003fca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f26:	d050      	beq.n	8003fca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f28:	f7fe ff46 	bl	8002db8 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	69fa      	ldr	r2, [r7, #28]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d902      	bls.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d13d      	bne.n	8003fba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f56:	d111      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f60:	d004      	beq.n	8003f6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d107      	bne.n	8003f7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	d10f      	bne.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e017      	b.n	8003fea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	bf0c      	ite	eq
 8003fda:	2301      	moveq	r3, #1
 8003fdc:	2300      	movne	r3, #0
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d19b      	bne.n	8003f20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000008 	.word	0x20000008

08003ff8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	2180      	movs	r1, #128	; 0x80
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7ff ff6a 	bl	8003ee8 <SPI_WaitFlagStateUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d007      	beq.n	800402a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e000      	b.n	800402c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e041      	b.n	80040ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7fe fd10 	bl	8002a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f000 fa70 	bl	8004558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d001      	beq.n	80040ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e03a      	b.n	8004162 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68da      	ldr	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a18      	ldr	r2, [pc, #96]	; (800416c <HAL_TIM_Base_Start_IT+0x98>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x58>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004116:	d009      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x58>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a14      	ldr	r2, [pc, #80]	; (8004170 <HAL_TIM_Base_Start_IT+0x9c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_TIM_Base_Start_IT+0x58>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a13      	ldr	r2, [pc, #76]	; (8004174 <HAL_TIM_Base_Start_IT+0xa0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d111      	bne.n	8004150 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b06      	cmp	r3, #6
 800413c:	d010      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f042 0201 	orr.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800414e:	e007      	b.n	8004160 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3714      	adds	r7, #20
 8004166:	46bd      	mov	sp, r7
 8004168:	bc80      	pop	{r7}
 800416a:	4770      	bx	lr
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800

08004178 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b02      	cmp	r3, #2
 800418c:	d122      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b02      	cmp	r3, #2
 800419a:	d11b      	bne.n	80041d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0202 	mvn.w	r2, #2
 80041a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	f003 0303 	and.w	r3, r3, #3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f9b1 	bl	8004522 <HAL_TIM_IC_CaptureCallback>
 80041c0:	e005      	b.n	80041ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9a4 	bl	8004510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f9b3 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	f003 0304 	and.w	r3, r3, #4
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d122      	bne.n	8004228 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d11b      	bne.n	8004228 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0204 	mvn.w	r2, #4
 80041f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2202      	movs	r2, #2
 80041fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f987 	bl	8004522 <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f97a 	bl	8004510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f989 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b08      	cmp	r3, #8
 8004234:	d122      	bne.n	800427c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b08      	cmp	r3, #8
 8004242:	d11b      	bne.n	800427c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f06f 0208 	mvn.w	r2, #8
 800424c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2204      	movs	r2, #4
 8004252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f95d 	bl	8004522 <HAL_TIM_IC_CaptureCallback>
 8004268:	e005      	b.n	8004276 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f950 	bl	8004510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f95f 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	2b10      	cmp	r3, #16
 8004288:	d122      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b10      	cmp	r3, #16
 8004296:	d11b      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0210 	mvn.w	r2, #16
 80042a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2208      	movs	r2, #8
 80042a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f933 	bl	8004522 <HAL_TIM_IC_CaptureCallback>
 80042bc:	e005      	b.n	80042ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f926 	bl	8004510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f935 	bl	8004534 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d10e      	bne.n	80042fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d107      	bne.n	80042fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0201 	mvn.w	r2, #1
 80042f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fe faf4 	bl	80028e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004306:	2b80      	cmp	r3, #128	; 0x80
 8004308:	d10e      	bne.n	8004328 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b80      	cmp	r3, #128	; 0x80
 8004316:	d107      	bne.n	8004328 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 fa77 	bl	8004816 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004332:	2b40      	cmp	r3, #64	; 0x40
 8004334:	d10e      	bne.n	8004354 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004340:	2b40      	cmp	r3, #64	; 0x40
 8004342:	d107      	bne.n	8004354 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f8f9 	bl	8004546 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b20      	cmp	r3, #32
 8004360:	d10e      	bne.n	8004380 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b20      	cmp	r3, #32
 800436e:	d107      	bne.n	8004380 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0220 	mvn.w	r2, #32
 8004378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 fa42 	bl	8004804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIM_ConfigClockSource+0x18>
 800439c:	2302      	movs	r3, #2
 800439e:	e0b3      	b.n	8004508 <HAL_TIM_ConfigClockSource+0x180>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043d8:	d03e      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xd0>
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043de:	f200 8087 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x168>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e6:	f000 8085 	beq.w	80044f4 <HAL_TIM_ConfigClockSource+0x16c>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ee:	d87f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x168>
 80043f0:	2b70      	cmp	r3, #112	; 0x70
 80043f2:	d01a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xa2>
 80043f4:	2b70      	cmp	r3, #112	; 0x70
 80043f6:	d87b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x168>
 80043f8:	2b60      	cmp	r3, #96	; 0x60
 80043fa:	d050      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x116>
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d877      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x168>
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d03c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0xf6>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d873      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x168>
 8004408:	2b40      	cmp	r3, #64	; 0x40
 800440a:	d058      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x136>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d86f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x168>
 8004410:	2b30      	cmp	r3, #48	; 0x30
 8004412:	d064      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x156>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d86b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x168>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d060      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x156>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d867      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x168>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x156>
 8004424:	2b10      	cmp	r3, #16
 8004426:	d05a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004428:	e062      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f000 f966 	bl	800470a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800444c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e04e      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f000 f94f 	bl	800470a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447a:	609a      	str	r2, [r3, #8]
      break;
 800447c:	e03b      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	461a      	mov	r2, r3
 800448c:	f000 f8c6 	bl	800461c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2150      	movs	r1, #80	; 0x50
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f91d 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 800449c:	e02b      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 f8e4 	bl	8004678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2160      	movs	r1, #96	; 0x60
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f90d 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 80044bc:	e01b      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 f8a6 	bl	800461c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	; 0x40
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f8fd 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e00b      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f000 f8f4 	bl	80046d6 <TIM_ITRx_SetConfig>
        break;
 80044ee:	e002      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044f0:	bf00      	nop
 80044f2:	e000      	b.n	80044f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr

08004522 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004522:	b480      	push	{r7}
 8004524:	b083      	sub	sp, #12
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr

08004534 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004546:	b480      	push	{r7}
 8004548:	b083      	sub	sp, #12
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800454e:	bf00      	nop
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a29      	ldr	r2, [pc, #164]	; (8004610 <TIM_Base_SetConfig+0xb8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00b      	beq.n	8004588 <TIM_Base_SetConfig+0x30>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004576:	d007      	beq.n	8004588 <TIM_Base_SetConfig+0x30>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a26      	ldr	r2, [pc, #152]	; (8004614 <TIM_Base_SetConfig+0xbc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_Base_SetConfig+0x30>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a25      	ldr	r2, [pc, #148]	; (8004618 <TIM_Base_SetConfig+0xc0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d108      	bne.n	800459a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <TIM_Base_SetConfig+0xb8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00b      	beq.n	80045ba <TIM_Base_SetConfig+0x62>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a8:	d007      	beq.n	80045ba <TIM_Base_SetConfig+0x62>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a19      	ldr	r2, [pc, #100]	; (8004614 <TIM_Base_SetConfig+0xbc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d003      	beq.n	80045ba <TIM_Base_SetConfig+0x62>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <TIM_Base_SetConfig+0xc0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d108      	bne.n	80045cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a07      	ldr	r2, [pc, #28]	; (8004610 <TIM_Base_SetConfig+0xb8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d103      	bne.n	8004600 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	691a      	ldr	r2, [r3, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	615a      	str	r2, [r3, #20]
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr
 8004610:	40012c00 	.word	0x40012c00
 8004614:	40000400 	.word	0x40000400
 8004618:	40000800 	.word	0x40000800

0800461c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0201 	bic.w	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 030a 	bic.w	r3, r3, #10
 8004658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f023 0210 	bic.w	r2, r3, #16
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f043 0307 	orr.w	r3, r3, #7
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800470a:	b480      	push	{r7}
 800470c:	b087      	sub	sp, #28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004724:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	431a      	orrs	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4313      	orrs	r3, r2
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	609a      	str	r2, [r3, #8]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800475c:	2302      	movs	r3, #2
 800475e:	e046      	b.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00e      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d009      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a12      	ldr	r2, [pc, #72]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a10      	ldr	r2, [pc, #64]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10c      	bne.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800

08004804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	bc80      	pop	{r7}
 8004826:	4770      	bx	lr

08004828 <__errno>:
 8004828:	4b01      	ldr	r3, [pc, #4]	; (8004830 <__errno+0x8>)
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	20000014 	.word	0x20000014

08004834 <__libc_init_array>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	2600      	movs	r6, #0
 8004838:	4d0c      	ldr	r5, [pc, #48]	; (800486c <__libc_init_array+0x38>)
 800483a:	4c0d      	ldr	r4, [pc, #52]	; (8004870 <__libc_init_array+0x3c>)
 800483c:	1b64      	subs	r4, r4, r5
 800483e:	10a4      	asrs	r4, r4, #2
 8004840:	42a6      	cmp	r6, r4
 8004842:	d109      	bne.n	8004858 <__libc_init_array+0x24>
 8004844:	f001 f91c 	bl	8005a80 <_init>
 8004848:	2600      	movs	r6, #0
 800484a:	4d0a      	ldr	r5, [pc, #40]	; (8004874 <__libc_init_array+0x40>)
 800484c:	4c0a      	ldr	r4, [pc, #40]	; (8004878 <__libc_init_array+0x44>)
 800484e:	1b64      	subs	r4, r4, r5
 8004850:	10a4      	asrs	r4, r4, #2
 8004852:	42a6      	cmp	r6, r4
 8004854:	d105      	bne.n	8004862 <__libc_init_array+0x2e>
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	f855 3b04 	ldr.w	r3, [r5], #4
 800485c:	4798      	blx	r3
 800485e:	3601      	adds	r6, #1
 8004860:	e7ee      	b.n	8004840 <__libc_init_array+0xc>
 8004862:	f855 3b04 	ldr.w	r3, [r5], #4
 8004866:	4798      	blx	r3
 8004868:	3601      	adds	r6, #1
 800486a:	e7f2      	b.n	8004852 <__libc_init_array+0x1e>
 800486c:	08006754 	.word	0x08006754
 8004870:	08006754 	.word	0x08006754
 8004874:	08006754 	.word	0x08006754
 8004878:	08006758 	.word	0x08006758

0800487c <malloc>:
 800487c:	4b02      	ldr	r3, [pc, #8]	; (8004888 <malloc+0xc>)
 800487e:	4601      	mov	r1, r0
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	f000 b881 	b.w	8004988 <_malloc_r>
 8004886:	bf00      	nop
 8004888:	20000014 	.word	0x20000014

0800488c <memcpy>:
 800488c:	440a      	add	r2, r1
 800488e:	4291      	cmp	r1, r2
 8004890:	f100 33ff 	add.w	r3, r0, #4294967295
 8004894:	d100      	bne.n	8004898 <memcpy+0xc>
 8004896:	4770      	bx	lr
 8004898:	b510      	push	{r4, lr}
 800489a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800489e:	4291      	cmp	r1, r2
 80048a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048a4:	d1f9      	bne.n	800489a <memcpy+0xe>
 80048a6:	bd10      	pop	{r4, pc}

080048a8 <memset>:
 80048a8:	4603      	mov	r3, r0
 80048aa:	4402      	add	r2, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <_free_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4605      	mov	r5, r0
 80048bc:	2900      	cmp	r1, #0
 80048be:	d040      	beq.n	8004942 <_free_r+0x8a>
 80048c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048c4:	1f0c      	subs	r4, r1, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	bfb8      	it	lt
 80048ca:	18e4      	addlt	r4, r4, r3
 80048cc:	f000 f97c 	bl	8004bc8 <__malloc_lock>
 80048d0:	4a1c      	ldr	r2, [pc, #112]	; (8004944 <_free_r+0x8c>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	b933      	cbnz	r3, 80048e4 <_free_r+0x2c>
 80048d6:	6063      	str	r3, [r4, #4]
 80048d8:	6014      	str	r4, [r2, #0]
 80048da:	4628      	mov	r0, r5
 80048dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048e0:	f000 b978 	b.w	8004bd4 <__malloc_unlock>
 80048e4:	42a3      	cmp	r3, r4
 80048e6:	d908      	bls.n	80048fa <_free_r+0x42>
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	1821      	adds	r1, r4, r0
 80048ec:	428b      	cmp	r3, r1
 80048ee:	bf01      	itttt	eq
 80048f0:	6819      	ldreq	r1, [r3, #0]
 80048f2:	685b      	ldreq	r3, [r3, #4]
 80048f4:	1809      	addeq	r1, r1, r0
 80048f6:	6021      	streq	r1, [r4, #0]
 80048f8:	e7ed      	b.n	80048d6 <_free_r+0x1e>
 80048fa:	461a      	mov	r2, r3
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b10b      	cbz	r3, 8004904 <_free_r+0x4c>
 8004900:	42a3      	cmp	r3, r4
 8004902:	d9fa      	bls.n	80048fa <_free_r+0x42>
 8004904:	6811      	ldr	r1, [r2, #0]
 8004906:	1850      	adds	r0, r2, r1
 8004908:	42a0      	cmp	r0, r4
 800490a:	d10b      	bne.n	8004924 <_free_r+0x6c>
 800490c:	6820      	ldr	r0, [r4, #0]
 800490e:	4401      	add	r1, r0
 8004910:	1850      	adds	r0, r2, r1
 8004912:	4283      	cmp	r3, r0
 8004914:	6011      	str	r1, [r2, #0]
 8004916:	d1e0      	bne.n	80048da <_free_r+0x22>
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4401      	add	r1, r0
 800491e:	6011      	str	r1, [r2, #0]
 8004920:	6053      	str	r3, [r2, #4]
 8004922:	e7da      	b.n	80048da <_free_r+0x22>
 8004924:	d902      	bls.n	800492c <_free_r+0x74>
 8004926:	230c      	movs	r3, #12
 8004928:	602b      	str	r3, [r5, #0]
 800492a:	e7d6      	b.n	80048da <_free_r+0x22>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	1821      	adds	r1, r4, r0
 8004930:	428b      	cmp	r3, r1
 8004932:	bf01      	itttt	eq
 8004934:	6819      	ldreq	r1, [r3, #0]
 8004936:	685b      	ldreq	r3, [r3, #4]
 8004938:	1809      	addeq	r1, r1, r0
 800493a:	6021      	streq	r1, [r4, #0]
 800493c:	6063      	str	r3, [r4, #4]
 800493e:	6054      	str	r4, [r2, #4]
 8004940:	e7cb      	b.n	80048da <_free_r+0x22>
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000194 	.word	0x20000194

08004948 <sbrk_aligned>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4e0e      	ldr	r6, [pc, #56]	; (8004984 <sbrk_aligned+0x3c>)
 800494c:	460c      	mov	r4, r1
 800494e:	6831      	ldr	r1, [r6, #0]
 8004950:	4605      	mov	r5, r0
 8004952:	b911      	cbnz	r1, 800495a <sbrk_aligned+0x12>
 8004954:	f000 f8f8 	bl	8004b48 <_sbrk_r>
 8004958:	6030      	str	r0, [r6, #0]
 800495a:	4621      	mov	r1, r4
 800495c:	4628      	mov	r0, r5
 800495e:	f000 f8f3 	bl	8004b48 <_sbrk_r>
 8004962:	1c43      	adds	r3, r0, #1
 8004964:	d00a      	beq.n	800497c <sbrk_aligned+0x34>
 8004966:	1cc4      	adds	r4, r0, #3
 8004968:	f024 0403 	bic.w	r4, r4, #3
 800496c:	42a0      	cmp	r0, r4
 800496e:	d007      	beq.n	8004980 <sbrk_aligned+0x38>
 8004970:	1a21      	subs	r1, r4, r0
 8004972:	4628      	mov	r0, r5
 8004974:	f000 f8e8 	bl	8004b48 <_sbrk_r>
 8004978:	3001      	adds	r0, #1
 800497a:	d101      	bne.n	8004980 <sbrk_aligned+0x38>
 800497c:	f04f 34ff 	mov.w	r4, #4294967295
 8004980:	4620      	mov	r0, r4
 8004982:	bd70      	pop	{r4, r5, r6, pc}
 8004984:	20000198 	.word	0x20000198

08004988 <_malloc_r>:
 8004988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800498c:	1ccd      	adds	r5, r1, #3
 800498e:	f025 0503 	bic.w	r5, r5, #3
 8004992:	3508      	adds	r5, #8
 8004994:	2d0c      	cmp	r5, #12
 8004996:	bf38      	it	cc
 8004998:	250c      	movcc	r5, #12
 800499a:	2d00      	cmp	r5, #0
 800499c:	4607      	mov	r7, r0
 800499e:	db01      	blt.n	80049a4 <_malloc_r+0x1c>
 80049a0:	42a9      	cmp	r1, r5
 80049a2:	d905      	bls.n	80049b0 <_malloc_r+0x28>
 80049a4:	230c      	movs	r3, #12
 80049a6:	2600      	movs	r6, #0
 80049a8:	603b      	str	r3, [r7, #0]
 80049aa:	4630      	mov	r0, r6
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b0:	4e2e      	ldr	r6, [pc, #184]	; (8004a6c <_malloc_r+0xe4>)
 80049b2:	f000 f909 	bl	8004bc8 <__malloc_lock>
 80049b6:	6833      	ldr	r3, [r6, #0]
 80049b8:	461c      	mov	r4, r3
 80049ba:	bb34      	cbnz	r4, 8004a0a <_malloc_r+0x82>
 80049bc:	4629      	mov	r1, r5
 80049be:	4638      	mov	r0, r7
 80049c0:	f7ff ffc2 	bl	8004948 <sbrk_aligned>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	4604      	mov	r4, r0
 80049c8:	d14d      	bne.n	8004a66 <_malloc_r+0xde>
 80049ca:	6834      	ldr	r4, [r6, #0]
 80049cc:	4626      	mov	r6, r4
 80049ce:	2e00      	cmp	r6, #0
 80049d0:	d140      	bne.n	8004a54 <_malloc_r+0xcc>
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	4631      	mov	r1, r6
 80049d6:	4638      	mov	r0, r7
 80049d8:	eb04 0803 	add.w	r8, r4, r3
 80049dc:	f000 f8b4 	bl	8004b48 <_sbrk_r>
 80049e0:	4580      	cmp	r8, r0
 80049e2:	d13a      	bne.n	8004a5a <_malloc_r+0xd2>
 80049e4:	6821      	ldr	r1, [r4, #0]
 80049e6:	3503      	adds	r5, #3
 80049e8:	1a6d      	subs	r5, r5, r1
 80049ea:	f025 0503 	bic.w	r5, r5, #3
 80049ee:	3508      	adds	r5, #8
 80049f0:	2d0c      	cmp	r5, #12
 80049f2:	bf38      	it	cc
 80049f4:	250c      	movcc	r5, #12
 80049f6:	4638      	mov	r0, r7
 80049f8:	4629      	mov	r1, r5
 80049fa:	f7ff ffa5 	bl	8004948 <sbrk_aligned>
 80049fe:	3001      	adds	r0, #1
 8004a00:	d02b      	beq.n	8004a5a <_malloc_r+0xd2>
 8004a02:	6823      	ldr	r3, [r4, #0]
 8004a04:	442b      	add	r3, r5
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	e00e      	b.n	8004a28 <_malloc_r+0xa0>
 8004a0a:	6822      	ldr	r2, [r4, #0]
 8004a0c:	1b52      	subs	r2, r2, r5
 8004a0e:	d41e      	bmi.n	8004a4e <_malloc_r+0xc6>
 8004a10:	2a0b      	cmp	r2, #11
 8004a12:	d916      	bls.n	8004a42 <_malloc_r+0xba>
 8004a14:	1961      	adds	r1, r4, r5
 8004a16:	42a3      	cmp	r3, r4
 8004a18:	6025      	str	r5, [r4, #0]
 8004a1a:	bf18      	it	ne
 8004a1c:	6059      	strne	r1, [r3, #4]
 8004a1e:	6863      	ldr	r3, [r4, #4]
 8004a20:	bf08      	it	eq
 8004a22:	6031      	streq	r1, [r6, #0]
 8004a24:	5162      	str	r2, [r4, r5]
 8004a26:	604b      	str	r3, [r1, #4]
 8004a28:	4638      	mov	r0, r7
 8004a2a:	f104 060b 	add.w	r6, r4, #11
 8004a2e:	f000 f8d1 	bl	8004bd4 <__malloc_unlock>
 8004a32:	f026 0607 	bic.w	r6, r6, #7
 8004a36:	1d23      	adds	r3, r4, #4
 8004a38:	1af2      	subs	r2, r6, r3
 8004a3a:	d0b6      	beq.n	80049aa <_malloc_r+0x22>
 8004a3c:	1b9b      	subs	r3, r3, r6
 8004a3e:	50a3      	str	r3, [r4, r2]
 8004a40:	e7b3      	b.n	80049aa <_malloc_r+0x22>
 8004a42:	6862      	ldr	r2, [r4, #4]
 8004a44:	42a3      	cmp	r3, r4
 8004a46:	bf0c      	ite	eq
 8004a48:	6032      	streq	r2, [r6, #0]
 8004a4a:	605a      	strne	r2, [r3, #4]
 8004a4c:	e7ec      	b.n	8004a28 <_malloc_r+0xa0>
 8004a4e:	4623      	mov	r3, r4
 8004a50:	6864      	ldr	r4, [r4, #4]
 8004a52:	e7b2      	b.n	80049ba <_malloc_r+0x32>
 8004a54:	4634      	mov	r4, r6
 8004a56:	6876      	ldr	r6, [r6, #4]
 8004a58:	e7b9      	b.n	80049ce <_malloc_r+0x46>
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	f000 f8b8 	bl	8004bd4 <__malloc_unlock>
 8004a64:	e7a1      	b.n	80049aa <_malloc_r+0x22>
 8004a66:	6025      	str	r5, [r4, #0]
 8004a68:	e7de      	b.n	8004a28 <_malloc_r+0xa0>
 8004a6a:	bf00      	nop
 8004a6c:	20000194 	.word	0x20000194

08004a70 <srand>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <srand+0x44>)
 8004a74:	4604      	mov	r4, r0
 8004a76:	681d      	ldr	r5, [r3, #0]
 8004a78:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004a7a:	b9b3      	cbnz	r3, 8004aaa <srand+0x3a>
 8004a7c:	2018      	movs	r0, #24
 8004a7e:	f7ff fefd 	bl	800487c <malloc>
 8004a82:	4602      	mov	r2, r0
 8004a84:	63a8      	str	r0, [r5, #56]	; 0x38
 8004a86:	b920      	cbnz	r0, 8004a92 <srand+0x22>
 8004a88:	2142      	movs	r1, #66	; 0x42
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <srand+0x48>)
 8004a8c:	480b      	ldr	r0, [pc, #44]	; (8004abc <srand+0x4c>)
 8004a8e:	f000 f86b 	bl	8004b68 <__assert_func>
 8004a92:	490b      	ldr	r1, [pc, #44]	; (8004ac0 <srand+0x50>)
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <srand+0x54>)
 8004a96:	e9c0 1300 	strd	r1, r3, [r0]
 8004a9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <srand+0x58>)
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	6083      	str	r3, [r0, #8]
 8004aa0:	230b      	movs	r3, #11
 8004aa2:	8183      	strh	r3, [r0, #12]
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004aae:	611c      	str	r4, [r3, #16]
 8004ab0:	615a      	str	r2, [r3, #20]
 8004ab2:	bd38      	pop	{r3, r4, r5, pc}
 8004ab4:	20000014 	.word	0x20000014
 8004ab8:	08006610 	.word	0x08006610
 8004abc:	08006627 	.word	0x08006627
 8004ac0:	abcd330e 	.word	0xabcd330e
 8004ac4:	e66d1234 	.word	0xe66d1234
 8004ac8:	0005deec 	.word	0x0005deec

08004acc <rand>:
 8004acc:	4b16      	ldr	r3, [pc, #88]	; (8004b28 <rand+0x5c>)
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	681c      	ldr	r4, [r3, #0]
 8004ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ad4:	b9b3      	cbnz	r3, 8004b04 <rand+0x38>
 8004ad6:	2018      	movs	r0, #24
 8004ad8:	f7ff fed0 	bl	800487c <malloc>
 8004adc:	4602      	mov	r2, r0
 8004ade:	63a0      	str	r0, [r4, #56]	; 0x38
 8004ae0:	b920      	cbnz	r0, 8004aec <rand+0x20>
 8004ae2:	214e      	movs	r1, #78	; 0x4e
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <rand+0x60>)
 8004ae6:	4812      	ldr	r0, [pc, #72]	; (8004b30 <rand+0x64>)
 8004ae8:	f000 f83e 	bl	8004b68 <__assert_func>
 8004aec:	4911      	ldr	r1, [pc, #68]	; (8004b34 <rand+0x68>)
 8004aee:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <rand+0x6c>)
 8004af0:	e9c0 1300 	strd	r1, r3, [r0]
 8004af4:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <rand+0x70>)
 8004af6:	2100      	movs	r1, #0
 8004af8:	6083      	str	r3, [r0, #8]
 8004afa:	230b      	movs	r3, #11
 8004afc:	8183      	strh	r3, [r0, #12]
 8004afe:	2001      	movs	r0, #1
 8004b00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004b04:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004b06:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <rand+0x74>)
 8004b08:	6920      	ldr	r0, [r4, #16]
 8004b0a:	6963      	ldr	r3, [r4, #20]
 8004b0c:	4342      	muls	r2, r0
 8004b0e:	490d      	ldr	r1, [pc, #52]	; (8004b44 <rand+0x78>)
 8004b10:	fb01 2203 	mla	r2, r1, r3, r2
 8004b14:	fba0 0101 	umull	r0, r1, r0, r1
 8004b18:	1c43      	adds	r3, r0, #1
 8004b1a:	eb42 0001 	adc.w	r0, r2, r1
 8004b1e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004b22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004b26:	bd10      	pop	{r4, pc}
 8004b28:	20000014 	.word	0x20000014
 8004b2c:	08006610 	.word	0x08006610
 8004b30:	08006627 	.word	0x08006627
 8004b34:	abcd330e 	.word	0xabcd330e
 8004b38:	e66d1234 	.word	0xe66d1234
 8004b3c:	0005deec 	.word	0x0005deec
 8004b40:	5851f42d 	.word	0x5851f42d
 8004b44:	4c957f2d 	.word	0x4c957f2d

08004b48 <_sbrk_r>:
 8004b48:	b538      	push	{r3, r4, r5, lr}
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4d05      	ldr	r5, [pc, #20]	; (8004b64 <_sbrk_r+0x1c>)
 8004b4e:	4604      	mov	r4, r0
 8004b50:	4608      	mov	r0, r1
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	f7fe f876 	bl	8002c44 <_sbrk>
 8004b58:	1c43      	adds	r3, r0, #1
 8004b5a:	d102      	bne.n	8004b62 <_sbrk_r+0x1a>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	b103      	cbz	r3, 8004b62 <_sbrk_r+0x1a>
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	bd38      	pop	{r3, r4, r5, pc}
 8004b64:	2000019c 	.word	0x2000019c

08004b68 <__assert_func>:
 8004b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b6a:	4614      	mov	r4, r2
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <__assert_func+0x2c>)
 8004b70:	4605      	mov	r5, r0
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68d8      	ldr	r0, [r3, #12]
 8004b76:	b14c      	cbz	r4, 8004b8c <__assert_func+0x24>
 8004b78:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <__assert_func+0x30>)
 8004b7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b7e:	9100      	str	r1, [sp, #0]
 8004b80:	462b      	mov	r3, r5
 8004b82:	4906      	ldr	r1, [pc, #24]	; (8004b9c <__assert_func+0x34>)
 8004b84:	f000 f80e 	bl	8004ba4 <fiprintf>
 8004b88:	f000 fbd8 	bl	800533c <abort>
 8004b8c:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <__assert_func+0x38>)
 8004b8e:	461c      	mov	r4, r3
 8004b90:	e7f3      	b.n	8004b7a <__assert_func+0x12>
 8004b92:	bf00      	nop
 8004b94:	20000014 	.word	0x20000014
 8004b98:	08006682 	.word	0x08006682
 8004b9c:	0800668f 	.word	0x0800668f
 8004ba0:	080066bd 	.word	0x080066bd

08004ba4 <fiprintf>:
 8004ba4:	b40e      	push	{r1, r2, r3}
 8004ba6:	b503      	push	{r0, r1, lr}
 8004ba8:	4601      	mov	r1, r0
 8004baa:	ab03      	add	r3, sp, #12
 8004bac:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <fiprintf+0x20>)
 8004bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bb2:	6800      	ldr	r0, [r0, #0]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	f000 f83b 	bl	8004c30 <_vfiprintf_r>
 8004bba:	b002      	add	sp, #8
 8004bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bc0:	b003      	add	sp, #12
 8004bc2:	4770      	bx	lr
 8004bc4:	20000014 	.word	0x20000014

08004bc8 <__malloc_lock>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	; (8004bd0 <__malloc_lock+0x8>)
 8004bca:	f000 bd73 	b.w	80056b4 <__retarget_lock_acquire_recursive>
 8004bce:	bf00      	nop
 8004bd0:	200001a0 	.word	0x200001a0

08004bd4 <__malloc_unlock>:
 8004bd4:	4801      	ldr	r0, [pc, #4]	; (8004bdc <__malloc_unlock+0x8>)
 8004bd6:	f000 bd6e 	b.w	80056b6 <__retarget_lock_release_recursive>
 8004bda:	bf00      	nop
 8004bdc:	200001a0 	.word	0x200001a0

08004be0 <__sfputc_r>:
 8004be0:	6893      	ldr	r3, [r2, #8]
 8004be2:	b410      	push	{r4}
 8004be4:	3b01      	subs	r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	6093      	str	r3, [r2, #8]
 8004bea:	da07      	bge.n	8004bfc <__sfputc_r+0x1c>
 8004bec:	6994      	ldr	r4, [r2, #24]
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	db01      	blt.n	8004bf6 <__sfputc_r+0x16>
 8004bf2:	290a      	cmp	r1, #10
 8004bf4:	d102      	bne.n	8004bfc <__sfputc_r+0x1c>
 8004bf6:	bc10      	pop	{r4}
 8004bf8:	f000 bae0 	b.w	80051bc <__swbuf_r>
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	1c58      	adds	r0, r3, #1
 8004c00:	6010      	str	r0, [r2, #0]
 8004c02:	7019      	strb	r1, [r3, #0]
 8004c04:	4608      	mov	r0, r1
 8004c06:	bc10      	pop	{r4}
 8004c08:	4770      	bx	lr

08004c0a <__sfputs_r>:
 8004c0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	460f      	mov	r7, r1
 8004c10:	4614      	mov	r4, r2
 8004c12:	18d5      	adds	r5, r2, r3
 8004c14:	42ac      	cmp	r4, r5
 8004c16:	d101      	bne.n	8004c1c <__sfputs_r+0x12>
 8004c18:	2000      	movs	r0, #0
 8004c1a:	e007      	b.n	8004c2c <__sfputs_r+0x22>
 8004c1c:	463a      	mov	r2, r7
 8004c1e:	4630      	mov	r0, r6
 8004c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c24:	f7ff ffdc 	bl	8004be0 <__sfputc_r>
 8004c28:	1c43      	adds	r3, r0, #1
 8004c2a:	d1f3      	bne.n	8004c14 <__sfputs_r+0xa>
 8004c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c30 <_vfiprintf_r>:
 8004c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c34:	460d      	mov	r5, r1
 8004c36:	4614      	mov	r4, r2
 8004c38:	4698      	mov	r8, r3
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	b09d      	sub	sp, #116	; 0x74
 8004c3e:	b118      	cbz	r0, 8004c48 <_vfiprintf_r+0x18>
 8004c40:	6983      	ldr	r3, [r0, #24]
 8004c42:	b90b      	cbnz	r3, 8004c48 <_vfiprintf_r+0x18>
 8004c44:	f000 fc98 	bl	8005578 <__sinit>
 8004c48:	4b89      	ldr	r3, [pc, #548]	; (8004e70 <_vfiprintf_r+0x240>)
 8004c4a:	429d      	cmp	r5, r3
 8004c4c:	d11b      	bne.n	8004c86 <_vfiprintf_r+0x56>
 8004c4e:	6875      	ldr	r5, [r6, #4]
 8004c50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c52:	07d9      	lsls	r1, r3, #31
 8004c54:	d405      	bmi.n	8004c62 <_vfiprintf_r+0x32>
 8004c56:	89ab      	ldrh	r3, [r5, #12]
 8004c58:	059a      	lsls	r2, r3, #22
 8004c5a:	d402      	bmi.n	8004c62 <_vfiprintf_r+0x32>
 8004c5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c5e:	f000 fd29 	bl	80056b4 <__retarget_lock_acquire_recursive>
 8004c62:	89ab      	ldrh	r3, [r5, #12]
 8004c64:	071b      	lsls	r3, r3, #28
 8004c66:	d501      	bpl.n	8004c6c <_vfiprintf_r+0x3c>
 8004c68:	692b      	ldr	r3, [r5, #16]
 8004c6a:	b9eb      	cbnz	r3, 8004ca8 <_vfiprintf_r+0x78>
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f000 faf6 	bl	8005260 <__swsetup_r>
 8004c74:	b1c0      	cbz	r0, 8004ca8 <_vfiprintf_r+0x78>
 8004c76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c78:	07dc      	lsls	r4, r3, #31
 8004c7a:	d50e      	bpl.n	8004c9a <_vfiprintf_r+0x6a>
 8004c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c80:	b01d      	add	sp, #116	; 0x74
 8004c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c86:	4b7b      	ldr	r3, [pc, #492]	; (8004e74 <_vfiprintf_r+0x244>)
 8004c88:	429d      	cmp	r5, r3
 8004c8a:	d101      	bne.n	8004c90 <_vfiprintf_r+0x60>
 8004c8c:	68b5      	ldr	r5, [r6, #8]
 8004c8e:	e7df      	b.n	8004c50 <_vfiprintf_r+0x20>
 8004c90:	4b79      	ldr	r3, [pc, #484]	; (8004e78 <_vfiprintf_r+0x248>)
 8004c92:	429d      	cmp	r5, r3
 8004c94:	bf08      	it	eq
 8004c96:	68f5      	ldreq	r5, [r6, #12]
 8004c98:	e7da      	b.n	8004c50 <_vfiprintf_r+0x20>
 8004c9a:	89ab      	ldrh	r3, [r5, #12]
 8004c9c:	0598      	lsls	r0, r3, #22
 8004c9e:	d4ed      	bmi.n	8004c7c <_vfiprintf_r+0x4c>
 8004ca0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ca2:	f000 fd08 	bl	80056b6 <__retarget_lock_release_recursive>
 8004ca6:	e7e9      	b.n	8004c7c <_vfiprintf_r+0x4c>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9309      	str	r3, [sp, #36]	; 0x24
 8004cac:	2320      	movs	r3, #32
 8004cae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cb2:	2330      	movs	r3, #48	; 0x30
 8004cb4:	f04f 0901 	mov.w	r9, #1
 8004cb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cbc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004e7c <_vfiprintf_r+0x24c>
 8004cc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cc4:	4623      	mov	r3, r4
 8004cc6:	469a      	mov	sl, r3
 8004cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ccc:	b10a      	cbz	r2, 8004cd2 <_vfiprintf_r+0xa2>
 8004cce:	2a25      	cmp	r2, #37	; 0x25
 8004cd0:	d1f9      	bne.n	8004cc6 <_vfiprintf_r+0x96>
 8004cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8004cd6:	d00b      	beq.n	8004cf0 <_vfiprintf_r+0xc0>
 8004cd8:	465b      	mov	r3, fp
 8004cda:	4622      	mov	r2, r4
 8004cdc:	4629      	mov	r1, r5
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7ff ff93 	bl	8004c0a <__sfputs_r>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	f000 80aa 	beq.w	8004e3e <_vfiprintf_r+0x20e>
 8004cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cec:	445a      	add	r2, fp
 8004cee:	9209      	str	r2, [sp, #36]	; 0x24
 8004cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 80a2 	beq.w	8004e3e <_vfiprintf_r+0x20e>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d04:	f10a 0a01 	add.w	sl, sl, #1
 8004d08:	9304      	str	r3, [sp, #16]
 8004d0a:	9307      	str	r3, [sp, #28]
 8004d0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d10:	931a      	str	r3, [sp, #104]	; 0x68
 8004d12:	4654      	mov	r4, sl
 8004d14:	2205      	movs	r2, #5
 8004d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d1a:	4858      	ldr	r0, [pc, #352]	; (8004e7c <_vfiprintf_r+0x24c>)
 8004d1c:	f000 fd32 	bl	8005784 <memchr>
 8004d20:	9a04      	ldr	r2, [sp, #16]
 8004d22:	b9d8      	cbnz	r0, 8004d5c <_vfiprintf_r+0x12c>
 8004d24:	06d1      	lsls	r1, r2, #27
 8004d26:	bf44      	itt	mi
 8004d28:	2320      	movmi	r3, #32
 8004d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d2e:	0713      	lsls	r3, r2, #28
 8004d30:	bf44      	itt	mi
 8004d32:	232b      	movmi	r3, #43	; 0x2b
 8004d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d38:	f89a 3000 	ldrb.w	r3, [sl]
 8004d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d3e:	d015      	beq.n	8004d6c <_vfiprintf_r+0x13c>
 8004d40:	4654      	mov	r4, sl
 8004d42:	2000      	movs	r0, #0
 8004d44:	f04f 0c0a 	mov.w	ip, #10
 8004d48:	9a07      	ldr	r2, [sp, #28]
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d50:	3b30      	subs	r3, #48	; 0x30
 8004d52:	2b09      	cmp	r3, #9
 8004d54:	d94e      	bls.n	8004df4 <_vfiprintf_r+0x1c4>
 8004d56:	b1b0      	cbz	r0, 8004d86 <_vfiprintf_r+0x156>
 8004d58:	9207      	str	r2, [sp, #28]
 8004d5a:	e014      	b.n	8004d86 <_vfiprintf_r+0x156>
 8004d5c:	eba0 0308 	sub.w	r3, r0, r8
 8004d60:	fa09 f303 	lsl.w	r3, r9, r3
 8004d64:	4313      	orrs	r3, r2
 8004d66:	46a2      	mov	sl, r4
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	e7d2      	b.n	8004d12 <_vfiprintf_r+0xe2>
 8004d6c:	9b03      	ldr	r3, [sp, #12]
 8004d6e:	1d19      	adds	r1, r3, #4
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	9103      	str	r1, [sp, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	bfbb      	ittet	lt
 8004d78:	425b      	neglt	r3, r3
 8004d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d7e:	9307      	strge	r3, [sp, #28]
 8004d80:	9307      	strlt	r3, [sp, #28]
 8004d82:	bfb8      	it	lt
 8004d84:	9204      	strlt	r2, [sp, #16]
 8004d86:	7823      	ldrb	r3, [r4, #0]
 8004d88:	2b2e      	cmp	r3, #46	; 0x2e
 8004d8a:	d10c      	bne.n	8004da6 <_vfiprintf_r+0x176>
 8004d8c:	7863      	ldrb	r3, [r4, #1]
 8004d8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004d90:	d135      	bne.n	8004dfe <_vfiprintf_r+0x1ce>
 8004d92:	9b03      	ldr	r3, [sp, #12]
 8004d94:	3402      	adds	r4, #2
 8004d96:	1d1a      	adds	r2, r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	9203      	str	r2, [sp, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	bfb8      	it	lt
 8004da0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004da4:	9305      	str	r3, [sp, #20]
 8004da6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004e80 <_vfiprintf_r+0x250>
 8004daa:	2203      	movs	r2, #3
 8004dac:	4650      	mov	r0, sl
 8004dae:	7821      	ldrb	r1, [r4, #0]
 8004db0:	f000 fce8 	bl	8005784 <memchr>
 8004db4:	b140      	cbz	r0, 8004dc8 <_vfiprintf_r+0x198>
 8004db6:	2340      	movs	r3, #64	; 0x40
 8004db8:	eba0 000a 	sub.w	r0, r0, sl
 8004dbc:	fa03 f000 	lsl.w	r0, r3, r0
 8004dc0:	9b04      	ldr	r3, [sp, #16]
 8004dc2:	3401      	adds	r4, #1
 8004dc4:	4303      	orrs	r3, r0
 8004dc6:	9304      	str	r3, [sp, #16]
 8004dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dcc:	2206      	movs	r2, #6
 8004dce:	482d      	ldr	r0, [pc, #180]	; (8004e84 <_vfiprintf_r+0x254>)
 8004dd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dd4:	f000 fcd6 	bl	8005784 <memchr>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d03f      	beq.n	8004e5c <_vfiprintf_r+0x22c>
 8004ddc:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <_vfiprintf_r+0x258>)
 8004dde:	bb1b      	cbnz	r3, 8004e28 <_vfiprintf_r+0x1f8>
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	3307      	adds	r3, #7
 8004de4:	f023 0307 	bic.w	r3, r3, #7
 8004de8:	3308      	adds	r3, #8
 8004dea:	9303      	str	r3, [sp, #12]
 8004dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dee:	443b      	add	r3, r7
 8004df0:	9309      	str	r3, [sp, #36]	; 0x24
 8004df2:	e767      	b.n	8004cc4 <_vfiprintf_r+0x94>
 8004df4:	460c      	mov	r4, r1
 8004df6:	2001      	movs	r0, #1
 8004df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dfc:	e7a5      	b.n	8004d4a <_vfiprintf_r+0x11a>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f04f 0c0a 	mov.w	ip, #10
 8004e04:	4619      	mov	r1, r3
 8004e06:	3401      	adds	r4, #1
 8004e08:	9305      	str	r3, [sp, #20]
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e10:	3a30      	subs	r2, #48	; 0x30
 8004e12:	2a09      	cmp	r2, #9
 8004e14:	d903      	bls.n	8004e1e <_vfiprintf_r+0x1ee>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0c5      	beq.n	8004da6 <_vfiprintf_r+0x176>
 8004e1a:	9105      	str	r1, [sp, #20]
 8004e1c:	e7c3      	b.n	8004da6 <_vfiprintf_r+0x176>
 8004e1e:	4604      	mov	r4, r0
 8004e20:	2301      	movs	r3, #1
 8004e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e26:	e7f0      	b.n	8004e0a <_vfiprintf_r+0x1da>
 8004e28:	ab03      	add	r3, sp, #12
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	4630      	mov	r0, r6
 8004e30:	4b16      	ldr	r3, [pc, #88]	; (8004e8c <_vfiprintf_r+0x25c>)
 8004e32:	a904      	add	r1, sp, #16
 8004e34:	f3af 8000 	nop.w
 8004e38:	4607      	mov	r7, r0
 8004e3a:	1c78      	adds	r0, r7, #1
 8004e3c:	d1d6      	bne.n	8004dec <_vfiprintf_r+0x1bc>
 8004e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e40:	07d9      	lsls	r1, r3, #31
 8004e42:	d405      	bmi.n	8004e50 <_vfiprintf_r+0x220>
 8004e44:	89ab      	ldrh	r3, [r5, #12]
 8004e46:	059a      	lsls	r2, r3, #22
 8004e48:	d402      	bmi.n	8004e50 <_vfiprintf_r+0x220>
 8004e4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e4c:	f000 fc33 	bl	80056b6 <__retarget_lock_release_recursive>
 8004e50:	89ab      	ldrh	r3, [r5, #12]
 8004e52:	065b      	lsls	r3, r3, #25
 8004e54:	f53f af12 	bmi.w	8004c7c <_vfiprintf_r+0x4c>
 8004e58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e5a:	e711      	b.n	8004c80 <_vfiprintf_r+0x50>
 8004e5c:	ab03      	add	r3, sp, #12
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	462a      	mov	r2, r5
 8004e62:	4630      	mov	r0, r6
 8004e64:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <_vfiprintf_r+0x25c>)
 8004e66:	a904      	add	r1, sp, #16
 8004e68:	f000 f882 	bl	8004f70 <_printf_i>
 8004e6c:	e7e4      	b.n	8004e38 <_vfiprintf_r+0x208>
 8004e6e:	bf00      	nop
 8004e70:	08006714 	.word	0x08006714
 8004e74:	08006734 	.word	0x08006734
 8004e78:	080066f4 	.word	0x080066f4
 8004e7c:	080066be 	.word	0x080066be
 8004e80:	080066c4 	.word	0x080066c4
 8004e84:	080066c8 	.word	0x080066c8
 8004e88:	00000000 	.word	0x00000000
 8004e8c:	08004c0b 	.word	0x08004c0b

08004e90 <_printf_common>:
 8004e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e94:	4616      	mov	r6, r2
 8004e96:	4699      	mov	r9, r3
 8004e98:	688a      	ldr	r2, [r1, #8]
 8004e9a:	690b      	ldr	r3, [r1, #16]
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	bfb8      	it	lt
 8004ea2:	4613      	movlt	r3, r2
 8004ea4:	6033      	str	r3, [r6, #0]
 8004ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eaa:	460c      	mov	r4, r1
 8004eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eb0:	b10a      	cbz	r2, 8004eb6 <_printf_common+0x26>
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	0699      	lsls	r1, r3, #26
 8004eba:	bf42      	ittt	mi
 8004ebc:	6833      	ldrmi	r3, [r6, #0]
 8004ebe:	3302      	addmi	r3, #2
 8004ec0:	6033      	strmi	r3, [r6, #0]
 8004ec2:	6825      	ldr	r5, [r4, #0]
 8004ec4:	f015 0506 	ands.w	r5, r5, #6
 8004ec8:	d106      	bne.n	8004ed8 <_printf_common+0x48>
 8004eca:	f104 0a19 	add.w	sl, r4, #25
 8004ece:	68e3      	ldr	r3, [r4, #12]
 8004ed0:	6832      	ldr	r2, [r6, #0]
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	42ab      	cmp	r3, r5
 8004ed6:	dc28      	bgt.n	8004f2a <_printf_common+0x9a>
 8004ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004edc:	1e13      	subs	r3, r2, #0
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	bf18      	it	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	0692      	lsls	r2, r2, #26
 8004ee6:	d42d      	bmi.n	8004f44 <_printf_common+0xb4>
 8004ee8:	4649      	mov	r1, r9
 8004eea:	4638      	mov	r0, r7
 8004eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ef0:	47c0      	blx	r8
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d020      	beq.n	8004f38 <_printf_common+0xa8>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	68e5      	ldr	r5, [r4, #12]
 8004efa:	f003 0306 	and.w	r3, r3, #6
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	bf18      	it	ne
 8004f02:	2500      	movne	r5, #0
 8004f04:	6832      	ldr	r2, [r6, #0]
 8004f06:	f04f 0600 	mov.w	r6, #0
 8004f0a:	68a3      	ldr	r3, [r4, #8]
 8004f0c:	bf08      	it	eq
 8004f0e:	1aad      	subeq	r5, r5, r2
 8004f10:	6922      	ldr	r2, [r4, #16]
 8004f12:	bf08      	it	eq
 8004f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	bfc4      	itt	gt
 8004f1c:	1a9b      	subgt	r3, r3, r2
 8004f1e:	18ed      	addgt	r5, r5, r3
 8004f20:	341a      	adds	r4, #26
 8004f22:	42b5      	cmp	r5, r6
 8004f24:	d11a      	bne.n	8004f5c <_printf_common+0xcc>
 8004f26:	2000      	movs	r0, #0
 8004f28:	e008      	b.n	8004f3c <_printf_common+0xac>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	4649      	mov	r1, r9
 8004f30:	4638      	mov	r0, r7
 8004f32:	47c0      	blx	r8
 8004f34:	3001      	adds	r0, #1
 8004f36:	d103      	bne.n	8004f40 <_printf_common+0xb0>
 8004f38:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f40:	3501      	adds	r5, #1
 8004f42:	e7c4      	b.n	8004ece <_printf_common+0x3e>
 8004f44:	2030      	movs	r0, #48	; 0x30
 8004f46:	18e1      	adds	r1, r4, r3
 8004f48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f52:	4422      	add	r2, r4
 8004f54:	3302      	adds	r3, #2
 8004f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f5a:	e7c5      	b.n	8004ee8 <_printf_common+0x58>
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	4622      	mov	r2, r4
 8004f60:	4649      	mov	r1, r9
 8004f62:	4638      	mov	r0, r7
 8004f64:	47c0      	blx	r8
 8004f66:	3001      	adds	r0, #1
 8004f68:	d0e6      	beq.n	8004f38 <_printf_common+0xa8>
 8004f6a:	3601      	adds	r6, #1
 8004f6c:	e7d9      	b.n	8004f22 <_printf_common+0x92>
	...

08004f70 <_printf_i>:
 8004f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f74:	7e0f      	ldrb	r7, [r1, #24]
 8004f76:	4691      	mov	r9, r2
 8004f78:	2f78      	cmp	r7, #120	; 0x78
 8004f7a:	4680      	mov	r8, r0
 8004f7c:	460c      	mov	r4, r1
 8004f7e:	469a      	mov	sl, r3
 8004f80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f86:	d807      	bhi.n	8004f98 <_printf_i+0x28>
 8004f88:	2f62      	cmp	r7, #98	; 0x62
 8004f8a:	d80a      	bhi.n	8004fa2 <_printf_i+0x32>
 8004f8c:	2f00      	cmp	r7, #0
 8004f8e:	f000 80d9 	beq.w	8005144 <_printf_i+0x1d4>
 8004f92:	2f58      	cmp	r7, #88	; 0x58
 8004f94:	f000 80a4 	beq.w	80050e0 <_printf_i+0x170>
 8004f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fa0:	e03a      	b.n	8005018 <_printf_i+0xa8>
 8004fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fa6:	2b15      	cmp	r3, #21
 8004fa8:	d8f6      	bhi.n	8004f98 <_printf_i+0x28>
 8004faa:	a101      	add	r1, pc, #4	; (adr r1, 8004fb0 <_printf_i+0x40>)
 8004fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fb0:	08005009 	.word	0x08005009
 8004fb4:	0800501d 	.word	0x0800501d
 8004fb8:	08004f99 	.word	0x08004f99
 8004fbc:	08004f99 	.word	0x08004f99
 8004fc0:	08004f99 	.word	0x08004f99
 8004fc4:	08004f99 	.word	0x08004f99
 8004fc8:	0800501d 	.word	0x0800501d
 8004fcc:	08004f99 	.word	0x08004f99
 8004fd0:	08004f99 	.word	0x08004f99
 8004fd4:	08004f99 	.word	0x08004f99
 8004fd8:	08004f99 	.word	0x08004f99
 8004fdc:	0800512b 	.word	0x0800512b
 8004fe0:	0800504d 	.word	0x0800504d
 8004fe4:	0800510d 	.word	0x0800510d
 8004fe8:	08004f99 	.word	0x08004f99
 8004fec:	08004f99 	.word	0x08004f99
 8004ff0:	0800514d 	.word	0x0800514d
 8004ff4:	08004f99 	.word	0x08004f99
 8004ff8:	0800504d 	.word	0x0800504d
 8004ffc:	08004f99 	.word	0x08004f99
 8005000:	08004f99 	.word	0x08004f99
 8005004:	08005115 	.word	0x08005115
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	1d1a      	adds	r2, r3, #4
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	602a      	str	r2, [r5, #0]
 8005010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005018:	2301      	movs	r3, #1
 800501a:	e0a4      	b.n	8005166 <_printf_i+0x1f6>
 800501c:	6820      	ldr	r0, [r4, #0]
 800501e:	6829      	ldr	r1, [r5, #0]
 8005020:	0606      	lsls	r6, r0, #24
 8005022:	f101 0304 	add.w	r3, r1, #4
 8005026:	d50a      	bpl.n	800503e <_printf_i+0xce>
 8005028:	680e      	ldr	r6, [r1, #0]
 800502a:	602b      	str	r3, [r5, #0]
 800502c:	2e00      	cmp	r6, #0
 800502e:	da03      	bge.n	8005038 <_printf_i+0xc8>
 8005030:	232d      	movs	r3, #45	; 0x2d
 8005032:	4276      	negs	r6, r6
 8005034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005038:	230a      	movs	r3, #10
 800503a:	485e      	ldr	r0, [pc, #376]	; (80051b4 <_printf_i+0x244>)
 800503c:	e019      	b.n	8005072 <_printf_i+0x102>
 800503e:	680e      	ldr	r6, [r1, #0]
 8005040:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005044:	602b      	str	r3, [r5, #0]
 8005046:	bf18      	it	ne
 8005048:	b236      	sxthne	r6, r6
 800504a:	e7ef      	b.n	800502c <_printf_i+0xbc>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	6820      	ldr	r0, [r4, #0]
 8005050:	1d19      	adds	r1, r3, #4
 8005052:	6029      	str	r1, [r5, #0]
 8005054:	0601      	lsls	r1, r0, #24
 8005056:	d501      	bpl.n	800505c <_printf_i+0xec>
 8005058:	681e      	ldr	r6, [r3, #0]
 800505a:	e002      	b.n	8005062 <_printf_i+0xf2>
 800505c:	0646      	lsls	r6, r0, #25
 800505e:	d5fb      	bpl.n	8005058 <_printf_i+0xe8>
 8005060:	881e      	ldrh	r6, [r3, #0]
 8005062:	2f6f      	cmp	r7, #111	; 0x6f
 8005064:	bf0c      	ite	eq
 8005066:	2308      	moveq	r3, #8
 8005068:	230a      	movne	r3, #10
 800506a:	4852      	ldr	r0, [pc, #328]	; (80051b4 <_printf_i+0x244>)
 800506c:	2100      	movs	r1, #0
 800506e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005072:	6865      	ldr	r5, [r4, #4]
 8005074:	2d00      	cmp	r5, #0
 8005076:	bfa8      	it	ge
 8005078:	6821      	ldrge	r1, [r4, #0]
 800507a:	60a5      	str	r5, [r4, #8]
 800507c:	bfa4      	itt	ge
 800507e:	f021 0104 	bicge.w	r1, r1, #4
 8005082:	6021      	strge	r1, [r4, #0]
 8005084:	b90e      	cbnz	r6, 800508a <_printf_i+0x11a>
 8005086:	2d00      	cmp	r5, #0
 8005088:	d04d      	beq.n	8005126 <_printf_i+0x1b6>
 800508a:	4615      	mov	r5, r2
 800508c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005090:	fb03 6711 	mls	r7, r3, r1, r6
 8005094:	5dc7      	ldrb	r7, [r0, r7]
 8005096:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800509a:	4637      	mov	r7, r6
 800509c:	42bb      	cmp	r3, r7
 800509e:	460e      	mov	r6, r1
 80050a0:	d9f4      	bls.n	800508c <_printf_i+0x11c>
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d10b      	bne.n	80050be <_printf_i+0x14e>
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	07de      	lsls	r6, r3, #31
 80050aa:	d508      	bpl.n	80050be <_printf_i+0x14e>
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	6861      	ldr	r1, [r4, #4]
 80050b0:	4299      	cmp	r1, r3
 80050b2:	bfde      	ittt	le
 80050b4:	2330      	movle	r3, #48	; 0x30
 80050b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050be:	1b52      	subs	r2, r2, r5
 80050c0:	6122      	str	r2, [r4, #16]
 80050c2:	464b      	mov	r3, r9
 80050c4:	4621      	mov	r1, r4
 80050c6:	4640      	mov	r0, r8
 80050c8:	f8cd a000 	str.w	sl, [sp]
 80050cc:	aa03      	add	r2, sp, #12
 80050ce:	f7ff fedf 	bl	8004e90 <_printf_common>
 80050d2:	3001      	adds	r0, #1
 80050d4:	d14c      	bne.n	8005170 <_printf_i+0x200>
 80050d6:	f04f 30ff 	mov.w	r0, #4294967295
 80050da:	b004      	add	sp, #16
 80050dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e0:	4834      	ldr	r0, [pc, #208]	; (80051b4 <_printf_i+0x244>)
 80050e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050e6:	6829      	ldr	r1, [r5, #0]
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80050ee:	6029      	str	r1, [r5, #0]
 80050f0:	061d      	lsls	r5, r3, #24
 80050f2:	d514      	bpl.n	800511e <_printf_i+0x1ae>
 80050f4:	07df      	lsls	r7, r3, #31
 80050f6:	bf44      	itt	mi
 80050f8:	f043 0320 	orrmi.w	r3, r3, #32
 80050fc:	6023      	strmi	r3, [r4, #0]
 80050fe:	b91e      	cbnz	r6, 8005108 <_printf_i+0x198>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	f023 0320 	bic.w	r3, r3, #32
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	2310      	movs	r3, #16
 800510a:	e7af      	b.n	800506c <_printf_i+0xfc>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	f043 0320 	orr.w	r3, r3, #32
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	2378      	movs	r3, #120	; 0x78
 8005116:	4828      	ldr	r0, [pc, #160]	; (80051b8 <_printf_i+0x248>)
 8005118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800511c:	e7e3      	b.n	80050e6 <_printf_i+0x176>
 800511e:	0659      	lsls	r1, r3, #25
 8005120:	bf48      	it	mi
 8005122:	b2b6      	uxthmi	r6, r6
 8005124:	e7e6      	b.n	80050f4 <_printf_i+0x184>
 8005126:	4615      	mov	r5, r2
 8005128:	e7bb      	b.n	80050a2 <_printf_i+0x132>
 800512a:	682b      	ldr	r3, [r5, #0]
 800512c:	6826      	ldr	r6, [r4, #0]
 800512e:	1d18      	adds	r0, r3, #4
 8005130:	6961      	ldr	r1, [r4, #20]
 8005132:	6028      	str	r0, [r5, #0]
 8005134:	0635      	lsls	r5, r6, #24
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	d501      	bpl.n	800513e <_printf_i+0x1ce>
 800513a:	6019      	str	r1, [r3, #0]
 800513c:	e002      	b.n	8005144 <_printf_i+0x1d4>
 800513e:	0670      	lsls	r0, r6, #25
 8005140:	d5fb      	bpl.n	800513a <_printf_i+0x1ca>
 8005142:	8019      	strh	r1, [r3, #0]
 8005144:	2300      	movs	r3, #0
 8005146:	4615      	mov	r5, r2
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	e7ba      	b.n	80050c2 <_printf_i+0x152>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	2100      	movs	r1, #0
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	602a      	str	r2, [r5, #0]
 8005154:	681d      	ldr	r5, [r3, #0]
 8005156:	6862      	ldr	r2, [r4, #4]
 8005158:	4628      	mov	r0, r5
 800515a:	f000 fb13 	bl	8005784 <memchr>
 800515e:	b108      	cbz	r0, 8005164 <_printf_i+0x1f4>
 8005160:	1b40      	subs	r0, r0, r5
 8005162:	6060      	str	r0, [r4, #4]
 8005164:	6863      	ldr	r3, [r4, #4]
 8005166:	6123      	str	r3, [r4, #16]
 8005168:	2300      	movs	r3, #0
 800516a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800516e:	e7a8      	b.n	80050c2 <_printf_i+0x152>
 8005170:	462a      	mov	r2, r5
 8005172:	4649      	mov	r1, r9
 8005174:	4640      	mov	r0, r8
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	47d0      	blx	sl
 800517a:	3001      	adds	r0, #1
 800517c:	d0ab      	beq.n	80050d6 <_printf_i+0x166>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	079b      	lsls	r3, r3, #30
 8005182:	d413      	bmi.n	80051ac <_printf_i+0x23c>
 8005184:	68e0      	ldr	r0, [r4, #12]
 8005186:	9b03      	ldr	r3, [sp, #12]
 8005188:	4298      	cmp	r0, r3
 800518a:	bfb8      	it	lt
 800518c:	4618      	movlt	r0, r3
 800518e:	e7a4      	b.n	80050da <_printf_i+0x16a>
 8005190:	2301      	movs	r3, #1
 8005192:	4632      	mov	r2, r6
 8005194:	4649      	mov	r1, r9
 8005196:	4640      	mov	r0, r8
 8005198:	47d0      	blx	sl
 800519a:	3001      	adds	r0, #1
 800519c:	d09b      	beq.n	80050d6 <_printf_i+0x166>
 800519e:	3501      	adds	r5, #1
 80051a0:	68e3      	ldr	r3, [r4, #12]
 80051a2:	9903      	ldr	r1, [sp, #12]
 80051a4:	1a5b      	subs	r3, r3, r1
 80051a6:	42ab      	cmp	r3, r5
 80051a8:	dcf2      	bgt.n	8005190 <_printf_i+0x220>
 80051aa:	e7eb      	b.n	8005184 <_printf_i+0x214>
 80051ac:	2500      	movs	r5, #0
 80051ae:	f104 0619 	add.w	r6, r4, #25
 80051b2:	e7f5      	b.n	80051a0 <_printf_i+0x230>
 80051b4:	080066cf 	.word	0x080066cf
 80051b8:	080066e0 	.word	0x080066e0

080051bc <__swbuf_r>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	460e      	mov	r6, r1
 80051c0:	4614      	mov	r4, r2
 80051c2:	4605      	mov	r5, r0
 80051c4:	b118      	cbz	r0, 80051ce <__swbuf_r+0x12>
 80051c6:	6983      	ldr	r3, [r0, #24]
 80051c8:	b90b      	cbnz	r3, 80051ce <__swbuf_r+0x12>
 80051ca:	f000 f9d5 	bl	8005578 <__sinit>
 80051ce:	4b21      	ldr	r3, [pc, #132]	; (8005254 <__swbuf_r+0x98>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d12b      	bne.n	800522c <__swbuf_r+0x70>
 80051d4:	686c      	ldr	r4, [r5, #4]
 80051d6:	69a3      	ldr	r3, [r4, #24]
 80051d8:	60a3      	str	r3, [r4, #8]
 80051da:	89a3      	ldrh	r3, [r4, #12]
 80051dc:	071a      	lsls	r2, r3, #28
 80051de:	d52f      	bpl.n	8005240 <__swbuf_r+0x84>
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	b36b      	cbz	r3, 8005240 <__swbuf_r+0x84>
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	b2f6      	uxtb	r6, r6
 80051ea:	1ac0      	subs	r0, r0, r3
 80051ec:	6963      	ldr	r3, [r4, #20]
 80051ee:	4637      	mov	r7, r6
 80051f0:	4283      	cmp	r3, r0
 80051f2:	dc04      	bgt.n	80051fe <__swbuf_r+0x42>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 f92a 	bl	8005450 <_fflush_r>
 80051fc:	bb30      	cbnz	r0, 800524c <__swbuf_r+0x90>
 80051fe:	68a3      	ldr	r3, [r4, #8]
 8005200:	3001      	adds	r0, #1
 8005202:	3b01      	subs	r3, #1
 8005204:	60a3      	str	r3, [r4, #8]
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	6022      	str	r2, [r4, #0]
 800520c:	701e      	strb	r6, [r3, #0]
 800520e:	6963      	ldr	r3, [r4, #20]
 8005210:	4283      	cmp	r3, r0
 8005212:	d004      	beq.n	800521e <__swbuf_r+0x62>
 8005214:	89a3      	ldrh	r3, [r4, #12]
 8005216:	07db      	lsls	r3, r3, #31
 8005218:	d506      	bpl.n	8005228 <__swbuf_r+0x6c>
 800521a:	2e0a      	cmp	r6, #10
 800521c:	d104      	bne.n	8005228 <__swbuf_r+0x6c>
 800521e:	4621      	mov	r1, r4
 8005220:	4628      	mov	r0, r5
 8005222:	f000 f915 	bl	8005450 <_fflush_r>
 8005226:	b988      	cbnz	r0, 800524c <__swbuf_r+0x90>
 8005228:	4638      	mov	r0, r7
 800522a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <__swbuf_r+0x9c>)
 800522e:	429c      	cmp	r4, r3
 8005230:	d101      	bne.n	8005236 <__swbuf_r+0x7a>
 8005232:	68ac      	ldr	r4, [r5, #8]
 8005234:	e7cf      	b.n	80051d6 <__swbuf_r+0x1a>
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <__swbuf_r+0xa0>)
 8005238:	429c      	cmp	r4, r3
 800523a:	bf08      	it	eq
 800523c:	68ec      	ldreq	r4, [r5, #12]
 800523e:	e7ca      	b.n	80051d6 <__swbuf_r+0x1a>
 8005240:	4621      	mov	r1, r4
 8005242:	4628      	mov	r0, r5
 8005244:	f000 f80c 	bl	8005260 <__swsetup_r>
 8005248:	2800      	cmp	r0, #0
 800524a:	d0cb      	beq.n	80051e4 <__swbuf_r+0x28>
 800524c:	f04f 37ff 	mov.w	r7, #4294967295
 8005250:	e7ea      	b.n	8005228 <__swbuf_r+0x6c>
 8005252:	bf00      	nop
 8005254:	08006714 	.word	0x08006714
 8005258:	08006734 	.word	0x08006734
 800525c:	080066f4 	.word	0x080066f4

08005260 <__swsetup_r>:
 8005260:	4b32      	ldr	r3, [pc, #200]	; (800532c <__swsetup_r+0xcc>)
 8005262:	b570      	push	{r4, r5, r6, lr}
 8005264:	681d      	ldr	r5, [r3, #0]
 8005266:	4606      	mov	r6, r0
 8005268:	460c      	mov	r4, r1
 800526a:	b125      	cbz	r5, 8005276 <__swsetup_r+0x16>
 800526c:	69ab      	ldr	r3, [r5, #24]
 800526e:	b913      	cbnz	r3, 8005276 <__swsetup_r+0x16>
 8005270:	4628      	mov	r0, r5
 8005272:	f000 f981 	bl	8005578 <__sinit>
 8005276:	4b2e      	ldr	r3, [pc, #184]	; (8005330 <__swsetup_r+0xd0>)
 8005278:	429c      	cmp	r4, r3
 800527a:	d10f      	bne.n	800529c <__swsetup_r+0x3c>
 800527c:	686c      	ldr	r4, [r5, #4]
 800527e:	89a3      	ldrh	r3, [r4, #12]
 8005280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005284:	0719      	lsls	r1, r3, #28
 8005286:	d42c      	bmi.n	80052e2 <__swsetup_r+0x82>
 8005288:	06dd      	lsls	r5, r3, #27
 800528a:	d411      	bmi.n	80052b0 <__swsetup_r+0x50>
 800528c:	2309      	movs	r3, #9
 800528e:	6033      	str	r3, [r6, #0]
 8005290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005294:	f04f 30ff 	mov.w	r0, #4294967295
 8005298:	81a3      	strh	r3, [r4, #12]
 800529a:	e03e      	b.n	800531a <__swsetup_r+0xba>
 800529c:	4b25      	ldr	r3, [pc, #148]	; (8005334 <__swsetup_r+0xd4>)
 800529e:	429c      	cmp	r4, r3
 80052a0:	d101      	bne.n	80052a6 <__swsetup_r+0x46>
 80052a2:	68ac      	ldr	r4, [r5, #8]
 80052a4:	e7eb      	b.n	800527e <__swsetup_r+0x1e>
 80052a6:	4b24      	ldr	r3, [pc, #144]	; (8005338 <__swsetup_r+0xd8>)
 80052a8:	429c      	cmp	r4, r3
 80052aa:	bf08      	it	eq
 80052ac:	68ec      	ldreq	r4, [r5, #12]
 80052ae:	e7e6      	b.n	800527e <__swsetup_r+0x1e>
 80052b0:	0758      	lsls	r0, r3, #29
 80052b2:	d512      	bpl.n	80052da <__swsetup_r+0x7a>
 80052b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052b6:	b141      	cbz	r1, 80052ca <__swsetup_r+0x6a>
 80052b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052bc:	4299      	cmp	r1, r3
 80052be:	d002      	beq.n	80052c6 <__swsetup_r+0x66>
 80052c0:	4630      	mov	r0, r6
 80052c2:	f7ff faf9 	bl	80048b8 <_free_r>
 80052c6:	2300      	movs	r3, #0
 80052c8:	6363      	str	r3, [r4, #52]	; 0x34
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052d0:	81a3      	strh	r3, [r4, #12]
 80052d2:	2300      	movs	r3, #0
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	f043 0308 	orr.w	r3, r3, #8
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	b94b      	cbnz	r3, 80052fa <__swsetup_r+0x9a>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f0:	d003      	beq.n	80052fa <__swsetup_r+0x9a>
 80052f2:	4621      	mov	r1, r4
 80052f4:	4630      	mov	r0, r6
 80052f6:	f000 fa05 	bl	8005704 <__smakebuf_r>
 80052fa:	89a0      	ldrh	r0, [r4, #12]
 80052fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005300:	f010 0301 	ands.w	r3, r0, #1
 8005304:	d00a      	beq.n	800531c <__swsetup_r+0xbc>
 8005306:	2300      	movs	r3, #0
 8005308:	60a3      	str	r3, [r4, #8]
 800530a:	6963      	ldr	r3, [r4, #20]
 800530c:	425b      	negs	r3, r3
 800530e:	61a3      	str	r3, [r4, #24]
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	b943      	cbnz	r3, 8005326 <__swsetup_r+0xc6>
 8005314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005318:	d1ba      	bne.n	8005290 <__swsetup_r+0x30>
 800531a:	bd70      	pop	{r4, r5, r6, pc}
 800531c:	0781      	lsls	r1, r0, #30
 800531e:	bf58      	it	pl
 8005320:	6963      	ldrpl	r3, [r4, #20]
 8005322:	60a3      	str	r3, [r4, #8]
 8005324:	e7f4      	b.n	8005310 <__swsetup_r+0xb0>
 8005326:	2000      	movs	r0, #0
 8005328:	e7f7      	b.n	800531a <__swsetup_r+0xba>
 800532a:	bf00      	nop
 800532c:	20000014 	.word	0x20000014
 8005330:	08006714 	.word	0x08006714
 8005334:	08006734 	.word	0x08006734
 8005338:	080066f4 	.word	0x080066f4

0800533c <abort>:
 800533c:	2006      	movs	r0, #6
 800533e:	b508      	push	{r3, lr}
 8005340:	f000 fa56 	bl	80057f0 <raise>
 8005344:	2001      	movs	r0, #1
 8005346:	f7fd fc0a 	bl	8002b5e <_exit>
	...

0800534c <__sflush_r>:
 800534c:	898a      	ldrh	r2, [r1, #12]
 800534e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005350:	4605      	mov	r5, r0
 8005352:	0710      	lsls	r0, r2, #28
 8005354:	460c      	mov	r4, r1
 8005356:	d457      	bmi.n	8005408 <__sflush_r+0xbc>
 8005358:	684b      	ldr	r3, [r1, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	dc04      	bgt.n	8005368 <__sflush_r+0x1c>
 800535e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005360:	2b00      	cmp	r3, #0
 8005362:	dc01      	bgt.n	8005368 <__sflush_r+0x1c>
 8005364:	2000      	movs	r0, #0
 8005366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800536a:	2e00      	cmp	r6, #0
 800536c:	d0fa      	beq.n	8005364 <__sflush_r+0x18>
 800536e:	2300      	movs	r3, #0
 8005370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005374:	682f      	ldr	r7, [r5, #0]
 8005376:	602b      	str	r3, [r5, #0]
 8005378:	d032      	beq.n	80053e0 <__sflush_r+0x94>
 800537a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	075a      	lsls	r2, r3, #29
 8005380:	d505      	bpl.n	800538e <__sflush_r+0x42>
 8005382:	6863      	ldr	r3, [r4, #4]
 8005384:	1ac0      	subs	r0, r0, r3
 8005386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005388:	b10b      	cbz	r3, 800538e <__sflush_r+0x42>
 800538a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800538c:	1ac0      	subs	r0, r0, r3
 800538e:	2300      	movs	r3, #0
 8005390:	4602      	mov	r2, r0
 8005392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005394:	4628      	mov	r0, r5
 8005396:	6a21      	ldr	r1, [r4, #32]
 8005398:	47b0      	blx	r6
 800539a:	1c43      	adds	r3, r0, #1
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	d106      	bne.n	80053ae <__sflush_r+0x62>
 80053a0:	6829      	ldr	r1, [r5, #0]
 80053a2:	291d      	cmp	r1, #29
 80053a4:	d82c      	bhi.n	8005400 <__sflush_r+0xb4>
 80053a6:	4a29      	ldr	r2, [pc, #164]	; (800544c <__sflush_r+0x100>)
 80053a8:	40ca      	lsrs	r2, r1
 80053aa:	07d6      	lsls	r6, r2, #31
 80053ac:	d528      	bpl.n	8005400 <__sflush_r+0xb4>
 80053ae:	2200      	movs	r2, #0
 80053b0:	6062      	str	r2, [r4, #4]
 80053b2:	6922      	ldr	r2, [r4, #16]
 80053b4:	04d9      	lsls	r1, r3, #19
 80053b6:	6022      	str	r2, [r4, #0]
 80053b8:	d504      	bpl.n	80053c4 <__sflush_r+0x78>
 80053ba:	1c42      	adds	r2, r0, #1
 80053bc:	d101      	bne.n	80053c2 <__sflush_r+0x76>
 80053be:	682b      	ldr	r3, [r5, #0]
 80053c0:	b903      	cbnz	r3, 80053c4 <__sflush_r+0x78>
 80053c2:	6560      	str	r0, [r4, #84]	; 0x54
 80053c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053c6:	602f      	str	r7, [r5, #0]
 80053c8:	2900      	cmp	r1, #0
 80053ca:	d0cb      	beq.n	8005364 <__sflush_r+0x18>
 80053cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053d0:	4299      	cmp	r1, r3
 80053d2:	d002      	beq.n	80053da <__sflush_r+0x8e>
 80053d4:	4628      	mov	r0, r5
 80053d6:	f7ff fa6f 	bl	80048b8 <_free_r>
 80053da:	2000      	movs	r0, #0
 80053dc:	6360      	str	r0, [r4, #52]	; 0x34
 80053de:	e7c2      	b.n	8005366 <__sflush_r+0x1a>
 80053e0:	6a21      	ldr	r1, [r4, #32]
 80053e2:	2301      	movs	r3, #1
 80053e4:	4628      	mov	r0, r5
 80053e6:	47b0      	blx	r6
 80053e8:	1c41      	adds	r1, r0, #1
 80053ea:	d1c7      	bne.n	800537c <__sflush_r+0x30>
 80053ec:	682b      	ldr	r3, [r5, #0]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0c4      	beq.n	800537c <__sflush_r+0x30>
 80053f2:	2b1d      	cmp	r3, #29
 80053f4:	d001      	beq.n	80053fa <__sflush_r+0xae>
 80053f6:	2b16      	cmp	r3, #22
 80053f8:	d101      	bne.n	80053fe <__sflush_r+0xb2>
 80053fa:	602f      	str	r7, [r5, #0]
 80053fc:	e7b2      	b.n	8005364 <__sflush_r+0x18>
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	e7ae      	b.n	8005366 <__sflush_r+0x1a>
 8005408:	690f      	ldr	r7, [r1, #16]
 800540a:	2f00      	cmp	r7, #0
 800540c:	d0aa      	beq.n	8005364 <__sflush_r+0x18>
 800540e:	0793      	lsls	r3, r2, #30
 8005410:	bf18      	it	ne
 8005412:	2300      	movne	r3, #0
 8005414:	680e      	ldr	r6, [r1, #0]
 8005416:	bf08      	it	eq
 8005418:	694b      	ldreq	r3, [r1, #20]
 800541a:	1bf6      	subs	r6, r6, r7
 800541c:	600f      	str	r7, [r1, #0]
 800541e:	608b      	str	r3, [r1, #8]
 8005420:	2e00      	cmp	r6, #0
 8005422:	dd9f      	ble.n	8005364 <__sflush_r+0x18>
 8005424:	4633      	mov	r3, r6
 8005426:	463a      	mov	r2, r7
 8005428:	4628      	mov	r0, r5
 800542a:	6a21      	ldr	r1, [r4, #32]
 800542c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005430:	47e0      	blx	ip
 8005432:	2800      	cmp	r0, #0
 8005434:	dc06      	bgt.n	8005444 <__sflush_r+0xf8>
 8005436:	89a3      	ldrh	r3, [r4, #12]
 8005438:	f04f 30ff 	mov.w	r0, #4294967295
 800543c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	e790      	b.n	8005366 <__sflush_r+0x1a>
 8005444:	4407      	add	r7, r0
 8005446:	1a36      	subs	r6, r6, r0
 8005448:	e7ea      	b.n	8005420 <__sflush_r+0xd4>
 800544a:	bf00      	nop
 800544c:	20400001 	.word	0x20400001

08005450 <_fflush_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	690b      	ldr	r3, [r1, #16]
 8005454:	4605      	mov	r5, r0
 8005456:	460c      	mov	r4, r1
 8005458:	b913      	cbnz	r3, 8005460 <_fflush_r+0x10>
 800545a:	2500      	movs	r5, #0
 800545c:	4628      	mov	r0, r5
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	b118      	cbz	r0, 800546a <_fflush_r+0x1a>
 8005462:	6983      	ldr	r3, [r0, #24]
 8005464:	b90b      	cbnz	r3, 800546a <_fflush_r+0x1a>
 8005466:	f000 f887 	bl	8005578 <__sinit>
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <_fflush_r+0x6c>)
 800546c:	429c      	cmp	r4, r3
 800546e:	d11b      	bne.n	80054a8 <_fflush_r+0x58>
 8005470:	686c      	ldr	r4, [r5, #4]
 8005472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0ef      	beq.n	800545a <_fflush_r+0xa>
 800547a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800547c:	07d0      	lsls	r0, r2, #31
 800547e:	d404      	bmi.n	800548a <_fflush_r+0x3a>
 8005480:	0599      	lsls	r1, r3, #22
 8005482:	d402      	bmi.n	800548a <_fflush_r+0x3a>
 8005484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005486:	f000 f915 	bl	80056b4 <__retarget_lock_acquire_recursive>
 800548a:	4628      	mov	r0, r5
 800548c:	4621      	mov	r1, r4
 800548e:	f7ff ff5d 	bl	800534c <__sflush_r>
 8005492:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005494:	4605      	mov	r5, r0
 8005496:	07da      	lsls	r2, r3, #31
 8005498:	d4e0      	bmi.n	800545c <_fflush_r+0xc>
 800549a:	89a3      	ldrh	r3, [r4, #12]
 800549c:	059b      	lsls	r3, r3, #22
 800549e:	d4dd      	bmi.n	800545c <_fflush_r+0xc>
 80054a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a2:	f000 f908 	bl	80056b6 <__retarget_lock_release_recursive>
 80054a6:	e7d9      	b.n	800545c <_fflush_r+0xc>
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <_fflush_r+0x70>)
 80054aa:	429c      	cmp	r4, r3
 80054ac:	d101      	bne.n	80054b2 <_fflush_r+0x62>
 80054ae:	68ac      	ldr	r4, [r5, #8]
 80054b0:	e7df      	b.n	8005472 <_fflush_r+0x22>
 80054b2:	4b04      	ldr	r3, [pc, #16]	; (80054c4 <_fflush_r+0x74>)
 80054b4:	429c      	cmp	r4, r3
 80054b6:	bf08      	it	eq
 80054b8:	68ec      	ldreq	r4, [r5, #12]
 80054ba:	e7da      	b.n	8005472 <_fflush_r+0x22>
 80054bc:	08006714 	.word	0x08006714
 80054c0:	08006734 	.word	0x08006734
 80054c4:	080066f4 	.word	0x080066f4

080054c8 <std>:
 80054c8:	2300      	movs	r3, #0
 80054ca:	b510      	push	{r4, lr}
 80054cc:	4604      	mov	r4, r0
 80054ce:	e9c0 3300 	strd	r3, r3, [r0]
 80054d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054d6:	6083      	str	r3, [r0, #8]
 80054d8:	8181      	strh	r1, [r0, #12]
 80054da:	6643      	str	r3, [r0, #100]	; 0x64
 80054dc:	81c2      	strh	r2, [r0, #14]
 80054de:	6183      	str	r3, [r0, #24]
 80054e0:	4619      	mov	r1, r3
 80054e2:	2208      	movs	r2, #8
 80054e4:	305c      	adds	r0, #92	; 0x5c
 80054e6:	f7ff f9df 	bl	80048a8 <memset>
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <std+0x38>)
 80054ec:	6224      	str	r4, [r4, #32]
 80054ee:	6263      	str	r3, [r4, #36]	; 0x24
 80054f0:	4b04      	ldr	r3, [pc, #16]	; (8005504 <std+0x3c>)
 80054f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80054f4:	4b04      	ldr	r3, [pc, #16]	; (8005508 <std+0x40>)
 80054f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80054f8:	4b04      	ldr	r3, [pc, #16]	; (800550c <std+0x44>)
 80054fa:	6323      	str	r3, [r4, #48]	; 0x30
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	bf00      	nop
 8005500:	08005829 	.word	0x08005829
 8005504:	0800584b 	.word	0x0800584b
 8005508:	08005883 	.word	0x08005883
 800550c:	080058a7 	.word	0x080058a7

08005510 <_cleanup_r>:
 8005510:	4901      	ldr	r1, [pc, #4]	; (8005518 <_cleanup_r+0x8>)
 8005512:	f000 b8af 	b.w	8005674 <_fwalk_reent>
 8005516:	bf00      	nop
 8005518:	08005451 	.word	0x08005451

0800551c <__sfmoreglue>:
 800551c:	2268      	movs	r2, #104	; 0x68
 800551e:	b570      	push	{r4, r5, r6, lr}
 8005520:	1e4d      	subs	r5, r1, #1
 8005522:	4355      	muls	r5, r2
 8005524:	460e      	mov	r6, r1
 8005526:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800552a:	f7ff fa2d 	bl	8004988 <_malloc_r>
 800552e:	4604      	mov	r4, r0
 8005530:	b140      	cbz	r0, 8005544 <__sfmoreglue+0x28>
 8005532:	2100      	movs	r1, #0
 8005534:	e9c0 1600 	strd	r1, r6, [r0]
 8005538:	300c      	adds	r0, #12
 800553a:	60a0      	str	r0, [r4, #8]
 800553c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005540:	f7ff f9b2 	bl	80048a8 <memset>
 8005544:	4620      	mov	r0, r4
 8005546:	bd70      	pop	{r4, r5, r6, pc}

08005548 <__sfp_lock_acquire>:
 8005548:	4801      	ldr	r0, [pc, #4]	; (8005550 <__sfp_lock_acquire+0x8>)
 800554a:	f000 b8b3 	b.w	80056b4 <__retarget_lock_acquire_recursive>
 800554e:	bf00      	nop
 8005550:	200001a1 	.word	0x200001a1

08005554 <__sfp_lock_release>:
 8005554:	4801      	ldr	r0, [pc, #4]	; (800555c <__sfp_lock_release+0x8>)
 8005556:	f000 b8ae 	b.w	80056b6 <__retarget_lock_release_recursive>
 800555a:	bf00      	nop
 800555c:	200001a1 	.word	0x200001a1

08005560 <__sinit_lock_acquire>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__sinit_lock_acquire+0x8>)
 8005562:	f000 b8a7 	b.w	80056b4 <__retarget_lock_acquire_recursive>
 8005566:	bf00      	nop
 8005568:	200001a2 	.word	0x200001a2

0800556c <__sinit_lock_release>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__sinit_lock_release+0x8>)
 800556e:	f000 b8a2 	b.w	80056b6 <__retarget_lock_release_recursive>
 8005572:	bf00      	nop
 8005574:	200001a2 	.word	0x200001a2

08005578 <__sinit>:
 8005578:	b510      	push	{r4, lr}
 800557a:	4604      	mov	r4, r0
 800557c:	f7ff fff0 	bl	8005560 <__sinit_lock_acquire>
 8005580:	69a3      	ldr	r3, [r4, #24]
 8005582:	b11b      	cbz	r3, 800558c <__sinit+0x14>
 8005584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005588:	f7ff bff0 	b.w	800556c <__sinit_lock_release>
 800558c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005590:	6523      	str	r3, [r4, #80]	; 0x50
 8005592:	4b13      	ldr	r3, [pc, #76]	; (80055e0 <__sinit+0x68>)
 8005594:	4a13      	ldr	r2, [pc, #76]	; (80055e4 <__sinit+0x6c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	62a2      	str	r2, [r4, #40]	; 0x28
 800559a:	42a3      	cmp	r3, r4
 800559c:	bf08      	it	eq
 800559e:	2301      	moveq	r3, #1
 80055a0:	4620      	mov	r0, r4
 80055a2:	bf08      	it	eq
 80055a4:	61a3      	streq	r3, [r4, #24]
 80055a6:	f000 f81f 	bl	80055e8 <__sfp>
 80055aa:	6060      	str	r0, [r4, #4]
 80055ac:	4620      	mov	r0, r4
 80055ae:	f000 f81b 	bl	80055e8 <__sfp>
 80055b2:	60a0      	str	r0, [r4, #8]
 80055b4:	4620      	mov	r0, r4
 80055b6:	f000 f817 	bl	80055e8 <__sfp>
 80055ba:	2200      	movs	r2, #0
 80055bc:	2104      	movs	r1, #4
 80055be:	60e0      	str	r0, [r4, #12]
 80055c0:	6860      	ldr	r0, [r4, #4]
 80055c2:	f7ff ff81 	bl	80054c8 <std>
 80055c6:	2201      	movs	r2, #1
 80055c8:	2109      	movs	r1, #9
 80055ca:	68a0      	ldr	r0, [r4, #8]
 80055cc:	f7ff ff7c 	bl	80054c8 <std>
 80055d0:	2202      	movs	r2, #2
 80055d2:	2112      	movs	r1, #18
 80055d4:	68e0      	ldr	r0, [r4, #12]
 80055d6:	f7ff ff77 	bl	80054c8 <std>
 80055da:	2301      	movs	r3, #1
 80055dc:	61a3      	str	r3, [r4, #24]
 80055de:	e7d1      	b.n	8005584 <__sinit+0xc>
 80055e0:	0800660c 	.word	0x0800660c
 80055e4:	08005511 	.word	0x08005511

080055e8 <__sfp>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	4607      	mov	r7, r0
 80055ec:	f7ff ffac 	bl	8005548 <__sfp_lock_acquire>
 80055f0:	4b1e      	ldr	r3, [pc, #120]	; (800566c <__sfp+0x84>)
 80055f2:	681e      	ldr	r6, [r3, #0]
 80055f4:	69b3      	ldr	r3, [r6, #24]
 80055f6:	b913      	cbnz	r3, 80055fe <__sfp+0x16>
 80055f8:	4630      	mov	r0, r6
 80055fa:	f7ff ffbd 	bl	8005578 <__sinit>
 80055fe:	3648      	adds	r6, #72	; 0x48
 8005600:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005604:	3b01      	subs	r3, #1
 8005606:	d503      	bpl.n	8005610 <__sfp+0x28>
 8005608:	6833      	ldr	r3, [r6, #0]
 800560a:	b30b      	cbz	r3, 8005650 <__sfp+0x68>
 800560c:	6836      	ldr	r6, [r6, #0]
 800560e:	e7f7      	b.n	8005600 <__sfp+0x18>
 8005610:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005614:	b9d5      	cbnz	r5, 800564c <__sfp+0x64>
 8005616:	4b16      	ldr	r3, [pc, #88]	; (8005670 <__sfp+0x88>)
 8005618:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800561c:	60e3      	str	r3, [r4, #12]
 800561e:	6665      	str	r5, [r4, #100]	; 0x64
 8005620:	f000 f847 	bl	80056b2 <__retarget_lock_init_recursive>
 8005624:	f7ff ff96 	bl	8005554 <__sfp_lock_release>
 8005628:	2208      	movs	r2, #8
 800562a:	4629      	mov	r1, r5
 800562c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005630:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005634:	6025      	str	r5, [r4, #0]
 8005636:	61a5      	str	r5, [r4, #24]
 8005638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800563c:	f7ff f934 	bl	80048a8 <memset>
 8005640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005648:	4620      	mov	r0, r4
 800564a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800564c:	3468      	adds	r4, #104	; 0x68
 800564e:	e7d9      	b.n	8005604 <__sfp+0x1c>
 8005650:	2104      	movs	r1, #4
 8005652:	4638      	mov	r0, r7
 8005654:	f7ff ff62 	bl	800551c <__sfmoreglue>
 8005658:	4604      	mov	r4, r0
 800565a:	6030      	str	r0, [r6, #0]
 800565c:	2800      	cmp	r0, #0
 800565e:	d1d5      	bne.n	800560c <__sfp+0x24>
 8005660:	f7ff ff78 	bl	8005554 <__sfp_lock_release>
 8005664:	230c      	movs	r3, #12
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	e7ee      	b.n	8005648 <__sfp+0x60>
 800566a:	bf00      	nop
 800566c:	0800660c 	.word	0x0800660c
 8005670:	ffff0001 	.word	0xffff0001

08005674 <_fwalk_reent>:
 8005674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005678:	4606      	mov	r6, r0
 800567a:	4688      	mov	r8, r1
 800567c:	2700      	movs	r7, #0
 800567e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005682:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005686:	f1b9 0901 	subs.w	r9, r9, #1
 800568a:	d505      	bpl.n	8005698 <_fwalk_reent+0x24>
 800568c:	6824      	ldr	r4, [r4, #0]
 800568e:	2c00      	cmp	r4, #0
 8005690:	d1f7      	bne.n	8005682 <_fwalk_reent+0xe>
 8005692:	4638      	mov	r0, r7
 8005694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005698:	89ab      	ldrh	r3, [r5, #12]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d907      	bls.n	80056ae <_fwalk_reent+0x3a>
 800569e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056a2:	3301      	adds	r3, #1
 80056a4:	d003      	beq.n	80056ae <_fwalk_reent+0x3a>
 80056a6:	4629      	mov	r1, r5
 80056a8:	4630      	mov	r0, r6
 80056aa:	47c0      	blx	r8
 80056ac:	4307      	orrs	r7, r0
 80056ae:	3568      	adds	r5, #104	; 0x68
 80056b0:	e7e9      	b.n	8005686 <_fwalk_reent+0x12>

080056b2 <__retarget_lock_init_recursive>:
 80056b2:	4770      	bx	lr

080056b4 <__retarget_lock_acquire_recursive>:
 80056b4:	4770      	bx	lr

080056b6 <__retarget_lock_release_recursive>:
 80056b6:	4770      	bx	lr

080056b8 <__swhatbuf_r>:
 80056b8:	b570      	push	{r4, r5, r6, lr}
 80056ba:	460e      	mov	r6, r1
 80056bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c0:	4614      	mov	r4, r2
 80056c2:	2900      	cmp	r1, #0
 80056c4:	461d      	mov	r5, r3
 80056c6:	b096      	sub	sp, #88	; 0x58
 80056c8:	da08      	bge.n	80056dc <__swhatbuf_r+0x24>
 80056ca:	2200      	movs	r2, #0
 80056cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056d0:	602a      	str	r2, [r5, #0]
 80056d2:	061a      	lsls	r2, r3, #24
 80056d4:	d410      	bmi.n	80056f8 <__swhatbuf_r+0x40>
 80056d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056da:	e00e      	b.n	80056fa <__swhatbuf_r+0x42>
 80056dc:	466a      	mov	r2, sp
 80056de:	f000 f909 	bl	80058f4 <_fstat_r>
 80056e2:	2800      	cmp	r0, #0
 80056e4:	dbf1      	blt.n	80056ca <__swhatbuf_r+0x12>
 80056e6:	9a01      	ldr	r2, [sp, #4]
 80056e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80056ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80056f0:	425a      	negs	r2, r3
 80056f2:	415a      	adcs	r2, r3
 80056f4:	602a      	str	r2, [r5, #0]
 80056f6:	e7ee      	b.n	80056d6 <__swhatbuf_r+0x1e>
 80056f8:	2340      	movs	r3, #64	; 0x40
 80056fa:	2000      	movs	r0, #0
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	b016      	add	sp, #88	; 0x58
 8005700:	bd70      	pop	{r4, r5, r6, pc}
	...

08005704 <__smakebuf_r>:
 8005704:	898b      	ldrh	r3, [r1, #12]
 8005706:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005708:	079d      	lsls	r5, r3, #30
 800570a:	4606      	mov	r6, r0
 800570c:	460c      	mov	r4, r1
 800570e:	d507      	bpl.n	8005720 <__smakebuf_r+0x1c>
 8005710:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005714:	6023      	str	r3, [r4, #0]
 8005716:	6123      	str	r3, [r4, #16]
 8005718:	2301      	movs	r3, #1
 800571a:	6163      	str	r3, [r4, #20]
 800571c:	b002      	add	sp, #8
 800571e:	bd70      	pop	{r4, r5, r6, pc}
 8005720:	466a      	mov	r2, sp
 8005722:	ab01      	add	r3, sp, #4
 8005724:	f7ff ffc8 	bl	80056b8 <__swhatbuf_r>
 8005728:	9900      	ldr	r1, [sp, #0]
 800572a:	4605      	mov	r5, r0
 800572c:	4630      	mov	r0, r6
 800572e:	f7ff f92b 	bl	8004988 <_malloc_r>
 8005732:	b948      	cbnz	r0, 8005748 <__smakebuf_r+0x44>
 8005734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005738:	059a      	lsls	r2, r3, #22
 800573a:	d4ef      	bmi.n	800571c <__smakebuf_r+0x18>
 800573c:	f023 0303 	bic.w	r3, r3, #3
 8005740:	f043 0302 	orr.w	r3, r3, #2
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	e7e3      	b.n	8005710 <__smakebuf_r+0xc>
 8005748:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <__smakebuf_r+0x7c>)
 800574a:	62b3      	str	r3, [r6, #40]	; 0x28
 800574c:	89a3      	ldrh	r3, [r4, #12]
 800574e:	6020      	str	r0, [r4, #0]
 8005750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005754:	81a3      	strh	r3, [r4, #12]
 8005756:	9b00      	ldr	r3, [sp, #0]
 8005758:	6120      	str	r0, [r4, #16]
 800575a:	6163      	str	r3, [r4, #20]
 800575c:	9b01      	ldr	r3, [sp, #4]
 800575e:	b15b      	cbz	r3, 8005778 <__smakebuf_r+0x74>
 8005760:	4630      	mov	r0, r6
 8005762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005766:	f000 f8d7 	bl	8005918 <_isatty_r>
 800576a:	b128      	cbz	r0, 8005778 <__smakebuf_r+0x74>
 800576c:	89a3      	ldrh	r3, [r4, #12]
 800576e:	f023 0303 	bic.w	r3, r3, #3
 8005772:	f043 0301 	orr.w	r3, r3, #1
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	89a0      	ldrh	r0, [r4, #12]
 800577a:	4305      	orrs	r5, r0
 800577c:	81a5      	strh	r5, [r4, #12]
 800577e:	e7cd      	b.n	800571c <__smakebuf_r+0x18>
 8005780:	08005511 	.word	0x08005511

08005784 <memchr>:
 8005784:	4603      	mov	r3, r0
 8005786:	b510      	push	{r4, lr}
 8005788:	b2c9      	uxtb	r1, r1
 800578a:	4402      	add	r2, r0
 800578c:	4293      	cmp	r3, r2
 800578e:	4618      	mov	r0, r3
 8005790:	d101      	bne.n	8005796 <memchr+0x12>
 8005792:	2000      	movs	r0, #0
 8005794:	e003      	b.n	800579e <memchr+0x1a>
 8005796:	7804      	ldrb	r4, [r0, #0]
 8005798:	3301      	adds	r3, #1
 800579a:	428c      	cmp	r4, r1
 800579c:	d1f6      	bne.n	800578c <memchr+0x8>
 800579e:	bd10      	pop	{r4, pc}

080057a0 <_raise_r>:
 80057a0:	291f      	cmp	r1, #31
 80057a2:	b538      	push	{r3, r4, r5, lr}
 80057a4:	4604      	mov	r4, r0
 80057a6:	460d      	mov	r5, r1
 80057a8:	d904      	bls.n	80057b4 <_raise_r+0x14>
 80057aa:	2316      	movs	r3, #22
 80057ac:	6003      	str	r3, [r0, #0]
 80057ae:	f04f 30ff 	mov.w	r0, #4294967295
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057b6:	b112      	cbz	r2, 80057be <_raise_r+0x1e>
 80057b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057bc:	b94b      	cbnz	r3, 80057d2 <_raise_r+0x32>
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 f830 	bl	8005824 <_getpid_r>
 80057c4:	462a      	mov	r2, r5
 80057c6:	4601      	mov	r1, r0
 80057c8:	4620      	mov	r0, r4
 80057ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057ce:	f000 b817 	b.w	8005800 <_kill_r>
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d00a      	beq.n	80057ec <_raise_r+0x4c>
 80057d6:	1c59      	adds	r1, r3, #1
 80057d8:	d103      	bne.n	80057e2 <_raise_r+0x42>
 80057da:	2316      	movs	r3, #22
 80057dc:	6003      	str	r3, [r0, #0]
 80057de:	2001      	movs	r0, #1
 80057e0:	e7e7      	b.n	80057b2 <_raise_r+0x12>
 80057e2:	2400      	movs	r4, #0
 80057e4:	4628      	mov	r0, r5
 80057e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057ea:	4798      	blx	r3
 80057ec:	2000      	movs	r0, #0
 80057ee:	e7e0      	b.n	80057b2 <_raise_r+0x12>

080057f0 <raise>:
 80057f0:	4b02      	ldr	r3, [pc, #8]	; (80057fc <raise+0xc>)
 80057f2:	4601      	mov	r1, r0
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	f7ff bfd3 	b.w	80057a0 <_raise_r>
 80057fa:	bf00      	nop
 80057fc:	20000014 	.word	0x20000014

08005800 <_kill_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	2300      	movs	r3, #0
 8005804:	4d06      	ldr	r5, [pc, #24]	; (8005820 <_kill_r+0x20>)
 8005806:	4604      	mov	r4, r0
 8005808:	4608      	mov	r0, r1
 800580a:	4611      	mov	r1, r2
 800580c:	602b      	str	r3, [r5, #0]
 800580e:	f7fd f996 	bl	8002b3e <_kill>
 8005812:	1c43      	adds	r3, r0, #1
 8005814:	d102      	bne.n	800581c <_kill_r+0x1c>
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	b103      	cbz	r3, 800581c <_kill_r+0x1c>
 800581a:	6023      	str	r3, [r4, #0]
 800581c:	bd38      	pop	{r3, r4, r5, pc}
 800581e:	bf00      	nop
 8005820:	2000019c 	.word	0x2000019c

08005824 <_getpid_r>:
 8005824:	f7fd b984 	b.w	8002b30 <_getpid>

08005828 <__sread>:
 8005828:	b510      	push	{r4, lr}
 800582a:	460c      	mov	r4, r1
 800582c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005830:	f000 f894 	bl	800595c <_read_r>
 8005834:	2800      	cmp	r0, #0
 8005836:	bfab      	itete	ge
 8005838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800583a:	89a3      	ldrhlt	r3, [r4, #12]
 800583c:	181b      	addge	r3, r3, r0
 800583e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005842:	bfac      	ite	ge
 8005844:	6563      	strge	r3, [r4, #84]	; 0x54
 8005846:	81a3      	strhlt	r3, [r4, #12]
 8005848:	bd10      	pop	{r4, pc}

0800584a <__swrite>:
 800584a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584e:	461f      	mov	r7, r3
 8005850:	898b      	ldrh	r3, [r1, #12]
 8005852:	4605      	mov	r5, r0
 8005854:	05db      	lsls	r3, r3, #23
 8005856:	460c      	mov	r4, r1
 8005858:	4616      	mov	r6, r2
 800585a:	d505      	bpl.n	8005868 <__swrite+0x1e>
 800585c:	2302      	movs	r3, #2
 800585e:	2200      	movs	r2, #0
 8005860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005864:	f000 f868 	bl	8005938 <_lseek_r>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	4632      	mov	r2, r6
 800586c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005870:	81a3      	strh	r3, [r4, #12]
 8005872:	4628      	mov	r0, r5
 8005874:	463b      	mov	r3, r7
 8005876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800587a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	f000 b817 	b.w	80058b0 <_write_r>

08005882 <__sseek>:
 8005882:	b510      	push	{r4, lr}
 8005884:	460c      	mov	r4, r1
 8005886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588a:	f000 f855 	bl	8005938 <_lseek_r>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	bf15      	itete	ne
 8005894:	6560      	strne	r0, [r4, #84]	; 0x54
 8005896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800589a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800589e:	81a3      	strheq	r3, [r4, #12]
 80058a0:	bf18      	it	ne
 80058a2:	81a3      	strhne	r3, [r4, #12]
 80058a4:	bd10      	pop	{r4, pc}

080058a6 <__sclose>:
 80058a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058aa:	f000 b813 	b.w	80058d4 <_close_r>
	...

080058b0 <_write_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4604      	mov	r4, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	2200      	movs	r2, #0
 80058ba:	4d05      	ldr	r5, [pc, #20]	; (80058d0 <_write_r+0x20>)
 80058bc:	602a      	str	r2, [r5, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f7fd f974 	bl	8002bac <_write>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	d102      	bne.n	80058ce <_write_r+0x1e>
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	b103      	cbz	r3, 80058ce <_write_r+0x1e>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	bd38      	pop	{r3, r4, r5, pc}
 80058d0:	2000019c 	.word	0x2000019c

080058d4 <_close_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	2300      	movs	r3, #0
 80058d8:	4d05      	ldr	r5, [pc, #20]	; (80058f0 <_close_r+0x1c>)
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7fd f980 	bl	8002be4 <_close>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_close_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_close_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	2000019c 	.word	0x2000019c

080058f4 <_fstat_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	2300      	movs	r3, #0
 80058f8:	4d06      	ldr	r5, [pc, #24]	; (8005914 <_fstat_r+0x20>)
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	602b      	str	r3, [r5, #0]
 8005902:	f7fd f97a 	bl	8002bfa <_fstat>
 8005906:	1c43      	adds	r3, r0, #1
 8005908:	d102      	bne.n	8005910 <_fstat_r+0x1c>
 800590a:	682b      	ldr	r3, [r5, #0]
 800590c:	b103      	cbz	r3, 8005910 <_fstat_r+0x1c>
 800590e:	6023      	str	r3, [r4, #0]
 8005910:	bd38      	pop	{r3, r4, r5, pc}
 8005912:	bf00      	nop
 8005914:	2000019c 	.word	0x2000019c

08005918 <_isatty_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	2300      	movs	r3, #0
 800591c:	4d05      	ldr	r5, [pc, #20]	; (8005934 <_isatty_r+0x1c>)
 800591e:	4604      	mov	r4, r0
 8005920:	4608      	mov	r0, r1
 8005922:	602b      	str	r3, [r5, #0]
 8005924:	f7fd f978 	bl	8002c18 <_isatty>
 8005928:	1c43      	adds	r3, r0, #1
 800592a:	d102      	bne.n	8005932 <_isatty_r+0x1a>
 800592c:	682b      	ldr	r3, [r5, #0]
 800592e:	b103      	cbz	r3, 8005932 <_isatty_r+0x1a>
 8005930:	6023      	str	r3, [r4, #0]
 8005932:	bd38      	pop	{r3, r4, r5, pc}
 8005934:	2000019c 	.word	0x2000019c

08005938 <_lseek_r>:
 8005938:	b538      	push	{r3, r4, r5, lr}
 800593a:	4604      	mov	r4, r0
 800593c:	4608      	mov	r0, r1
 800593e:	4611      	mov	r1, r2
 8005940:	2200      	movs	r2, #0
 8005942:	4d05      	ldr	r5, [pc, #20]	; (8005958 <_lseek_r+0x20>)
 8005944:	602a      	str	r2, [r5, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	f7fd f970 	bl	8002c2c <_lseek>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_lseek_r+0x1e>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_lseek_r+0x1e>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	2000019c 	.word	0x2000019c

0800595c <_read_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4604      	mov	r4, r0
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	2200      	movs	r2, #0
 8005966:	4d05      	ldr	r5, [pc, #20]	; (800597c <_read_r+0x20>)
 8005968:	602a      	str	r2, [r5, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f7fd f901 	bl	8002b72 <_read>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_read_r+0x1e>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_read_r+0x1e>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	2000019c 	.word	0x2000019c

08005980 <floor>:
 8005980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005984:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005988:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800598c:	2e13      	cmp	r6, #19
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	4607      	mov	r7, r0
 8005994:	460c      	mov	r4, r1
 8005996:	4605      	mov	r5, r0
 8005998:	dc33      	bgt.n	8005a02 <floor+0x82>
 800599a:	2e00      	cmp	r6, #0
 800599c:	da14      	bge.n	80059c8 <floor+0x48>
 800599e:	a334      	add	r3, pc, #208	; (adr r3, 8005a70 <floor+0xf0>)
 80059a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a4:	f7fa fbe2 	bl	800016c <__adddf3>
 80059a8:	2200      	movs	r2, #0
 80059aa:	2300      	movs	r3, #0
 80059ac:	f7fb f824 	bl	80009f8 <__aeabi_dcmpgt>
 80059b0:	b138      	cbz	r0, 80059c2 <floor+0x42>
 80059b2:	2c00      	cmp	r4, #0
 80059b4:	da58      	bge.n	8005a68 <floor+0xe8>
 80059b6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80059ba:	431d      	orrs	r5, r3
 80059bc:	d001      	beq.n	80059c2 <floor+0x42>
 80059be:	2500      	movs	r5, #0
 80059c0:	4c2d      	ldr	r4, [pc, #180]	; (8005a78 <floor+0xf8>)
 80059c2:	4623      	mov	r3, r4
 80059c4:	462f      	mov	r7, r5
 80059c6:	e025      	b.n	8005a14 <floor+0x94>
 80059c8:	4a2c      	ldr	r2, [pc, #176]	; (8005a7c <floor+0xfc>)
 80059ca:	fa42 f806 	asr.w	r8, r2, r6
 80059ce:	ea01 0208 	and.w	r2, r1, r8
 80059d2:	4302      	orrs	r2, r0
 80059d4:	d01e      	beq.n	8005a14 <floor+0x94>
 80059d6:	a326      	add	r3, pc, #152	; (adr r3, 8005a70 <floor+0xf0>)
 80059d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059dc:	f7fa fbc6 	bl	800016c <__adddf3>
 80059e0:	2200      	movs	r2, #0
 80059e2:	2300      	movs	r3, #0
 80059e4:	f7fb f808 	bl	80009f8 <__aeabi_dcmpgt>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	d0ea      	beq.n	80059c2 <floor+0x42>
 80059ec:	2c00      	cmp	r4, #0
 80059ee:	bfbe      	ittt	lt
 80059f0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80059f4:	fa43 f606 	asrlt.w	r6, r3, r6
 80059f8:	19a4      	addlt	r4, r4, r6
 80059fa:	2500      	movs	r5, #0
 80059fc:	ea24 0408 	bic.w	r4, r4, r8
 8005a00:	e7df      	b.n	80059c2 <floor+0x42>
 8005a02:	2e33      	cmp	r6, #51	; 0x33
 8005a04:	dd0a      	ble.n	8005a1c <floor+0x9c>
 8005a06:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005a0a:	d103      	bne.n	8005a14 <floor+0x94>
 8005a0c:	f7fa fbae 	bl	800016c <__adddf3>
 8005a10:	4607      	mov	r7, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4638      	mov	r0, r7
 8005a16:	4619      	mov	r1, r3
 8005a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a20:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005a24:	fa22 f808 	lsr.w	r8, r2, r8
 8005a28:	ea18 0f00 	tst.w	r8, r0
 8005a2c:	d0f2      	beq.n	8005a14 <floor+0x94>
 8005a2e:	a310      	add	r3, pc, #64	; (adr r3, 8005a70 <floor+0xf0>)
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f7fa fb9a 	bl	800016c <__adddf3>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f7fa ffdc 	bl	80009f8 <__aeabi_dcmpgt>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d0be      	beq.n	80059c2 <floor+0x42>
 8005a44:	2c00      	cmp	r4, #0
 8005a46:	da02      	bge.n	8005a4e <floor+0xce>
 8005a48:	2e14      	cmp	r6, #20
 8005a4a:	d103      	bne.n	8005a54 <floor+0xd4>
 8005a4c:	3401      	adds	r4, #1
 8005a4e:	ea25 0508 	bic.w	r5, r5, r8
 8005a52:	e7b6      	b.n	80059c2 <floor+0x42>
 8005a54:	2301      	movs	r3, #1
 8005a56:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005a5a:	fa03 f606 	lsl.w	r6, r3, r6
 8005a5e:	4435      	add	r5, r6
 8005a60:	42bd      	cmp	r5, r7
 8005a62:	bf38      	it	cc
 8005a64:	18e4      	addcc	r4, r4, r3
 8005a66:	e7f2      	b.n	8005a4e <floor+0xce>
 8005a68:	2500      	movs	r5, #0
 8005a6a:	462c      	mov	r4, r5
 8005a6c:	e7a9      	b.n	80059c2 <floor+0x42>
 8005a6e:	bf00      	nop
 8005a70:	8800759c 	.word	0x8800759c
 8005a74:	7e37e43c 	.word	0x7e37e43c
 8005a78:	bff00000 	.word	0xbff00000
 8005a7c:	000fffff 	.word	0x000fffff

08005a80 <_init>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	bf00      	nop
 8005a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a86:	bc08      	pop	{r3}
 8005a88:	469e      	mov	lr, r3
 8005a8a:	4770      	bx	lr

08005a8c <_fini>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr
