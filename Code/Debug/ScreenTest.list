
ScreenTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c28  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e8  080040e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080040e8  080040e8  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040e8  080040e8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080040f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000080  08004170  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08004170  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad0b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b37  00000000  00000000  0002adb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002d4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a69  00000000  00000000  0002df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1fa  00000000  00000000  000459e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a89  00000000  00000000  00051bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  000db6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d20 	.word	0x08003d20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08003d20 	.word	0x08003d20

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_frsub>:
 800091c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000920:	e002      	b.n	8000928 <__addsf3>
 8000922:	bf00      	nop

08000924 <__aeabi_fsub>:
 8000924:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000928 <__addsf3>:
 8000928:	0042      	lsls	r2, r0, #1
 800092a:	bf1f      	itttt	ne
 800092c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000930:	ea92 0f03 	teqne	r2, r3
 8000934:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000938:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800093c:	d06a      	beq.n	8000a14 <__addsf3+0xec>
 800093e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000942:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000946:	bfc1      	itttt	gt
 8000948:	18d2      	addgt	r2, r2, r3
 800094a:	4041      	eorgt	r1, r0
 800094c:	4048      	eorgt	r0, r1
 800094e:	4041      	eorgt	r1, r0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
 8000954:	2b19      	cmp	r3, #25
 8000956:	bf88      	it	hi
 8000958:	4770      	bxhi	lr
 800095a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800095e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000962:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000966:	bf18      	it	ne
 8000968:	4240      	negne	r0, r0
 800096a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800096e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000972:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4249      	negne	r1, r1
 800097a:	ea92 0f03 	teq	r2, r3
 800097e:	d03f      	beq.n	8000a00 <__addsf3+0xd8>
 8000980:	f1a2 0201 	sub.w	r2, r2, #1
 8000984:	fa41 fc03 	asr.w	ip, r1, r3
 8000988:	eb10 000c 	adds.w	r0, r0, ip
 800098c:	f1c3 0320 	rsb	r3, r3, #32
 8000990:	fa01 f103 	lsl.w	r1, r1, r3
 8000994:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000998:	d502      	bpl.n	80009a0 <__addsf3+0x78>
 800099a:	4249      	negs	r1, r1
 800099c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009a0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009a4:	d313      	bcc.n	80009ce <__addsf3+0xa6>
 80009a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009aa:	d306      	bcc.n	80009ba <__addsf3+0x92>
 80009ac:	0840      	lsrs	r0, r0, #1
 80009ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80009b2:	f102 0201 	add.w	r2, r2, #1
 80009b6:	2afe      	cmp	r2, #254	; 0xfe
 80009b8:	d251      	bcs.n	8000a5e <__addsf3+0x136>
 80009ba:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009c2:	bf08      	it	eq
 80009c4:	f020 0001 	biceq.w	r0, r0, #1
 80009c8:	ea40 0003 	orr.w	r0, r0, r3
 80009cc:	4770      	bx	lr
 80009ce:	0049      	lsls	r1, r1, #1
 80009d0:	eb40 0000 	adc.w	r0, r0, r0
 80009d4:	3a01      	subs	r2, #1
 80009d6:	bf28      	it	cs
 80009d8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009dc:	d2ed      	bcs.n	80009ba <__addsf3+0x92>
 80009de:	fab0 fc80 	clz	ip, r0
 80009e2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009e6:	ebb2 020c 	subs.w	r2, r2, ip
 80009ea:	fa00 f00c 	lsl.w	r0, r0, ip
 80009ee:	bfaa      	itet	ge
 80009f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009f4:	4252      	neglt	r2, r2
 80009f6:	4318      	orrge	r0, r3
 80009f8:	bfbc      	itt	lt
 80009fa:	40d0      	lsrlt	r0, r2
 80009fc:	4318      	orrlt	r0, r3
 80009fe:	4770      	bx	lr
 8000a00:	f092 0f00 	teq	r2, #0
 8000a04:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a08:	bf06      	itte	eq
 8000a0a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a0e:	3201      	addeq	r2, #1
 8000a10:	3b01      	subne	r3, #1
 8000a12:	e7b5      	b.n	8000980 <__addsf3+0x58>
 8000a14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a1c:	bf18      	it	ne
 8000a1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a22:	d021      	beq.n	8000a68 <__addsf3+0x140>
 8000a24:	ea92 0f03 	teq	r2, r3
 8000a28:	d004      	beq.n	8000a34 <__addsf3+0x10c>
 8000a2a:	f092 0f00 	teq	r2, #0
 8000a2e:	bf08      	it	eq
 8000a30:	4608      	moveq	r0, r1
 8000a32:	4770      	bx	lr
 8000a34:	ea90 0f01 	teq	r0, r1
 8000a38:	bf1c      	itt	ne
 8000a3a:	2000      	movne	r0, #0
 8000a3c:	4770      	bxne	lr
 8000a3e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a42:	d104      	bne.n	8000a4e <__addsf3+0x126>
 8000a44:	0040      	lsls	r0, r0, #1
 8000a46:	bf28      	it	cs
 8000a48:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a4c:	4770      	bx	lr
 8000a4e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a52:	bf3c      	itt	cc
 8000a54:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bxcc	lr
 8000a5a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a5e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a66:	4770      	bx	lr
 8000a68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a6c:	bf16      	itet	ne
 8000a6e:	4608      	movne	r0, r1
 8000a70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a74:	4601      	movne	r1, r0
 8000a76:	0242      	lsls	r2, r0, #9
 8000a78:	bf06      	itte	eq
 8000a7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a7e:	ea90 0f01 	teqeq	r0, r1
 8000a82:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_ui2f>:
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	e004      	b.n	8000a98 <__aeabi_i2f+0x8>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_i2f>:
 8000a90:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a94:	bf48      	it	mi
 8000a96:	4240      	negmi	r0, r0
 8000a98:	ea5f 0c00 	movs.w	ip, r0
 8000a9c:	bf08      	it	eq
 8000a9e:	4770      	bxeq	lr
 8000aa0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000aa4:	4601      	mov	r1, r0
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	e01c      	b.n	8000ae6 <__aeabi_l2f+0x2a>

08000aac <__aeabi_ul2f>:
 8000aac:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e00a      	b.n	8000ad0 <__aeabi_l2f+0x14>
 8000aba:	bf00      	nop

08000abc <__aeabi_l2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__aeabi_l2f+0x14>
 8000aca:	4240      	negs	r0, r0
 8000acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad0:	ea5f 0c01 	movs.w	ip, r1
 8000ad4:	bf02      	ittt	eq
 8000ad6:	4684      	moveq	ip, r0
 8000ad8:	4601      	moveq	r1, r0
 8000ada:	2000      	moveq	r0, #0
 8000adc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000aea:	fabc f28c 	clz	r2, ip
 8000aee:	3a08      	subs	r2, #8
 8000af0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000af4:	db10      	blt.n	8000b18 <__aeabi_l2f+0x5c>
 8000af6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000afa:	4463      	add	r3, ip
 8000afc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b00:	f1c2 0220 	rsb	r2, r2, #32
 8000b04:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b08:	fa20 f202 	lsr.w	r2, r0, r2
 8000b0c:	eb43 0002 	adc.w	r0, r3, r2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f102 0220 	add.w	r2, r2, #32
 8000b1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b28:	fa21 f202 	lsr.w	r2, r1, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_fmul>:
 8000b38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b40:	bf1e      	ittt	ne
 8000b42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b46:	ea92 0f0c 	teqne	r2, ip
 8000b4a:	ea93 0f0c 	teqne	r3, ip
 8000b4e:	d06f      	beq.n	8000c30 <__aeabi_fmul+0xf8>
 8000b50:	441a      	add	r2, r3
 8000b52:	ea80 0c01 	eor.w	ip, r0, r1
 8000b56:	0240      	lsls	r0, r0, #9
 8000b58:	bf18      	it	ne
 8000b5a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b5e:	d01e      	beq.n	8000b9e <__aeabi_fmul+0x66>
 8000b60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b64:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b68:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b6c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b70:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b74:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b78:	bf3e      	ittt	cc
 8000b7a:	0049      	lslcc	r1, r1, #1
 8000b7c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b80:	005b      	lslcc	r3, r3, #1
 8000b82:	ea40 0001 	orr.w	r0, r0, r1
 8000b86:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b8a:	2afd      	cmp	r2, #253	; 0xfd
 8000b8c:	d81d      	bhi.n	8000bca <__aeabi_fmul+0x92>
 8000b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000b92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b96:	bf08      	it	eq
 8000b98:	f020 0001 	biceq.w	r0, r0, #1
 8000b9c:	4770      	bx	lr
 8000b9e:	f090 0f00 	teq	r0, #0
 8000ba2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ba6:	bf08      	it	eq
 8000ba8:	0249      	lsleq	r1, r1, #9
 8000baa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bae:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bb2:	3a7f      	subs	r2, #127	; 0x7f
 8000bb4:	bfc2      	ittt	gt
 8000bb6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bba:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bbe:	4770      	bxgt	lr
 8000bc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc4:	f04f 0300 	mov.w	r3, #0
 8000bc8:	3a01      	subs	r2, #1
 8000bca:	dc5d      	bgt.n	8000c88 <__aeabi_fmul+0x150>
 8000bcc:	f112 0f19 	cmn.w	r2, #25
 8000bd0:	bfdc      	itt	le
 8000bd2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bxle	lr
 8000bd8:	f1c2 0200 	rsb	r2, r2, #0
 8000bdc:	0041      	lsls	r1, r0, #1
 8000bde:	fa21 f102 	lsr.w	r1, r1, r2
 8000be2:	f1c2 0220 	rsb	r2, r2, #32
 8000be6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bea:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bee:	f140 0000 	adc.w	r0, r0, #0
 8000bf2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000bf6:	bf08      	it	eq
 8000bf8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bfc:	4770      	bx	lr
 8000bfe:	f092 0f00 	teq	r2, #0
 8000c02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c06:	bf02      	ittt	eq
 8000c08:	0040      	lsleq	r0, r0, #1
 8000c0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0e:	3a01      	subeq	r2, #1
 8000c10:	d0f9      	beq.n	8000c06 <__aeabi_fmul+0xce>
 8000c12:	ea40 000c 	orr.w	r0, r0, ip
 8000c16:	f093 0f00 	teq	r3, #0
 8000c1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1e:	bf02      	ittt	eq
 8000c20:	0049      	lsleq	r1, r1, #1
 8000c22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c26:	3b01      	subeq	r3, #1
 8000c28:	d0f9      	beq.n	8000c1e <__aeabi_fmul+0xe6>
 8000c2a:	ea41 010c 	orr.w	r1, r1, ip
 8000c2e:	e78f      	b.n	8000b50 <__aeabi_fmul+0x18>
 8000c30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c34:	ea92 0f0c 	teq	r2, ip
 8000c38:	bf18      	it	ne
 8000c3a:	ea93 0f0c 	teqne	r3, ip
 8000c3e:	d00a      	beq.n	8000c56 <__aeabi_fmul+0x11e>
 8000c40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c44:	bf18      	it	ne
 8000c46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c4a:	d1d8      	bne.n	8000bfe <__aeabi_fmul+0xc6>
 8000c4c:	ea80 0001 	eor.w	r0, r0, r1
 8000c50:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c54:	4770      	bx	lr
 8000c56:	f090 0f00 	teq	r0, #0
 8000c5a:	bf17      	itett	ne
 8000c5c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c60:	4608      	moveq	r0, r1
 8000c62:	f091 0f00 	teqne	r1, #0
 8000c66:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c6a:	d014      	beq.n	8000c96 <__aeabi_fmul+0x15e>
 8000c6c:	ea92 0f0c 	teq	r2, ip
 8000c70:	d101      	bne.n	8000c76 <__aeabi_fmul+0x13e>
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	d10f      	bne.n	8000c96 <__aeabi_fmul+0x15e>
 8000c76:	ea93 0f0c 	teq	r3, ip
 8000c7a:	d103      	bne.n	8000c84 <__aeabi_fmul+0x14c>
 8000c7c:	024b      	lsls	r3, r1, #9
 8000c7e:	bf18      	it	ne
 8000c80:	4608      	movne	r0, r1
 8000c82:	d108      	bne.n	8000c96 <__aeabi_fmul+0x15e>
 8000c84:	ea80 0001 	eor.w	r0, r0, r1
 8000c88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_fdiv>:
 8000ca0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca8:	bf1e      	ittt	ne
 8000caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cae:	ea92 0f0c 	teqne	r2, ip
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d069      	beq.n	8000d8c <__aeabi_fdiv+0xec>
 8000cb8:	eba2 0203 	sub.w	r2, r2, r3
 8000cbc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc0:	0249      	lsls	r1, r1, #9
 8000cc2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cc6:	d037      	beq.n	8000d38 <__aeabi_fdiv+0x98>
 8000cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ccc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000cd0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000cd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	bf38      	it	cc
 8000cdc:	005b      	lslcc	r3, r3, #1
 8000cde:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ce2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	bf24      	itt	cs
 8000cea:	1a5b      	subcs	r3, r3, r1
 8000cec:	ea40 000c 	orrcs.w	r0, r0, ip
 8000cf0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000cf4:	bf24      	itt	cs
 8000cf6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000cfa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000cfe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d02:	bf24      	itt	cs
 8000d04:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d0c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d10:	bf24      	itt	cs
 8000d12:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d16:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	bf18      	it	ne
 8000d1e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d22:	d1e0      	bne.n	8000ce6 <__aeabi_fdiv+0x46>
 8000d24:	2afd      	cmp	r2, #253	; 0xfd
 8000d26:	f63f af50 	bhi.w	8000bca <__aeabi_fmul+0x92>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d3c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d40:	327f      	adds	r2, #127	; 0x7f
 8000d42:	bfc2      	ittt	gt
 8000d44:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d48:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d4c:	4770      	bxgt	lr
 8000d4e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	3a01      	subs	r2, #1
 8000d58:	e737      	b.n	8000bca <__aeabi_fmul+0x92>
 8000d5a:	f092 0f00 	teq	r2, #0
 8000d5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d62:	bf02      	ittt	eq
 8000d64:	0040      	lsleq	r0, r0, #1
 8000d66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d6a:	3a01      	subeq	r2, #1
 8000d6c:	d0f9      	beq.n	8000d62 <__aeabi_fdiv+0xc2>
 8000d6e:	ea40 000c 	orr.w	r0, r0, ip
 8000d72:	f093 0f00 	teq	r3, #0
 8000d76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d7a:	bf02      	ittt	eq
 8000d7c:	0049      	lsleq	r1, r1, #1
 8000d7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d82:	3b01      	subeq	r3, #1
 8000d84:	d0f9      	beq.n	8000d7a <__aeabi_fdiv+0xda>
 8000d86:	ea41 010c 	orr.w	r1, r1, ip
 8000d8a:	e795      	b.n	8000cb8 <__aeabi_fdiv+0x18>
 8000d8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d90:	ea92 0f0c 	teq	r2, ip
 8000d94:	d108      	bne.n	8000da8 <__aeabi_fdiv+0x108>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	f47f af7d 	bne.w	8000c96 <__aeabi_fmul+0x15e>
 8000d9c:	ea93 0f0c 	teq	r3, ip
 8000da0:	f47f af70 	bne.w	8000c84 <__aeabi_fmul+0x14c>
 8000da4:	4608      	mov	r0, r1
 8000da6:	e776      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000da8:	ea93 0f0c 	teq	r3, ip
 8000dac:	d104      	bne.n	8000db8 <__aeabi_fdiv+0x118>
 8000dae:	024b      	lsls	r3, r1, #9
 8000db0:	f43f af4c 	beq.w	8000c4c <__aeabi_fmul+0x114>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e76e      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000db8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dbc:	bf18      	it	ne
 8000dbe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dc2:	d1ca      	bne.n	8000d5a <__aeabi_fdiv+0xba>
 8000dc4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dc8:	f47f af5c 	bne.w	8000c84 <__aeabi_fmul+0x14c>
 8000dcc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000dd0:	f47f af3c 	bne.w	8000c4c <__aeabi_fmul+0x114>
 8000dd4:	e75f      	b.n	8000c96 <__aeabi_fmul+0x15e>
 8000dd6:	bf00      	nop

08000dd8 <__gesf2>:
 8000dd8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ddc:	e006      	b.n	8000dec <__cmpsf2+0x4>
 8000dde:	bf00      	nop

08000de0 <__lesf2>:
 8000de0:	f04f 0c01 	mov.w	ip, #1
 8000de4:	e002      	b.n	8000dec <__cmpsf2+0x4>
 8000de6:	bf00      	nop

08000de8 <__cmpsf2>:
 8000de8:	f04f 0c01 	mov.w	ip, #1
 8000dec:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000df0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000df4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000df8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dfc:	bf18      	it	ne
 8000dfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e02:	d011      	beq.n	8000e28 <__cmpsf2+0x40>
 8000e04:	b001      	add	sp, #4
 8000e06:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e0a:	bf18      	it	ne
 8000e0c:	ea90 0f01 	teqne	r0, r1
 8000e10:	bf58      	it	pl
 8000e12:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e16:	bf88      	it	hi
 8000e18:	17c8      	asrhi	r0, r1, #31
 8000e1a:	bf38      	it	cc
 8000e1c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e20:	bf18      	it	ne
 8000e22:	f040 0001 	orrne.w	r0, r0, #1
 8000e26:	4770      	bx	lr
 8000e28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e2c:	d102      	bne.n	8000e34 <__cmpsf2+0x4c>
 8000e2e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e32:	d105      	bne.n	8000e40 <__cmpsf2+0x58>
 8000e34:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e38:	d1e4      	bne.n	8000e04 <__cmpsf2+0x1c>
 8000e3a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e3e:	d0e1      	beq.n	8000e04 <__cmpsf2+0x1c>
 8000e40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <__aeabi_cfrcmple>:
 8000e48:	4684      	mov	ip, r0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	4661      	mov	r1, ip
 8000e4e:	e7ff      	b.n	8000e50 <__aeabi_cfcmpeq>

08000e50 <__aeabi_cfcmpeq>:
 8000e50:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e52:	f7ff ffc9 	bl	8000de8 <__cmpsf2>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	bf48      	it	mi
 8000e5a:	f110 0f00 	cmnmi.w	r0, #0
 8000e5e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e60 <__aeabi_fcmpeq>:
 8000e60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e64:	f7ff fff4 	bl	8000e50 <__aeabi_cfcmpeq>
 8000e68:	bf0c      	ite	eq
 8000e6a:	2001      	moveq	r0, #1
 8000e6c:	2000      	movne	r0, #0
 8000e6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e72:	bf00      	nop

08000e74 <__aeabi_fcmplt>:
 8000e74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e78:	f7ff ffea 	bl	8000e50 <__aeabi_cfcmpeq>
 8000e7c:	bf34      	ite	cc
 8000e7e:	2001      	movcc	r0, #1
 8000e80:	2000      	movcs	r0, #0
 8000e82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e86:	bf00      	nop

08000e88 <__aeabi_fcmple>:
 8000e88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e8c:	f7ff ffe0 	bl	8000e50 <__aeabi_cfcmpeq>
 8000e90:	bf94      	ite	ls
 8000e92:	2001      	movls	r0, #1
 8000e94:	2000      	movhi	r0, #0
 8000e96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e9a:	bf00      	nop

08000e9c <__aeabi_fcmpge>:
 8000e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ea0:	f7ff ffd2 	bl	8000e48 <__aeabi_cfrcmple>
 8000ea4:	bf94      	ite	ls
 8000ea6:	2001      	movls	r0, #1
 8000ea8:	2000      	movhi	r0, #0
 8000eaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eae:	bf00      	nop

08000eb0 <__aeabi_fcmpgt>:
 8000eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb4:	f7ff ffc8 	bl	8000e48 <__aeabi_cfrcmple>
 8000eb8:	bf34      	ite	cc
 8000eba:	2001      	movcc	r0, #1
 8000ebc:	2000      	movcs	r0, #0
 8000ebe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_f2iz>:
 8000ec4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ec8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ecc:	d30f      	bcc.n	8000eee <__aeabi_f2iz+0x2a>
 8000ece:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ed2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ed6:	d90d      	bls.n	8000ef4 <__aeabi_f2iz+0x30>
 8000ed8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000edc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ee0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ee4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ee8:	bf18      	it	ne
 8000eea:	4240      	negne	r0, r0
 8000eec:	4770      	bx	lr
 8000eee:	f04f 0000 	mov.w	r0, #0
 8000ef2:	4770      	bx	lr
 8000ef4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ef8:	d101      	bne.n	8000efe <__aeabi_f2iz+0x3a>
 8000efa:	0242      	lsls	r2, r0, #9
 8000efc:	d105      	bne.n	8000f0a <__aeabi_f2iz+0x46>
 8000efe:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f02:	bf08      	it	eq
 8000f04:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f08:	4770      	bx	lr
 8000f0a:	f04f 0000 	mov.w	r0, #0
 8000f0e:	4770      	bx	lr

08000f10 <__aeabi_f2uiz>:
 8000f10:	0042      	lsls	r2, r0, #1
 8000f12:	d20e      	bcs.n	8000f32 <__aeabi_f2uiz+0x22>
 8000f14:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f18:	d30b      	bcc.n	8000f32 <__aeabi_f2uiz+0x22>
 8000f1a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f1e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f22:	d409      	bmi.n	8000f38 <__aeabi_f2uiz+0x28>
 8000f24:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f30:	4770      	bx	lr
 8000f32:	f04f 0000 	mov.w	r0, #0
 8000f36:	4770      	bx	lr
 8000f38:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f3c:	d101      	bne.n	8000f42 <__aeabi_f2uiz+0x32>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	d102      	bne.n	8000f48 <__aeabi_f2uiz+0x38>
 8000f42:	f04f 30ff 	mov.w	r0, #4294967295
 8000f46:	4770      	bx	lr
 8000f48:	f04f 0000 	mov.w	r0, #0
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <smallRbit>:

//These variables required for print function
static uint8_t YLine = 1;
static uint8_t Xcol = 1;

uint8_t smallRbit(uint8_t re) {
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	return (uint8_t) (__RBIT(re) >> 24);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	0e1b      	lsrs	r3, r3, #24
 8000f6a:	b2db      	uxtb	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <modulo>:

int modulo(int x,int N){
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	6039      	str	r1, [r7, #0]
    return (x % N + N) %N;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f88:	6839      	ldr	r1, [r7, #0]
 8000f8a:	fb01 f202 	mul.w	r2, r1, r2
 8000f8e:	1a9a      	subs	r2, r3, r2
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	fb93 f2f2 	sdiv	r2, r3, r2
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	fb01 f202 	mul.w	r2, r1, r2
 8000fa0:	1a9b      	subs	r3, r3, r2
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <LCD_Init>:

// Display Initialization
void LCD_Init(LS013B4DN04 *MemDisp, SPI_HandleTypeDef *Bus,
		GPIO_TypeDef *dispGPIO, uint16_t LCDcs) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	807b      	strh	r3, [r7, #2]

	//Store params into our struct
	MemDisp->Bus = Bus;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	601a      	str	r2, [r3, #0]
	MemDisp->dispGPIO = dispGPIO;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	605a      	str	r2, [r3, #4]
	MemDisp->LCDcs = LCDcs;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	811a      	strh	r2, [r3, #8]

	DispBuf = malloc(1152);
 8000fcc:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8000fd0:	f002 fd64 	bl	8003a9c <malloc>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <LCD_Init+0x78>)
 8000fda:	601a      	str	r2, [r3, #0]

	memset(DispBuf, 0x00, 1152);
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <LCD_Init+0x78>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f002 fd60 	bl	8003aac <memset>

	//At lease 3 + 13 clock is needed for Display clear (16 Clock = 8x2 bit = 2 byte)
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6858      	ldr	r0, [r3, #4]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	891b      	ldrh	r3, [r3, #8]
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f001 fac5 	bl	8002586 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to data sheet
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	2396      	movs	r3, #150	; 0x96
 8001002:	2202      	movs	r2, #2
 8001004:	4908      	ldr	r1, [pc, #32]	; (8001028 <LCD_Init+0x7c>)
 8001006:	f001 ff43 	bl	8002e90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6858      	ldr	r0, [r3, #4]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	891b      	ldrh	r3, [r3, #8]
 8001012:	2200      	movs	r2, #0
 8001014:	4619      	mov	r1, r3
 8001016:	f001 fab6 	bl	8002586 <HAL_GPIO_WritePin>
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200000a0 	.word	0x200000a0
 8001028:	20000000 	.word	0x20000000

0800102c <LCD_Update>:

// Display update (Transmit data)
void LCD_Update(LS013B4DN04 *MemDisp) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <LCD_Update+0xd0>)
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	4b31      	ldr	r3, [pc, #196]	; (8001100 <LCD_Update+0xd4>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4313      	orrs	r3, r2
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <LCD_Update+0xd0>)
 8001042:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <LCD_Update+0xd0>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <LCD_Update+0xd0>)
 8001050:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6858      	ldr	r0, [r3, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	891b      	ldrh	r3, [r3, #8]
 800105a:	2201      	movs	r2, #1
 800105c:	4619      	mov	r1, r3
 800105e:	f001 fa92 	bl	8002586 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	2396      	movs	r3, #150	; 0x96
 8001068:	2201      	movs	r2, #1
 800106a:	4924      	ldr	r1, [pc, #144]	; (80010fc <LCD_Update+0xd0>)
 800106c:	f001 ff10 	bl	8002e90 <HAL_SPI_Transmit>

	for (uint8_t row = 0; row < 96; row++) {
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	e02b      	b.n	80010ce <LCD_Update+0xa2>
		SendBuf[1] = smallRbit(row + 1); // counting from row number 1 to row number 96
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	3301      	adds	r3, #1
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff67 	bl	8000f50 <smallRbit>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <LCD_Update+0xd0>)
 8001088:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	491d      	ldr	r1, [pc, #116]	; (8001104 <LCD_Update+0xd8>)
 8001090:	2396      	movs	r3, #150	; 0x96
 8001092:	2201      	movs	r2, #1
 8001094:	f001 fefc 	bl	8002e90 <HAL_SPI_Transmit>

		uint16_t offset = row * 12;
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	b29b      	uxth	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	0052      	lsls	r2, r2, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	81bb      	strh	r3, [r7, #12]
		HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6818      	ldr	r0, [r3, #0]
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <LCD_Update+0xdc>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	89bb      	ldrh	r3, [r7, #12]
 80010b0:	18d1      	adds	r1, r2, r3
 80010b2:	2396      	movs	r3, #150	; 0x96
 80010b4:	220c      	movs	r2, #12
 80010b6:	f001 feeb 	bl	8002e90 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	2396      	movs	r3, #150	; 0x96
 80010c0:	2201      	movs	r2, #1
 80010c2:	4912      	ldr	r1, [pc, #72]	; (800110c <LCD_Update+0xe0>)
 80010c4:	f001 fee4 	bl	8002e90 <HAL_SPI_Transmit>
	for (uint8_t row = 0; row < 96; row++) {
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	3301      	adds	r3, #1
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	2b5f      	cmp	r3, #95	; 0x5f
 80010d2:	d9d0      	bls.n	8001076 <LCD_Update+0x4a>
	}

	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	2396      	movs	r3, #150	; 0x96
 80010da:	2201      	movs	r2, #1
 80010dc:	490b      	ldr	r1, [pc, #44]	; (800110c <LCD_Update+0xe0>)
 80010de:	f001 fed7 	bl	8002e90 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6858      	ldr	r0, [r3, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	891b      	ldrh	r3, [r3, #8]
 80010ea:	2200      	movs	r2, #0
 80010ec:	4619      	mov	r1, r3
 80010ee:	f001 fa4a 	bl	8002586 <HAL_GPIO_WritePin>
}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000a4 	.word	0x200000a4
 8001100:	20000004 	.word	0x20000004
 8001104:	200000a5 	.word	0x200000a5
 8001108:	200000a0 	.word	0x200000a0
 800110c:	2000009c 	.word	0x2000009c

08001110 <LCD_LoadPart>:
	memcpy(DispBuf, BMP, 1152);
}

// Buffer update (with X,Y Coordinate and image WxH) X,Y Coordinate start at (0,0) to (12,96)
void LCD_LoadPart(uint8_t *BMP, int Xcord, uint8_t Ycord, uint8_t bmpW,
		uint8_t bmpH, uint8_t drawMode, uint8_t repeatMode) {
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b08b      	sub	sp, #44	; 0x2c
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	460b      	mov	r3, r1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	4613      	mov	r3, r2
 8001124:	71bb      	strb	r3, [r7, #6]

	uint8_t displayRow = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint16_t displayRowOffset = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	843b      	strh	r3, [r7, #32]

	//Counting from Y origin point to bmpH using for loop
	for (uint8_t y = 0; y < bmpH; y++) {
 8001130:	2300      	movs	r3, #0
 8001132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001136:	e0fb      	b.n	8001330 <LCD_LoadPart+0x220>
		displayRow = Ycord + y;
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800113e:	4413      	add	r3, r2
 8001140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if ((repeatMode == REPEATMODE_NONE)
 8001144:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001148:	2b00      	cmp	r3, #0
 800114a:	d104      	bne.n	8001156 <LCD_LoadPart+0x46>
				&& (displayRow < 0 || displayRow >= 96)) {
 800114c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001150:	2b5f      	cmp	r3, #95	; 0x5f
 8001152:	f200 80e7 	bhi.w	8001324 <LCD_LoadPart+0x214>
			continue;
		}
		displayRow %= 96;
 8001156:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800115a:	4b7b      	ldr	r3, [pc, #492]	; (8001348 <LCD_LoadPart+0x238>)
 800115c:	fba3 1302 	umull	r1, r3, r3, r2
 8001160:	0999      	lsrs	r1, r3, #6
 8001162:	460b      	mov	r3, r1
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	440b      	add	r3, r1
 8001168:	015b      	lsls	r3, r3, #5
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		displayRowOffset = displayRow * 12;
 8001170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001174:	b29b      	uxth	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	0052      	lsls	r2, r2, #1
 800117a:	4413      	add	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	843b      	strh	r3, [r7, #32]

		int firstXByte = floor((float)Xcord / 8);
 8001180:	68b8      	ldr	r0, [r7, #8]
 8001182:	f7ff fc85 	bl	8000a90 <__aeabi_i2f>
 8001186:	4603      	mov	r3, r0
 8001188:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fd87 	bl	8000ca0 <__aeabi_fdiv>
 8001192:	4603      	mov	r3, r0
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fa69 	bl	800066c <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f002 fd3d 	bl	8003c20 <floor>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fb3d 	bl	800082c <__aeabi_d2iz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	61fb      	str	r3, [r7, #28]
		uint8_t leftOffset = modulo(Xcord, 8);
 80011b6:	2108      	movs	r1, #8
 80011b8:	68b8      	ldr	r0, [r7, #8]
 80011ba:	f7ff fedc 	bl	8000f76 <modulo>
 80011be:	4603      	mov	r3, r0
 80011c0:	76fb      	strb	r3, [r7, #27]

		uint8_t v1, v2 = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t *currentEditingBuf;

		for (uint8_t j = 0; j < bmpW + 1; j++) {
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011ce:	e0a2      	b.n	8001316 <LCD_LoadPart+0x206>
			if (j == bmpW)
 80011d0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d103      	bne.n	80011e2 <LCD_LoadPart+0xd2>
				v2 = 0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80011e0:	e00d      	b.n	80011fe <LCD_LoadPart+0xee>
			else
				v2 = *(BMP + bmpW * y + j);
 80011e2:	79bb      	ldrb	r3, [r7, #6]
 80011e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80011e8:	fb02 f303 	mul.w	r3, r2, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80011f2:	4413      	add	r3, r2
 80011f4:	68fa      	ldr	r2, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			if (repeatMode == REPEATMODE_NONE
 80011fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d110      	bne.n	8001228 <LCD_LoadPart+0x118>
					&& (firstXByte + j < 0 || firstXByte + j > 11)) {
 8001206:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	4413      	add	r3, r2
 800120e:	2b00      	cmp	r3, #0
 8001210:	db05      	blt.n	800121e <LCD_LoadPart+0x10e>
 8001212:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	4413      	add	r3, r2
 800121a:	2b0b      	cmp	r3, #11
 800121c:	dd04      	ble.n	8001228 <LCD_LoadPart+0x118>
				v1 = v2;
 800121e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001222:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				continue;
 8001226:	e071      	b.n	800130c <LCD_LoadPart+0x1fc>
			}

			currentEditingBuf = DispBuf + displayRowOffset
					+ (firstXByte + j) % 12;
 8001228:	4b48      	ldr	r3, [pc, #288]	; (800134c <LCD_LoadPart+0x23c>)
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	8c3c      	ldrh	r4, [r7, #32]
 800122e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	441a      	add	r2, r3
 8001236:	4b46      	ldr	r3, [pc, #280]	; (8001350 <LCD_LoadPart+0x240>)
 8001238:	fb83 1302 	smull	r1, r3, r3, r2
 800123c:	1059      	asrs	r1, r3, #1
 800123e:	17d3      	asrs	r3, r2, #31
 8001240:	1ac9      	subs	r1, r1, r3
 8001242:	460b      	mov	r3, r1
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	440b      	add	r3, r1
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	1ad1      	subs	r1, r2, r3
 800124c:	460b      	mov	r3, r1
 800124e:	4423      	add	r3, r4
			currentEditingBuf = DispBuf + displayRowOffset
 8001250:	4403      	add	r3, r0
 8001252:	617b      	str	r3, [r7, #20]

			switch (drawMode) {
 8001254:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001258:	2b02      	cmp	r3, #2
 800125a:	d03a      	beq.n	80012d2 <LCD_LoadPart+0x1c2>
 800125c:	2b02      	cmp	r3, #2
 800125e:	dc51      	bgt.n	8001304 <LCD_LoadPart+0x1f4>
 8001260:	2b00      	cmp	r3, #0
 8001262:	d002      	beq.n	800126a <LCD_LoadPart+0x15a>
 8001264:	2b01      	cmp	r3, #1
 8001266:	d019      	beq.n	800129c <LCD_LoadPart+0x18c>
 8001268:	e04c      	b.n	8001304 <LCD_LoadPart+0x1f4>
			case DRAWMODE_ADD:
				*currentEditingBuf |= ((v1 << (8 - leftOffset))
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b25a      	sxtb	r2, r3
 8001270:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001274:	7efb      	ldrb	r3, [r7, #27]
 8001276:	f1c3 0308 	rsb	r3, r3, #8
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
						| (v2 >> leftOffset));
 800127e:	b259      	sxtb	r1, r3
 8001280:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001284:	7efb      	ldrb	r3, [r7, #27]
 8001286:	fa40 f303 	asr.w	r3, r0, r3
 800128a:	b25b      	sxtb	r3, r3
 800128c:	430b      	orrs	r3, r1
 800128e:	b25b      	sxtb	r3, r3
				*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001290:	4313      	orrs	r3, r2
 8001292:	b25b      	sxtb	r3, r3
 8001294:	b2da      	uxtb	r2, r3
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	701a      	strb	r2, [r3, #0]
				break;
 800129a:	e033      	b.n	8001304 <LCD_LoadPart+0x1f4>
			case DRAWMODE_CULL:
				*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b25a      	sxtb	r2, r3
 80012a2:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80012a6:	7efb      	ldrb	r3, [r7, #27]
 80012a8:	f1c3 0308 	rsb	r3, r3, #8
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
						| (v2 >> leftOffset));
 80012b0:	b259      	sxtb	r1, r3
 80012b2:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80012b6:	7efb      	ldrb	r3, [r7, #27]
 80012b8:	fa40 f303 	asr.w	r3, r0, r3
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	430b      	orrs	r3, r1
 80012c0:	b25b      	sxtb	r3, r3
				*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80012c2:	43db      	mvns	r3, r3
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	4013      	ands	r3, r2
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	701a      	strb	r2, [r3, #0]
				break;
 80012d0:	e018      	b.n	8001304 <LCD_LoadPart+0x1f4>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b25a      	sxtb	r2, r3
 80012d8:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80012dc:	7efb      	ldrb	r3, [r7, #27]
 80012de:	f1c3 0308 	rsb	r3, r3, #8
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
						| (v2 >> leftOffset));
 80012e6:	b259      	sxtb	r1, r3
 80012e8:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80012ec:	7efb      	ldrb	r3, [r7, #27]
 80012ee:	fa40 f303 	asr.w	r3, r0, r3
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	430b      	orrs	r3, r1
 80012f6:	b25b      	sxtb	r3, r3
				*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80012f8:	4053      	eors	r3, r2
 80012fa:	b25b      	sxtb	r3, r3
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	701a      	strb	r2, [r3, #0]
				break;
 8001302:	bf00      	nop
			}

			v1 = v2;
 8001304:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001308:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t j = 0; j < bmpW + 1; j++) {
 800130c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001310:	3301      	adds	r3, #1
 8001312:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001316:	79ba      	ldrb	r2, [r7, #6]
 8001318:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800131c:	429a      	cmp	r2, r3
 800131e:	f4bf af57 	bcs.w	80011d0 <LCD_LoadPart+0xc0>
 8001322:	e000      	b.n	8001326 <LCD_LoadPart+0x216>
			continue;
 8001324:	bf00      	nop
	for (uint8_t y = 0; y < bmpH; y++) {
 8001326:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800132a:	3301      	adds	r3, #1
 800132c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001330:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001334:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001338:	429a      	cmp	r2, r3
 800133a:	f4ff aefd 	bcc.w	8001138 <LCD_LoadPart+0x28>
		}
	}
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	372c      	adds	r7, #44	; 0x2c
 8001344:	46bd      	mov	sp, r7
 8001346:	bd90      	pop	{r4, r7, pc}
 8001348:	aaaaaaab 	.word	0xaaaaaaab
 800134c:	200000a0 	.word	0x200000a0
 8001350:	2aaaaaab 	.word	0x2aaaaaab

08001354 <LCD_DrawLine>:

void LCD_DrawLine(uint8_t startingRow, int startingPoint, uint8_t length,
		uint8_t drawMode) {
 8001354:	b480      	push	{r7}
 8001356:	b087      	sub	sp, #28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6039      	str	r1, [r7, #0]
 800135c:	4611      	mov	r1, r2
 800135e:	461a      	mov	r2, r3
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	460b      	mov	r3, r1
 8001366:	71bb      	strb	r3, [r7, #6]
 8001368:	4613      	mov	r3, r2
 800136a:	717b      	strb	r3, [r7, #5]
	uint16_t rowOffset = (startingRow % 96) * 12;
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <LCD_DrawLine+0x140>)
 8001370:	fba3 1302 	umull	r1, r3, r3, r2
 8001374:	0999      	lsrs	r1, r3, #6
 8001376:	460b      	mov	r3, r1
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	440b      	add	r3, r1
 800137c:	015b      	lsls	r3, r3, #5
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	b2db      	uxtb	r3, r3
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	0052      	lsls	r2, r2, #1
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	82bb      	strh	r3, [r7, #20]

	for (uint8_t j = 0; j < length; j++) {
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
 8001392:	e074      	b.n	800147e <LCD_DrawLine+0x12a>
		if(startingPoint + j < 0)
 8001394:	7dfa      	ldrb	r2, [r7, #23]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	4413      	add	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	db6b      	blt.n	8001476 <LCD_DrawLine+0x122>
			continue;
		uint8_t additionalOffset = ((startingPoint + j) % 96) / 8;
 800139e:	7dfa      	ldrb	r2, [r7, #23]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	441a      	add	r2, r3
 80013a4:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <LCD_DrawLine+0x144>)
 80013a6:	fb83 1302 	smull	r1, r3, r3, r2
 80013aa:	1119      	asrs	r1, r3, #4
 80013ac:	17d3      	asrs	r3, r2, #31
 80013ae:	1ac9      	subs	r1, r1, r3
 80013b0:	460b      	mov	r3, r1
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	440b      	add	r3, r1
 80013b6:	015b      	lsls	r3, r3, #5
 80013b8:	1ad1      	subs	r1, r2, r3
 80013ba:	460b      	mov	r3, r1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	da00      	bge.n	80013c2 <LCD_DrawLine+0x6e>
 80013c0:	3307      	adds	r3, #7
 80013c2:	10db      	asrs	r3, r3, #3
 80013c4:	74fb      	strb	r3, [r7, #19]

		uint8_t *currentEditingBuf = DispBuf + rowOffset + additionalOffset;
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <LCD_DrawLine+0x148>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	8ab9      	ldrh	r1, [r7, #20]
 80013cc:	7cfb      	ldrb	r3, [r7, #19]
 80013ce:	440b      	add	r3, r1
 80013d0:	4413      	add	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
		switch (drawMode) {
 80013d4:	797b      	ldrb	r3, [r7, #5]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d036      	beq.n	8001448 <LCD_DrawLine+0xf4>
 80013da:	2b02      	cmp	r3, #2
 80013dc:	dc4c      	bgt.n	8001478 <LCD_DrawLine+0x124>
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <LCD_DrawLine+0x94>
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d017      	beq.n	8001416 <LCD_DrawLine+0xc2>
 80013e6:	e047      	b.n	8001478 <LCD_DrawLine+0x124>
		case DRAWMODE_ADD:
			*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	7df9      	ldrb	r1, [r7, #23]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	440b      	add	r3, r1
 80013f4:	4259      	negs	r1, r3
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	f001 0107 	and.w	r1, r1, #7
 80013fe:	bf58      	it	pl
 8001400:	424b      	negpl	r3, r1
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	fa41 f303 	asr.w	r3, r1, r3
 8001408:	b25b      	sxtb	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	b25b      	sxtb	r3, r3
 800140e:	b2da      	uxtb	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	701a      	strb	r2, [r3, #0]
			break;
 8001414:	e030      	b.n	8001478 <LCD_DrawLine+0x124>
		case DRAWMODE_CULL:
			*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b25a      	sxtb	r2, r3
 800141c:	7df9      	ldrb	r1, [r7, #23]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	440b      	add	r3, r1
 8001422:	4259      	negs	r1, r3
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	f001 0107 	and.w	r1, r1, #7
 800142c:	bf58      	it	pl
 800142e:	424b      	negpl	r3, r1
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	fa41 f303 	asr.w	r3, r1, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	b25b      	sxtb	r3, r3
 800143c:	4013      	ands	r3, r2
 800143e:	b25b      	sxtb	r3, r3
 8001440:	b2da      	uxtb	r2, r3
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	701a      	strb	r2, [r3, #0]
			break;
 8001446:	e017      	b.n	8001478 <LCD_DrawLine+0x124>
		case DRAWMODE_TOGGLE:
			*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25a      	sxtb	r2, r3
 800144e:	7df9      	ldrb	r1, [r7, #23]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	440b      	add	r3, r1
 8001454:	4259      	negs	r1, r3
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	f001 0107 	and.w	r1, r1, #7
 800145e:	bf58      	it	pl
 8001460:	424b      	negpl	r3, r1
 8001462:	2180      	movs	r1, #128	; 0x80
 8001464:	fa41 f303 	asr.w	r3, r1, r3
 8001468:	b25b      	sxtb	r3, r3
 800146a:	4053      	eors	r3, r2
 800146c:	b25b      	sxtb	r3, r3
 800146e:	b2da      	uxtb	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	701a      	strb	r2, [r3, #0]
			break;
 8001474:	e000      	b.n	8001478 <LCD_DrawLine+0x124>
			continue;
 8001476:	bf00      	nop
	for (uint8_t j = 0; j < length; j++) {
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	3301      	adds	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
 800147e:	7dfa      	ldrb	r2, [r7, #23]
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	429a      	cmp	r2, r3
 8001484:	d386      	bcc.n	8001394 <LCD_DrawLine+0x40>
		}
	}
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	aaaaaaab 	.word	0xaaaaaaab
 8001498:	2aaaaaab 	.word	0x2aaaaaab
 800149c:	200000a0 	.word	0x200000a0

080014a0 <LCD_Fill>:
		DispBuf[invt] = ~DispBuf[invt];
	} while (invt);
}

//Fill screen with either black or white color
void LCD_Fill(bool fill) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	memset(DispBuf, (fill ? 0 : 0xFF), 1152);
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <LCD_Fill+0x2c>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <LCD_Fill+0x18>
 80014b4:	2300      	movs	r3, #0
 80014b6:	e000      	b.n	80014ba <LCD_Fill+0x1a>
 80014b8:	23ff      	movs	r3, #255	; 0xff
 80014ba:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80014be:	4619      	mov	r1, r3
 80014c0:	f002 faf4 	bl	8003aac <memset>
//	HAL_Delay(10);
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000a0 	.word	0x200000a0

080014d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80014d0:	b5b0      	push	{r4, r5, r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014d6:	f000 fd4b 	bl	8001f70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014da:	f000 fa83 	bl	80019e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014de:	f000 fb49 	bl	8001b74 <MX_GPIO_Init>
	MX_SPI1_Init();
 80014e2:	f000 fac1 	bl	8001a68 <MX_SPI1_Init>
	MX_TIM1_Init();
 80014e6:	f000 faf5 	bl	8001ad4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80014ea:	4858      	ldr	r0, [pc, #352]	; (800164c <main+0x17c>)
 80014ec:	f001 ff02 	bl	80032f4 <HAL_TIM_Base_Start_IT>

	// ALL GPIO AND BUSES MUST BE INITED BEFORE CALL THIS FUNCTION
	LCD_Init(&MemDisp, &hspi1, GPIOA, CS_Pin);
 80014f0:	2310      	movs	r3, #16
 80014f2:	4a57      	ldr	r2, [pc, #348]	; (8001650 <main+0x180>)
 80014f4:	4957      	ldr	r1, [pc, #348]	; (8001654 <main+0x184>)
 80014f6:	4858      	ldr	r0, [pc, #352]	; (8001658 <main+0x188>)
 80014f8:	f7ff fd58 	bl	8000fac <LCD_Init>
	LCD_Fill(true);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff ffcf 	bl	80014a0 <LCD_Fill>
	LCD_Update(&MemDisp);
 8001502:	4855      	ldr	r0, [pc, #340]	; (8001658 <main+0x188>)
 8001504:	f7ff fd92 	bl	800102c <LCD_Update>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		tick++;
 8001508:	4b54      	ldr	r3, [pc, #336]	; (800165c <main+0x18c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	4a53      	ldr	r2, [pc, #332]	; (800165c <main+0x18c>)
 8001510:	6013      	str	r3, [r2, #0]
//		 Speed Gradual Control
//		if (overallSpeed < 1.2) {
//			overallSpeed += 0.001;
//		}

		if (JUMP_BUTTON_PRESSED) {
 8001512:	4b53      	ldr	r3, [pc, #332]	; (8001660 <main+0x190>)
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00d      	beq.n	8001536 <main+0x66>
			if(!isJumping) {
 800151a:	4b52      	ldr	r3, [pc, #328]	; (8001664 <main+0x194>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	f083 0301 	eor.w	r3, r3, #1
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <main+0x60>
				isJumping = 1;
 8001528:	4b4e      	ldr	r3, [pc, #312]	; (8001664 <main+0x194>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e002      	b.n	8001536 <main+0x66>
			} else {
				JUMP_BUTTON_PRESSED = 0;
 8001530:	4b4b      	ldr	r3, [pc, #300]	; (8001660 <main+0x190>)
 8001532:	2200      	movs	r2, #0
 8001534:	705a      	strb	r2, [r3, #1]
			}
		}

		if (isJumping) {
 8001536:	4b4b      	ldr	r3, [pc, #300]	; (8001664 <main+0x194>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f000 80a0 	beq.w	8001680 <main+0x1b0>
			if (jumpTick < JumpTickMax / overallSpeed - 1) {
 8001540:	4b49      	ldr	r3, [pc, #292]	; (8001668 <main+0x198>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff faa3 	bl	8000a90 <__aeabi_i2f>
 800154a:	4604      	mov	r4, r0
 800154c:	4a47      	ldr	r2, [pc, #284]	; (800166c <main+0x19c>)
 800154e:	4b48      	ldr	r3, [pc, #288]	; (8001670 <main+0x1a0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	4610      	mov	r0, r2
 8001556:	f7ff fba3 	bl	8000ca0 <__aeabi_fdiv>
 800155a:	4603      	mov	r3, r0
 800155c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff f9df 	bl	8000924 <__aeabi_fsub>
 8001566:	4603      	mov	r3, r0
 8001568:	4619      	mov	r1, r3
 800156a:	4620      	mov	r0, r4
 800156c:	f7ff fc82 	bl	8000e74 <__aeabi_fcmplt>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d05b      	beq.n	800162e <main+0x15e>
				jumpTick++;
 8001576:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <main+0x198>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <main+0x198>)
 8001580:	701a      	strb	r2, [r3, #0]
				dinoVerticalMovement = jumpTick
						* (jumpTick - JumpTickMax / overallSpeed)
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <main+0x198>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fa82 	bl	8000a90 <__aeabi_i2f>
 800158c:	4604      	mov	r4, r0
 800158e:	4b36      	ldr	r3, [pc, #216]	; (8001668 <main+0x198>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fa7c 	bl	8000a90 <__aeabi_i2f>
 8001598:	4605      	mov	r5, r0
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <main+0x19c>)
 800159c:	4b34      	ldr	r3, [pc, #208]	; (8001670 <main+0x1a0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4610      	mov	r0, r2
 80015a4:	f7ff fb7c 	bl	8000ca0 <__aeabi_fdiv>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4619      	mov	r1, r3
 80015ac:	4628      	mov	r0, r5
 80015ae:	f7ff f9b9 	bl	8000924 <__aeabi_fsub>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fabe 	bl	8000b38 <__aeabi_fmul>
 80015bc:	4603      	mov	r3, r0
 80015be:	461c      	mov	r4, r3
						* (4
								/ ((JumpTickMax / overallSpeed)
 80015c0:	4a2a      	ldr	r2, [pc, #168]	; (800166c <main+0x19c>)
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <main+0x1a0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4619      	mov	r1, r3
 80015c8:	4610      	mov	r0, r2
 80015ca:	f7ff fb69 	bl	8000ca0 <__aeabi_fdiv>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461d      	mov	r5, r3
										* (JumpTickMax / overallSpeed)))
 80015d2:	4a26      	ldr	r2, [pc, #152]	; (800166c <main+0x19c>)
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <main+0x1a0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f7ff fb60 	bl	8000ca0 <__aeabi_fdiv>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4628      	mov	r0, r5
 80015e6:	f7ff faa7 	bl	8000b38 <__aeabi_fmul>
 80015ea:	4603      	mov	r3, r0
								/ ((JumpTickMax / overallSpeed)
 80015ec:	4619      	mov	r1, r3
 80015ee:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 80015f2:	f7ff fb55 	bl	8000ca0 <__aeabi_fdiv>
 80015f6:	4603      	mov	r3, r0
						* (4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fa9c 	bl	8000b38 <__aeabi_fmul>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
						* DinoJumpHeight + DinoGroundPos;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <main+0x1a4>)
 8001606:	4619      	mov	r1, r3
 8001608:	4610      	mov	r0, r2
 800160a:	f7ff fa95 	bl	8000b38 <__aeabi_fmul>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <main+0x1a8>)
 8001614:	4619      	mov	r1, r3
 8001616:	4610      	mov	r0, r2
 8001618:	f7ff f986 	bl	8000928 <__addsf3>
 800161c:	4603      	mov	r3, r0
				dinoVerticalMovement = jumpTick
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fc76 	bl	8000f10 <__aeabi_f2uiz>
 8001624:	4603      	mov	r3, r0
 8001626:	b2da      	uxtb	r2, r3
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <main+0x1ac>)
 800162a:	701a      	strb	r2, [r3, #0]
 800162c:	e030      	b.n	8001690 <main+0x1c0>
			} else {
				isJumping = 0;
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <main+0x194>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
				jumpTick = 0;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <main+0x198>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
				dinoVerticalMovement = DinoGroundPos;
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <main+0x1a8>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fc67 	bl	8000f10 <__aeabi_f2uiz>
 8001642:	4603      	mov	r3, r0
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <main+0x1ac>)
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	e021      	b.n	8001690 <main+0x1c0>
 800164c:	20000100 	.word	0x20000100
 8001650:	40010800 	.word	0x40010800
 8001654:	200000a8 	.word	0x200000a8
 8001658:	20000148 	.word	0x20000148
 800165c:	20000154 	.word	0x20000154
 8001660:	2000015c 	.word	0x2000015c
 8001664:	20000162 	.word	0x20000162
 8001668:	20000163 	.word	0x20000163
 800166c:	428c0000 	.word	0x428c0000
 8001670:	20000008 	.word	0x20000008
 8001674:	42200000 	.word	0x42200000
 8001678:	42680000 	.word	0x42680000
 800167c:	20000164 	.word	0x20000164
			}
		} else {
			dinoVerticalMovement = DinoGroundPos;
 8001680:	4b97      	ldr	r3, [pc, #604]	; (80018e0 <main+0x410>)
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fc44 	bl	8000f10 <__aeabi_f2uiz>
 8001688:	4603      	mov	r3, r0
 800168a:	b2da      	uxtb	r2, r3
 800168c:	4b95      	ldr	r3, [pc, #596]	; (80018e4 <main+0x414>)
 800168e:	701a      	strb	r2, [r3, #0]
		}

		groundMovement -= 0.7 * overallSpeed;
 8001690:	4b95      	ldr	r3, [pc, #596]	; (80018e8 <main+0x418>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7fe ffe9 	bl	800066c <__aeabi_f2d>
 800169a:	4604      	mov	r4, r0
 800169c:	460d      	mov	r5, r1
 800169e:	4b93      	ldr	r3, [pc, #588]	; (80018ec <main+0x41c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ffe2 	bl	800066c <__aeabi_f2d>
 80016a8:	a389      	add	r3, pc, #548	; (adr r3, 80018d0 <main+0x400>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe fd4f 	bl	8000150 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fe77 	bl	80003ac <__aeabi_dsub>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f8d9 	bl	800087c <__aeabi_d2f>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4a86      	ldr	r2, [pc, #536]	; (80018e8 <main+0x418>)
 80016ce:	6013      	str	r3, [r2, #0]
		skyMovement -= 0.1 * overallSpeed;
 80016d0:	4b87      	ldr	r3, [pc, #540]	; (80018f0 <main+0x420>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ffc9 	bl	800066c <__aeabi_f2d>
 80016da:	4604      	mov	r4, r0
 80016dc:	460d      	mov	r5, r1
 80016de:	4b83      	ldr	r3, [pc, #524]	; (80018ec <main+0x41c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ffc2 	bl	800066c <__aeabi_f2d>
 80016e8:	a37b      	add	r3, pc, #492	; (adr r3, 80018d8 <main+0x408>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe fd2f 	bl	8000150 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f7fe fe57 	bl	80003ac <__aeabi_dsub>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff f8b9 	bl	800087c <__aeabi_d2f>
 800170a:	4603      	mov	r3, r0
 800170c:	4a78      	ldr	r2, [pc, #480]	; (80018f0 <main+0x420>)
 800170e:	6013      	str	r3, [r2, #0]

		plantX = floor(groundMovement);
 8001710:	4b75      	ldr	r3, [pc, #468]	; (80018e8 <main+0x418>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ffa9 	bl	800066c <__aeabi_f2d>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4610      	mov	r0, r2
 8001720:	4619      	mov	r1, r3
 8001722:	f002 fa7d 	bl	8003c20 <floor>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f87d 	bl	800082c <__aeabi_d2iz>
 8001732:	4603      	mov	r3, r0
 8001734:	4a6f      	ldr	r2, [pc, #444]	; (80018f4 <main+0x424>)
 8001736:	6013      	str	r3, [r2, #0]
		dinoX = (int) 4;
 8001738:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <main+0x428>)
 800173a:	2204      	movs	r2, #4
 800173c:	601a      	str	r2, [r3, #0]
		cloudX = floor(skyMovement);
 800173e:	4b6c      	ldr	r3, [pc, #432]	; (80018f0 <main+0x420>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff92 	bl	800066c <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f002 fa66 	bl	8003c20 <floor>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	f7ff f866 	bl	800082c <__aeabi_d2iz>
 8001760:	4603      	mov	r3, r0
 8001762:	4a66      	ldr	r2, [pc, #408]	; (80018fc <main+0x42c>)
 8001764:	6013      	str	r3, [r2, #0]
		dinoY = dinoVerticalMovement;
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <main+0x414>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	461a      	mov	r2, r3
 800176c:	4b64      	ldr	r3, [pc, #400]	; (8001900 <main+0x430>)
 800176e:	601a      	str	r2, [r3, #0]

		if (groundMovement < -20)
 8001770:	4b5d      	ldr	r3, [pc, #372]	; (80018e8 <main+0x418>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4963      	ldr	r1, [pc, #396]	; (8001904 <main+0x434>)
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fb7c 	bl	8000e74 <__aeabi_fcmplt>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <main+0x2b8>
			groundMovement = 96;
 8001782:	4b59      	ldr	r3, [pc, #356]	; (80018e8 <main+0x418>)
 8001784:	4a60      	ldr	r2, [pc, #384]	; (8001908 <main+0x438>)
 8001786:	601a      	str	r2, [r3, #0]
		if (skyMovement < -60)
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <main+0x420>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	495f      	ldr	r1, [pc, #380]	; (800190c <main+0x43c>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fb70 	bl	8000e74 <__aeabi_fcmplt>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <main+0x2d0>
			skyMovement = 96;
 800179a:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <main+0x420>)
 800179c:	4a5a      	ldr	r2, [pc, #360]	; (8001908 <main+0x438>)
 800179e:	601a      	str	r2, [r3, #0]

		// Reset canvas
		LCD_Fill(true);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff fe7d 	bl	80014a0 <LCD_Fill>
		LCD_DrawLine(77, 0, 96, DRAWMODE_ADD);
 80017a6:	2300      	movs	r3, #0
 80017a8:	2260      	movs	r2, #96	; 0x60
 80017aa:	2100      	movs	r1, #0
 80017ac:	204d      	movs	r0, #77	; 0x4d
 80017ae:	f7ff fdd1 	bl	8001354 <LCD_DrawLine>

		// Add culling masks
		// Plant
		LCD_DrawLine(77, plantX + 2, 6, DRAWMODE_CULL);
 80017b2:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <main+0x424>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	1c99      	adds	r1, r3, #2
 80017b8:	2301      	movs	r3, #1
 80017ba:	2206      	movs	r2, #6
 80017bc:	204d      	movs	r0, #77	; 0x4d
 80017be:	f7ff fdc9 	bl	8001354 <LCD_DrawLine>
		// Dino
		LCD_DrawLine(dinoY + 19, dinoX + 3, 10, DRAWMODE_CULL);
 80017c2:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <main+0x430>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	3313      	adds	r3, #19
 80017ca:	b2d8      	uxtb	r0, r3
 80017cc:	4b4a      	ldr	r3, [pc, #296]	; (80018f8 <main+0x428>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1cd9      	adds	r1, r3, #3
 80017d2:	2301      	movs	r3, #1
 80017d4:	220a      	movs	r2, #10
 80017d6:	f7ff fdbd 	bl	8001354 <LCD_DrawLine>
		LCD_DrawLine(dinoY + 6, dinoX + 15, 5, DRAWMODE_CULL);
 80017da:	4b49      	ldr	r3, [pc, #292]	; (8001900 <main+0x430>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	3306      	adds	r3, #6
 80017e2:	b2d8      	uxtb	r0, r3
 80017e4:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <main+0x428>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f103 010f 	add.w	r1, r3, #15
 80017ec:	2301      	movs	r3, #1
 80017ee:	2205      	movs	r2, #5
 80017f0:	f7ff fdb0 	bl	8001354 <LCD_DrawLine>

		// Render fire
		if (!isJumping) {
 80017f4:	4b46      	ldr	r3, [pc, #280]	; (8001910 <main+0x440>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d026      	beq.n	8001850 <main+0x380>
			if (FIRE_BUTTON_PRESSED) {
 8001802:	4b44      	ldr	r3, [pc, #272]	; (8001914 <main+0x444>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d022      	beq.n	8001850 <main+0x380>
				LCD_LoadPart((uint8_t*) Fire[(tick / (int)(50 / overallSpeed)) % 2], 24, 52, 9, 25, DRAWMODE_ADD, REPEATMODE_NONE);
 800180a:	4b43      	ldr	r3, [pc, #268]	; (8001918 <main+0x448>)
 800180c:	681c      	ldr	r4, [r3, #0]
 800180e:	4b37      	ldr	r3, [pc, #220]	; (80018ec <main+0x41c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4841      	ldr	r0, [pc, #260]	; (800191c <main+0x44c>)
 8001816:	f7ff fa43 	bl	8000ca0 <__aeabi_fdiv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fb51 	bl	8000ec4 <__aeabi_f2iz>
 8001822:	4603      	mov	r3, r0
 8001824:	fbb4 f3f3 	udiv	r3, r4, r3
 8001828:	f003 0201 	and.w	r2, r3, #1
 800182c:	4613      	mov	r3, r2
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	011a      	lsls	r2, r3, #4
 8001834:	1ad2      	subs	r2, r2, r3
 8001836:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <main+0x450>)
 8001838:	18d0      	adds	r0, r2, r3
 800183a:	2300      	movs	r3, #0
 800183c:	9302      	str	r3, [sp, #8]
 800183e:	2300      	movs	r3, #0
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	2319      	movs	r3, #25
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	2309      	movs	r3, #9
 8001848:	2234      	movs	r2, #52	; 0x34
 800184a:	2118      	movs	r1, #24
 800184c:	f7ff fc60 	bl	8001110 <LCD_LoadPart>
			}
		}

		// Render dino!
		if (isJumping) {
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <main+0x440>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00f      	beq.n	8001878 <main+0x3a8>
			LCD_LoadPart((uint8_t*) DinoNormalS, dinoX, dinoY, 3, 22,
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <main+0x428>)
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	4b28      	ldr	r3, [pc, #160]	; (8001900 <main+0x430>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	2300      	movs	r3, #0
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	2300      	movs	r3, #0
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	2316      	movs	r3, #22
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	2303      	movs	r3, #3
 8001870:	482c      	ldr	r0, [pc, #176]	; (8001924 <main+0x454>)
 8001872:	f7ff fc4d 	bl	8001110 <LCD_LoadPart>
 8001876:	e080      	b.n	800197a <main+0x4aa>
			DRAWMODE_ADD, REPEATMODE_NONE);
		} else {
			// Fire dino
			if (FIRE_BUTTON_PRESSED) {
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <main+0x444>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d057      	beq.n	8001930 <main+0x460>
				LCD_LoadPart((uint8_t*) DinoFireRunning[(tick / (int)(30 / overallSpeed)) % 2],
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <main+0x448>)
 8001882:	681c      	ldr	r4, [r3, #0]
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <main+0x41c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	4827      	ldr	r0, [pc, #156]	; (8001928 <main+0x458>)
 800188c:	f7ff fa08 	bl	8000ca0 <__aeabi_fdiv>
 8001890:	4603      	mov	r3, r0
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fb16 	bl	8000ec4 <__aeabi_f2iz>
 8001898:	4603      	mov	r3, r0
 800189a:	fbb4 f3f3 	udiv	r3, r4, r3
 800189e:	f003 0201 	and.w	r2, r3, #1
 80018a2:	4613      	mov	r3, r2
 80018a4:	015b      	lsls	r3, r3, #5
 80018a6:	4413      	add	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <main+0x45c>)
 80018ac:	1898      	adds	r0, r3, r2
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <main+0x428>)
 80018b0:	6819      	ldr	r1, [r3, #0]
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <main+0x430>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	2300      	movs	r3, #0
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	2300      	movs	r3, #0
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	2316      	movs	r3, #22
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2303      	movs	r3, #3
 80018c6:	f7ff fc23 	bl	8001110 <LCD_LoadPart>
 80018ca:	e056      	b.n	800197a <main+0x4aa>
 80018cc:	f3af 8000 	nop.w
 80018d0:	66666666 	.word	0x66666666
 80018d4:	3fe66666 	.word	0x3fe66666
 80018d8:	9999999a 	.word	0x9999999a
 80018dc:	3fb99999 	.word	0x3fb99999
 80018e0:	42680000 	.word	0x42680000
 80018e4:	20000164 	.word	0x20000164
 80018e8:	20000168 	.word	0x20000168
 80018ec:	20000008 	.word	0x20000008
 80018f0:	2000000c 	.word	0x2000000c
 80018f4:	2000016c 	.word	0x2000016c
 80018f8:	20000170 	.word	0x20000170
 80018fc:	20000174 	.word	0x20000174
 8001900:	20000178 	.word	0x20000178
 8001904:	c1a00000 	.word	0xc1a00000
 8001908:	42c00000 	.word	0x42c00000
 800190c:	c2700000 	.word	0xc2700000
 8001910:	20000162 	.word	0x20000162
 8001914:	20000158 	.word	0x20000158
 8001918:	20000154 	.word	0x20000154
 800191c:	42480000 	.word	0x42480000
 8001920:	08003f14 	.word	0x08003f14
 8001924:	08003e4c 	.word	0x08003e4c
 8001928:	41f00000 	.word	0x41f00000
 800192c:	08003e90 	.word	0x08003e90
						dinoX, dinoY, 3, 22, DRAWMODE_ADD, REPEATMODE_NONE);
			} else {
				LCD_LoadPart((uint8_t*) DinoNormalRunning[(tick / (int)(30 / overallSpeed)) % 2],
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <main+0x4e8>)
 8001932:	681c      	ldr	r4, [r3, #0]
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <main+0x4ec>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	4821      	ldr	r0, [pc, #132]	; (80019c0 <main+0x4f0>)
 800193c:	f7ff f9b0 	bl	8000ca0 <__aeabi_fdiv>
 8001940:	4603      	mov	r3, r0
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fabe 	bl	8000ec4 <__aeabi_f2iz>
 8001948:	4603      	mov	r3, r0
 800194a:	fbb4 f3f3 	udiv	r3, r4, r3
 800194e:	f003 0201 	and.w	r2, r3, #1
 8001952:	4613      	mov	r3, r2
 8001954:	015b      	lsls	r3, r3, #5
 8001956:	4413      	add	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4a1a      	ldr	r2, [pc, #104]	; (80019c4 <main+0x4f4>)
 800195c:	1898      	adds	r0, r3, r2
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <main+0x4f8>)
 8001960:	6819      	ldr	r1, [r3, #0]
 8001962:	4b1a      	ldr	r3, [pc, #104]	; (80019cc <main+0x4fc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	2300      	movs	r3, #0
 800196a:	9302      	str	r3, [sp, #8]
 800196c:	2300      	movs	r3, #0
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2316      	movs	r3, #22
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2303      	movs	r3, #3
 8001976:	f7ff fbcb 	bl	8001110 <LCD_LoadPart>
						dinoX, dinoY, 3, 22, DRAWMODE_ADD, REPEATMODE_NONE);
			}
		}

		// Render a piece of cloud
		LCD_LoadPart((uint8_t*) Cloud, cloudX, 18, 6, 14, DRAWMODE_ADD,
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <main+0x500>)
 800197c:	6819      	ldr	r1, [r3, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	9302      	str	r3, [sp, #8]
 8001982:	2300      	movs	r3, #0
 8001984:	9301      	str	r3, [sp, #4]
 8001986:	230e      	movs	r3, #14
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2306      	movs	r3, #6
 800198c:	2212      	movs	r2, #18
 800198e:	4811      	ldr	r0, [pc, #68]	; (80019d4 <main+0x504>)
 8001990:	f7ff fbbe 	bl	8001110 <LCD_LoadPart>
		REPEATMODE_NONE);

		// Render plants
		LCD_LoadPart((uint8_t*) Plant1, plantX, 59, 2, 22, DRAWMODE_ADD,
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <main+0x508>)
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	2300      	movs	r3, #0
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	2300      	movs	r3, #0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2316      	movs	r3, #22
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2302      	movs	r3, #2
 80019a6:	223b      	movs	r2, #59	; 0x3b
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <main+0x50c>)
 80019aa:	f7ff fbb1 	bl	8001110 <LCD_LoadPart>
		REPEATMODE_NONE);

		LCD_Update(&MemDisp);
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <main+0x510>)
 80019b0:	f7ff fb3c 	bl	800102c <LCD_Update>
		tick++;
 80019b4:	e5a8      	b.n	8001508 <main+0x38>
 80019b6:	bf00      	nop
 80019b8:	20000154 	.word	0x20000154
 80019bc:	20000008 	.word	0x20000008
 80019c0:	41f00000 	.word	0x41f00000
 80019c4:	08003dc8 	.word	0x08003dc8
 80019c8:	20000170 	.word	0x20000170
 80019cc:	20000178 	.word	0x20000178
 80019d0:	20000174 	.word	0x20000174
 80019d4:	08003d48 	.word	0x08003d48
 80019d8:	2000016c 	.word	0x2000016c
 80019dc:	08003d9c 	.word	0x08003d9c
 80019e0:	20000148 	.word	0x20000148

080019e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b090      	sub	sp, #64	; 0x40
 80019e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019ea:	f107 0318 	add.w	r3, r7, #24
 80019ee:	2228      	movs	r2, #40	; 0x28
 80019f0:	2100      	movs	r1, #0
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 f85a 	bl	8003aac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a0e:	2310      	movs	r3, #16
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a12:	2302      	movs	r3, #2
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001a1a:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001a20:	f107 0318 	add.w	r3, r7, #24
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fdc7 	bl	80025b8 <HAL_RCC_OscConfig>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <SystemClock_Config+0x50>
		Error_Handler();
 8001a30:	f000 f96e 	bl	8001d10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a34:	230f      	movs	r3, #15
 8001a36:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a44:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 f834 	bl	8002abc <HAL_RCC_ClockConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0x7a>
		Error_Handler();
 8001a5a:	f000 f959 	bl	8001d10 <Error_Handler>
	}
}
 8001a5e:	bf00      	nop
 8001a60:	3740      	adds	r7, #64	; 0x40
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001a6c:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a6e:	4a18      	ldr	r2, [pc, #96]	; (8001ad0 <MX_SPI1_Init+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a72:	4b16      	ldr	r3, [pc, #88]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a78:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a98:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <MX_SPI1_Init+0x64>)
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <MX_SPI1_Init+0x64>)
 8001ab4:	220a      	movs	r2, #10
 8001ab6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001ab8:	4804      	ldr	r0, [pc, #16]	; (8001acc <MX_SPI1_Init+0x64>)
 8001aba:	f001 f965 	bl	8002d88 <HAL_SPI_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001ac4:	f000 f924 	bl	8001d10 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200000a8 	.word	0x200000a8
 8001ad0:	40013000 	.word	0x40013000

08001ad4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001af2:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <MX_TIM1_Init+0x9c>)
 8001af4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1000 - 1;
 8001af6:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001af8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001afc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001b06:	2263      	movs	r2, #99	; 0x63
 8001b08:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001b1e:	f001 fb99 	bl	8003254 <HAL_TIM_Base_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x58>
		Error_Handler();
 8001b28:	f000 f8f2 	bl	8001d10 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b30:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001b32:	f107 0308 	add.w	r3, r7, #8
 8001b36:	4619      	mov	r1, r3
 8001b38:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001b3a:	f001 fd35 	bl	80035a8 <HAL_TIM_ConfigClockSource>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0x74>
		Error_Handler();
 8001b44:	f000 f8e4 	bl	8001d10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001b50:	463b      	mov	r3, r7
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_TIM1_Init+0x98>)
 8001b56:	f001 ff07 	bl	8003968 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8001b60:	f000 f8d6 	bl	8001d10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000100 	.word	0x20000100
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_GPIO_Init+0x94>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <MX_GPIO_Init+0x94>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_GPIO_Init+0x94>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba0:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_GPIO_Init+0x94>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a18      	ldr	r2, [pc, #96]	; (8001c08 <MX_GPIO_Init+0x94>)
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_GPIO_Init+0x94>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2104      	movs	r1, #4
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_GPIO_Init+0x98>)
 8001bbe:	f000 fce2 	bl	8002586 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2110      	movs	r1, #16
 8001bc6:	4811      	ldr	r0, [pc, #68]	; (8001c0c <MX_GPIO_Init+0x98>)
 8001bc8:	f000 fcdd 	bl	8002586 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_B_Pin CS_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | CS_Pin;
 8001bcc:	2314      	movs	r3, #20
 8001bce:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 0308 	add.w	r3, r7, #8
 8001be0:	4619      	mov	r1, r3
 8001be2:	480a      	ldr	r0, [pc, #40]	; (8001c0c <MX_GPIO_Init+0x98>)
 8001be4:	f000 fb34 	bl	8002250 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY0_Pin KEY1_Pin */
	GPIO_InitStruct.Pin = KEY0_Pin | KEY1_Pin;
 8001be8:	2303      	movs	r3, #3
 8001bea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0308 	add.w	r3, r7, #8
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4805      	ldr	r0, [pc, #20]	; (8001c10 <MX_GPIO_Init+0x9c>)
 8001bfc:	f000 fb28 	bl	8002250 <HAL_GPIO_Init>

}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40010c00 	.word	0x40010c00

08001c14 <KeyScan>:

/* USER CODE BEGIN 4 */
void KeyScan() {
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0

	static uint8_t KeyBuffer[2] = { 0x00, 0x00 };

	KeyBuffer[0] = ((KeyBuffer[0] << 1) | (KEY0_STATE & 0x01));
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <KeyScan+0xc8>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	b25c      	sxtb	r4, r3
 8001c22:	2101      	movs	r1, #1
 8001c24:	482e      	ldr	r0, [pc, #184]	; (8001ce0 <KeyScan+0xcc>)
 8001c26:	f000 fc97 	bl	8002558 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	b25b      	sxtb	r3, r3
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	b25b      	sxtb	r3, r3
 8001c34:	4323      	orrs	r3, r4
 8001c36:	b25b      	sxtb	r3, r3
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <KeyScan+0xc8>)
 8001c3c:	701a      	strb	r2, [r3, #0]
	KeyBuffer[1] = ((KeyBuffer[1] << 1) | (KEY1_STATE & 0x01));
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <KeyScan+0xc8>)
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	b25c      	sxtb	r4, r3
 8001c46:	2102      	movs	r1, #2
 8001c48:	4825      	ldr	r0, [pc, #148]	; (8001ce0 <KeyScan+0xcc>)
 8001c4a:	f000 fc85 	bl	8002558 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	b25b      	sxtb	r3, r3
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	4323      	orrs	r3, r4
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <KeyScan+0xc8>)
 8001c60:	705a      	strb	r2, [r3, #1]

	for (uint8_t j = 0; j < 2; j++) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	e030      	b.n	8001cca <KeyScan+0xb6>
		if ((KeyBuffer[j] | 0xf0) == 0xff) {
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4a1c      	ldr	r2, [pc, #112]	; (8001cdc <KeyScan+0xc8>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	f063 030f 	orn	r3, r3, #15
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2bff      	cmp	r3, #255	; 0xff
 8001c76:	d110      	bne.n	8001c9a <KeyScan+0x86>
			if (!KeyState[j]) {
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ce4 <KeyScan+0xd0>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	f083 0301 	eor.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <KeyScan+0x7c>
				KeyPressed[j] = 1;
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	4a17      	ldr	r2, [pc, #92]	; (8001ce8 <KeyScan+0xd4>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 1;
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <KeyScan+0xd0>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	54d1      	strb	r1, [r2, r3]
 8001c98:	e014      	b.n	8001cc4 <KeyScan+0xb0>
		} else if ((KeyBuffer[j] | 0xf0) == 0xf0) {
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <KeyScan+0xc8>)
 8001c9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ca0:	f063 030f 	orn	r3, r3, #15
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2bf0      	cmp	r3, #240	; 0xf0
 8001ca8:	d10c      	bne.n	8001cc4 <KeyScan+0xb0>
			if (KeyState[j]) {
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <KeyScan+0xd0>)
 8001cae:	5cd3      	ldrb	r3, [r2, r3]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <KeyScan+0xa8>
				KeyReleased[j] = 1;
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	4a0d      	ldr	r2, [pc, #52]	; (8001cec <KeyScan+0xd8>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 0;
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	4a09      	ldr	r2, [pc, #36]	; (8001ce4 <KeyScan+0xd0>)
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < 2; j++) {
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	71fb      	strb	r3, [r7, #7]
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d9cb      	bls.n	8001c68 <KeyScan+0x54>
		}
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd90      	pop	{r4, r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000017c 	.word	0x2000017c
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	20000158 	.word	0x20000158
 8001ce8:	2000015c 	.word	0x2000015c
 8001cec:	20000160 	.word	0x20000160

08001cf0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x14>
//		LEDB_TOGGLE;
		KeyScan();
 8001d00:	f7ff ff88 	bl	8001c14 <KeyScan>

	}
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000100 	.word	0x20000100

08001d10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d18:	e7fe      	b.n	8001d18 <Error_Handler+0x8>
	...

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_MspInit+0x5c>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_MspInit+0x5c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6193      	str	r3, [r2, #24]
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_MspInit+0x5c>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_MspInit+0x5c>)
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_MspInit+0x5c>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	61d3      	str	r3, [r2, #28]
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_MspInit+0x5c>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_MspInit+0x60>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <HAL_MspInit+0x60>)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40010000 	.word	0x40010000

08001d80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b088      	sub	sp, #32
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <HAL_SPI_MspInit+0x70>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d123      	bne.n	8001de8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_SPI_MspInit+0x74>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_SPI_MspInit+0x74>)
 8001da6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001daa:	6193      	str	r3, [r2, #24]
 8001dac:	4b11      	ldr	r3, [pc, #68]	; (8001df4 <HAL_SPI_MspInit+0x74>)
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_SPI_MspInit+0x74>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_SPI_MspInit+0x74>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_SPI_MspInit+0x74>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dd0:	23a0      	movs	r3, #160	; 0xa0
 8001dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0310 	add.w	r3, r7, #16
 8001de0:	4619      	mov	r1, r3
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <HAL_SPI_MspInit+0x78>)
 8001de4:	f000 fa34 	bl	8002250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40013000 	.word	0x40013000
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010800 	.word	0x40010800

08001dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_TIM_Base_MspInit+0x44>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d113      	bne.n	8001e36 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_TIM_Base_MspInit+0x48>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_TIM_Base_MspInit+0x48>)
 8001e14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e18:	6193      	str	r3, [r2, #24]
 8001e1a:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_TIM_Base_MspInit+0x48>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2019      	movs	r0, #25
 8001e2c:	f000 f9d9 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001e30:	2019      	movs	r0, #25
 8001e32:	f000 f9f2 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40021000 	.word	0x40021000

08001e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <NMI_Handler+0x4>

08001e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <HardFault_Handler+0x4>

08001e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <MemManage_Handler+0x4>

08001e5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <BusFault_Handler+0x4>

08001e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e64:	e7fe      	b.n	8001e64 <UsageFault_Handler+0x4>

08001e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8e:	f000 f8b5 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <TIM1_UP_IRQHandler+0x10>)
 8001e9e:	f001 fa7b 	bl	8003398 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000100 	.word	0x20000100

08001eac <_sbrk>:
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <_sbrk+0x5c>)
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <_sbrk+0x60>)
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <_sbrk+0x22>
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <_sbrk+0x64>)
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <_sbrk+0x68>)
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d207      	bcs.n	8001eec <_sbrk+0x40>
 8001edc:	f001 fdb4 	bl	8003a48 <__errno>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eea:	e009      	b.n	8001f00 <_sbrk+0x54>
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <_sbrk+0x64>)
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <_sbrk+0x64>)
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	20005000 	.word	0x20005000
 8001f0c:	00000400 	.word	0x00000400
 8001f10:	20000180 	.word	0x20000180
 8001f14:	20000198 	.word	0x20000198

08001f18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <Reset_Handler>:
 8001f24:	480c      	ldr	r0, [pc, #48]	; (8001f58 <LoopFillZerobss+0x12>)
 8001f26:	490d      	ldr	r1, [pc, #52]	; (8001f5c <LoopFillZerobss+0x16>)
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <LoopFillZerobss+0x1a>)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e002      	b.n	8001f34 <LoopCopyDataInit>

08001f2e <CopyDataInit>:
 8001f2e:	58d4      	ldr	r4, [r2, r3]
 8001f30:	50c4      	str	r4, [r0, r3]
 8001f32:	3304      	adds	r3, #4

08001f34 <LoopCopyDataInit>:
 8001f34:	18c4      	adds	r4, r0, r3
 8001f36:	428c      	cmp	r4, r1
 8001f38:	d3f9      	bcc.n	8001f2e <CopyDataInit>
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <LoopFillZerobss+0x1e>)
 8001f3c:	4c0a      	ldr	r4, [pc, #40]	; (8001f68 <LoopFillZerobss+0x22>)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e001      	b.n	8001f46 <LoopFillZerobss>

08001f42 <FillZerobss>:
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	3204      	adds	r2, #4

08001f46 <LoopFillZerobss>:
 8001f46:	42a2      	cmp	r2, r4
 8001f48:	d3fb      	bcc.n	8001f42 <FillZerobss>
 8001f4a:	f7ff ffe5 	bl	8001f18 <SystemInit>
 8001f4e:	f001 fd81 	bl	8003a54 <__libc_init_array>
 8001f52:	f7ff fabd 	bl	80014d0 <main>
 8001f56:	4770      	bx	lr
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000080 	.word	0x20000080
 8001f60:	080040f0 	.word	0x080040f0
 8001f64:	20000080 	.word	0x20000080
 8001f68:	20000198 	.word	0x20000198

08001f6c <ADC1_2_IRQHandler>:
 8001f6c:	e7fe      	b.n	8001f6c <ADC1_2_IRQHandler>
	...

08001f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <HAL_Init+0x28>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a07      	ldr	r2, [pc, #28]	; (8001f98 <HAL_Init+0x28>)
 8001f7a:	f043 0310 	orr.w	r3, r3, #16
 8001f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f80:	2003      	movs	r0, #3
 8001f82:	f000 f923 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f86:	200f      	movs	r0, #15
 8001f88:	f000 f808 	bl	8001f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8c:	f7ff fec6 	bl	8001d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000

08001f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_InitTick+0x54>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <HAL_InitTick+0x58>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f93b 	bl	8002236 <HAL_SYSTICK_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00e      	b.n	8001fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d80a      	bhi.n	8001fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f000 f903 	bl	80021e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_InitTick+0x5c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	20000018 	.word	0x20000018
 8001ff8:	20000014 	.word	0x20000014

08001ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_IncTick+0x1c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x20>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <HAL_IncTick+0x20>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	20000018 	.word	0x20000018
 800201c:	20000184 	.word	0x20000184

08002020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b02      	ldr	r3, [pc, #8]	; (8002030 <HAL_GetTick+0x10>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000184 	.word	0x20000184

08002034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002044:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800205c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002066:	4a04      	ldr	r2, [pc, #16]	; (8002078 <__NVIC_SetPriorityGrouping+0x44>)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	60d3      	str	r3, [r2, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <__NVIC_GetPriorityGrouping+0x18>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 0307 	and.w	r3, r3, #7
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	db0b      	blt.n	80020c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	f003 021f 	and.w	r2, r3, #31
 80020b0:	4906      	ldr	r1, [pc, #24]	; (80020cc <__NVIC_EnableIRQ+0x34>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2001      	movs	r0, #1
 80020ba:	fa00 f202 	lsl.w	r2, r0, r2
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	e000e100 	.word	0xe000e100

080020d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	db0a      	blt.n	80020fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	490c      	ldr	r1, [pc, #48]	; (800211c <__NVIC_SetPriority+0x4c>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	0112      	lsls	r2, r2, #4
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	440b      	add	r3, r1
 80020f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f8:	e00a      	b.n	8002110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4908      	ldr	r1, [pc, #32]	; (8002120 <__NVIC_SetPriority+0x50>)
 8002100:	79fb      	ldrb	r3, [r7, #7]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	3b04      	subs	r3, #4
 8002108:	0112      	lsls	r2, r2, #4
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	440b      	add	r3, r1
 800210e:	761a      	strb	r2, [r3, #24]
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f1c3 0307 	rsb	r3, r3, #7
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf28      	it	cs
 8002142:	2304      	movcs	r3, #4
 8002144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3304      	adds	r3, #4
 800214a:	2b06      	cmp	r3, #6
 800214c:	d902      	bls.n	8002154 <NVIC_EncodePriority+0x30>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3b03      	subs	r3, #3
 8002152:	e000      	b.n	8002156 <NVIC_EncodePriority+0x32>
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	401a      	ands	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800216c:	f04f 31ff 	mov.w	r1, #4294967295
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	43d9      	mvns	r1, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800217c:	4313      	orrs	r3, r2
         );
}
 800217e:	4618      	mov	r0, r3
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f7ff ff90 	bl	80020d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff2d 	bl	8002034 <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff42 	bl	800207c <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff90 	bl	8002124 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5f 	bl	80020d0 <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff35 	bl	8002098 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002250:	b480      	push	{r7}
 8002252:	b08b      	sub	sp, #44	; 0x2c
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002262:	e169      	b.n	8002538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002264:	2201      	movs	r2, #1
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	429a      	cmp	r2, r3
 800227e:	f040 8158 	bne.w	8002532 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4a9a      	ldr	r2, [pc, #616]	; (80024f0 <HAL_GPIO_Init+0x2a0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d05e      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 800228c:	4a98      	ldr	r2, [pc, #608]	; (80024f0 <HAL_GPIO_Init+0x2a0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d875      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 8002292:	4a98      	ldr	r2, [pc, #608]	; (80024f4 <HAL_GPIO_Init+0x2a4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d058      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 8002298:	4a96      	ldr	r2, [pc, #600]	; (80024f4 <HAL_GPIO_Init+0x2a4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d86f      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 800229e:	4a96      	ldr	r2, [pc, #600]	; (80024f8 <HAL_GPIO_Init+0x2a8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d052      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022a4:	4a94      	ldr	r2, [pc, #592]	; (80024f8 <HAL_GPIO_Init+0x2a8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d869      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022aa:	4a94      	ldr	r2, [pc, #592]	; (80024fc <HAL_GPIO_Init+0x2ac>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d04c      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022b0:	4a92      	ldr	r2, [pc, #584]	; (80024fc <HAL_GPIO_Init+0x2ac>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d863      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022b6:	4a92      	ldr	r2, [pc, #584]	; (8002500 <HAL_GPIO_Init+0x2b0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d046      	beq.n	800234a <HAL_GPIO_Init+0xfa>
 80022bc:	4a90      	ldr	r2, [pc, #576]	; (8002500 <HAL_GPIO_Init+0x2b0>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d85d      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022c2:	2b12      	cmp	r3, #18
 80022c4:	d82a      	bhi.n	800231c <HAL_GPIO_Init+0xcc>
 80022c6:	2b12      	cmp	r3, #18
 80022c8:	d859      	bhi.n	800237e <HAL_GPIO_Init+0x12e>
 80022ca:	a201      	add	r2, pc, #4	; (adr r2, 80022d0 <HAL_GPIO_Init+0x80>)
 80022cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d0:	0800234b 	.word	0x0800234b
 80022d4:	08002325 	.word	0x08002325
 80022d8:	08002337 	.word	0x08002337
 80022dc:	08002379 	.word	0x08002379
 80022e0:	0800237f 	.word	0x0800237f
 80022e4:	0800237f 	.word	0x0800237f
 80022e8:	0800237f 	.word	0x0800237f
 80022ec:	0800237f 	.word	0x0800237f
 80022f0:	0800237f 	.word	0x0800237f
 80022f4:	0800237f 	.word	0x0800237f
 80022f8:	0800237f 	.word	0x0800237f
 80022fc:	0800237f 	.word	0x0800237f
 8002300:	0800237f 	.word	0x0800237f
 8002304:	0800237f 	.word	0x0800237f
 8002308:	0800237f 	.word	0x0800237f
 800230c:	0800237f 	.word	0x0800237f
 8002310:	0800237f 	.word	0x0800237f
 8002314:	0800232d 	.word	0x0800232d
 8002318:	08002341 	.word	0x08002341
 800231c:	4a79      	ldr	r2, [pc, #484]	; (8002504 <HAL_GPIO_Init+0x2b4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002322:	e02c      	b.n	800237e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	623b      	str	r3, [r7, #32]
          break;
 800232a:	e029      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	3304      	adds	r3, #4
 8002332:	623b      	str	r3, [r7, #32]
          break;
 8002334:	e024      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	3308      	adds	r3, #8
 800233c:	623b      	str	r3, [r7, #32]
          break;
 800233e:	e01f      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	330c      	adds	r3, #12
 8002346:	623b      	str	r3, [r7, #32]
          break;
 8002348:	e01a      	b.n	8002380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002352:	2304      	movs	r3, #4
 8002354:	623b      	str	r3, [r7, #32]
          break;
 8002356:	e013      	b.n	8002380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002360:	2308      	movs	r3, #8
 8002362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	611a      	str	r2, [r3, #16]
          break;
 800236a:	e009      	b.n	8002380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800236c:	2308      	movs	r3, #8
 800236e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	615a      	str	r2, [r3, #20]
          break;
 8002376:	e003      	b.n	8002380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
          break;
 800237c:	e000      	b.n	8002380 <HAL_GPIO_Init+0x130>
          break;
 800237e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2bff      	cmp	r3, #255	; 0xff
 8002384:	d801      	bhi.n	800238a <HAL_GPIO_Init+0x13a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	e001      	b.n	800238e <HAL_GPIO_Init+0x13e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	2bff      	cmp	r3, #255	; 0xff
 8002394:	d802      	bhi.n	800239c <HAL_GPIO_Init+0x14c>
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	e002      	b.n	80023a2 <HAL_GPIO_Init+0x152>
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	3b08      	subs	r3, #8
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	210f      	movs	r1, #15
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	401a      	ands	r2, r3
 80023b4:	6a39      	ldr	r1, [r7, #32]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	431a      	orrs	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80b1 	beq.w	8002532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023d0:	4b4d      	ldr	r3, [pc, #308]	; (8002508 <HAL_GPIO_Init+0x2b8>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a4c      	ldr	r2, [pc, #304]	; (8002508 <HAL_GPIO_Init+0x2b8>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_GPIO_Init+0x2b8>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023e8:	4a48      	ldr	r2, [pc, #288]	; (800250c <HAL_GPIO_Init+0x2bc>)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	220f      	movs	r2, #15
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a40      	ldr	r2, [pc, #256]	; (8002510 <HAL_GPIO_Init+0x2c0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d013      	beq.n	800243c <HAL_GPIO_Init+0x1ec>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3f      	ldr	r2, [pc, #252]	; (8002514 <HAL_GPIO_Init+0x2c4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d00d      	beq.n	8002438 <HAL_GPIO_Init+0x1e8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a3e      	ldr	r2, [pc, #248]	; (8002518 <HAL_GPIO_Init+0x2c8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d007      	beq.n	8002434 <HAL_GPIO_Init+0x1e4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a3d      	ldr	r2, [pc, #244]	; (800251c <HAL_GPIO_Init+0x2cc>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d101      	bne.n	8002430 <HAL_GPIO_Init+0x1e0>
 800242c:	2303      	movs	r3, #3
 800242e:	e006      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002430:	2304      	movs	r3, #4
 8002432:	e004      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002434:	2302      	movs	r3, #2
 8002436:	e002      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_GPIO_Init+0x1ee>
 800243c:	2300      	movs	r3, #0
 800243e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002440:	f002 0203 	and.w	r2, r2, #3
 8002444:	0092      	lsls	r2, r2, #2
 8002446:	4093      	lsls	r3, r2
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800244e:	492f      	ldr	r1, [pc, #188]	; (800250c <HAL_GPIO_Init+0x2bc>)
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3302      	adds	r3, #2
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d006      	beq.n	8002476 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002468:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	492c      	ldr	r1, [pc, #176]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002476:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	43db      	mvns	r3, r3
 800247e:	4928      	ldr	r1, [pc, #160]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 8002480:	4013      	ands	r3, r2
 8002482:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002490:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4922      	ldr	r1, [pc, #136]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	e006      	b.n	80024ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	43db      	mvns	r3, r3
 80024a6:	491e      	ldr	r1, [pc, #120]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d006      	beq.n	80024c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	4918      	ldr	r1, [pc, #96]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	4914      	ldr	r1, [pc, #80]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d021      	beq.n	8002524 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_GPIO_Init+0x2d0>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
 80024ec:	e021      	b.n	8002532 <HAL_GPIO_Init+0x2e2>
 80024ee:	bf00      	nop
 80024f0:	10320000 	.word	0x10320000
 80024f4:	10310000 	.word	0x10310000
 80024f8:	10220000 	.word	0x10220000
 80024fc:	10210000 	.word	0x10210000
 8002500:	10120000 	.word	0x10120000
 8002504:	10110000 	.word	0x10110000
 8002508:	40021000 	.word	0x40021000
 800250c:	40010000 	.word	0x40010000
 8002510:	40010800 	.word	0x40010800
 8002514:	40010c00 	.word	0x40010c00
 8002518:	40011000 	.word	0x40011000
 800251c:	40011400 	.word	0x40011400
 8002520:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_GPIO_Init+0x304>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	43db      	mvns	r3, r3
 800252c:	4909      	ldr	r1, [pc, #36]	; (8002554 <HAL_GPIO_Init+0x304>)
 800252e:	4013      	ands	r3, r2
 8002530:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	f47f ae8e 	bne.w	8002264 <HAL_GPIO_Init+0x14>
  }
}
 8002548:	bf00      	nop
 800254a:	bf00      	nop
 800254c:	372c      	adds	r7, #44	; 0x2c
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40010400 	.word	0x40010400

08002558 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	887b      	ldrh	r3, [r7, #2]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d002      	beq.n	8002576 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e001      	b.n	800257a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	807b      	strh	r3, [r7, #2]
 8002592:	4613      	mov	r3, r2
 8002594:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002596:	787b      	ldrb	r3, [r7, #1]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800259c:	887a      	ldrh	r2, [r7, #2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025a2:	e003      	b.n	80025ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025a4:	887b      	ldrh	r3, [r7, #2]
 80025a6:	041a      	lsls	r2, r3, #16
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	611a      	str	r2, [r3, #16]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e272      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8087 	beq.w	80026e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d8:	4b92      	ldr	r3, [pc, #584]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 030c 	and.w	r3, r3, #12
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d00c      	beq.n	80025fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025e4:	4b8f      	ldr	r3, [pc, #572]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d112      	bne.n	8002616 <HAL_RCC_OscConfig+0x5e>
 80025f0:	4b8c      	ldr	r3, [pc, #560]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d10b      	bne.n	8002616 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fe:	4b89      	ldr	r3, [pc, #548]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d06c      	beq.n	80026e4 <HAL_RCC_OscConfig+0x12c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d168      	bne.n	80026e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e24c      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x76>
 8002620:	4b80      	ldr	r3, [pc, #512]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a7f      	ldr	r2, [pc, #508]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e02e      	b.n	800268c <HAL_RCC_OscConfig+0xd4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <HAL_RCC_OscConfig+0x98>
 8002636:	4b7b      	ldr	r3, [pc, #492]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a7a      	ldr	r2, [pc, #488]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800263c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b78      	ldr	r3, [pc, #480]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a77      	ldr	r2, [pc, #476]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002648:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e01d      	b.n	800268c <HAL_RCC_OscConfig+0xd4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0xbc>
 800265a:	4b72      	ldr	r3, [pc, #456]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a71      	ldr	r2, [pc, #452]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b6f      	ldr	r3, [pc, #444]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6e      	ldr	r2, [pc, #440]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0xd4>
 8002674:	4b6b      	ldr	r3, [pc, #428]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a6a      	ldr	r2, [pc, #424]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800267a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	4b68      	ldr	r3, [pc, #416]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a67      	ldr	r2, [pc, #412]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff fcc4 	bl	8002020 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7ff fcc0 	bl	8002020 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	; 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e200      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0xe4>
 80026ba:	e014      	b.n	80026e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026bc:	f7ff fcb0 	bl	8002020 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c4:	f7ff fcac 	bl	8002020 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b64      	cmp	r3, #100	; 0x64
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e1ec      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x10c>
 80026e2:	e000      	b.n	80026e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d063      	beq.n	80027ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026fe:	4b49      	ldr	r3, [pc, #292]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b08      	cmp	r3, #8
 8002708:	d11c      	bne.n	8002744 <HAL_RCC_OscConfig+0x18c>
 800270a:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d116      	bne.n	8002744 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d005      	beq.n	800272e <HAL_RCC_OscConfig+0x176>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d001      	beq.n	800272e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e1c0      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	4939      	ldr	r1, [pc, #228]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002742:	e03a      	b.n	80027ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274c:	4b36      	ldr	r3, [pc, #216]	; (8002828 <HAL_RCC_OscConfig+0x270>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002752:	f7ff fc65 	bl	8002020 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275a:	f7ff fc61 	bl	8002020 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1a1      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4927      	ldr	r1, [pc, #156]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]
 800278c:	e015      	b.n	80027ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b26      	ldr	r3, [pc, #152]	; (8002828 <HAL_RCC_OscConfig+0x270>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7ff fc44 	bl	8002020 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279c:	f7ff fc40 	bl	8002020 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e180      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d03a      	beq.n	800283c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d019      	beq.n	8002802 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ce:	4b17      	ldr	r3, [pc, #92]	; (800282c <HAL_RCC_OscConfig+0x274>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d4:	f7ff fc24 	bl	8002020 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027dc:	f7ff fc20 	bl	8002020 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e160      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d0f0      	beq.n	80027dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027fa:	2001      	movs	r0, #1
 80027fc:	f000 faa6 	bl	8002d4c <RCC_Delay>
 8002800:	e01c      	b.n	800283c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_RCC_OscConfig+0x274>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002808:	f7ff fc0a 	bl	8002020 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280e:	e00f      	b.n	8002830 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002810:	f7ff fc06 	bl	8002020 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d908      	bls.n	8002830 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e146      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	42420000 	.word	0x42420000
 800282c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002830:	4b92      	ldr	r3, [pc, #584]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e9      	bne.n	8002810 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a6 	beq.w	8002996 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800284a:	2300      	movs	r3, #0
 800284c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800284e:	4b8b      	ldr	r3, [pc, #556]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10d      	bne.n	8002876 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	4a87      	ldr	r2, [pc, #540]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002864:	61d3      	str	r3, [r2, #28]
 8002866:	4b85      	ldr	r3, [pc, #532]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002872:	2301      	movs	r3, #1
 8002874:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002876:	4b82      	ldr	r3, [pc, #520]	; (8002a80 <HAL_RCC_OscConfig+0x4c8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	2b00      	cmp	r3, #0
 8002880:	d118      	bne.n	80028b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002882:	4b7f      	ldr	r3, [pc, #508]	; (8002a80 <HAL_RCC_OscConfig+0x4c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7e      	ldr	r2, [pc, #504]	; (8002a80 <HAL_RCC_OscConfig+0x4c8>)
 8002888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800288c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800288e:	f7ff fbc7 	bl	8002020 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002896:	f7ff fbc3 	bl	8002020 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b64      	cmp	r3, #100	; 0x64
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e103      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a8:	4b75      	ldr	r3, [pc, #468]	; (8002a80 <HAL_RCC_OscConfig+0x4c8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d106      	bne.n	80028ca <HAL_RCC_OscConfig+0x312>
 80028bc:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	4a6e      	ldr	r2, [pc, #440]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	6213      	str	r3, [r2, #32]
 80028c8:	e02d      	b.n	8002926 <HAL_RCC_OscConfig+0x36e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10c      	bne.n	80028ec <HAL_RCC_OscConfig+0x334>
 80028d2:	4b6a      	ldr	r3, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	4a69      	ldr	r2, [pc, #420]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028d8:	f023 0301 	bic.w	r3, r3, #1
 80028dc:	6213      	str	r3, [r2, #32]
 80028de:	4b67      	ldr	r3, [pc, #412]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4a66      	ldr	r2, [pc, #408]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f023 0304 	bic.w	r3, r3, #4
 80028e8:	6213      	str	r3, [r2, #32]
 80028ea:	e01c      	b.n	8002926 <HAL_RCC_OscConfig+0x36e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0x356>
 80028f4:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a60      	ldr	r2, [pc, #384]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6213      	str	r3, [r2, #32]
 8002900:	4b5e      	ldr	r3, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a5d      	ldr	r2, [pc, #372]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6213      	str	r3, [r2, #32]
 800290c:	e00b      	b.n	8002926 <HAL_RCC_OscConfig+0x36e>
 800290e:	4b5b      	ldr	r3, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	4a5a      	ldr	r2, [pc, #360]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6213      	str	r3, [r2, #32]
 800291a:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d015      	beq.n	800295a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7ff fb77 	bl	8002020 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002934:	e00a      	b.n	800294c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002936:	f7ff fb73 	bl	8002020 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	f241 3288 	movw	r2, #5000	; 0x1388
 8002944:	4293      	cmp	r3, r2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e0b1      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	4b4b      	ldr	r3, [pc, #300]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ee      	beq.n	8002936 <HAL_RCC_OscConfig+0x37e>
 8002958:	e014      	b.n	8002984 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295a:	f7ff fb61 	bl	8002020 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002962:	f7ff fb5d 	bl	8002020 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	4293      	cmp	r3, r2
 8002972:	d901      	bls.n	8002978 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e09b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1ee      	bne.n	8002962 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002984:	7dfb      	ldrb	r3, [r7, #23]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d105      	bne.n	8002996 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800298a:	4b3c      	ldr	r3, [pc, #240]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002994:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8087 	beq.w	8002aae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 030c 	and.w	r3, r3, #12
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d061      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d146      	bne.n	8002a42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b4:	4b33      	ldr	r3, [pc, #204]	; (8002a84 <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7ff fb31 	bl	8002020 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7ff fb2d 	bl	8002020 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e06d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d4:	4b29      	ldr	r3, [pc, #164]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ea:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	4921      	ldr	r1, [pc, #132]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fc:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a19      	ldr	r1, [r3, #32]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	491b      	ldr	r1, [pc, #108]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4cc>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7ff fb01 	bl	8002020 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7ff fafd 	bl	8002020 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e03d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x46a>
 8002a40:	e035      	b.n	8002aae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b10      	ldr	r3, [pc, #64]	; (8002a84 <HAL_RCC_OscConfig+0x4cc>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a48:	f7ff faea 	bl	8002020 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a50:	f7ff fae6 	bl	8002020 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e026      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x498>
 8002a6e:	e01e      	b.n	8002aae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e019      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCC_OscConfig+0x500>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d106      	bne.n	8002aaa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40021000 	.word	0x40021000

08002abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0d0      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d910      	bls.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0207 	bic.w	r2, r3, #7
 8002ae6:	4965      	ldr	r1, [pc, #404]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e0b8      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d020      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d005      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	4a58      	ldr	r2, [pc, #352]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0308 	and.w	r3, r3, #8
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b30:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4a52      	ldr	r2, [pc, #328]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	494d      	ldr	r1, [pc, #308]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d040      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d115      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e07f      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b41      	ldr	r3, [pc, #260]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e073      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e06b      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4936      	ldr	r1, [pc, #216]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bac:	f7ff fa38 	bl	8002020 <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7ff fa34 	bl	8002020 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e053      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b27      	ldr	r3, [pc, #156]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d210      	bcs.n	8002c0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f023 0207 	bic.w	r2, r3, #7
 8002bf2:	4922      	ldr	r1, [pc, #136]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e032      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4916      	ldr	r1, [pc, #88]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	490e      	ldr	r1, [pc, #56]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c4a:	f000 f821 	bl	8002c90 <HAL_RCC_GetSysClockFreq>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	490a      	ldr	r1, [pc, #40]	; (8002c84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c5c:	5ccb      	ldrb	r3, [r1, r3]
 8002c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c62:	4a09      	ldr	r2, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1cc>)
 8002c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1d0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff f996 	bl	8001f9c <HAL_InitTick>

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40022000 	.word	0x40022000
 8002c80:	40021000 	.word	0x40021000
 8002c84:	080040d8 	.word	0x080040d8
 8002c88:	20000010 	.word	0x20000010
 8002c8c:	20000014 	.word	0x20000014

08002c90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c90:	b490      	push	{r4, r7}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c96:	4b29      	ldr	r3, [pc, #164]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xac>)
 8002c98:	1d3c      	adds	r4, r7, #4
 8002c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ca0:	f240 2301 	movw	r3, #513	; 0x201
 8002ca4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	2300      	movs	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002cca:	2b08      	cmp	r3, #8
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x46>
 8002cce:	e02b      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cd0:	4b1c      	ldr	r3, [pc, #112]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cd2:	623b      	str	r3, [r7, #32]
      break;
 8002cd4:	e02b      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	0c9b      	lsrs	r3, r3, #18
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	3328      	adds	r3, #40	; 0x28
 8002ce0:	443b      	add	r3, r7
 8002ce2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ce6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cf2:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0c5b      	lsrs	r3, r3, #17
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	3328      	adds	r3, #40	; 0x28
 8002cfe:	443b      	add	r3, r7
 8002d00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4a0e      	ldr	r2, [pc, #56]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d0a:	fb03 f202 	mul.w	r2, r3, r2
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	e004      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	4a0b      	ldr	r2, [pc, #44]	; (8002d48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d1c:	fb02 f303 	mul.w	r3, r2, r3
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	623b      	str	r3, [r7, #32]
      break;
 8002d26:	e002      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002d2a:	623b      	str	r3, [r7, #32]
      break;
 8002d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3728      	adds	r7, #40	; 0x28
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc90      	pop	{r4, r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	08003d38 	.word	0x08003d38
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	003d0900 	.word	0x003d0900

08002d4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d54:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <RCC_Delay+0x34>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <RCC_Delay+0x38>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	0a5b      	lsrs	r3, r3, #9
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
 8002d66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d68:	bf00      	nop
  }
  while (Delay --);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1e5a      	subs	r2, r3, #1
 8002d6e:	60fa      	str	r2, [r7, #12]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f9      	bne.n	8002d68 <RCC_Delay+0x1c>
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	20000010 	.word	0x20000010
 8002d84:	10624dd3 	.word	0x10624dd3

08002d88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e076      	b.n	8002e88 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d108      	bne.n	8002db4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002daa:	d009      	beq.n	8002dc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	61da      	str	r2, [r3, #28]
 8002db2:	e005      	b.n	8002dc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe ffd0 	bl	8001d80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e44:	ea42 0103 	orr.w	r1, r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	0c1a      	lsrs	r2, r3, #16
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f002 0204 	and.w	r2, r2, #4
 8002e66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <HAL_SPI_Transmit+0x22>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e126      	b.n	8003100 <HAL_SPI_Transmit+0x270>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002eba:	f7ff f8b1 	bl	8002020 <HAL_GetTick>
 8002ebe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d002      	beq.n	8002ed6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ed4:	e10b      	b.n	80030ee <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_Transmit+0x52>
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ee6:	e102      	b.n	80030ee <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2203      	movs	r2, #3
 8002eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	88fa      	ldrh	r2, [r7, #6]
 8002f00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f2e:	d10f      	bne.n	8002f50 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d007      	beq.n	8002f6e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f76:	d14b      	bne.n	8003010 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_SPI_Transmit+0xf6>
 8002f80:	8afb      	ldrh	r3, [r7, #22]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d13e      	bne.n	8003004 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	1c9a      	adds	r2, r3, #2
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002faa:	e02b      	b.n	8003004 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d112      	bne.n	8002fe0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fde:	e011      	b.n	8003004 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fe0:	f7ff f81e 	bl	8002020 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d803      	bhi.n	8002ff8 <HAL_SPI_Transmit+0x168>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff6:	d102      	bne.n	8002ffe <HAL_SPI_Transmit+0x16e>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003002:	e074      	b.n	80030ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003008:	b29b      	uxth	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ce      	bne.n	8002fac <HAL_SPI_Transmit+0x11c>
 800300e:	e04c      	b.n	80030aa <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d002      	beq.n	800301e <HAL_SPI_Transmit+0x18e>
 8003018:	8afb      	ldrh	r3, [r7, #22]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d140      	bne.n	80030a0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003044:	e02c      	b.n	80030a0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b02      	cmp	r3, #2
 8003052:	d113      	bne.n	800307c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	330c      	adds	r3, #12
 800305e:	7812      	ldrb	r2, [r2, #0]
 8003060:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	1c5a      	adds	r2, r3, #1
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	86da      	strh	r2, [r3, #54]	; 0x36
 800307a:	e011      	b.n	80030a0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800307c:	f7fe ffd0 	bl	8002020 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d803      	bhi.n	8003094 <HAL_SPI_Transmit+0x204>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d102      	bne.n	800309a <HAL_SPI_Transmit+0x20a>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d102      	bne.n	80030a0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800309e:	e026      	b.n	80030ee <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1cd      	bne.n	8003046 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f8b2 	bl	8003218 <SPI_EndRxTxTransaction>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030c8:	2300      	movs	r3, #0
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	77fb      	strb	r3, [r7, #31]
 80030ea:	e000      	b.n	80030ee <HAL_SPI_Transmit+0x25e>
  }

error:
 80030ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3720      	adds	r7, #32
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003118:	f7fe ff82 	bl	8002020 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	4413      	add	r3, r2
 8003126:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003128:	f7fe ff7a 	bl	8002020 <HAL_GetTick>
 800312c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800312e:	4b39      	ldr	r3, [pc, #228]	; (8003214 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	015b      	lsls	r3, r3, #5
 8003134:	0d1b      	lsrs	r3, r3, #20
 8003136:	69fa      	ldr	r2, [r7, #28]
 8003138:	fb02 f303 	mul.w	r3, r2, r3
 800313c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800313e:	e054      	b.n	80031ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003146:	d050      	beq.n	80031ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003148:	f7fe ff6a 	bl	8002020 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	429a      	cmp	r2, r3
 8003156:	d902      	bls.n	800315e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d13d      	bne.n	80031da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800316c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003176:	d111      	bne.n	800319c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d004      	beq.n	800318c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318a:	d107      	bne.n	800319c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800319a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031a4:	d10f      	bne.n	80031c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e017      	b.n	800320a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	bf0c      	ite	eq
 80031fa:	2301      	moveq	r3, #1
 80031fc:	2300      	movne	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	429a      	cmp	r2, r3
 8003206:	d19b      	bne.n	8003140 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3720      	adds	r7, #32
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000010 	.word	0x20000010

08003218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2200      	movs	r2, #0
 800322c:	2180      	movs	r1, #128	; 0x80
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff ff6a 	bl	8003108 <SPI_WaitFlagStateUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323e:	f043 0220 	orr.w	r2, r3, #32
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e000      	b.n	800324c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e041      	b.n	80032ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fe fdbe 	bl	8001dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	4619      	mov	r1, r3
 8003292:	4610      	mov	r0, r2
 8003294:	f000 fa70 	bl	8003778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	d001      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e03a      	b.n	8003382 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68da      	ldr	r2, [r3, #12]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a18      	ldr	r2, [pc, #96]	; (800338c <HAL_TIM_Base_Start_IT+0x98>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00e      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x58>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003336:	d009      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x58>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <HAL_TIM_Base_Start_IT+0x9c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_TIM_Base_Start_IT+0x58>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a13      	ldr	r2, [pc, #76]	; (8003394 <HAL_TIM_Base_Start_IT+0xa0>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d111      	bne.n	8003370 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b06      	cmp	r3, #6
 800335c:	d010      	beq.n	8003380 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336e:	e007      	b.n	8003380 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800

08003398 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d122      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d11b      	bne.n	80033f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f06f 0202 	mvn.w	r2, #2
 80033c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f9b1 	bl	8003742 <HAL_TIM_IC_CaptureCallback>
 80033e0:	e005      	b.n	80033ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f9a4 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f9b3 	bl	8003754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d122      	bne.n	8003448 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f003 0304 	and.w	r3, r3, #4
 800340c:	2b04      	cmp	r3, #4
 800340e:	d11b      	bne.n	8003448 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f06f 0204 	mvn.w	r2, #4
 8003418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2202      	movs	r2, #2
 800341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342a:	2b00      	cmp	r3, #0
 800342c:	d003      	beq.n	8003436 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f987 	bl	8003742 <HAL_TIM_IC_CaptureCallback>
 8003434:	e005      	b.n	8003442 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f97a 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f989 	bl	8003754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b08      	cmp	r3, #8
 8003454:	d122      	bne.n	800349c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b08      	cmp	r3, #8
 8003462:	d11b      	bne.n	800349c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f06f 0208 	mvn.w	r2, #8
 800346c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2204      	movs	r2, #4
 8003472:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f95d 	bl	8003742 <HAL_TIM_IC_CaptureCallback>
 8003488:	e005      	b.n	8003496 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f950 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f95f 	bl	8003754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b10      	cmp	r3, #16
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0310 	and.w	r3, r3, #16
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0210 	mvn.w	r2, #16
 80034c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2208      	movs	r2, #8
 80034c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f933 	bl	8003742 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f926 	bl	8003730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f935 	bl	8003754 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d10e      	bne.n	800351c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b01      	cmp	r3, #1
 800350a:	d107      	bne.n	800351c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0201 	mvn.w	r2, #1
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe fbea 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d10e      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003534:	2b80      	cmp	r3, #128	; 0x80
 8003536:	d107      	bne.n	8003548 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fa77 	bl	8003a36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d10e      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b40      	cmp	r3, #64	; 0x40
 8003562:	d107      	bne.n	8003574 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f8f9 	bl	8003766 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b20      	cmp	r3, #32
 8003580:	d10e      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b20      	cmp	r3, #32
 800358e:	d107      	bne.n	80035a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0220 	mvn.w	r2, #32
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa42 	bl	8003a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_ConfigClockSource+0x18>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0b3      	b.n	8003728 <HAL_TIM_ConfigClockSource+0x180>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f8:	d03e      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0xd0>
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035fe:	f200 8087 	bhi.w	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003606:	f000 8085 	beq.w	8003714 <HAL_TIM_ConfigClockSource+0x16c>
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d87f      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003610:	2b70      	cmp	r3, #112	; 0x70
 8003612:	d01a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0xa2>
 8003614:	2b70      	cmp	r3, #112	; 0x70
 8003616:	d87b      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003618:	2b60      	cmp	r3, #96	; 0x60
 800361a:	d050      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x116>
 800361c:	2b60      	cmp	r3, #96	; 0x60
 800361e:	d877      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003620:	2b50      	cmp	r3, #80	; 0x50
 8003622:	d03c      	beq.n	800369e <HAL_TIM_ConfigClockSource+0xf6>
 8003624:	2b50      	cmp	r3, #80	; 0x50
 8003626:	d873      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d058      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x136>
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d86f      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d064      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
 8003634:	2b30      	cmp	r3, #48	; 0x30
 8003636:	d86b      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d060      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d867      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d05c      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
 8003644:	2b10      	cmp	r3, #16
 8003646:	d05a      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003648:	e062      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	f000 f966 	bl	800392a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800366c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	609a      	str	r2, [r3, #8]
      break;
 8003676:	e04e      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f000 f94f 	bl	800392a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800369a:	609a      	str	r2, [r3, #8]
      break;
 800369c:	e03b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 f8c6 	bl	800383c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2150      	movs	r1, #80	; 0x50
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f91d 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 80036bc:	e02b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 f8e4 	bl	8003898 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2160      	movs	r1, #96	; 0x60
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f90d 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 80036dc:	e01b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f000 f8a6 	bl	800383c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2140      	movs	r1, #64	; 0x40
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f8fd 	bl	80038f6 <TIM_ITRx_SetConfig>
      break;
 80036fc:	e00b      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f000 f8f4 	bl	80038f6 <TIM_ITRx_SetConfig>
        break;
 800370e:	e002      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003714:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bc80      	pop	{r7}
 8003776:	4770      	bx	lr

08003778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <TIM_Base_SetConfig+0xb8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00b      	beq.n	80037a8 <TIM_Base_SetConfig+0x30>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003796:	d007      	beq.n	80037a8 <TIM_Base_SetConfig+0x30>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a26      	ldr	r2, [pc, #152]	; (8003834 <TIM_Base_SetConfig+0xbc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d003      	beq.n	80037a8 <TIM_Base_SetConfig+0x30>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a25      	ldr	r2, [pc, #148]	; (8003838 <TIM_Base_SetConfig+0xc0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d108      	bne.n	80037ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a1c      	ldr	r2, [pc, #112]	; (8003830 <TIM_Base_SetConfig+0xb8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00b      	beq.n	80037da <TIM_Base_SetConfig+0x62>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d007      	beq.n	80037da <TIM_Base_SetConfig+0x62>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a19      	ldr	r2, [pc, #100]	; (8003834 <TIM_Base_SetConfig+0xbc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d003      	beq.n	80037da <TIM_Base_SetConfig+0x62>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a18      	ldr	r2, [pc, #96]	; (8003838 <TIM_Base_SetConfig+0xc0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a07      	ldr	r2, [pc, #28]	; (8003830 <TIM_Base_SetConfig+0xb8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	691a      	ldr	r2, [r3, #16]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	615a      	str	r2, [r3, #20]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800

0800383c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800383c:	b480      	push	{r7}
 800383e:	b087      	sub	sp, #28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f023 0201 	bic.w	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f023 030a 	bic.w	r3, r3, #10
 8003878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003898:	b480      	push	{r7}
 800389a:	b087      	sub	sp, #28
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 0210 	bic.w	r2, r3, #16
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	031b      	lsls	r3, r3, #12
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	f043 0307 	orr.w	r3, r3, #7
 8003918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	609a      	str	r2, [r3, #8]
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr

0800392a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392a:	b480      	push	{r7}
 800392c:	b087      	sub	sp, #28
 800392e:	af00      	add	r7, sp, #0
 8003930:	60f8      	str	r0, [r7, #12]
 8003932:	60b9      	str	r1, [r7, #8]
 8003934:	607a      	str	r2, [r7, #4]
 8003936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	021a      	lsls	r2, r3, #8
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	431a      	orrs	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	4313      	orrs	r3, r2
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	609a      	str	r2, [r3, #8]
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800397c:	2302      	movs	r3, #2
 800397e:	e046      	b.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039cc:	d009      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d004      	beq.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d10c      	bne.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bc80      	pop	{r7}
 8003a16:	4770      	bx	lr
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800

08003a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <__errno>:
 8003a48:	4b01      	ldr	r3, [pc, #4]	; (8003a50 <__errno+0x8>)
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	2000001c 	.word	0x2000001c

08003a54 <__libc_init_array>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	2600      	movs	r6, #0
 8003a58:	4d0c      	ldr	r5, [pc, #48]	; (8003a8c <__libc_init_array+0x38>)
 8003a5a:	4c0d      	ldr	r4, [pc, #52]	; (8003a90 <__libc_init_array+0x3c>)
 8003a5c:	1b64      	subs	r4, r4, r5
 8003a5e:	10a4      	asrs	r4, r4, #2
 8003a60:	42a6      	cmp	r6, r4
 8003a62:	d109      	bne.n	8003a78 <__libc_init_array+0x24>
 8003a64:	f000 f95c 	bl	8003d20 <_init>
 8003a68:	2600      	movs	r6, #0
 8003a6a:	4d0a      	ldr	r5, [pc, #40]	; (8003a94 <__libc_init_array+0x40>)
 8003a6c:	4c0a      	ldr	r4, [pc, #40]	; (8003a98 <__libc_init_array+0x44>)
 8003a6e:	1b64      	subs	r4, r4, r5
 8003a70:	10a4      	asrs	r4, r4, #2
 8003a72:	42a6      	cmp	r6, r4
 8003a74:	d105      	bne.n	8003a82 <__libc_init_array+0x2e>
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7c:	4798      	blx	r3
 8003a7e:	3601      	adds	r6, #1
 8003a80:	e7ee      	b.n	8003a60 <__libc_init_array+0xc>
 8003a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a86:	4798      	blx	r3
 8003a88:	3601      	adds	r6, #1
 8003a8a:	e7f2      	b.n	8003a72 <__libc_init_array+0x1e>
 8003a8c:	080040e8 	.word	0x080040e8
 8003a90:	080040e8 	.word	0x080040e8
 8003a94:	080040e8 	.word	0x080040e8
 8003a98:	080040ec 	.word	0x080040ec

08003a9c <malloc>:
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <malloc+0xc>)
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f000 b82b 	b.w	8003afc <_malloc_r>
 8003aa6:	bf00      	nop
 8003aa8:	2000001c 	.word	0x2000001c

08003aac <memset>:
 8003aac:	4603      	mov	r3, r0
 8003aae:	4402      	add	r2, r0
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <memset+0xa>
 8003ab4:	4770      	bx	lr
 8003ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aba:	e7f9      	b.n	8003ab0 <memset+0x4>

08003abc <sbrk_aligned>:
 8003abc:	b570      	push	{r4, r5, r6, lr}
 8003abe:	4e0e      	ldr	r6, [pc, #56]	; (8003af8 <sbrk_aligned+0x3c>)
 8003ac0:	460c      	mov	r4, r1
 8003ac2:	6831      	ldr	r1, [r6, #0]
 8003ac4:	4605      	mov	r5, r0
 8003ac6:	b911      	cbnz	r1, 8003ace <sbrk_aligned+0x12>
 8003ac8:	f000 f88c 	bl	8003be4 <_sbrk_r>
 8003acc:	6030      	str	r0, [r6, #0]
 8003ace:	4621      	mov	r1, r4
 8003ad0:	4628      	mov	r0, r5
 8003ad2:	f000 f887 	bl	8003be4 <_sbrk_r>
 8003ad6:	1c43      	adds	r3, r0, #1
 8003ad8:	d00a      	beq.n	8003af0 <sbrk_aligned+0x34>
 8003ada:	1cc4      	adds	r4, r0, #3
 8003adc:	f024 0403 	bic.w	r4, r4, #3
 8003ae0:	42a0      	cmp	r0, r4
 8003ae2:	d007      	beq.n	8003af4 <sbrk_aligned+0x38>
 8003ae4:	1a21      	subs	r1, r4, r0
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f000 f87c 	bl	8003be4 <_sbrk_r>
 8003aec:	3001      	adds	r0, #1
 8003aee:	d101      	bne.n	8003af4 <sbrk_aligned+0x38>
 8003af0:	f04f 34ff 	mov.w	r4, #4294967295
 8003af4:	4620      	mov	r0, r4
 8003af6:	bd70      	pop	{r4, r5, r6, pc}
 8003af8:	2000018c 	.word	0x2000018c

08003afc <_malloc_r>:
 8003afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b00:	1ccd      	adds	r5, r1, #3
 8003b02:	f025 0503 	bic.w	r5, r5, #3
 8003b06:	3508      	adds	r5, #8
 8003b08:	2d0c      	cmp	r5, #12
 8003b0a:	bf38      	it	cc
 8003b0c:	250c      	movcc	r5, #12
 8003b0e:	2d00      	cmp	r5, #0
 8003b10:	4607      	mov	r7, r0
 8003b12:	db01      	blt.n	8003b18 <_malloc_r+0x1c>
 8003b14:	42a9      	cmp	r1, r5
 8003b16:	d905      	bls.n	8003b24 <_malloc_r+0x28>
 8003b18:	230c      	movs	r3, #12
 8003b1a:	2600      	movs	r6, #0
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4630      	mov	r0, r6
 8003b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b24:	4e2e      	ldr	r6, [pc, #184]	; (8003be0 <_malloc_r+0xe4>)
 8003b26:	f000 f86d 	bl	8003c04 <__malloc_lock>
 8003b2a:	6833      	ldr	r3, [r6, #0]
 8003b2c:	461c      	mov	r4, r3
 8003b2e:	bb34      	cbnz	r4, 8003b7e <_malloc_r+0x82>
 8003b30:	4629      	mov	r1, r5
 8003b32:	4638      	mov	r0, r7
 8003b34:	f7ff ffc2 	bl	8003abc <sbrk_aligned>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	d14d      	bne.n	8003bda <_malloc_r+0xde>
 8003b3e:	6834      	ldr	r4, [r6, #0]
 8003b40:	4626      	mov	r6, r4
 8003b42:	2e00      	cmp	r6, #0
 8003b44:	d140      	bne.n	8003bc8 <_malloc_r+0xcc>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	4631      	mov	r1, r6
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	eb04 0803 	add.w	r8, r4, r3
 8003b50:	f000 f848 	bl	8003be4 <_sbrk_r>
 8003b54:	4580      	cmp	r8, r0
 8003b56:	d13a      	bne.n	8003bce <_malloc_r+0xd2>
 8003b58:	6821      	ldr	r1, [r4, #0]
 8003b5a:	3503      	adds	r5, #3
 8003b5c:	1a6d      	subs	r5, r5, r1
 8003b5e:	f025 0503 	bic.w	r5, r5, #3
 8003b62:	3508      	adds	r5, #8
 8003b64:	2d0c      	cmp	r5, #12
 8003b66:	bf38      	it	cc
 8003b68:	250c      	movcc	r5, #12
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	f7ff ffa5 	bl	8003abc <sbrk_aligned>
 8003b72:	3001      	adds	r0, #1
 8003b74:	d02b      	beq.n	8003bce <_malloc_r+0xd2>
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	442b      	add	r3, r5
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	e00e      	b.n	8003b9c <_malloc_r+0xa0>
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	1b52      	subs	r2, r2, r5
 8003b82:	d41e      	bmi.n	8003bc2 <_malloc_r+0xc6>
 8003b84:	2a0b      	cmp	r2, #11
 8003b86:	d916      	bls.n	8003bb6 <_malloc_r+0xba>
 8003b88:	1961      	adds	r1, r4, r5
 8003b8a:	42a3      	cmp	r3, r4
 8003b8c:	6025      	str	r5, [r4, #0]
 8003b8e:	bf18      	it	ne
 8003b90:	6059      	strne	r1, [r3, #4]
 8003b92:	6863      	ldr	r3, [r4, #4]
 8003b94:	bf08      	it	eq
 8003b96:	6031      	streq	r1, [r6, #0]
 8003b98:	5162      	str	r2, [r4, r5]
 8003b9a:	604b      	str	r3, [r1, #4]
 8003b9c:	4638      	mov	r0, r7
 8003b9e:	f104 060b 	add.w	r6, r4, #11
 8003ba2:	f000 f835 	bl	8003c10 <__malloc_unlock>
 8003ba6:	f026 0607 	bic.w	r6, r6, #7
 8003baa:	1d23      	adds	r3, r4, #4
 8003bac:	1af2      	subs	r2, r6, r3
 8003bae:	d0b6      	beq.n	8003b1e <_malloc_r+0x22>
 8003bb0:	1b9b      	subs	r3, r3, r6
 8003bb2:	50a3      	str	r3, [r4, r2]
 8003bb4:	e7b3      	b.n	8003b1e <_malloc_r+0x22>
 8003bb6:	6862      	ldr	r2, [r4, #4]
 8003bb8:	42a3      	cmp	r3, r4
 8003bba:	bf0c      	ite	eq
 8003bbc:	6032      	streq	r2, [r6, #0]
 8003bbe:	605a      	strne	r2, [r3, #4]
 8003bc0:	e7ec      	b.n	8003b9c <_malloc_r+0xa0>
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	6864      	ldr	r4, [r4, #4]
 8003bc6:	e7b2      	b.n	8003b2e <_malloc_r+0x32>
 8003bc8:	4634      	mov	r4, r6
 8003bca:	6876      	ldr	r6, [r6, #4]
 8003bcc:	e7b9      	b.n	8003b42 <_malloc_r+0x46>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	4638      	mov	r0, r7
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	f000 f81c 	bl	8003c10 <__malloc_unlock>
 8003bd8:	e7a1      	b.n	8003b1e <_malloc_r+0x22>
 8003bda:	6025      	str	r5, [r4, #0]
 8003bdc:	e7de      	b.n	8003b9c <_malloc_r+0xa0>
 8003bde:	bf00      	nop
 8003be0:	20000188 	.word	0x20000188

08003be4 <_sbrk_r>:
 8003be4:	b538      	push	{r3, r4, r5, lr}
 8003be6:	2300      	movs	r3, #0
 8003be8:	4d05      	ldr	r5, [pc, #20]	; (8003c00 <_sbrk_r+0x1c>)
 8003bea:	4604      	mov	r4, r0
 8003bec:	4608      	mov	r0, r1
 8003bee:	602b      	str	r3, [r5, #0]
 8003bf0:	f7fe f95c 	bl	8001eac <_sbrk>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d102      	bne.n	8003bfe <_sbrk_r+0x1a>
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	b103      	cbz	r3, 8003bfe <_sbrk_r+0x1a>
 8003bfc:	6023      	str	r3, [r4, #0]
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
 8003c00:	20000190 	.word	0x20000190

08003c04 <__malloc_lock>:
 8003c04:	4801      	ldr	r0, [pc, #4]	; (8003c0c <__malloc_lock+0x8>)
 8003c06:	f000 b809 	b.w	8003c1c <__retarget_lock_acquire_recursive>
 8003c0a:	bf00      	nop
 8003c0c:	20000194 	.word	0x20000194

08003c10 <__malloc_unlock>:
 8003c10:	4801      	ldr	r0, [pc, #4]	; (8003c18 <__malloc_unlock+0x8>)
 8003c12:	f000 b804 	b.w	8003c1e <__retarget_lock_release_recursive>
 8003c16:	bf00      	nop
 8003c18:	20000194 	.word	0x20000194

08003c1c <__retarget_lock_acquire_recursive>:
 8003c1c:	4770      	bx	lr

08003c1e <__retarget_lock_release_recursive>:
 8003c1e:	4770      	bx	lr

08003c20 <floor>:
 8003c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c24:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003c28:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8003c2c:	2e13      	cmp	r6, #19
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4607      	mov	r7, r0
 8003c34:	460c      	mov	r4, r1
 8003c36:	4605      	mov	r5, r0
 8003c38:	dc33      	bgt.n	8003ca2 <floor+0x82>
 8003c3a:	2e00      	cmp	r6, #0
 8003c3c:	da14      	bge.n	8003c68 <floor+0x48>
 8003c3e:	a334      	add	r3, pc, #208	; (adr r3, 8003d10 <floor+0xf0>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fc fbb4 	bl	80003b0 <__adddf3>
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f7fc fde4 	bl	8000818 <__aeabi_dcmpgt>
 8003c50:	b138      	cbz	r0, 8003c62 <floor+0x42>
 8003c52:	2c00      	cmp	r4, #0
 8003c54:	da58      	bge.n	8003d08 <floor+0xe8>
 8003c56:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003c5a:	431d      	orrs	r5, r3
 8003c5c:	d001      	beq.n	8003c62 <floor+0x42>
 8003c5e:	2500      	movs	r5, #0
 8003c60:	4c2d      	ldr	r4, [pc, #180]	; (8003d18 <floor+0xf8>)
 8003c62:	4623      	mov	r3, r4
 8003c64:	462f      	mov	r7, r5
 8003c66:	e025      	b.n	8003cb4 <floor+0x94>
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <floor+0xfc>)
 8003c6a:	fa42 f806 	asr.w	r8, r2, r6
 8003c6e:	ea01 0208 	and.w	r2, r1, r8
 8003c72:	4302      	orrs	r2, r0
 8003c74:	d01e      	beq.n	8003cb4 <floor+0x94>
 8003c76:	a326      	add	r3, pc, #152	; (adr r3, 8003d10 <floor+0xf0>)
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f7fc fb98 	bl	80003b0 <__adddf3>
 8003c80:	2200      	movs	r2, #0
 8003c82:	2300      	movs	r3, #0
 8003c84:	f7fc fdc8 	bl	8000818 <__aeabi_dcmpgt>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d0ea      	beq.n	8003c62 <floor+0x42>
 8003c8c:	2c00      	cmp	r4, #0
 8003c8e:	bfbe      	ittt	lt
 8003c90:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003c94:	fa43 f606 	asrlt.w	r6, r3, r6
 8003c98:	19a4      	addlt	r4, r4, r6
 8003c9a:	2500      	movs	r5, #0
 8003c9c:	ea24 0408 	bic.w	r4, r4, r8
 8003ca0:	e7df      	b.n	8003c62 <floor+0x42>
 8003ca2:	2e33      	cmp	r6, #51	; 0x33
 8003ca4:	dd0a      	ble.n	8003cbc <floor+0x9c>
 8003ca6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003caa:	d103      	bne.n	8003cb4 <floor+0x94>
 8003cac:	f7fc fb80 	bl	80003b0 <__adddf3>
 8003cb0:	4607      	mov	r7, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4638      	mov	r0, r7
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8003cc4:	fa22 f808 	lsr.w	r8, r2, r8
 8003cc8:	ea18 0f00 	tst.w	r8, r0
 8003ccc:	d0f2      	beq.n	8003cb4 <floor+0x94>
 8003cce:	a310      	add	r3, pc, #64	; (adr r3, 8003d10 <floor+0xf0>)
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f7fc fb6c 	bl	80003b0 <__adddf3>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f7fc fd9c 	bl	8000818 <__aeabi_dcmpgt>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d0be      	beq.n	8003c62 <floor+0x42>
 8003ce4:	2c00      	cmp	r4, #0
 8003ce6:	da02      	bge.n	8003cee <floor+0xce>
 8003ce8:	2e14      	cmp	r6, #20
 8003cea:	d103      	bne.n	8003cf4 <floor+0xd4>
 8003cec:	3401      	adds	r4, #1
 8003cee:	ea25 0508 	bic.w	r5, r5, r8
 8003cf2:	e7b6      	b.n	8003c62 <floor+0x42>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003cfa:	fa03 f606 	lsl.w	r6, r3, r6
 8003cfe:	4435      	add	r5, r6
 8003d00:	42bd      	cmp	r5, r7
 8003d02:	bf38      	it	cc
 8003d04:	18e4      	addcc	r4, r4, r3
 8003d06:	e7f2      	b.n	8003cee <floor+0xce>
 8003d08:	2500      	movs	r5, #0
 8003d0a:	462c      	mov	r4, r5
 8003d0c:	e7a9      	b.n	8003c62 <floor+0x42>
 8003d0e:	bf00      	nop
 8003d10:	8800759c 	.word	0x8800759c
 8003d14:	7e37e43c 	.word	0x7e37e43c
 8003d18:	bff00000 	.word	0xbff00000
 8003d1c:	000fffff 	.word	0x000fffff

08003d20 <_init>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr

08003d2c <_fini>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr
