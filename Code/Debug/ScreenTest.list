
ScreenTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c5c  08004c5c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004c5c  08004c5c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c5c  08004c5c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000078  08004cdc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004cdc  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b367  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb3  00000000  00000000  0002b408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  0002d0c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ef0  00000000  00000000  0002e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb52  00000000  00000000  000466d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b85  00000000  00000000  0005322a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcdaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037a4  00000000  00000000  000dce00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080043d0 	.word	0x080043d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080043d0 	.word	0x080043d0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <__aeabi_f2uiz>:
 80010e0:	0042      	lsls	r2, r0, #1
 80010e2:	d20e      	bcs.n	8001102 <__aeabi_f2uiz+0x22>
 80010e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010e8:	d30b      	bcc.n	8001102 <__aeabi_f2uiz+0x22>
 80010ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f2:	d409      	bmi.n	8001108 <__aeabi_f2uiz+0x28>
 80010f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr
 8001108:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800110c:	d101      	bne.n	8001112 <__aeabi_f2uiz+0x32>
 800110e:	0242      	lsls	r2, r0, #9
 8001110:	d102      	bne.n	8001118 <__aeabi_f2uiz+0x38>
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	4770      	bx	lr
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <smallRbit>:

//These variables required for print function
static uint8_t YLine = 1;
static uint8_t Xcol = 1;

uint8_t smallRbit(uint8_t re) {
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	return (uint8_t) (__RBIT(re) >> 24);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	fa93 f3a3 	rbit	r3, r3
 8001134:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	0e1b      	lsrs	r3, r3, #24
 800113a:	b2db      	uxtb	r3, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <modulo>:

int modulo(int x, int N) {
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
	return (x % N + N) % N;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	fb93 f2f2 	sdiv	r2, r3, r2
 8001158:	6839      	ldr	r1, [r7, #0]
 800115a:	fb01 f202 	mul.w	r2, r1, r2
 800115e:	1a9a      	subs	r2, r3, r2
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	fb93 f2f2 	sdiv	r2, r3, r2
 800116a:	6839      	ldr	r1, [r7, #0]
 800116c:	fb01 f202 	mul.w	r2, r1, r2
 8001170:	1a9b      	subs	r3, r3, r2
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <LCD_Init>:

// Display Initialization
void LCD_Init(LS013B4DN04 *MemDisp, SPI_HandleTypeDef *Bus,
		GPIO_TypeDef *dispGPIO, uint16_t LCDcs) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	807b      	strh	r3, [r7, #2]

	//Store params into our struct
	MemDisp->Bus = Bus;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	601a      	str	r2, [r3, #0]
	MemDisp->dispGPIO = dispGPIO;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	605a      	str	r2, [r3, #4]
	MemDisp->LCDcs = LCDcs;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	887a      	ldrh	r2, [r7, #2]
 800119a:	811a      	strh	r2, [r3, #8]

	DispBuf = malloc(1152);
 800119c:	f44f 6090 	mov.w	r0, #1152	; 0x480
 80011a0:	f002 ffc4 	bl	800412c <malloc>
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <LCD_Init+0x78>)
 80011aa:	601a      	str	r2, [r3, #0]

	memset(DispBuf, 0x00, 1152);
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <LCD_Init+0x78>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 ffce 	bl	8004158 <memset>

	//At lease 3 + 13 clock is needed for Display clear (16 Clock = 8x2 bit = 2 byte)
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6858      	ldr	r0, [r3, #4]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	891b      	ldrh	r3, [r3, #8]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4619      	mov	r1, r3
 80011c8:	f001 fd25 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to data sheet
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	2396      	movs	r3, #150	; 0x96
 80011d2:	2202      	movs	r2, #2
 80011d4:	4908      	ldr	r1, [pc, #32]	; (80011f8 <LCD_Init+0x7c>)
 80011d6:	f002 f9a3 	bl	8003520 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6858      	ldr	r0, [r3, #4]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	891b      	ldrh	r3, [r3, #8]
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	f001 fd16 	bl	8002c16 <HAL_GPIO_WritePin>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000098 	.word	0x20000098
 80011f8:	20000000 	.word	0x20000000

080011fc <LCD_Update>:

// Display update (Transmit data)
void LCD_Update(LS013B4DN04 *MemDisp) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <LCD_Update+0xd0>)
 8001206:	781a      	ldrb	r2, [r3, #0]
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <LCD_Update+0xd4>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4313      	orrs	r3, r2
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <LCD_Update+0xd0>)
 8001212:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <LCD_Update+0xd0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <LCD_Update+0xd0>)
 8001220:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6858      	ldr	r0, [r3, #4]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	891b      	ldrh	r3, [r3, #8]
 800122a:	2201      	movs	r2, #1
 800122c:	4619      	mov	r1, r3
 800122e:	f001 fcf2 	bl	8002c16 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	2396      	movs	r3, #150	; 0x96
 8001238:	2201      	movs	r2, #1
 800123a:	4924      	ldr	r1, [pc, #144]	; (80012cc <LCD_Update+0xd0>)
 800123c:	f002 f970 	bl	8003520 <HAL_SPI_Transmit>

	for (uint8_t row = 0; row < 96; row++) {
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e02b      	b.n	800129e <LCD_Update+0xa2>
		SendBuf[1] = smallRbit(row + 1); // counting from row number 1 to row number 96
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	3301      	adds	r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff67 	bl	8001120 <smallRbit>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <LCD_Update+0xd0>)
 8001258:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	491d      	ldr	r1, [pc, #116]	; (80012d4 <LCD_Update+0xd8>)
 8001260:	2396      	movs	r3, #150	; 0x96
 8001262:	2201      	movs	r2, #1
 8001264:	f002 f95c 	bl	8003520 <HAL_SPI_Transmit>

		uint16_t offset = row * 12;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	b29b      	uxth	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	0052      	lsls	r2, r2, #1
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	81bb      	strh	r3, [r7, #12]
		HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <LCD_Update+0xdc>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	89bb      	ldrh	r3, [r7, #12]
 8001280:	18d1      	adds	r1, r2, r3
 8001282:	2396      	movs	r3, #150	; 0x96
 8001284:	220c      	movs	r2, #12
 8001286:	f002 f94b 	bl	8003520 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	2396      	movs	r3, #150	; 0x96
 8001290:	2201      	movs	r2, #1
 8001292:	4912      	ldr	r1, [pc, #72]	; (80012dc <LCD_Update+0xe0>)
 8001294:	f002 f944 	bl	8003520 <HAL_SPI_Transmit>
	for (uint8_t row = 0; row < 96; row++) {
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	3301      	adds	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b5f      	cmp	r3, #95	; 0x5f
 80012a2:	d9d0      	bls.n	8001246 <LCD_Update+0x4a>
	}

	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	2396      	movs	r3, #150	; 0x96
 80012aa:	2201      	movs	r2, #1
 80012ac:	490b      	ldr	r1, [pc, #44]	; (80012dc <LCD_Update+0xe0>)
 80012ae:	f002 f937 	bl	8003520 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6858      	ldr	r0, [r3, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	891b      	ldrh	r3, [r3, #8]
 80012ba:	2200      	movs	r2, #0
 80012bc:	4619      	mov	r1, r3
 80012be:	f001 fcaa 	bl	8002c16 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000009c 	.word	0x2000009c
 80012d0:	20000004 	.word	0x20000004
 80012d4:	2000009d 	.word	0x2000009d
 80012d8:	20000098 	.word	0x20000098
 80012dc:	20000094 	.word	0x20000094

080012e0 <LCD_LoadFull>:
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);

}

// Buffer update (full 400*240 pixels)
void LCD_LoadFull(uint8_t *BMP) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	/*for(uint16_t l; l < 1152; l++){
	 DispBuf[l] = (uint8_t)(__RBIT(BMP[l]) >> 24);
	 }*/
	memcpy(DispBuf, BMP, 1152);
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <LCD_LoadFull+0x20>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f44f 6290 	mov.w	r2, #1152	; 0x480
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 ff22 	bl	800413c <memcpy>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000098 	.word	0x20000098

08001304 <LCD_LoadObjs>:
			v1 = v2;
		}
	}
}

void LCD_LoadObjs(GameObj *header, uint8_t drawMode, uint8_t repeatMode) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
 8001310:	4613      	mov	r3, r2
 8001312:	70bb      	strb	r3, [r7, #2]
	GameObj *ptr = header;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60fb      	str	r3, [r7, #12]

	if (!ptr->full)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	7b9b      	ldrb	r3, [r3, #14]
 800131c:	f083 0301 	eor.w	r3, r3, #1
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d116      	bne.n	8001354 <LCD_LoadObjs+0x50>
		return;

	for (;;) {
		LCD_LoadObj(ptr, drawMode, repeatMode);
 8001326:	78ba      	ldrb	r2, [r7, #2]
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	4619      	mov	r1, r3
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 f817 	bl	8001360 <LCD_LoadObj>

		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == header)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	7b9b      	ldrb	r3, [r3, #14]
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d10a      	bne.n	8001358 <LCD_LoadObjs+0x54>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	d005      	beq.n	8001358 <LCD_LoadObjs+0x54>
			return;
		ptr = ptr->next;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	60fb      	str	r3, [r7, #12]
		LCD_LoadObj(ptr, drawMode, repeatMode);
 8001352:	e7e8      	b.n	8001326 <LCD_LoadObjs+0x22>
		return;
 8001354:	bf00      	nop
 8001356:	e000      	b.n	800135a <LCD_LoadObjs+0x56>
			return;
 8001358:	bf00      	nop
	}
}
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <LCD_LoadObj>:

void LCD_LoadObj(GameObj *gameObj, uint8_t drawMode, uint8_t repeatMode) {
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	70fb      	strb	r3, [r7, #3]
 800136c:	4613      	mov	r3, r2
 800136e:	70bb      	strb	r3, [r7, #2]

	short displayRow;
	short displayRowOffset;

	//Counting from Y origin point to bmpH using for loop
	for (uint8_t y = 0; y < gameObj->height; y++) {
 8001370:	2300      	movs	r3, #0
 8001372:	77fb      	strb	r3, [r7, #31]
 8001374:	e10f      	b.n	8001596 <LCD_LoadObj+0x236>
		displayRow = modulo(floor(gameObj->y) + y, 96);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f84c 	bl	8000418 <__aeabi_f2d>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f002 ffa2 	bl	80042d0 <floor>
 800138c:	4604      	mov	r4, r0
 800138e:	460d      	mov	r5, r1
 8001390:	7ffb      	ldrb	r3, [r7, #31]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f82e 	bl	80003f4 <__aeabi_i2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7fe fedc 	bl	800015c <__adddf3>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fb26 	bl	80009fc <__aeabi_d2iz>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2160      	movs	r1, #96	; 0x60
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fec6 	bl	8001146 <modulo>
 80013ba:	4603      	mov	r3, r0
 80013bc:	837b      	strh	r3, [r7, #26]

		if ((repeatMode == REPEATMODE_NONE)
 80013be:	78bb      	ldrb	r3, [r7, #2]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <LCD_LoadObj+0x78>
				&& (displayRow < 0 || displayRow >= 96)) {
 80013c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f2c0 80e0 	blt.w	800158e <LCD_LoadObj+0x22e>
 80013ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80013d2:	2b5f      	cmp	r3, #95	; 0x5f
 80013d4:	f300 80db 	bgt.w	800158e <LCD_LoadObj+0x22e>
			continue;
		}

		displayRowOffset = displayRow * 12;
 80013d8:	8b7b      	ldrh	r3, [r7, #26]
 80013da:	461a      	mov	r2, r3
 80013dc:	0052      	lsls	r2, r2, #1
 80013de:	4413      	add	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	833b      	strh	r3, [r7, #24]

		int firstXByte = floor(floor(gameObj->x) / 8);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f814 	bl	8000418 <__aeabi_f2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	f002 ff6a 	bl	80042d0 <floor>
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <LCD_LoadObj+0x24c>)
 8001402:	f7ff f98b 	bl	800071c <__aeabi_ddiv>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f002 ff5f 	bl	80042d0 <floor>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	f7ff faef 	bl	80009fc <__aeabi_d2iz>
 800141e:	4603      	mov	r3, r0
 8001420:	617b      	str	r3, [r7, #20]
		uint8_t leftOffset = modulo(floor(gameObj->x), 8);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fff6 	bl	8000418 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	f002 ff4c 	bl	80042d0 <floor>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fadc 	bl	80009fc <__aeabi_d2iz>
 8001444:	4603      	mov	r3, r0
 8001446:	2108      	movs	r1, #8
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe7c 	bl	8001146 <modulo>
 800144e:	4603      	mov	r3, r0
 8001450:	74fb      	strb	r3, [r7, #19]

		uint8_t v1, v2 = 0x00;
 8001452:	2300      	movs	r3, #0
 8001454:	777b      	strb	r3, [r7, #29]
		uint8_t *currentEditingBuf;

		for (uint8_t j = 0; j < gameObj->width + 1; j++) {
 8001456:	2300      	movs	r3, #0
 8001458:	773b      	strb	r3, [r7, #28]
 800145a:	e091      	b.n	8001580 <LCD_LoadObj+0x220>
			if (j == gameObj->width)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7b1b      	ldrb	r3, [r3, #12]
 8001460:	7f3a      	ldrb	r2, [r7, #28]
 8001462:	429a      	cmp	r2, r3
 8001464:	d102      	bne.n	800146c <LCD_LoadObj+0x10c>
				v2 = 0x00;
 8001466:	2300      	movs	r3, #0
 8001468:	777b      	strb	r3, [r7, #29]
 800146a:	e00d      	b.n	8001488 <LCD_LoadObj+0x128>
			else
				v2 = *(gameObj->bmp + gameObj->width * y + j);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7b1b      	ldrb	r3, [r3, #12]
 8001474:	4619      	mov	r1, r3
 8001476:	7ffb      	ldrb	r3, [r7, #31]
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	4619      	mov	r1, r3
 800147e:	7f3b      	ldrb	r3, [r7, #28]
 8001480:	440b      	add	r3, r1
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	777b      	strb	r3, [r7, #29]

			if (repeatMode == REPEATMODE_NONE
 8001488:	78bb      	ldrb	r3, [r7, #2]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <LCD_LoadObj+0x148>
					&& (firstXByte + j < 0 || firstXByte + j > 11)) {
 800148e:	7f3a      	ldrb	r2, [r7, #28]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	db04      	blt.n	80014a2 <LCD_LoadObj+0x142>
 8001498:	7f3a      	ldrb	r2, [r7, #28]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	4413      	add	r3, r2
 800149e:	2b0b      	cmp	r3, #11
 80014a0:	dd02      	ble.n	80014a8 <LCD_LoadObj+0x148>
				v1 = v2;
 80014a2:	7f7b      	ldrb	r3, [r7, #29]
 80014a4:	77bb      	strb	r3, [r7, #30]
				continue;
 80014a6:	e068      	b.n	800157a <LCD_LoadObj+0x21a>
			}

			currentEditingBuf = DispBuf + displayRowOffset
					+ (firstXByte + j) % 12;
 80014a8:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <LCD_LoadObj+0x250>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80014b0:	7f3a      	ldrb	r2, [r7, #28]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	441a      	add	r2, r3
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <LCD_LoadObj+0x254>)
 80014b8:	fb83 1302 	smull	r1, r3, r3, r2
 80014bc:	1059      	asrs	r1, r3, #1
 80014be:	17d3      	asrs	r3, r2, #31
 80014c0:	1ac9      	subs	r1, r1, r3
 80014c2:	460b      	mov	r3, r1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	440b      	add	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	1ad1      	subs	r1, r2, r3
 80014cc:	460b      	mov	r3, r1
 80014ce:	4423      	add	r3, r4
			currentEditingBuf = DispBuf + displayRowOffset
 80014d0:	4403      	add	r3, r0
 80014d2:	60fb      	str	r3, [r7, #12]

			switch (drawMode) {
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d036      	beq.n	8001548 <LCD_LoadObj+0x1e8>
 80014da:	2b02      	cmp	r3, #2
 80014dc:	dc4b      	bgt.n	8001576 <LCD_LoadObj+0x216>
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <LCD_LoadObj+0x188>
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d017      	beq.n	8001516 <LCD_LoadObj+0x1b6>
 80014e6:	e046      	b.n	8001576 <LCD_LoadObj+0x216>
			case DRAWMODE_ADD:
				*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25a      	sxtb	r2, r3
 80014ee:	7fb9      	ldrb	r1, [r7, #30]
 80014f0:	7cfb      	ldrb	r3, [r7, #19]
 80014f2:	f1c3 0308 	rsb	r3, r3, #8
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
						| (v2 >> leftOffset));
 80014fa:	b259      	sxtb	r1, r3
 80014fc:	7f78      	ldrb	r0, [r7, #29]
 80014fe:	7cfb      	ldrb	r3, [r7, #19]
 8001500:	fa40 f303 	asr.w	r3, r0, r3
 8001504:	b25b      	sxtb	r3, r3
 8001506:	430b      	orrs	r3, r1
 8001508:	b25b      	sxtb	r3, r3
				*currentEditingBuf |= ((v1 << (8 - leftOffset))
 800150a:	4313      	orrs	r3, r2
 800150c:	b25b      	sxtb	r3, r3
 800150e:	b2da      	uxtb	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	701a      	strb	r2, [r3, #0]
				break;
 8001514:	e02f      	b.n	8001576 <LCD_LoadObj+0x216>
			case DRAWMODE_CULL:
				*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b25a      	sxtb	r2, r3
 800151c:	7fb9      	ldrb	r1, [r7, #30]
 800151e:	7cfb      	ldrb	r3, [r7, #19]
 8001520:	f1c3 0308 	rsb	r3, r3, #8
 8001524:	fa01 f303 	lsl.w	r3, r1, r3
						| (v2 >> leftOffset));
 8001528:	b259      	sxtb	r1, r3
 800152a:	7f78      	ldrb	r0, [r7, #29]
 800152c:	7cfb      	ldrb	r3, [r7, #19]
 800152e:	fa40 f303 	asr.w	r3, r0, r3
 8001532:	b25b      	sxtb	r3, r3
 8001534:	430b      	orrs	r3, r1
 8001536:	b25b      	sxtb	r3, r3
				*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001538:	43db      	mvns	r3, r3
 800153a:	b25b      	sxtb	r3, r3
 800153c:	4013      	ands	r3, r2
 800153e:	b25b      	sxtb	r3, r3
 8001540:	b2da      	uxtb	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	701a      	strb	r2, [r3, #0]
				break;
 8001546:	e016      	b.n	8001576 <LCD_LoadObj+0x216>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b25a      	sxtb	r2, r3
 800154e:	7fb9      	ldrb	r1, [r7, #30]
 8001550:	7cfb      	ldrb	r3, [r7, #19]
 8001552:	f1c3 0308 	rsb	r3, r3, #8
 8001556:	fa01 f303 	lsl.w	r3, r1, r3
						| (v2 >> leftOffset));
 800155a:	b259      	sxtb	r1, r3
 800155c:	7f78      	ldrb	r0, [r7, #29]
 800155e:	7cfb      	ldrb	r3, [r7, #19]
 8001560:	fa40 f303 	asr.w	r3, r0, r3
 8001564:	b25b      	sxtb	r3, r3
 8001566:	430b      	orrs	r3, r1
 8001568:	b25b      	sxtb	r3, r3
				*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 800156a:	4053      	eors	r3, r2
 800156c:	b25b      	sxtb	r3, r3
 800156e:	b2da      	uxtb	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	701a      	strb	r2, [r3, #0]
				break;
 8001574:	bf00      	nop
			}

			v1 = v2;
 8001576:	7f7b      	ldrb	r3, [r7, #29]
 8001578:	77bb      	strb	r3, [r7, #30]
		for (uint8_t j = 0; j < gameObj->width + 1; j++) {
 800157a:	7f3b      	ldrb	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	773b      	strb	r3, [r7, #28]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7b1b      	ldrb	r3, [r3, #12]
 8001584:	7f3a      	ldrb	r2, [r7, #28]
 8001586:	429a      	cmp	r2, r3
 8001588:	f67f af68 	bls.w	800145c <LCD_LoadObj+0xfc>
 800158c:	e000      	b.n	8001590 <LCD_LoadObj+0x230>
			continue;
 800158e:	bf00      	nop
	for (uint8_t y = 0; y < gameObj->height; y++) {
 8001590:	7ffb      	ldrb	r3, [r7, #31]
 8001592:	3301      	adds	r3, #1
 8001594:	77fb      	strb	r3, [r7, #31]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7b5b      	ldrb	r3, [r3, #13]
 800159a:	7ffa      	ldrb	r2, [r7, #31]
 800159c:	429a      	cmp	r2, r3
 800159e:	f4ff aeea 	bcc.w	8001376 <LCD_LoadObj+0x16>
		}
	}
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bdb0      	pop	{r4, r5, r7, pc}
 80015ac:	40200000 	.word	0x40200000
 80015b0:	20000098 	.word	0x20000098
 80015b4:	2aaaaaab 	.word	0x2aaaaaab

080015b8 <LCD_DrawLine>:

void LCD_DrawLine(uint8_t startingRow, int startingPoint, uint8_t length,
		uint8_t drawMode) {
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6039      	str	r1, [r7, #0]
 80015c0:	4611      	mov	r1, r2
 80015c2:	461a      	mov	r2, r3
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	460b      	mov	r3, r1
 80015ca:	71bb      	strb	r3, [r7, #6]
 80015cc:	4613      	mov	r3, r2
 80015ce:	717b      	strb	r3, [r7, #5]
	uint16_t rowOffset = (startingRow % 96) * 12;
 80015d0:	79fa      	ldrb	r2, [r7, #7]
 80015d2:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <LCD_DrawLine+0x140>)
 80015d4:	fba3 1302 	umull	r1, r3, r3, r2
 80015d8:	0999      	lsrs	r1, r3, #6
 80015da:	460b      	mov	r3, r1
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	440b      	add	r3, r1
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	461a      	mov	r2, r3
 80015ea:	0052      	lsls	r2, r2, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	82bb      	strh	r3, [r7, #20]

	for (uint8_t j = 0; j < length; j++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	75fb      	strb	r3, [r7, #23]
 80015f6:	e074      	b.n	80016e2 <LCD_DrawLine+0x12a>
		if (startingPoint + j < 0)
 80015f8:	7dfa      	ldrb	r2, [r7, #23]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	4413      	add	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db6b      	blt.n	80016da <LCD_DrawLine+0x122>
			continue;
		uint8_t additionalOffset = ((startingPoint + j) % 96) / 8;
 8001602:	7dfa      	ldrb	r2, [r7, #23]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	441a      	add	r2, r3
 8001608:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <LCD_DrawLine+0x144>)
 800160a:	fb83 1302 	smull	r1, r3, r3, r2
 800160e:	1119      	asrs	r1, r3, #4
 8001610:	17d3      	asrs	r3, r2, #31
 8001612:	1ac9      	subs	r1, r1, r3
 8001614:	460b      	mov	r3, r1
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	440b      	add	r3, r1
 800161a:	015b      	lsls	r3, r3, #5
 800161c:	1ad1      	subs	r1, r2, r3
 800161e:	460b      	mov	r3, r1
 8001620:	2b00      	cmp	r3, #0
 8001622:	da00      	bge.n	8001626 <LCD_DrawLine+0x6e>
 8001624:	3307      	adds	r3, #7
 8001626:	10db      	asrs	r3, r3, #3
 8001628:	74fb      	strb	r3, [r7, #19]

		uint8_t *currentEditingBuf = DispBuf + rowOffset + additionalOffset;
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <LCD_DrawLine+0x148>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	8ab9      	ldrh	r1, [r7, #20]
 8001630:	7cfb      	ldrb	r3, [r7, #19]
 8001632:	440b      	add	r3, r1
 8001634:	4413      	add	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
		switch (drawMode) {
 8001638:	797b      	ldrb	r3, [r7, #5]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d036      	beq.n	80016ac <LCD_DrawLine+0xf4>
 800163e:	2b02      	cmp	r3, #2
 8001640:	dc4c      	bgt.n	80016dc <LCD_DrawLine+0x124>
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <LCD_DrawLine+0x94>
 8001646:	2b01      	cmp	r3, #1
 8001648:	d017      	beq.n	800167a <LCD_DrawLine+0xc2>
 800164a:	e047      	b.n	80016dc <LCD_DrawLine+0x124>
		case DRAWMODE_ADD:
			*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	b25a      	sxtb	r2, r3
 8001652:	7df9      	ldrb	r1, [r7, #23]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	440b      	add	r3, r1
 8001658:	4259      	negs	r1, r3
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	f001 0107 	and.w	r1, r1, #7
 8001662:	bf58      	it	pl
 8001664:	424b      	negpl	r3, r1
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	fa41 f303 	asr.w	r3, r1, r3
 800166c:	b25b      	sxtb	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	b2da      	uxtb	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	701a      	strb	r2, [r3, #0]
			break;
 8001678:	e030      	b.n	80016dc <LCD_DrawLine+0x124>
		case DRAWMODE_CULL:
			*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b25a      	sxtb	r2, r3
 8001680:	7df9      	ldrb	r1, [r7, #23]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	440b      	add	r3, r1
 8001686:	4259      	negs	r1, r3
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	f001 0107 	and.w	r1, r1, #7
 8001690:	bf58      	it	pl
 8001692:	424b      	negpl	r3, r1
 8001694:	2180      	movs	r1, #128	; 0x80
 8001696:	fa41 f303 	asr.w	r3, r1, r3
 800169a:	b25b      	sxtb	r3, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	b25b      	sxtb	r3, r3
 80016a0:	4013      	ands	r3, r2
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	701a      	strb	r2, [r3, #0]
			break;
 80016aa:	e017      	b.n	80016dc <LCD_DrawLine+0x124>
		case DRAWMODE_TOGGLE:
			*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b25a      	sxtb	r2, r3
 80016b2:	7df9      	ldrb	r1, [r7, #23]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	440b      	add	r3, r1
 80016b8:	4259      	negs	r1, r3
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	f001 0107 	and.w	r1, r1, #7
 80016c2:	bf58      	it	pl
 80016c4:	424b      	negpl	r3, r1
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	fa41 f303 	asr.w	r3, r1, r3
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4053      	eors	r3, r2
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	701a      	strb	r2, [r3, #0]
			break;
 80016d8:	e000      	b.n	80016dc <LCD_DrawLine+0x124>
			continue;
 80016da:	bf00      	nop
	for (uint8_t j = 0; j < length; j++) {
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	3301      	adds	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
 80016e2:	7dfa      	ldrb	r2, [r7, #23]
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d386      	bcc.n	80015f8 <LCD_DrawLine+0x40>
		}
	}
}
 80016ea:	bf00      	nop
 80016ec:	bf00      	nop
 80016ee:	371c      	adds	r7, #28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	aaaaaaab 	.word	0xaaaaaaab
 80016fc:	2aaaaaab 	.word	0x2aaaaaab
 8001700:	20000098 	.word	0x20000098

08001704 <LCD_Fill>:
		DispBuf[invt] = ~DispBuf[invt];
	} while (invt);
}

//Fill screen with either black or white color
void LCD_Fill(bool fill) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	memset(DispBuf, (fill ? 0 : 0xFF), 1152);
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <LCD_Fill+0x2c>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <LCD_Fill+0x18>
 8001718:	2300      	movs	r3, #0
 800171a:	e000      	b.n	800171e <LCD_Fill+0x1a>
 800171c:	23ff      	movs	r3, #255	; 0xff
 800171e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001722:	4619      	mov	r1, r3
 8001724:	f002 fd18 	bl	8004158 <memset>
//	HAL_Delay(10);
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000098 	.word	0x20000098

08001734 <IsOverlapping>:
 */

#include "gamelogic.h"

bool IsOverlapping(short x1, short y1, short x2, short y2, short x3, short y3,
		short x4, short y4) {
 8001734:	b490      	push	{r4, r7}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4604      	mov	r4, r0
 800173c:	4608      	mov	r0, r1
 800173e:	4611      	mov	r1, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4623      	mov	r3, r4
 8001744:	80fb      	strh	r3, [r7, #6]
 8001746:	4603      	mov	r3, r0
 8001748:	80bb      	strh	r3, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	807b      	strh	r3, [r7, #2]
 800174e:	4613      	mov	r3, r2
 8001750:	803b      	strh	r3, [r7, #0]
	if (x1 > x4 || x3 > x2 || y1 > y4 || y3 > y2) {
 8001752:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001756:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800175a:	429a      	cmp	r2, r3
 800175c:	dc11      	bgt.n	8001782 <IsOverlapping+0x4e>
 800175e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001762:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001766:	429a      	cmp	r2, r3
 8001768:	dc0b      	bgt.n	8001782 <IsOverlapping+0x4e>
 800176a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800176e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001772:	429a      	cmp	r2, r3
 8001774:	dc05      	bgt.n	8001782 <IsOverlapping+0x4e>
 8001776:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800177a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800177e:	429a      	cmp	r2, r3
 8001780:	dd01      	ble.n	8001786 <IsOverlapping+0x52>
		return false;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <IsOverlapping+0x54>
	}
	return true;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bc90      	pop	{r4, r7}
 8001790:	4770      	bx	lr

08001792 <IsFadedOutOfScene>:

bool IsFadedOutOfScene(GameObj *obj) {
 8001792:	b590      	push	{r4, r7, lr}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
	if (obj->x + obj->width * 8 < 0) {
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685c      	ldr	r4, [r3, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b1b      	ldrb	r3, [r3, #12]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fa5b 	bl	8000c60 <__aeabi_i2f>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff f9a2 	bl	8000af8 <__addsf3>
 80017b4:	4603      	mov	r3, r0
 80017b6:	f04f 0100 	mov.w	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fc42 	bl	8001044 <__aeabi_fcmplt>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <IsFadedOutOfScene+0x38>
		return true;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <IsFadedOutOfScene+0x3a>
	} else {
		return false;
 80017ca:	2300      	movs	r3, #0
	}
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}

080017d4 <Append>:

// Append buffer in loop, if buffers are all occupied, use the first buffer
GameObj* Append(GameObj *header, short xPos) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
	GameObj *ptr = header;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	60fb      	str	r3, [r7, #12]

	// If the current pointer is occupied, look for the next pos
	while (ptr->full) {
 80017e4:	e024      	b.n	8001830 <Append+0x5c>
		ptr = ptr->next;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	60fb      	str	r3, [r7, #12]
		// Have cycled for a whole loop
		if (ptr == header) {
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d11d      	bne.n	8001830 <Append+0x5c>
			ptr->bmp = header->bmp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	601a      	str	r2, [r3, #0]
			ptr->x = xPos;
 80017fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa2d 	bl	8000c60 <__aeabi_i2f>
 8001806:	4602      	mov	r2, r0
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	605a      	str	r2, [r3, #4]
			ptr->y = header->y;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	609a      	str	r2, [r3, #8]
			ptr->width = header->width;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	7b1a      	ldrb	r2, [r3, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	731a      	strb	r2, [r3, #12]
			ptr->height = header->height;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7b5a      	ldrb	r2, [r3, #13]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	735a      	strb	r2, [r3, #13]
			ptr->full = 1;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2201      	movs	r2, #1
 8001828:	739a      	strb	r2, [r3, #14]
			return header->next;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	e01f      	b.n	8001870 <Append+0x9c>
	while (ptr->full) {
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	7b9b      	ldrb	r3, [r3, #14]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1d6      	bne.n	80017e6 <Append+0x12>
		}
	}

	ptr->bmp = header->bmp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	601a      	str	r2, [r3, #0]
	ptr->x = xPos;
 8001840:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fa0b 	bl	8000c60 <__aeabi_i2f>
 800184a:	4602      	mov	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
	ptr->y = header->y;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	609a      	str	r2, [r3, #8]
	ptr->width = header->width;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	7b1a      	ldrb	r2, [r3, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	731a      	strb	r2, [r3, #12]
	ptr->height = header->height;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7b5a      	ldrb	r2, [r3, #13]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	735a      	strb	r2, [r3, #13]
	ptr->full = 1;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2201      	movs	r2, #1
 800186c:	739a      	strb	r2, [r3, #14]
	return header;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <GenLoopBuf>:

// Generate loop buffer given certain size
GameObj* GenLoopBuf(uint8_t size) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
	GameObj *head = NULL, *cyclic = NULL;
 8001882:	2300      	movs	r3, #0
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
	head = (GameObj*) malloc(sizeof(GameObj));
 800188a:	2014      	movs	r0, #20
 800188c:	f002 fc4e 	bl	800412c <malloc>
 8001890:	4603      	mov	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]
	head->full = 0;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2200      	movs	r2, #0
 8001898:	739a      	strb	r2, [r3, #14]
	cyclic = head;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 800189e:	2301      	movs	r3, #1
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	e00f      	b.n	80018c4 <GenLoopBuf+0x4c>
		GameObj *body = (GameObj*) malloc(sizeof(GameObj));
 80018a4:	2014      	movs	r0, #20
 80018a6:	f002 fc41 	bl	800412c <malloc>
 80018aa:	4603      	mov	r3, r0
 80018ac:	60bb      	str	r3, [r7, #8]
		body->full = 0;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2200      	movs	r2, #0
 80018b2:	739a      	strb	r2, [r3, #14]
		cyclic->next = body;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	611a      	str	r2, [r3, #16]
		cyclic = body;
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	3301      	adds	r3, #1
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbeb      	blt.n	80018a4 <GenLoopBuf+0x2c>
	}
	cyclic->next = head;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	611a      	str	r2, [r3, #16]
	return head;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <HeaderInit>:

// Initializes the head pointer with the given values, n resets other buffers
void HeaderInit(GameObj *header, uint8_t *bmp, float x, float y, uint8_t width,
		uint8_t height) {
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
	GameObj *ptr = header;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	617b      	str	r3, [r7, #20]

	ptr->bmp = bmp;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	601a      	str	r2, [r3, #0]
	ptr->x = x;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	605a      	str	r2, [r3, #4]
	ptr->y = y;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	609a      	str	r2, [r3, #8]
	ptr->width = width;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001906:	731a      	strb	r2, [r3, #12]
	ptr->height = height;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800190e:	735a      	strb	r2, [r3, #13]
	ptr->full = 1;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	2201      	movs	r2, #1
 8001914:	739a      	strb	r2, [r3, #14]

	for(;;){
		if(ptr->next == header)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d006      	beq.n	800192e <HeaderInit+0x52>
			return;
		ptr = ptr->next;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	617b      	str	r3, [r7, #20]
		ptr->full = 0;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2200      	movs	r2, #0
 800192a:	739a      	strb	r2, [r3, #14]
		if(ptr->next == header)
 800192c:	e7f3      	b.n	8001916 <HeaderInit+0x3a>
			return;
 800192e:	bf00      	nop
	}
}
 8001930:	371c      	adds	r7, #28
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <ShiftX>:

// Shift all buffers and return the first active pointer
GameObj* ShiftX(GameObj *header, float byX) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
	GameObj *ptr = header;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

	// Cycle through all valid buffers once and apply the drift
	for (;;) {
		if (ptr->full) {
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	7b9b      	ldrb	r3, [r3, #14]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <ShiftX+0x2a>
			ptr->x += byX;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	6839      	ldr	r1, [r7, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f8cf 	bl	8000af8 <__addsf3>
 800195a:	4603      	mov	r3, r0
 800195c:	461a      	mov	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	605a      	str	r2, [r3, #4]
		}
		// Have cycled through the buffer
		if ( !ptr->next->full || ptr->next == header)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	7b9b      	ldrb	r3, [r3, #14]
 8001968:	f083 0301 	eor.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11b      	bne.n	80019aa <ShiftX+0x72>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	d016      	beq.n	80019aa <ShiftX+0x72>
			break;
		ptr = ptr->next;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	60fb      	str	r3, [r7, #12]
		if (ptr->full) {
 8001982:	e7e0      	b.n	8001946 <ShiftX+0xe>
	}

	// Return the first available buffer, if no buf is available, return header
	while (IsFadedOutOfScene(ptr)) {
		ptr->full = 0;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	739a      	strb	r2, [r3, #14]
		if (!ptr->next->full || ptr->next == header) {
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	7b9b      	ldrb	r3, [r3, #14]
 8001990:	f083 0301 	eor.w	r3, r3, #1
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <ShiftX+0x7e>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d008      	beq.n	80019b6 <ShiftX+0x7e>
			break;
		}
		ptr = ptr->next;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	60fb      	str	r3, [r7, #12]
	while (IsFadedOutOfScene(ptr)) {
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff fef1 	bl	8001792 <IsFadedOutOfScene>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1e6      	bne.n	8001984 <ShiftX+0x4c>
	}
	return ptr;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019c4:	b08b      	sub	sp, #44	; 0x2c
 80019c6:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019c8:	f000 fe1a 	bl	8002600 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019cc:	f000 fb52 	bl	8002074 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019d0:	f000 fc18 	bl	8002204 <MX_GPIO_Init>
	MX_SPI1_Init();
 80019d4:	f000 fb90 	bl	80020f8 <MX_SPI1_Init>
	MX_TIM1_Init();
 80019d8:	f000 fbc4 	bl	8002164 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80019dc:	4892      	ldr	r0, [pc, #584]	; (8001c28 <main+0x268>)
 80019de:	f001 ffd1 	bl	8003984 <HAL_TIM_Base_Start_IT>

	// ALL GPIO AND BUSES MUST BE INITED BEFORE CALL THIS FUNCTION
	LCD_Init(&MemDisp, &hspi1, GPIOA, CS_Pin);
 80019e2:	2310      	movs	r3, #16
 80019e4:	4a91      	ldr	r2, [pc, #580]	; (8001c2c <main+0x26c>)
 80019e6:	4992      	ldr	r1, [pc, #584]	; (8001c30 <main+0x270>)
 80019e8:	4892      	ldr	r0, [pc, #584]	; (8001c34 <main+0x274>)
 80019ea:	f7ff fbc7 	bl	800117c <LCD_Init>
	static uint8_t jumpTick;
	static short dinoVerticalMovement;
	static float overallSpeed;
	GameObj *ptr;

	GameObj *dinoHeader = GenLoopBuf(1);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7ff ff42 	bl	8001878 <GenLoopBuf>
 80019f4:	60b8      	str	r0, [r7, #8]
	GameObj *fireHeader = GenLoopBuf(1);
 80019f6:	2001      	movs	r0, #1
 80019f8:	f7ff ff3e 	bl	8001878 <GenLoopBuf>
 80019fc:	6078      	str	r0, [r7, #4]
	GameObj *cloudHeader = GenLoopBuf(CLOUD_BUF_SIZE);
 80019fe:	2002      	movs	r0, #2
 8001a00:	f7ff ff3a 	bl	8001878 <GenLoopBuf>
 8001a04:	6138      	str	r0, [r7, #16]
	GameObj *plantHeader = GenLoopBuf(PLANT_BUF_SIZE);
 8001a06:	2002      	movs	r0, #2
 8001a08:	f7ff ff36 	bl	8001878 <GenLoopBuf>
 8001a0c:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */
		LCD_LoadFull((uint8_t*) Title);
 8001a0e:	488a      	ldr	r0, [pc, #552]	; (8001c38 <main+0x278>)
 8001a10:	f7ff fc66 	bl	80012e0 <LCD_LoadFull>
		LCD_Update(&MemDisp);
 8001a14:	4887      	ldr	r0, [pc, #540]	; (8001c34 <main+0x274>)
 8001a16:	f7ff fbf1 	bl	80011fc <LCD_Update>

		while (!JUMP_BUTTON_PRESSED);
 8001a1a:	bf00      	nop
 8001a1c:	4b87      	ldr	r3, [pc, #540]	; (8001c3c <main+0x27c>)
 8001a1e:	785b      	ldrb	r3, [r3, #1]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f8      	bne.n	8001a1c <main+0x5c>
		JUMP_BUTTON_PRESSED= 0;
 8001a2a:	4b84      	ldr	r3, [pc, #528]	; (8001c3c <main+0x27c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	705a      	strb	r2, [r3, #1]

		isJumping = 0;
 8001a30:	4b83      	ldr	r3, [pc, #524]	; (8001c40 <main+0x280>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
		dinoIsDead = 0;
 8001a36:	4b83      	ldr	r3, [pc, #524]	; (8001c44 <main+0x284>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
		tick = 0;
 8001a3c:	4b82      	ldr	r3, [pc, #520]	; (8001c48 <main+0x288>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
		jumpTick = 0;
 8001a42:	4b82      	ldr	r3, [pc, #520]	; (8001c4c <main+0x28c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		overallSpeed = 1;
 8001a48:	4b81      	ldr	r3, [pc, #516]	; (8001c50 <main+0x290>)
 8001a4a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a4e:	601a      	str	r2, [r3, #0]

		HeaderInit(dinoHeader, NULL, 4, DinoGroundPos, 3, 22);
 8001a50:	4a80      	ldr	r2, [pc, #512]	; (8001c54 <main+0x294>)
 8001a52:	2316      	movs	r3, #22
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	2303      	movs	r3, #3
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001a60:	2100      	movs	r1, #0
 8001a62:	68b8      	ldr	r0, [r7, #8]
 8001a64:	f7ff ff3a 	bl	80018dc <HeaderInit>
		HeaderInit(fireHeader, NULL, 24, 52, 9, 25);
 8001a68:	2319      	movs	r3, #25
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	2309      	movs	r3, #9
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4b79      	ldr	r3, [pc, #484]	; (8001c58 <main+0x298>)
 8001a72:	4a7a      	ldr	r2, [pc, #488]	; (8001c5c <main+0x29c>)
 8001a74:	2100      	movs	r1, #0
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff30 	bl	80018dc <HeaderInit>
		HeaderInit(cloudHeader, (uint8_t*) Cloud, 96, 18, 6, 14);
 8001a7c:	230e      	movs	r3, #14
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	2306      	movs	r3, #6
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	4b76      	ldr	r3, [pc, #472]	; (8001c60 <main+0x2a0>)
 8001a86:	4a77      	ldr	r2, [pc, #476]	; (8001c64 <main+0x2a4>)
 8001a88:	4977      	ldr	r1, [pc, #476]	; (8001c68 <main+0x2a8>)
 8001a8a:	6938      	ldr	r0, [r7, #16]
 8001a8c:	f7ff ff26 	bl	80018dc <HeaderInit>
		HeaderInit(plantHeader, (uint8_t*) Plant1, 96, 59, 2, 22);
 8001a90:	2316      	movs	r3, #22
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2302      	movs	r3, #2
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4b74      	ldr	r3, [pc, #464]	; (8001c6c <main+0x2ac>)
 8001a9a:	4a72      	ldr	r2, [pc, #456]	; (8001c64 <main+0x2a4>)
 8001a9c:	4974      	ldr	r1, [pc, #464]	; (8001c70 <main+0x2b0>)
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff1c 	bl	80018dc <HeaderInit>

		while (1) {
			tick++;
 8001aa4:	4b68      	ldr	r3, [pc, #416]	; (8001c48 <main+0x288>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	4a67      	ldr	r2, [pc, #412]	; (8001c48 <main+0x288>)
 8001aac:	6013      	str	r3, [r2, #0]

			// Speed Gradual Control
			if (overallSpeed < 1.2) {
 8001aae:	4b68      	ldr	r3, [pc, #416]	; (8001c50 <main+0x290>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fcb0 	bl	8000418 <__aeabi_f2d>
 8001ab8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001abc:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <main+0x2b4>)
 8001abe:	f7fe ff75 	bl	80009ac <__aeabi_dcmplt>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d012      	beq.n	8001aee <main+0x12e>
				overallSpeed += 0.001;
 8001ac8:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <main+0x290>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fca3 	bl	8000418 <__aeabi_f2d>
 8001ad2:	a353      	add	r3, pc, #332	; (adr r3, 8001c20 <main+0x260>)
 8001ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad8:	f7fe fb40 	bl	800015c <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7fe ffb2 	bl	8000a4c <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a59      	ldr	r2, [pc, #356]	; (8001c50 <main+0x290>)
 8001aec:	6013      	str	r3, [r2, #0]
			}

			if (JUMP_BUTTON_PRESSED) {
 8001aee:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <main+0x27c>)
 8001af0:	785b      	ldrb	r3, [r3, #1]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00c      	beq.n	8001b10 <main+0x150>
				if(!isJumping) {
 8001af6:	4b52      	ldr	r3, [pc, #328]	; (8001c40 <main+0x280>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <main+0x14a>
					isJumping = 1;
 8001b04:	4b4e      	ldr	r3, [pc, #312]	; (8001c40 <main+0x280>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
				}
				JUMP_BUTTON_PRESSED = 0;
 8001b0a:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <main+0x27c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	705a      	strb	r2, [r3, #1]
			}

			dinoVerticalMovement = DinoGroundPos;
 8001b10:	4b50      	ldr	r3, [pc, #320]	; (8001c54 <main+0x294>)
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fabe 	bl	8001094 <__aeabi_f2iz>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	4b56      	ldr	r3, [pc, #344]	; (8001c78 <main+0x2b8>)
 8001b1e:	801a      	strh	r2, [r3, #0]
			if (isJumping) {
 8001b20:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <main+0x280>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80b3 	beq.w	8001c90 <main+0x2d0>
				if (jumpTick < JumpTickMax / overallSpeed - 1) {
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <main+0x28c>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f896 	bl	8000c60 <__aeabi_i2f>
 8001b34:	4604      	mov	r4, r0
 8001b36:	4a51      	ldr	r2, [pc, #324]	; (8001c7c <main+0x2bc>)
 8001b38:	4b45      	ldr	r3, [pc, #276]	; (8001c50 <main+0x290>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f7ff f996 	bl	8000e70 <__aeabi_fdiv>
 8001b44:	4603      	mov	r3, r0
 8001b46:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe ffd2 	bl	8000af4 <__aeabi_fsub>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4619      	mov	r1, r3
 8001b54:	4620      	mov	r0, r4
 8001b56:	f7ff fa75 	bl	8001044 <__aeabi_fcmplt>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8091 	beq.w	8001c84 <main+0x2c4>
					jumpTick++;
 8001b62:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <main+0x28c>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <main+0x28c>)
 8001b6c:	701a      	strb	r2, [r3, #0]
					dinoVerticalMovement = jumpTick
							* (jumpTick - JumpTickMax / overallSpeed)
 8001b6e:	4b37      	ldr	r3, [pc, #220]	; (8001c4c <main+0x28c>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff f874 	bl	8000c60 <__aeabi_i2f>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	4b34      	ldr	r3, [pc, #208]	; (8001c4c <main+0x28c>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f86e 	bl	8000c60 <__aeabi_i2f>
 8001b84:	4605      	mov	r5, r0
 8001b86:	4a3d      	ldr	r2, [pc, #244]	; (8001c7c <main+0x2bc>)
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <main+0x290>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff f96e 	bl	8000e70 <__aeabi_fdiv>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4628      	mov	r0, r5
 8001b9a:	f7fe ffab 	bl	8000af4 <__aeabi_fsub>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff f8b0 	bl	8000d08 <__aeabi_fmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461c      	mov	r4, r3
							* (4
									/ ((JumpTickMax / overallSpeed)
 8001bac:	4a33      	ldr	r2, [pc, #204]	; (8001c7c <main+0x2bc>)
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <main+0x290>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	f7ff f95b 	bl	8000e70 <__aeabi_fdiv>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461d      	mov	r5, r3
											* (JumpTickMax / overallSpeed)))
 8001bbe:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <main+0x2bc>)
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <main+0x290>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f7ff f952 	bl	8000e70 <__aeabi_fdiv>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f7ff f899 	bl	8000d08 <__aeabi_fmul>
 8001bd6:	4603      	mov	r3, r0
									/ ((JumpTickMax / overallSpeed)
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8001bde:	f7ff f947 	bl	8000e70 <__aeabi_fdiv>
 8001be2:	4603      	mov	r3, r0
							* (4
 8001be4:	4619      	mov	r1, r3
 8001be6:	4620      	mov	r0, r4
 8001be8:	f7ff f88e 	bl	8000d08 <__aeabi_fmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
							* DinoJumpHeight + DinoGroundPos;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <main+0x2c0>)
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	f7ff f887 	bl	8000d08 <__aeabi_fmul>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <main+0x294>)
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f7fe ff78 	bl	8000af8 <__addsf3>
 8001c08:	4603      	mov	r3, r0
					dinoVerticalMovement = jumpTick
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fa42 	bl	8001094 <__aeabi_f2iz>
 8001c10:	4603      	mov	r3, r0
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <main+0x2b8>)
 8001c16:	801a      	strh	r2, [r3, #0]
 8001c18:	e03a      	b.n	8001c90 <main+0x2d0>
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c24:	3f50624d 	.word	0x3f50624d
 8001c28:	200000f8 	.word	0x200000f8
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	200000a0 	.word	0x200000a0
 8001c34:	20000140 	.word	0x20000140
 8001c38:	080047cc 	.word	0x080047cc
 8001c3c:	20000154 	.word	0x20000154
 8001c40:	2000015a 	.word	0x2000015a
 8001c44:	2000015b 	.word	0x2000015b
 8001c48:	2000014c 	.word	0x2000014c
 8001c4c:	2000015c 	.word	0x2000015c
 8001c50:	20000160 	.word	0x20000160
 8001c54:	42680000 	.word	0x42680000
 8001c58:	42500000 	.word	0x42500000
 8001c5c:	41c00000 	.word	0x41c00000
 8001c60:	41900000 	.word	0x41900000
 8001c64:	42c00000 	.word	0x42c00000
 8001c68:	080043f8 	.word	0x080043f8
 8001c6c:	426c0000 	.word	0x426c0000
 8001c70:	0800444c 	.word	0x0800444c
 8001c74:	3ff33333 	.word	0x3ff33333
 8001c78:	20000164 	.word	0x20000164
 8001c7c:	42a00000 	.word	0x42a00000
 8001c80:	42200000 	.word	0x42200000
				} else {
					isJumping = 0;
 8001c84:	4ba8      	ldr	r3, [pc, #672]	; (8001f28 <main+0x568>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
					jumpTick = 0;
 8001c8a:	4ba8      	ldr	r3, [pc, #672]	; (8001f2c <main+0x56c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
				}
			}

			if (tick % 150 == 0) {
 8001c90:	4ba7      	ldr	r3, [pc, #668]	; (8001f30 <main+0x570>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4ba7      	ldr	r3, [pc, #668]	; (8001f34 <main+0x574>)
 8001c96:	fba3 1302 	umull	r1, r3, r3, r2
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	2196      	movs	r1, #150	; 0x96
 8001c9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <main+0x2f2>
				plantHeader = Append(plantHeader, 96);
 8001ca8:	2160      	movs	r1, #96	; 0x60
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f7ff fd92 	bl	80017d4 <Append>
 8001cb0:	60f8      	str	r0, [r7, #12]
			}
			if (tick % 1000 == 0) {
 8001cb2:	4b9f      	ldr	r3, [pc, #636]	; (8001f30 <main+0x570>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4ba0      	ldr	r3, [pc, #640]	; (8001f38 <main+0x578>)
 8001cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d104      	bne.n	8001cd6 <main+0x316>
				cloudHeader = Append(cloudHeader, 96);
 8001ccc:	2160      	movs	r1, #96	; 0x60
 8001cce:	6938      	ldr	r0, [r7, #16]
 8001cd0:	f7ff fd80 	bl	80017d4 <Append>
 8001cd4:	6138      	str	r0, [r7, #16]
			}

			plantHeader = ShiftX(plantHeader, -0.8 * overallSpeed);
 8001cd6:	4b99      	ldr	r3, [pc, #612]	; (8001f3c <main+0x57c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fb9c 	bl	8000418 <__aeabi_f2d>
 8001ce0:	a38d      	add	r3, pc, #564	; (adr r3, 8001f18 <main+0x558>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fbef 	bl	80004c8 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4610      	mov	r0, r2
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f7fe feab 	bl	8000a4c <__aeabi_d2f>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff fe1c 	bl	8001938 <ShiftX>
 8001d00:	60f8      	str	r0, [r7, #12]
			cloudHeader = ShiftX(cloudHeader, -0.1 * overallSpeed);
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <main+0x57c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fb86 	bl	8000418 <__aeabi_f2d>
 8001d0c:	a384      	add	r3, pc, #528	; (adr r3, 8001f20 <main+0x560>)
 8001d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d12:	f7fe fbd9 	bl	80004c8 <__aeabi_dmul>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	f7fe fe95 	bl	8000a4c <__aeabi_d2f>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	6938      	ldr	r0, [r7, #16]
 8001d28:	f7ff fe06 	bl	8001938 <ShiftX>
 8001d2c:	6138      	str	r0, [r7, #16]
			dinoHeader->y = dinoVerticalMovement;
 8001d2e:	4b84      	ldr	r3, [pc, #528]	; (8001f40 <main+0x580>)
 8001d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe ff93 	bl	8000c60 <__aeabi_i2f>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	609a      	str	r2, [r3, #8]

			// Reset canvas
			LCD_Fill(true);
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff fcdf 	bl	8001704 <LCD_Fill>
			LCD_DrawLine(77, 0, 96, DRAWMODE_ADD);
 8001d46:	2300      	movs	r3, #0
 8001d48:	2260      	movs	r2, #96	; 0x60
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	204d      	movs	r0, #77	; 0x4d
 8001d4e:	f7ff fc33 	bl	80015b8 <LCD_DrawLine>

			// Add culling masks
			// Plant
			ptr = plantHeader;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	617b      	str	r3, [r7, #20]
			for (;;) {
				if (ptr->full) {
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	7b9b      	ldrb	r3, [r3, #14]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d010      	beq.n	8001d80 <main+0x3c0>
					LCD_DrawLine(77, ptr->x + 2, 6, DRAWMODE_CULL);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fec6 	bl	8000af8 <__addsf3>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f990 	bl	8001094 <__aeabi_f2iz>
 8001d74:	4601      	mov	r1, r0
 8001d76:	2301      	movs	r3, #1
 8001d78:	2206      	movs	r2, #6
 8001d7a:	204d      	movs	r0, #77	; 0x4d
 8001d7c:	f7ff fc1c 	bl	80015b8 <LCD_DrawLine>
				}
				// If looped through all / next buffer is empty
				if (!ptr->next->full || ptr->next == plantHeader) {
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	7b9b      	ldrb	r3, [r3, #14]
 8001d86:	f083 0301 	eor.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d108      	bne.n	8001da2 <main+0x3e2>
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d003      	beq.n	8001da2 <main+0x3e2>
					break;
				}
				ptr = ptr->next;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	617b      	str	r3, [r7, #20]
				if (ptr->full) {
 8001da0:	e7d9      	b.n	8001d56 <main+0x396>
			}

			// Dino
			LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10,
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	4967      	ldr	r1, [pc, #412]	; (8001f44 <main+0x584>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fea5 	bl	8000af8 <__addsf3>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff f995 	bl	80010e0 <__aeabi_f2uiz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b2dc      	uxtb	r4, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	4962      	ldr	r1, [pc, #392]	; (8001f48 <main+0x588>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fe99 	bl	8000af8 <__addsf3>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f963 	bl	8001094 <__aeabi_f2iz>
 8001dce:	4601      	mov	r1, r0
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	220a      	movs	r2, #10
 8001dd4:	4620      	mov	r0, r4
 8001dd6:	f7ff fbef 	bl	80015b8 <LCD_DrawLine>
			DRAWMODE_CULL);

			// Render fire
			if (!isJumping) {
 8001dda:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <main+0x568>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	f083 0301 	eor.w	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d022      	beq.n	8001e2e <main+0x46e>
				if (FIRE_BUTTON_PRESSED) {
 8001de8:	4b58      	ldr	r3, [pc, #352]	; (8001f4c <main+0x58c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01e      	beq.n	8001e2e <main+0x46e>
					fireHeader->bmp = (uint8_t*) Fire[(tick / (int)(30 / overallSpeed)) % 2];
 8001df0:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <main+0x570>)
 8001df2:	681c      	ldr	r4, [r3, #0]
 8001df4:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <main+0x57c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4855      	ldr	r0, [pc, #340]	; (8001f50 <main+0x590>)
 8001dfc:	f7ff f838 	bl	8000e70 <__aeabi_fdiv>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f946 	bl	8001094 <__aeabi_f2iz>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	fbb4 f3f3 	udiv	r3, r4, r3
 8001e0e:	f003 0201 	and.w	r2, r3, #1
 8001e12:	4613      	mov	r3, r2
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	1a9b      	subs	r3, r3, r2
 8001e18:	011a      	lsls	r2, r3, #4
 8001e1a:	1ad2      	subs	r2, r2, r3
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <main+0x594>)
 8001e1e:	441a      	add	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	601a      	str	r2, [r3, #0]
					LCD_LoadObj(fireHeader, DRAWMODE_ADD, REPEATMODE_NONE);
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff fa99 	bl	8001360 <LCD_LoadObj>
				}
			}

			// Check if dino is crushed into any of our plants!
			ptr = plantHeader;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	617b      	str	r3, [r7, #20]
			for (;;) {
				if (ptr->full) {
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	7b9b      	ldrb	r3, [r3, #14]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d05d      	beq.n	8001ef6 <main+0x536>
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	4942      	ldr	r1, [pc, #264]	; (8001f48 <main+0x588>)
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fe59 	bl	8000af8 <__addsf3>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f923 	bl	8001094 <__aeabi_f2iz>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	b21d      	sxth	r5, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff f91c 	bl	8001094 <__aeabi_f2iz>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	b21e      	sxth	r6, r3
							dinoHeader->x + 23 - 7, dinoHeader->y + 21 - 4,
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	493c      	ldr	r1, [pc, #240]	; (8001f58 <main+0x598>)
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fe46 	bl	8000af8 <__addsf3>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	493b      	ldr	r1, [pc, #236]	; (8001f5c <main+0x59c>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fe3f 	bl	8000af4 <__aeabi_fsub>
 8001e76:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f90b 	bl	8001094 <__aeabi_f2iz>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	fa0f f883 	sxth.w	r8, r3
							dinoHeader->x + 23 - 7, dinoHeader->y + 21 - 4,
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4935      	ldr	r1, [pc, #212]	; (8001f60 <main+0x5a0>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fe34 	bl	8000af8 <__addsf3>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fe2c 	bl	8000af4 <__aeabi_fsub>
 8001e9c:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f8f8 	bl	8001094 <__aeabi_f2iz>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	fa0f f983 	sxth.w	r9, r3
							ptr->x, 59, ptr->x + 9, 59 + 21)) {
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	685b      	ldr	r3, [r3, #4]
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff f8f0 	bl	8001094 <__aeabi_f2iz>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	b21c      	sxth	r4, r3
							ptr->x, 59, ptr->x + 9, 59 + 21)) {
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4929      	ldr	r1, [pc, #164]	; (8001f64 <main+0x5a4>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fe1a 	bl	8000af8 <__addsf3>
 8001ec4:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f8e4 	bl	8001094 <__aeabi_f2iz>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	2250      	movs	r2, #80	; 0x50
 8001ed2:	9203      	str	r2, [sp, #12]
 8001ed4:	9302      	str	r3, [sp, #8]
 8001ed6:	233b      	movs	r3, #59	; 0x3b
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	9400      	str	r4, [sp, #0]
 8001edc:	464b      	mov	r3, r9
 8001ede:	4642      	mov	r2, r8
 8001ee0:	4631      	mov	r1, r6
 8001ee2:	4628      	mov	r0, r5
 8001ee4:	f7ff fc26 	bl	8001734 <IsOverlapping>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <main+0x536>
						dinoIsDead = 1;
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <main+0x5a8>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
						break;
 8001ef4:	e03a      	b.n	8001f6c <main+0x5ac>
					}
				}
				// If looped through all / next buffer is empty
				if (!ptr->next->full || ptr->next == plantHeader) {
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	7b9b      	ldrb	r3, [r3, #14]
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d132      	bne.n	8001f6c <main+0x5ac>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d02d      	beq.n	8001f6c <main+0x5ac>
					break;
				}
				ptr = ptr->next;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	617b      	str	r3, [r7, #20]
				if (ptr->full) {
 8001f16:	e78c      	b.n	8001e32 <main+0x472>
 8001f18:	9999999a 	.word	0x9999999a
 8001f1c:	bfe99999 	.word	0xbfe99999
 8001f20:	9999999a 	.word	0x9999999a
 8001f24:	bfb99999 	.word	0xbfb99999
 8001f28:	2000015a 	.word	0x2000015a
 8001f2c:	2000015c 	.word	0x2000015c
 8001f30:	2000014c 	.word	0x2000014c
 8001f34:	1b4e81b5 	.word	0x1b4e81b5
 8001f38:	10624dd3 	.word	0x10624dd3
 8001f3c:	20000160 	.word	0x20000160
 8001f40:	20000164 	.word	0x20000164
 8001f44:	41980000 	.word	0x41980000
 8001f48:	40400000 	.word	0x40400000
 8001f4c:	20000150 	.word	0x20000150
 8001f50:	41f00000 	.word	0x41f00000
 8001f54:	08004608 	.word	0x08004608
 8001f58:	41b80000 	.word	0x41b80000
 8001f5c:	40e00000 	.word	0x40e00000
 8001f60:	41a80000 	.word	0x41a80000
 8001f64:	41100000 	.word	0x41100000
 8001f68:	2000015b 	.word	0x2000015b
			}

			// Render dino!
			// Dino is dead
			if (dinoIsDead) {
 8001f6c:	4b36      	ldr	r3, [pc, #216]	; (8002048 <main+0x688>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <main+0x5bc>
				dinoHeader->bmp = (uint8_t*) DinoDead;
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4a35      	ldr	r2, [pc, #212]	; (800204c <main+0x68c>)
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	e040      	b.n	8001ffe <main+0x63e>
			}
			// Dino is jumping
			else if (isJumping) {
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <main+0x690>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <main+0x5cc>
				dinoHeader->bmp = (uint8_t*) DinoNormalS;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4a33      	ldr	r2, [pc, #204]	; (8002054 <main+0x694>)
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e038      	b.n	8001ffe <main+0x63e>
			}
			// Fire dino
			else if (FIRE_BUTTON_PRESSED) {
 8001f8c:	4b32      	ldr	r3, [pc, #200]	; (8002058 <main+0x698>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01a      	beq.n	8001fca <main+0x60a>
				dinoHeader->bmp = (uint8_t*) DinoFireRunning[(tick / (int)(16 / overallSpeed)) % 2];
 8001f94:	4b31      	ldr	r3, [pc, #196]	; (800205c <main+0x69c>)
 8001f96:	681c      	ldr	r4, [r3, #0]
 8001f98:	4b31      	ldr	r3, [pc, #196]	; (8002060 <main+0x6a0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 4083 	mov.w	r0, #1098907648	; 0x41800000
 8001fa2:	f7fe ff65 	bl	8000e70 <__aeabi_fdiv>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff f873 	bl	8001094 <__aeabi_f2iz>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	fbb4 f3f3 	udiv	r3, r4, r3
 8001fb4:	f003 0201 	and.w	r2, r3, #1
 8001fb8:	4613      	mov	r3, r2
 8001fba:	015b      	lsls	r3, r3, #5
 8001fbc:	4413      	add	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4a28      	ldr	r2, [pc, #160]	; (8002064 <main+0x6a4>)
 8001fc2:	441a      	add	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e019      	b.n	8001ffe <main+0x63e>
			}
			// Dino is running normally
			else {
				dinoHeader->bmp = (uint8_t*) DinoNormalRunning[(tick / (int)(16 / overallSpeed)) % 2];
 8001fca:	4b24      	ldr	r3, [pc, #144]	; (800205c <main+0x69c>)
 8001fcc:	681c      	ldr	r4, [r3, #0]
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <main+0x6a0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f04f 4083 	mov.w	r0, #1098907648	; 0x41800000
 8001fd8:	f7fe ff4a 	bl	8000e70 <__aeabi_fdiv>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff f858 	bl	8001094 <__aeabi_f2iz>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	fbb4 f3f3 	udiv	r3, r4, r3
 8001fea:	f003 0201 	and.w	r2, r3, #1
 8001fee:	4613      	mov	r3, r2
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <main+0x6a8>)
 8001ff8:	441a      	add	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	601a      	str	r2, [r3, #0]
			}

			// Render dino
			LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	68b8      	ldr	r0, [r7, #8]
 8002004:	f7ff f97e 	bl	8001304 <LCD_LoadObjs>

			// Render clouds
			LCD_LoadObjs(cloudHeader, DRAWMODE_ADD, REPEATMODE_NONE);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	6938      	ldr	r0, [r7, #16]
 800200e:	f7ff f979 	bl	8001304 <LCD_LoadObjs>

			// Render plants
			LCD_LoadObjs(plantHeader, DRAWMODE_ADD, REPEATMODE_NONE);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f7ff f974 	bl	8001304 <LCD_LoadObjs>

			LCD_Update(&MemDisp);
 800201c:	4813      	ldr	r0, [pc, #76]	; (800206c <main+0x6ac>)
 800201e:	f7ff f8ed 	bl	80011fc <LCD_Update>

			if (dinoIsDead) {
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <main+0x688>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f43f ad3c 	beq.w	8001aa4 <main+0xe4>
				while (!JUMP_BUTTON_PRESSED);
 800202c:	bf00      	nop
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <main+0x6b0>)
 8002030:	785b      	ldrb	r3, [r3, #1]
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f8      	bne.n	800202e <main+0x66e>
				JUMP_BUTTON_PRESSED = 0;
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <main+0x6b0>)
 800203e:	2200      	movs	r2, #0
 8002040:	705a      	strb	r2, [r3, #1]
				break;
 8002042:	bf00      	nop
		LCD_LoadFull((uint8_t*) Title);
 8002044:	e4e3      	b.n	8001a0e <main+0x4e>
 8002046:	bf00      	nop
 8002048:	2000015b 	.word	0x2000015b
 800204c:	08004478 	.word	0x08004478
 8002050:	2000015a 	.word	0x2000015a
 8002054:	08004540 	.word	0x08004540
 8002058:	20000150 	.word	0x20000150
 800205c:	2000014c 	.word	0x2000014c
 8002060:	20000160 	.word	0x20000160
 8002064:	08004584 	.word	0x08004584
 8002068:	080044bc 	.word	0x080044bc
 800206c:	20000140 	.word	0x20000140
 8002070:	20000154 	.word	0x20000154

08002074 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002074:	b580      	push	{r7, lr}
 8002076:	b090      	sub	sp, #64	; 0x40
 8002078:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800207a:	f107 0318 	add.w	r3, r7, #24
 800207e:	2228      	movs	r2, #40	; 0x28
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f002 f868 	bl	8004158 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002096:	2302      	movs	r3, #2
 8002098:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800209a:	2301      	movs	r3, #1
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800209e:	2310      	movs	r3, #16
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020a2:	2302      	movs	r3, #2
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80020a6:	2300      	movs	r3, #0
 80020a8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80020aa:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80020ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80020b0:	f107 0318 	add.w	r3, r7, #24
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fdc7 	bl	8002c48 <HAL_RCC_OscConfig>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <SystemClock_Config+0x50>
		Error_Handler();
 80020c0:	f000 f96e 	bl	80023a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80020c4:	230f      	movs	r3, #15
 80020c6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c8:	2302      	movs	r3, #2
 80020ca:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80020da:	1d3b      	adds	r3, r7, #4
 80020dc:	2101      	movs	r1, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 f834 	bl	800314c <HAL_RCC_ClockConfig>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <SystemClock_Config+0x7a>
		Error_Handler();
 80020ea:	f000 f959 	bl	80023a0 <Error_Handler>
	}
}
 80020ee:	bf00      	nop
 80020f0:	3740      	adds	r7, #64	; 0x40
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80020fc:	4b17      	ldr	r3, [pc, #92]	; (800215c <MX_SPI1_Init+0x64>)
 80020fe:	4a18      	ldr	r2, [pc, #96]	; (8002160 <MX_SPI1_Init+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <MX_SPI1_Init+0x64>)
 8002104:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002108:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <MX_SPI1_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002110:	4b12      	ldr	r3, [pc, #72]	; (800215c <MX_SPI1_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_SPI1_Init+0x64>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <MX_SPI1_Init+0x64>)
 800211e:	2200      	movs	r2, #0
 8002120:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_SPI1_Init+0x64>)
 8002124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002128:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_SPI1_Init+0x64>)
 800212c:	2210      	movs	r2, #16
 800212e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <MX_SPI1_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_SPI1_Init+0x64>)
 8002138:	2200      	movs	r2, #0
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800213c:	4b07      	ldr	r3, [pc, #28]	; (800215c <MX_SPI1_Init+0x64>)
 800213e:	2200      	movs	r2, #0
 8002140:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_SPI1_Init+0x64>)
 8002144:	220a      	movs	r2, #10
 8002146:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <MX_SPI1_Init+0x64>)
 800214a:	f001 f965 	bl	8003418 <HAL_SPI_Init>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002154:	f000 f924 	bl	80023a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200000a0 	.word	0x200000a0
 8002160:	40013000 	.word	0x40013000

08002164 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002178:	463b      	mov	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <MX_TIM1_Init+0x98>)
 8002182:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <MX_TIM1_Init+0x9c>)
 8002184:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1000 - 1;
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <MX_TIM1_Init+0x98>)
 8002188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800218c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <MX_TIM1_Init+0x98>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 8002194:	4b19      	ldr	r3, [pc, #100]	; (80021fc <MX_TIM1_Init+0x98>)
 8002196:	2263      	movs	r2, #99	; 0x63
 8002198:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <MX_TIM1_Init+0x98>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <MX_TIM1_Init+0x98>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_TIM1_Init+0x98>)
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80021ac:	4813      	ldr	r0, [pc, #76]	; (80021fc <MX_TIM1_Init+0x98>)
 80021ae:	f001 fb99 	bl	80038e4 <HAL_TIM_Base_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM1_Init+0x58>
		Error_Handler();
 80021b8:	f000 f8f2 	bl	80023a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	4619      	mov	r1, r3
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <MX_TIM1_Init+0x98>)
 80021ca:	f001 fd35 	bl	8003c38 <HAL_TIM_ConfigClockSource>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <MX_TIM1_Init+0x74>
		Error_Handler();
 80021d4:	f000 f8e4 	bl	80023a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80021e0:	463b      	mov	r3, r7
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_TIM1_Init+0x98>)
 80021e6:	f001 ff07 	bl	8003ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80021f0:	f000 f8d6 	bl	80023a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80021f4:	bf00      	nop
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200000f8 	.word	0x200000f8
 8002200:	40012c00 	.word	0x40012c00

08002204 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <MX_GPIO_Init+0x94>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <MX_GPIO_Init+0x94>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	6193      	str	r3, [r2, #24]
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <MX_GPIO_Init+0x94>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002230:	4b19      	ldr	r3, [pc, #100]	; (8002298 <MX_GPIO_Init+0x94>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	4a18      	ldr	r2, [pc, #96]	; (8002298 <MX_GPIO_Init+0x94>)
 8002236:	f043 0308 	orr.w	r3, r3, #8
 800223a:	6193      	str	r3, [r2, #24]
 800223c:	4b16      	ldr	r3, [pc, #88]	; (8002298 <MX_GPIO_Init+0x94>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8002248:	2201      	movs	r2, #1
 800224a:	2104      	movs	r1, #4
 800224c:	4813      	ldr	r0, [pc, #76]	; (800229c <MX_GPIO_Init+0x98>)
 800224e:	f000 fce2 	bl	8002c16 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002252:	2200      	movs	r2, #0
 8002254:	2110      	movs	r1, #16
 8002256:	4811      	ldr	r0, [pc, #68]	; (800229c <MX_GPIO_Init+0x98>)
 8002258:	f000 fcdd 	bl	8002c16 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_B_Pin CS_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | CS_Pin;
 800225c:	2314      	movs	r3, #20
 800225e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002260:	2301      	movs	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002268:	2302      	movs	r3, #2
 800226a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	4619      	mov	r1, r3
 8002272:	480a      	ldr	r0, [pc, #40]	; (800229c <MX_GPIO_Init+0x98>)
 8002274:	f000 fb34 	bl	80028e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY0_Pin KEY1_Pin */
	GPIO_InitStruct.Pin = KEY0_Pin | KEY1_Pin;
 8002278:	2303      	movs	r3, #3
 800227a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	4619      	mov	r1, r3
 800228a:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_GPIO_Init+0x9c>)
 800228c:	f000 fb28 	bl	80028e0 <HAL_GPIO_Init>

}
 8002290:	bf00      	nop
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40021000 	.word	0x40021000
 800229c:	40010800 	.word	0x40010800
 80022a0:	40010c00 	.word	0x40010c00

080022a4 <KeyScan>:

/* USER CODE BEGIN 4 */
void KeyScan() {
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0

	static uint8_t KeyBuffer[2] = { 0x00, 0x00 };

	KeyBuffer[0] = ((KeyBuffer[0] << 1) | (KEY0_STATE & 0x01));
 80022aa:	4b30      	ldr	r3, [pc, #192]	; (800236c <KeyScan+0xc8>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	b25c      	sxtb	r4, r3
 80022b2:	2101      	movs	r1, #1
 80022b4:	482e      	ldr	r0, [pc, #184]	; (8002370 <KeyScan+0xcc>)
 80022b6:	f000 fc97 	bl	8002be8 <HAL_GPIO_ReadPin>
 80022ba:	4603      	mov	r3, r0
 80022bc:	b25b      	sxtb	r3, r3
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	b25b      	sxtb	r3, r3
 80022c4:	4323      	orrs	r3, r4
 80022c6:	b25b      	sxtb	r3, r3
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b28      	ldr	r3, [pc, #160]	; (800236c <KeyScan+0xc8>)
 80022cc:	701a      	strb	r2, [r3, #0]
	KeyBuffer[1] = ((KeyBuffer[1] << 1) | (KEY1_STATE & 0x01));
 80022ce:	4b27      	ldr	r3, [pc, #156]	; (800236c <KeyScan+0xc8>)
 80022d0:	785b      	ldrb	r3, [r3, #1]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	b25c      	sxtb	r4, r3
 80022d6:	2102      	movs	r1, #2
 80022d8:	4825      	ldr	r0, [pc, #148]	; (8002370 <KeyScan+0xcc>)
 80022da:	f000 fc85 	bl	8002be8 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	b25b      	sxtb	r3, r3
 80022e8:	4323      	orrs	r3, r4
 80022ea:	b25b      	sxtb	r3, r3
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <KeyScan+0xc8>)
 80022f0:	705a      	strb	r2, [r3, #1]

	for (uint8_t j = 0; j < 2; j++) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	71fb      	strb	r3, [r7, #7]
 80022f6:	e030      	b.n	800235a <KeyScan+0xb6>
		if ((KeyBuffer[j] | 0xf0) == 0xff) {
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4a1c      	ldr	r2, [pc, #112]	; (800236c <KeyScan+0xc8>)
 80022fc:	5cd3      	ldrb	r3, [r2, r3]
 80022fe:	f063 030f 	orn	r3, r3, #15
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2bff      	cmp	r3, #255	; 0xff
 8002306:	d110      	bne.n	800232a <KeyScan+0x86>
			if (!KeyState[j]) {
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	4a1a      	ldr	r2, [pc, #104]	; (8002374 <KeyScan+0xd0>)
 800230c:	5cd3      	ldrb	r3, [r2, r3]
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <KeyScan+0x7c>
				KeyPressed[j] = 1;
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	4a17      	ldr	r2, [pc, #92]	; (8002378 <KeyScan+0xd4>)
 800231c:	2101      	movs	r1, #1
 800231e:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 1;
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	4a14      	ldr	r2, [pc, #80]	; (8002374 <KeyScan+0xd0>)
 8002324:	2101      	movs	r1, #1
 8002326:	54d1      	strb	r1, [r2, r3]
 8002328:	e014      	b.n	8002354 <KeyScan+0xb0>
		} else if ((KeyBuffer[j] | 0xf0) == 0xf0) {
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4a0f      	ldr	r2, [pc, #60]	; (800236c <KeyScan+0xc8>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	f063 030f 	orn	r3, r3, #15
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2bf0      	cmp	r3, #240	; 0xf0
 8002338:	d10c      	bne.n	8002354 <KeyScan+0xb0>
			if (KeyState[j]) {
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a0d      	ldr	r2, [pc, #52]	; (8002374 <KeyScan+0xd0>)
 800233e:	5cd3      	ldrb	r3, [r2, r3]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d003      	beq.n	800234c <KeyScan+0xa8>
				KeyReleased[j] = 1;
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	4a0d      	ldr	r2, [pc, #52]	; (800237c <KeyScan+0xd8>)
 8002348:	2101      	movs	r1, #1
 800234a:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 0;
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	4a09      	ldr	r2, [pc, #36]	; (8002374 <KeyScan+0xd0>)
 8002350:	2100      	movs	r1, #0
 8002352:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < 2; j++) {
 8002354:	79fb      	ldrb	r3, [r7, #7]
 8002356:	3301      	adds	r3, #1
 8002358:	71fb      	strb	r3, [r7, #7]
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d9cb      	bls.n	80022f8 <KeyScan+0x54>
		}
	}
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	bf00      	nop
 800236c:	20000168 	.word	0x20000168
 8002370:	40010c00 	.word	0x40010c00
 8002374:	20000150 	.word	0x20000150
 8002378:	20000154 	.word	0x20000154
 800237c:	20000158 	.word	0x20000158

08002380 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_TIM_PeriodElapsedCallback+0x14>
//		LEDB_TOGGLE;
		KeyScan();
 8002390:	f7ff ff88 	bl	80022a4 <KeyScan>

	}
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200000f8 	.word	0x200000f8

080023a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80023a8:	e7fe      	b.n	80023a8 <Error_Handler+0x8>
	...

080023ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_MspInit+0x5c>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	4a14      	ldr	r2, [pc, #80]	; (8002408 <HAL_MspInit+0x5c>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6193      	str	r3, [r2, #24]
 80023be:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_MspInit+0x5c>)
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <HAL_MspInit+0x5c>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <HAL_MspInit+0x5c>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d4:	61d3      	str	r3, [r2, #28]
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_MspInit+0x5c>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023e2:	4b0a      	ldr	r3, [pc, #40]	; (800240c <HAL_MspInit+0x60>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	4a04      	ldr	r2, [pc, #16]	; (800240c <HAL_MspInit+0x60>)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr
 8002408:	40021000 	.word	0x40021000
 800240c:	40010000 	.word	0x40010000

08002410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002418:	f107 0310 	add.w	r3, r7, #16
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
 8002420:	605a      	str	r2, [r3, #4]
 8002422:	609a      	str	r2, [r3, #8]
 8002424:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a15      	ldr	r2, [pc, #84]	; (8002480 <HAL_SPI_MspInit+0x70>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d123      	bne.n	8002478 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_SPI_MspInit+0x74>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	4a13      	ldr	r2, [pc, #76]	; (8002484 <HAL_SPI_MspInit+0x74>)
 8002436:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800243a:	6193      	str	r3, [r2, #24]
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <HAL_SPI_MspInit+0x74>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_SPI_MspInit+0x74>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <HAL_SPI_MspInit+0x74>)
 800244e:	f043 0304 	orr.w	r3, r3, #4
 8002452:	6193      	str	r3, [r2, #24]
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_SPI_MspInit+0x74>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002460:	23a0      	movs	r3, #160	; 0xa0
 8002462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	4619      	mov	r1, r3
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <HAL_SPI_MspInit+0x78>)
 8002474:	f000 fa34 	bl	80028e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013000 	.word	0x40013000
 8002484:	40021000 	.word	0x40021000
 8002488:	40010800 	.word	0x40010800

0800248c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <HAL_TIM_Base_MspInit+0x44>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d113      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_TIM_Base_MspInit+0x48>)
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	4a0c      	ldr	r2, [pc, #48]	; (80024d4 <HAL_TIM_Base_MspInit+0x48>)
 80024a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024a8:	6193      	str	r3, [r2, #24]
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_TIM_Base_MspInit+0x48>)
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	2019      	movs	r0, #25
 80024bc:	f000 f9d9 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80024c0:	2019      	movs	r0, #25
 80024c2:	f000 f9f2 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40012c00 	.word	0x40012c00
 80024d4:	40021000 	.word	0x40021000

080024d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <NMI_Handler+0x4>

080024de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <HardFault_Handler+0x4>

080024e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <MemManage_Handler+0x4>

080024ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <BusFault_Handler+0x4>

080024f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <UsageFault_Handler+0x4>

080024f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800250e:	b480      	push	{r7}
 8002510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800251e:	f000 f8b5 	bl	800268c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <TIM1_UP_IRQHandler+0x10>)
 800252e:	f001 fa7b 	bl	8003a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	200000f8 	.word	0x200000f8

0800253c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <_sbrk+0x5c>)
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <_sbrk+0x60>)
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <_sbrk+0x64>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <_sbrk+0x64>)
 800255a:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <_sbrk+0x68>)
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <_sbrk+0x64>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4413      	add	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	429a      	cmp	r2, r3
 800256a:	d207      	bcs.n	800257c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800256c:	f001 fdb4 	bl	80040d8 <__errno>
 8002570:	4603      	mov	r3, r0
 8002572:	220c      	movs	r2, #12
 8002574:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002576:	f04f 33ff 	mov.w	r3, #4294967295
 800257a:	e009      	b.n	8002590 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <_sbrk+0x64>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <_sbrk+0x64>)
 800258c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258e:	68fb      	ldr	r3, [r7, #12]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3718      	adds	r7, #24
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20005000 	.word	0x20005000
 800259c:	00000400 	.word	0x00000400
 80025a0:	2000016c 	.word	0x2000016c
 80025a4:	20000188 	.word	0x20000188

080025a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <Reset_Handler>:
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <LoopFillZerobss+0x12>)
 80025b6:	490d      	ldr	r1, [pc, #52]	; (80025ec <LoopFillZerobss+0x16>)
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <LoopFillZerobss+0x1a>)
 80025ba:	2300      	movs	r3, #0
 80025bc:	e002      	b.n	80025c4 <LoopCopyDataInit>

080025be <CopyDataInit>:
 80025be:	58d4      	ldr	r4, [r2, r3]
 80025c0:	50c4      	str	r4, [r0, r3]
 80025c2:	3304      	adds	r3, #4

080025c4 <LoopCopyDataInit>:
 80025c4:	18c4      	adds	r4, r0, r3
 80025c6:	428c      	cmp	r4, r1
 80025c8:	d3f9      	bcc.n	80025be <CopyDataInit>
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <LoopFillZerobss+0x1e>)
 80025cc:	4c0a      	ldr	r4, [pc, #40]	; (80025f8 <LoopFillZerobss+0x22>)
 80025ce:	2300      	movs	r3, #0
 80025d0:	e001      	b.n	80025d6 <LoopFillZerobss>

080025d2 <FillZerobss>:
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	3204      	adds	r2, #4

080025d6 <LoopFillZerobss>:
 80025d6:	42a2      	cmp	r2, r4
 80025d8:	d3fb      	bcc.n	80025d2 <FillZerobss>
 80025da:	f7ff ffe5 	bl	80025a8 <SystemInit>
 80025de:	f001 fd81 	bl	80040e4 <__libc_init_array>
 80025e2:	f7ff f9ed 	bl	80019c0 <main>
 80025e6:	4770      	bx	lr
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000078 	.word	0x20000078
 80025f0:	08004c64 	.word	0x08004c64
 80025f4:	20000078 	.word	0x20000078
 80025f8:	20000184 	.word	0x20000184

080025fc <ADC1_2_IRQHandler>:
 80025fc:	e7fe      	b.n	80025fc <ADC1_2_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_Init+0x28>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_Init+0x28>)
 800260a:	f043 0310 	orr.w	r3, r3, #16
 800260e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002610:	2003      	movs	r0, #3
 8002612:	f000 f923 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002616:	200f      	movs	r0, #15
 8002618:	f000 f808 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800261c:	f7ff fec6 	bl	80023ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40022000 	.word	0x40022000

0800262c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x54>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x58>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	fbb3 f3f1 	udiv	r3, r3, r1
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f93b 	bl	80028c6 <HAL_SYSTICK_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00e      	b.n	8002678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0f      	cmp	r3, #15
 800265e:	d80a      	bhi.n	8002676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002660:	2200      	movs	r2, #0
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f000 f903 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_InitTick+0x5c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000008 	.word	0x20000008
 8002684:	20000010 	.word	0x20000010
 8002688:	2000000c 	.word	0x2000000c

0800268c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <HAL_IncTick+0x1c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_IncTick+0x20>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_IncTick+0x20>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000010 	.word	0x20000010
 80026ac:	20000170 	.word	0x20000170

080026b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return uwTick;
 80026b4:	4b02      	ldr	r3, [pc, #8]	; (80026c0 <HAL_GetTick+0x10>)
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr
 80026c0:	20000170 	.word	0x20000170

080026c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f003 0307 	and.w	r3, r3, #7
 80026d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026e0:	4013      	ands	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <__NVIC_SetPriorityGrouping+0x44>)
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	60d3      	str	r3, [r2, #12]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <__NVIC_GetPriorityGrouping+0x18>)
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	0a1b      	lsrs	r3, r3, #8
 8002716:	f003 0307 	and.w	r3, r3, #7
}
 800271a:	4618      	mov	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	bc80      	pop	{r7}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	2b00      	cmp	r3, #0
 8002738:	db0b      	blt.n	8002752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800273a:	79fb      	ldrb	r3, [r7, #7]
 800273c:	f003 021f 	and.w	r2, r3, #31
 8002740:	4906      	ldr	r1, [pc, #24]	; (800275c <__NVIC_EnableIRQ+0x34>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2001      	movs	r0, #1
 800274a:	fa00 f202 	lsl.w	r2, r0, r2
 800274e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	; (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	; (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	; 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	; 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	bc80      	pop	{r7}
 8002816:	4770      	bx	lr

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7ff ff90 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff2d 	bl	80026c4 <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff42 	bl	800270c <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff90 	bl	80027b4 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5f 	bl	8002760 <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff35 	bl	8002728 <__NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffa2 	bl	8002818 <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b08b      	sub	sp, #44	; 0x2c
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028ee:	2300      	movs	r3, #0
 80028f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f2:	e169      	b.n	8002bc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028f4:	2201      	movs	r2, #1
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	429a      	cmp	r2, r3
 800290e:	f040 8158 	bne.w	8002bc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	4a9a      	ldr	r2, [pc, #616]	; (8002b80 <HAL_GPIO_Init+0x2a0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d05e      	beq.n	80029da <HAL_GPIO_Init+0xfa>
 800291c:	4a98      	ldr	r2, [pc, #608]	; (8002b80 <HAL_GPIO_Init+0x2a0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d875      	bhi.n	8002a0e <HAL_GPIO_Init+0x12e>
 8002922:	4a98      	ldr	r2, [pc, #608]	; (8002b84 <HAL_GPIO_Init+0x2a4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d058      	beq.n	80029da <HAL_GPIO_Init+0xfa>
 8002928:	4a96      	ldr	r2, [pc, #600]	; (8002b84 <HAL_GPIO_Init+0x2a4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d86f      	bhi.n	8002a0e <HAL_GPIO_Init+0x12e>
 800292e:	4a96      	ldr	r2, [pc, #600]	; (8002b88 <HAL_GPIO_Init+0x2a8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d052      	beq.n	80029da <HAL_GPIO_Init+0xfa>
 8002934:	4a94      	ldr	r2, [pc, #592]	; (8002b88 <HAL_GPIO_Init+0x2a8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d869      	bhi.n	8002a0e <HAL_GPIO_Init+0x12e>
 800293a:	4a94      	ldr	r2, [pc, #592]	; (8002b8c <HAL_GPIO_Init+0x2ac>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d04c      	beq.n	80029da <HAL_GPIO_Init+0xfa>
 8002940:	4a92      	ldr	r2, [pc, #584]	; (8002b8c <HAL_GPIO_Init+0x2ac>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d863      	bhi.n	8002a0e <HAL_GPIO_Init+0x12e>
 8002946:	4a92      	ldr	r2, [pc, #584]	; (8002b90 <HAL_GPIO_Init+0x2b0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d046      	beq.n	80029da <HAL_GPIO_Init+0xfa>
 800294c:	4a90      	ldr	r2, [pc, #576]	; (8002b90 <HAL_GPIO_Init+0x2b0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d85d      	bhi.n	8002a0e <HAL_GPIO_Init+0x12e>
 8002952:	2b12      	cmp	r3, #18
 8002954:	d82a      	bhi.n	80029ac <HAL_GPIO_Init+0xcc>
 8002956:	2b12      	cmp	r3, #18
 8002958:	d859      	bhi.n	8002a0e <HAL_GPIO_Init+0x12e>
 800295a:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <HAL_GPIO_Init+0x80>)
 800295c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002960:	080029db 	.word	0x080029db
 8002964:	080029b5 	.word	0x080029b5
 8002968:	080029c7 	.word	0x080029c7
 800296c:	08002a09 	.word	0x08002a09
 8002970:	08002a0f 	.word	0x08002a0f
 8002974:	08002a0f 	.word	0x08002a0f
 8002978:	08002a0f 	.word	0x08002a0f
 800297c:	08002a0f 	.word	0x08002a0f
 8002980:	08002a0f 	.word	0x08002a0f
 8002984:	08002a0f 	.word	0x08002a0f
 8002988:	08002a0f 	.word	0x08002a0f
 800298c:	08002a0f 	.word	0x08002a0f
 8002990:	08002a0f 	.word	0x08002a0f
 8002994:	08002a0f 	.word	0x08002a0f
 8002998:	08002a0f 	.word	0x08002a0f
 800299c:	08002a0f 	.word	0x08002a0f
 80029a0:	08002a0f 	.word	0x08002a0f
 80029a4:	080029bd 	.word	0x080029bd
 80029a8:	080029d1 	.word	0x080029d1
 80029ac:	4a79      	ldr	r2, [pc, #484]	; (8002b94 <HAL_GPIO_Init+0x2b4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d013      	beq.n	80029da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029b2:	e02c      	b.n	8002a0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	623b      	str	r3, [r7, #32]
          break;
 80029ba:	e029      	b.n	8002a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	3304      	adds	r3, #4
 80029c2:	623b      	str	r3, [r7, #32]
          break;
 80029c4:	e024      	b.n	8002a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	3308      	adds	r3, #8
 80029cc:	623b      	str	r3, [r7, #32]
          break;
 80029ce:	e01f      	b.n	8002a10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	330c      	adds	r3, #12
 80029d6:	623b      	str	r3, [r7, #32]
          break;
 80029d8:	e01a      	b.n	8002a10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029e2:	2304      	movs	r3, #4
 80029e4:	623b      	str	r3, [r7, #32]
          break;
 80029e6:	e013      	b.n	8002a10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f0:	2308      	movs	r3, #8
 80029f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	611a      	str	r2, [r3, #16]
          break;
 80029fa:	e009      	b.n	8002a10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029fc:	2308      	movs	r3, #8
 80029fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	615a      	str	r2, [r3, #20]
          break;
 8002a06:	e003      	b.n	8002a10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
          break;
 8002a0c:	e000      	b.n	8002a10 <HAL_GPIO_Init+0x130>
          break;
 8002a0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2bff      	cmp	r3, #255	; 0xff
 8002a14:	d801      	bhi.n	8002a1a <HAL_GPIO_Init+0x13a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	e001      	b.n	8002a1e <HAL_GPIO_Init+0x13e>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2bff      	cmp	r3, #255	; 0xff
 8002a24:	d802      	bhi.n	8002a2c <HAL_GPIO_Init+0x14c>
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	e002      	b.n	8002a32 <HAL_GPIO_Init+0x152>
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	3b08      	subs	r3, #8
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	210f      	movs	r1, #15
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	401a      	ands	r2, r3
 8002a44:	6a39      	ldr	r1, [r7, #32]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80b1 	beq.w	8002bc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a60:	4b4d      	ldr	r3, [pc, #308]	; (8002b98 <HAL_GPIO_Init+0x2b8>)
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	4a4c      	ldr	r2, [pc, #304]	; (8002b98 <HAL_GPIO_Init+0x2b8>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6193      	str	r3, [r2, #24]
 8002a6c:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_GPIO_Init+0x2b8>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_GPIO_Init+0x2bc>)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	089b      	lsrs	r3, r3, #2
 8002a7e:	3302      	adds	r3, #2
 8002a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	220f      	movs	r2, #15
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a40      	ldr	r2, [pc, #256]	; (8002ba0 <HAL_GPIO_Init+0x2c0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_GPIO_Init+0x1ec>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3f      	ldr	r2, [pc, #252]	; (8002ba4 <HAL_GPIO_Init+0x2c4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_GPIO_Init+0x1e8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3e      	ldr	r2, [pc, #248]	; (8002ba8 <HAL_GPIO_Init+0x2c8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d007      	beq.n	8002ac4 <HAL_GPIO_Init+0x1e4>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3d      	ldr	r2, [pc, #244]	; (8002bac <HAL_GPIO_Init+0x2cc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_GPIO_Init+0x1e0>
 8002abc:	2303      	movs	r3, #3
 8002abe:	e006      	b.n	8002ace <HAL_GPIO_Init+0x1ee>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	e004      	b.n	8002ace <HAL_GPIO_Init+0x1ee>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e002      	b.n	8002ace <HAL_GPIO_Init+0x1ee>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_GPIO_Init+0x1ee>
 8002acc:	2300      	movs	r3, #0
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	f002 0203 	and.w	r2, r2, #3
 8002ad4:	0092      	lsls	r2, r2, #2
 8002ad6:	4093      	lsls	r3, r2
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ade:	492f      	ldr	r1, [pc, #188]	; (8002b9c <HAL_GPIO_Init+0x2bc>)
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d006      	beq.n	8002b06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002af8:	4b2d      	ldr	r3, [pc, #180]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	492c      	ldr	r1, [pc, #176]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
 8002b04:	e006      	b.n	8002b14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b06:	4b2a      	ldr	r3, [pc, #168]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	4928      	ldr	r1, [pc, #160]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b20:	4b23      	ldr	r3, [pc, #140]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4922      	ldr	r1, [pc, #136]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b2e:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	491e      	ldr	r1, [pc, #120]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	4918      	ldr	r1, [pc, #96]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	608b      	str	r3, [r1, #8]
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b56:	4b16      	ldr	r3, [pc, #88]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	4914      	ldr	r1, [pc, #80]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d021      	beq.n	8002bb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	490e      	ldr	r1, [pc, #56]	; (8002bb0 <HAL_GPIO_Init+0x2d0>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60cb      	str	r3, [r1, #12]
 8002b7c:	e021      	b.n	8002bc2 <HAL_GPIO_Init+0x2e2>
 8002b7e:	bf00      	nop
 8002b80:	10320000 	.word	0x10320000
 8002b84:	10310000 	.word	0x10310000
 8002b88:	10220000 	.word	0x10220000
 8002b8c:	10210000 	.word	0x10210000
 8002b90:	10120000 	.word	0x10120000
 8002b94:	10110000 	.word	0x10110000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40010800 	.word	0x40010800
 8002ba4:	40010c00 	.word	0x40010c00
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_GPIO_Init+0x304>)
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	4909      	ldr	r1, [pc, #36]	; (8002be4 <HAL_GPIO_Init+0x304>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f47f ae8e 	bne.w	80028f4 <HAL_GPIO_Init+0x14>
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	372c      	adds	r7, #44	; 0x2c
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr
 8002be4:	40010400 	.word	0x40010400

08002be8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	887b      	ldrh	r3, [r7, #2]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
 8002c04:	e001      	b.n	8002c0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	460b      	mov	r3, r1
 8002c20:	807b      	strh	r3, [r7, #2]
 8002c22:	4613      	mov	r3, r2
 8002c24:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c26:	787b      	ldrb	r3, [r7, #1]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2c:	887a      	ldrh	r2, [r7, #2]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c32:	e003      	b.n	8002c3c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c34:	887b      	ldrh	r3, [r7, #2]
 8002c36:	041a      	lsls	r2, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	611a      	str	r2, [r3, #16]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e272      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8087 	beq.w	8002d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c68:	4b92      	ldr	r3, [pc, #584]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b04      	cmp	r3, #4
 8002c72:	d00c      	beq.n	8002c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c74:	4b8f      	ldr	r3, [pc, #572]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d112      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5e>
 8002c80:	4b8c      	ldr	r3, [pc, #560]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8e:	4b89      	ldr	r3, [pc, #548]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d06c      	beq.n	8002d74 <HAL_RCC_OscConfig+0x12c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d168      	bne.n	8002d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e24c      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x76>
 8002cb0:	4b80      	ldr	r3, [pc, #512]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a7f      	ldr	r2, [pc, #508]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	6013      	str	r3, [r2, #0]
 8002cbc:	e02e      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x98>
 8002cc6:	4b7b      	ldr	r3, [pc, #492]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a7a      	ldr	r2, [pc, #488]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e01d      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce8:	d10c      	bne.n	8002d04 <HAL_RCC_OscConfig+0xbc>
 8002cea:	4b72      	ldr	r3, [pc, #456]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a71      	ldr	r2, [pc, #452]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf4:	6013      	str	r3, [r2, #0]
 8002cf6:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a6e      	ldr	r2, [pc, #440]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	e00b      	b.n	8002d1c <HAL_RCC_OscConfig+0xd4>
 8002d04:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a6a      	ldr	r2, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	4b68      	ldr	r3, [pc, #416]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a67      	ldr	r2, [pc, #412]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d013      	beq.n	8002d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7ff fcc4 	bl	80026b0 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7ff fcc0 	bl	80026b0 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e200      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3e:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0xe4>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7ff fcb0 	bl	80026b0 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7ff fcac 	bl	80026b0 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	; 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e1ec      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d66:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f0      	bne.n	8002d54 <HAL_RCC_OscConfig+0x10c>
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d063      	beq.n	8002e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d82:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 030c 	and.w	r3, r3, #12
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00b      	beq.n	8002da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d11c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x18c>
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d116      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_RCC_OscConfig+0x176>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1c0      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	4939      	ldr	r1, [pc, #228]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e03a      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d020      	beq.n	8002e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_RCC_OscConfig+0x270>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de2:	f7ff fc65 	bl	80026b0 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dea:	f7ff fc61 	bl	80026b0 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e1a1      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfc:	4b2d      	ldr	r3, [pc, #180]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e08:	4b2a      	ldr	r3, [pc, #168]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	4927      	ldr	r1, [pc, #156]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
 8002e1c:	e015      	b.n	8002e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x270>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff fc44 	bl	80026b0 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2c:	f7ff fc40 	bl	80026b0 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e180      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d03a      	beq.n	8002ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d019      	beq.n	8002e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7ff fc24 	bl	80026b0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e6c:	f7ff fc20 	bl	80026b0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e160      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7e:	4b0d      	ldr	r3, [pc, #52]	; (8002eb4 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f000 faa6 	bl	80033dc <RCC_Delay>
 8002e90:	e01c      	b.n	8002ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e92:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <HAL_RCC_OscConfig+0x274>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e98:	f7ff fc0a 	bl	80026b0 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e9e:	e00f      	b.n	8002ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea0:	f7ff fc06 	bl	80026b0 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d908      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e146      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	42420000 	.word	0x42420000
 8002ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec0:	4b92      	ldr	r3, [pc, #584]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e9      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a6 	beq.w	8003026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ede:	4b8b      	ldr	r3, [pc, #556]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eea:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4a87      	ldr	r2, [pc, #540]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	61d3      	str	r3, [r2, #28]
 8002ef6:	4b85      	ldr	r3, [pc, #532]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f02:	2301      	movs	r3, #1
 8002f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f06:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d118      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f12:	4b7f      	ldr	r3, [pc, #508]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a7e      	ldr	r2, [pc, #504]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f1e:	f7ff fbc7 	bl	80026b0 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f26:	f7ff fbc3 	bl	80026b0 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e103      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f38:	4b75      	ldr	r3, [pc, #468]	; (8003110 <HAL_RCC_OscConfig+0x4c8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d106      	bne.n	8002f5a <HAL_RCC_OscConfig+0x312>
 8002f4c:	4b6f      	ldr	r3, [pc, #444]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	4a6e      	ldr	r2, [pc, #440]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	6213      	str	r3, [r2, #32]
 8002f58:	e02d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x334>
 8002f62:	4b6a      	ldr	r3, [pc, #424]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4a69      	ldr	r2, [pc, #420]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	f023 0301 	bic.w	r3, r3, #1
 8002f6c:	6213      	str	r3, [r2, #32]
 8002f6e:	4b67      	ldr	r3, [pc, #412]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a66      	ldr	r2, [pc, #408]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f74:	f023 0304 	bic.w	r3, r3, #4
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	e01c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCC_OscConfig+0x356>
 8002f84:	4b61      	ldr	r3, [pc, #388]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a60      	ldr	r2, [pc, #384]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	f043 0304 	orr.w	r3, r3, #4
 8002f8e:	6213      	str	r3, [r2, #32]
 8002f90:	4b5e      	ldr	r3, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a5d      	ldr	r2, [pc, #372]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	f043 0301 	orr.w	r3, r3, #1
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	e00b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x36e>
 8002f9e:	4b5b      	ldr	r3, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	4a5a      	ldr	r2, [pc, #360]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6213      	str	r3, [r2, #32]
 8002faa:	4b58      	ldr	r3, [pc, #352]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d015      	beq.n	8002fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbe:	f7ff fb77 	bl	80026b0 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc4:	e00a      	b.n	8002fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7ff fb73 	bl	80026b0 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e0b1      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fdc:	4b4b      	ldr	r3, [pc, #300]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ee      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x37e>
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fea:	f7ff fb61 	bl	80026b0 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff0:	e00a      	b.n	8003008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7ff fb5d 	bl	80026b0 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e09b      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b3c      	ldr	r3, [pc, #240]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800301c:	69db      	ldr	r3, [r3, #28]
 800301e:	4a3b      	ldr	r2, [pc, #236]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8087 	beq.w	800313e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b08      	cmp	r3, #8
 800303a:	d061      	beq.n	8003100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d146      	bne.n	80030d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003044:	4b33      	ldr	r3, [pc, #204]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7ff fb31 	bl	80026b0 <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7ff fb2d 	bl	80026b0 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e06d      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003064:	4b29      	ldr	r3, [pc, #164]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1f0      	bne.n	8003052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003078:	d108      	bne.n	800308c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800307a:	4b24      	ldr	r3, [pc, #144]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4921      	ldr	r1, [pc, #132]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800308c:	4b1f      	ldr	r3, [pc, #124]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a19      	ldr	r1, [r3, #32]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	430b      	orrs	r3, r1
 800309e:	491b      	ldr	r1, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7ff fb01 	bl	80026b0 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b2:	f7ff fafd 	bl	80026b0 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e03d      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x46a>
 80030d0:	e035      	b.n	800313e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_OscConfig+0x4cc>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7ff faea 	bl	80026b0 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e0:	f7ff fae6 	bl	80026b0 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e026      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x498>
 80030fe:	e01e      	b.n	800313e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e019      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
 800310c:	40021000 	.word	0x40021000
 8003110:	40007000 	.word	0x40007000
 8003114:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x500>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	429a      	cmp	r2, r3
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0d0      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b6a      	ldr	r3, [pc, #424]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d910      	bls.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b67      	ldr	r3, [pc, #412]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 0207 	bic.w	r2, r3, #7
 8003176:	4965      	ldr	r1, [pc, #404]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b63      	ldr	r3, [pc, #396]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d001      	beq.n	8003190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0b8      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d020      	beq.n	80031de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a8:	4b59      	ldr	r3, [pc, #356]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	4a58      	ldr	r2, [pc, #352]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	4a52      	ldr	r2, [pc, #328]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031cc:	4b50      	ldr	r3, [pc, #320]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	494d      	ldr	r1, [pc, #308]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d040      	beq.n	800326c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d107      	bne.n	8003202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d115      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e07f      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e073      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e06b      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322a:	4b39      	ldr	r3, [pc, #228]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f023 0203 	bic.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4936      	ldr	r1, [pc, #216]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7ff fa38 	bl	80026b0 <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	e00a      	b.n	800325a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003244:	f7ff fa34 	bl	80026b0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e053      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f003 020c 	and.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	429a      	cmp	r2, r3
 800326a:	d1eb      	bne.n	8003244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800326c:	4b27      	ldr	r3, [pc, #156]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d210      	bcs.n	800329c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f023 0207 	bic.w	r2, r3, #7
 8003282:	4922      	ldr	r1, [pc, #136]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	4313      	orrs	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e032      	b.n	8003302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d008      	beq.n	80032ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4916      	ldr	r1, [pc, #88]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d009      	beq.n	80032da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032c6:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	490e      	ldr	r1, [pc, #56]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032da:	f000 f821 	bl	8003320 <HAL_RCC_GetSysClockFreq>
 80032de:	4602      	mov	r2, r0
 80032e0:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	091b      	lsrs	r3, r3, #4
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	490a      	ldr	r1, [pc, #40]	; (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	5ccb      	ldrb	r3, [r1, r3]
 80032ee:	fa22 f303 	lsr.w	r3, r2, r3
 80032f2:	4a09      	ldr	r2, [pc, #36]	; (8003318 <HAL_RCC_ClockConfig+0x1cc>)
 80032f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_ClockConfig+0x1d0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff f996 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40022000 	.word	0x40022000
 8003310:	40021000 	.word	0x40021000
 8003314:	08004c4c 	.word	0x08004c4c
 8003318:	20000008 	.word	0x20000008
 800331c:	2000000c 	.word	0x2000000c

08003320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003320:	b490      	push	{r4, r7}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <HAL_RCC_GetSysClockFreq+0xac>)
 8003328:	1d3c      	adds	r4, r7, #4
 800332a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800332c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003330:	f240 2301 	movw	r3, #513	; 0x201
 8003334:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	2300      	movs	r3, #0
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800334a:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 030c 	and.w	r3, r3, #12
 8003356:	2b04      	cmp	r3, #4
 8003358:	d002      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x40>
 800335a:	2b08      	cmp	r3, #8
 800335c:	d003      	beq.n	8003366 <HAL_RCC_GetSysClockFreq+0x46>
 800335e:	e02b      	b.n	80033b8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003362:	623b      	str	r3, [r7, #32]
      break;
 8003364:	e02b      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	0c9b      	lsrs	r3, r3, #18
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3328      	adds	r3, #40	; 0x28
 8003370:	443b      	add	r3, r7
 8003372:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003376:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d012      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003382:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	0c5b      	lsrs	r3, r3, #17
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	3328      	adds	r3, #40	; 0x28
 800338e:	443b      	add	r3, r7
 8003390:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003394:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4a0e      	ldr	r2, [pc, #56]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800339a:	fb03 f202 	mul.w	r2, r3, r2
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	e004      	b.n	80033b2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	623b      	str	r3, [r7, #32]
      break;
 80033b6:	e002      	b.n	80033be <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ba:	623b      	str	r3, [r7, #32]
      break;
 80033bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033be:	6a3b      	ldr	r3, [r7, #32]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3728      	adds	r7, #40	; 0x28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bc90      	pop	{r4, r7}
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	080043e8 	.word	0x080043e8
 80033d0:	40021000 	.word	0x40021000
 80033d4:	007a1200 	.word	0x007a1200
 80033d8:	003d0900 	.word	0x003d0900

080033dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <RCC_Delay+0x34>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <RCC_Delay+0x38>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a5b      	lsrs	r3, r3, #9
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f8:	bf00      	nop
  }
  while (Delay --);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	60fa      	str	r2, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f9      	bne.n	80033f8 <RCC_Delay+0x1c>
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	20000008 	.word	0x20000008
 8003414:	10624dd3 	.word	0x10624dd3

08003418 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e076      	b.n	8003518 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2b00      	cmp	r3, #0
 8003430:	d108      	bne.n	8003444 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800343a:	d009      	beq.n	8003450 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	61da      	str	r2, [r3, #28]
 8003442:	e005      	b.n	8003450 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe ffd0 	bl	8002410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003486:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	ea42 0103 	orr.w	r1, r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	0c1a      	lsrs	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f002 0204 	and.w	r2, r2, #4
 80034f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003506:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_SPI_Transmit+0x22>
 800353e:	2302      	movs	r3, #2
 8003540:	e126      	b.n	8003790 <HAL_SPI_Transmit+0x270>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800354a:	f7ff f8b1 	bl	80026b0 <HAL_GetTick>
 800354e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003550:	88fb      	ldrh	r3, [r7, #6]
 8003552:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	d002      	beq.n	8003566 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003560:	2302      	movs	r3, #2
 8003562:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003564:	e10b      	b.n	800377e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_SPI_Transmit+0x52>
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003576:	e102      	b.n	800377e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2203      	movs	r2, #3
 800357c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035be:	d10f      	bne.n	80035e0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d007      	beq.n	80035fe <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003606:	d14b      	bne.n	80036a0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_SPI_Transmit+0xf6>
 8003610:	8afb      	ldrh	r3, [r7, #22]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d13e      	bne.n	8003694 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	881a      	ldrh	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	1c9a      	adds	r2, r3, #2
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003630:	b29b      	uxth	r3, r3
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800363a:	e02b      	b.n	8003694 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b02      	cmp	r3, #2
 8003648:	d112      	bne.n	8003670 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	881a      	ldrh	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	1c9a      	adds	r2, r3, #2
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	86da      	strh	r2, [r3, #54]	; 0x36
 800366e:	e011      	b.n	8003694 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003670:	f7ff f81e 	bl	80026b0 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d803      	bhi.n	8003688 <HAL_SPI_Transmit+0x168>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d102      	bne.n	800368e <HAL_SPI_Transmit+0x16e>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d102      	bne.n	8003694 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003692:	e074      	b.n	800377e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1ce      	bne.n	800363c <HAL_SPI_Transmit+0x11c>
 800369e:	e04c      	b.n	800373a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_SPI_Transmit+0x18e>
 80036a8:	8afb      	ldrh	r3, [r7, #22]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d140      	bne.n	8003730 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	330c      	adds	r3, #12
 80036b8:	7812      	ldrb	r2, [r2, #0]
 80036ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80036d4:	e02c      	b.n	8003730 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d113      	bne.n	800370c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	330c      	adds	r3, #12
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003700:	b29b      	uxth	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	86da      	strh	r2, [r3, #54]	; 0x36
 800370a:	e011      	b.n	8003730 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800370c:	f7fe ffd0 	bl	80026b0 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d803      	bhi.n	8003724 <HAL_SPI_Transmit+0x204>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d102      	bne.n	800372a <HAL_SPI_Transmit+0x20a>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800372e:	e026      	b.n	800377e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1cd      	bne.n	80036d6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f8b2 	bl	80038a8 <SPI_EndRxTxTransaction>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	613b      	str	r3, [r7, #16]
 800376c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e000      	b.n	800377e <HAL_SPI_Transmit+0x25e>
  }

error:
 800377c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800378e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	603b      	str	r3, [r7, #0]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037a8:	f7fe ff82 	bl	80026b0 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037b8:	f7fe ff7a 	bl	80026b0 <HAL_GetTick>
 80037bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037be:	4b39      	ldr	r3, [pc, #228]	; (80038a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	015b      	lsls	r3, r3, #5
 80037c4:	0d1b      	lsrs	r3, r3, #20
 80037c6:	69fa      	ldr	r2, [r7, #28]
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ce:	e054      	b.n	800387a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d6:	d050      	beq.n	800387a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037d8:	f7fe ff6a 	bl	80026b0 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d902      	bls.n	80037ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d13d      	bne.n	800386a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003806:	d111      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d004      	beq.n	800381c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381a:	d107      	bne.n	800382c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003834:	d10f      	bne.n	8003856 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003854:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e017      	b.n	800389a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3b01      	subs	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	429a      	cmp	r2, r3
 8003896:	d19b      	bne.n	80037d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000008 	.word	0x20000008

080038a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2200      	movs	r2, #0
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7ff ff6a 	bl	8003798 <SPI_WaitFlagStateUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e000      	b.n	80038dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e041      	b.n	800397a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fe fdbe 	bl	800248c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f000 fa70 	bl	8003e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	d001      	beq.n	800399c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e03a      	b.n	8003a12 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a18      	ldr	r2, [pc, #96]	; (8003a1c <HAL_TIM_Base_Start_IT+0x98>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x58>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d009      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x58>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <HAL_TIM_Base_Start_IT+0x9c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x58>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <HAL_TIM_Base_Start_IT+0xa0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d111      	bne.n	8003a00 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d010      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	e007      	b.n	8003a10 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800

08003a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d122      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d11b      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0202 	mvn.w	r2, #2
 8003a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f003 0303 	and.w	r3, r3, #3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f9b1 	bl	8003dd2 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f9a4 	bl	8003dc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f9b3 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b04      	cmp	r3, #4
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0204 	mvn.w	r2, #4
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2202      	movs	r2, #2
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f987 	bl	8003dd2 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f97a 	bl	8003dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f989 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0208 	mvn.w	r2, #8
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2204      	movs	r2, #4
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f95d 	bl	8003dd2 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f950 	bl	8003dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f95f 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0310 	and.w	r3, r3, #16
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0210 	mvn.w	r2, #16
 8003b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2208      	movs	r2, #8
 8003b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	69db      	ldr	r3, [r3, #28]
 8003b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f933 	bl	8003dd2 <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f926 	bl	8003dc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f935 	bl	8003de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d10e      	bne.n	8003bac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d107      	bne.n	8003bac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0201 	mvn.w	r2, #1
 8003ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fe fbea 	bl	8002380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc4:	2b80      	cmp	r3, #128	; 0x80
 8003bc6:	d107      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa77 	bl	80040c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d10e      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b40      	cmp	r3, #64	; 0x40
 8003bf2:	d107      	bne.n	8003c04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8f9 	bl	8003df6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b20      	cmp	r3, #32
 8003c10:	d10e      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	d107      	bne.n	8003c30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0220 	mvn.w	r2, #32
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 fa42 	bl	80040b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIM_ConfigClockSource+0x18>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	e0b3      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x180>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c88:	d03e      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0xd0>
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c8e:	f200 8087 	bhi.w	8003da0 <HAL_TIM_ConfigClockSource+0x168>
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	f000 8085 	beq.w	8003da4 <HAL_TIM_ConfigClockSource+0x16c>
 8003c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9e:	d87f      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x168>
 8003ca0:	2b70      	cmp	r3, #112	; 0x70
 8003ca2:	d01a      	beq.n	8003cda <HAL_TIM_ConfigClockSource+0xa2>
 8003ca4:	2b70      	cmp	r3, #112	; 0x70
 8003ca6:	d87b      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x168>
 8003ca8:	2b60      	cmp	r3, #96	; 0x60
 8003caa:	d050      	beq.n	8003d4e <HAL_TIM_ConfigClockSource+0x116>
 8003cac:	2b60      	cmp	r3, #96	; 0x60
 8003cae:	d877      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x168>
 8003cb0:	2b50      	cmp	r3, #80	; 0x50
 8003cb2:	d03c      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0xf6>
 8003cb4:	2b50      	cmp	r3, #80	; 0x50
 8003cb6:	d873      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x168>
 8003cb8:	2b40      	cmp	r3, #64	; 0x40
 8003cba:	d058      	beq.n	8003d6e <HAL_TIM_ConfigClockSource+0x136>
 8003cbc:	2b40      	cmp	r3, #64	; 0x40
 8003cbe:	d86f      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x168>
 8003cc0:	2b30      	cmp	r3, #48	; 0x30
 8003cc2:	d064      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x156>
 8003cc4:	2b30      	cmp	r3, #48	; 0x30
 8003cc6:	d86b      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x168>
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d060      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x156>
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d867      	bhi.n	8003da0 <HAL_TIM_ConfigClockSource+0x168>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x156>
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d05a      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003cd8:	e062      	b.n	8003da0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6899      	ldr	r1, [r3, #8]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f000 f966 	bl	8003fba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
      break;
 8003d06:	e04e      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f000 f94f 	bl	8003fba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d2a:	609a      	str	r2, [r3, #8]
      break;
 8003d2c:	e03b      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	6859      	ldr	r1, [r3, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f000 f8c6 	bl	8003ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2150      	movs	r1, #80	; 0x50
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f91d 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003d4c:	e02b      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6859      	ldr	r1, [r3, #4]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f000 f8e4 	bl	8003f28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2160      	movs	r1, #96	; 0x60
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f90d 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003d6c:	e01b      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	6859      	ldr	r1, [r3, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f000 f8a6 	bl	8003ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f8fd 	bl	8003f86 <TIM_ITRx_SetConfig>
      break;
 8003d8c:	e00b      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4619      	mov	r1, r3
 8003d98:	4610      	mov	r0, r2
 8003d9a:	f000 f8f4 	bl	8003f86 <TIM_ITRx_SetConfig>
        break;
 8003d9e:	e002      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003da0:	bf00      	nop
 8003da2:	e000      	b.n	8003da6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003da4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <TIM_Base_SetConfig+0xb8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00b      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e26:	d007      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <TIM_Base_SetConfig+0xbc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <TIM_Base_SetConfig+0x30>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <TIM_Base_SetConfig+0xc0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d108      	bne.n	8003e4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <TIM_Base_SetConfig+0xb8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d00b      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e58:	d007      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <TIM_Base_SetConfig+0xbc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d003      	beq.n	8003e6a <TIM_Base_SetConfig+0x62>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <TIM_Base_SetConfig+0xc0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d108      	bne.n	8003e7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a07      	ldr	r2, [pc, #28]	; (8003ec0 <TIM_Base_SetConfig+0xb8>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d103      	bne.n	8003eb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	691a      	ldr	r2, [r3, #16]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	615a      	str	r2, [r3, #20]
}
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800

08003ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f023 0201 	bic.w	r2, r3, #1
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 030a 	bic.w	r3, r3, #10
 8003f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f023 0210 	bic.w	r2, r3, #16
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	031b      	lsls	r3, r3, #12
 8003f58:	697a      	ldr	r2, [r7, #20]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b085      	sub	sp, #20
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f043 0307 	orr.w	r3, r3, #7
 8003fa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	021a      	lsls	r2, r3, #8
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	609a      	str	r2, [r3, #8]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800400c:	2302      	movs	r3, #2
 800400e:	e046      	b.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d009      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a10      	ldr	r2, [pc, #64]	; (80040b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10c      	bne.n	800408c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	4313      	orrs	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800

080040b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bc80      	pop	{r7}
 80040d6:	4770      	bx	lr

080040d8 <__errno>:
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <__errno+0x8>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000014 	.word	0x20000014

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	2600      	movs	r6, #0
 80040e8:	4d0c      	ldr	r5, [pc, #48]	; (800411c <__libc_init_array+0x38>)
 80040ea:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ec:	1b64      	subs	r4, r4, r5
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	f000 f96c 	bl	80043d0 <_init>
 80040f8:	2600      	movs	r6, #0
 80040fa:	4d0a      	ldr	r5, [pc, #40]	; (8004124 <__libc_init_array+0x40>)
 80040fc:	4c0a      	ldr	r4, [pc, #40]	; (8004128 <__libc_init_array+0x44>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	08004c5c 	.word	0x08004c5c
 8004120:	08004c5c 	.word	0x08004c5c
 8004124:	08004c5c 	.word	0x08004c5c
 8004128:	08004c60 	.word	0x08004c60

0800412c <malloc>:
 800412c:	4b02      	ldr	r3, [pc, #8]	; (8004138 <malloc+0xc>)
 800412e:	4601      	mov	r1, r0
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	f000 b839 	b.w	80041a8 <_malloc_r>
 8004136:	bf00      	nop
 8004138:	20000014 	.word	0x20000014

0800413c <memcpy>:
 800413c:	440a      	add	r2, r1
 800413e:	4291      	cmp	r1, r2
 8004140:	f100 33ff 	add.w	r3, r0, #4294967295
 8004144:	d100      	bne.n	8004148 <memcpy+0xc>
 8004146:	4770      	bx	lr
 8004148:	b510      	push	{r4, lr}
 800414a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800414e:	4291      	cmp	r1, r2
 8004150:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004154:	d1f9      	bne.n	800414a <memcpy+0xe>
 8004156:	bd10      	pop	{r4, pc}

08004158 <memset>:
 8004158:	4603      	mov	r3, r0
 800415a:	4402      	add	r2, r0
 800415c:	4293      	cmp	r3, r2
 800415e:	d100      	bne.n	8004162 <memset+0xa>
 8004160:	4770      	bx	lr
 8004162:	f803 1b01 	strb.w	r1, [r3], #1
 8004166:	e7f9      	b.n	800415c <memset+0x4>

08004168 <sbrk_aligned>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4e0e      	ldr	r6, [pc, #56]	; (80041a4 <sbrk_aligned+0x3c>)
 800416c:	460c      	mov	r4, r1
 800416e:	6831      	ldr	r1, [r6, #0]
 8004170:	4605      	mov	r5, r0
 8004172:	b911      	cbnz	r1, 800417a <sbrk_aligned+0x12>
 8004174:	f000 f88c 	bl	8004290 <_sbrk_r>
 8004178:	6030      	str	r0, [r6, #0]
 800417a:	4621      	mov	r1, r4
 800417c:	4628      	mov	r0, r5
 800417e:	f000 f887 	bl	8004290 <_sbrk_r>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d00a      	beq.n	800419c <sbrk_aligned+0x34>
 8004186:	1cc4      	adds	r4, r0, #3
 8004188:	f024 0403 	bic.w	r4, r4, #3
 800418c:	42a0      	cmp	r0, r4
 800418e:	d007      	beq.n	80041a0 <sbrk_aligned+0x38>
 8004190:	1a21      	subs	r1, r4, r0
 8004192:	4628      	mov	r0, r5
 8004194:	f000 f87c 	bl	8004290 <_sbrk_r>
 8004198:	3001      	adds	r0, #1
 800419a:	d101      	bne.n	80041a0 <sbrk_aligned+0x38>
 800419c:	f04f 34ff 	mov.w	r4, #4294967295
 80041a0:	4620      	mov	r0, r4
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	20000178 	.word	0x20000178

080041a8 <_malloc_r>:
 80041a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ac:	1ccd      	adds	r5, r1, #3
 80041ae:	f025 0503 	bic.w	r5, r5, #3
 80041b2:	3508      	adds	r5, #8
 80041b4:	2d0c      	cmp	r5, #12
 80041b6:	bf38      	it	cc
 80041b8:	250c      	movcc	r5, #12
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	4607      	mov	r7, r0
 80041be:	db01      	blt.n	80041c4 <_malloc_r+0x1c>
 80041c0:	42a9      	cmp	r1, r5
 80041c2:	d905      	bls.n	80041d0 <_malloc_r+0x28>
 80041c4:	230c      	movs	r3, #12
 80041c6:	2600      	movs	r6, #0
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	4630      	mov	r0, r6
 80041cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d0:	4e2e      	ldr	r6, [pc, #184]	; (800428c <_malloc_r+0xe4>)
 80041d2:	f000 f86d 	bl	80042b0 <__malloc_lock>
 80041d6:	6833      	ldr	r3, [r6, #0]
 80041d8:	461c      	mov	r4, r3
 80041da:	bb34      	cbnz	r4, 800422a <_malloc_r+0x82>
 80041dc:	4629      	mov	r1, r5
 80041de:	4638      	mov	r0, r7
 80041e0:	f7ff ffc2 	bl	8004168 <sbrk_aligned>
 80041e4:	1c43      	adds	r3, r0, #1
 80041e6:	4604      	mov	r4, r0
 80041e8:	d14d      	bne.n	8004286 <_malloc_r+0xde>
 80041ea:	6834      	ldr	r4, [r6, #0]
 80041ec:	4626      	mov	r6, r4
 80041ee:	2e00      	cmp	r6, #0
 80041f0:	d140      	bne.n	8004274 <_malloc_r+0xcc>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	4631      	mov	r1, r6
 80041f6:	4638      	mov	r0, r7
 80041f8:	eb04 0803 	add.w	r8, r4, r3
 80041fc:	f000 f848 	bl	8004290 <_sbrk_r>
 8004200:	4580      	cmp	r8, r0
 8004202:	d13a      	bne.n	800427a <_malloc_r+0xd2>
 8004204:	6821      	ldr	r1, [r4, #0]
 8004206:	3503      	adds	r5, #3
 8004208:	1a6d      	subs	r5, r5, r1
 800420a:	f025 0503 	bic.w	r5, r5, #3
 800420e:	3508      	adds	r5, #8
 8004210:	2d0c      	cmp	r5, #12
 8004212:	bf38      	it	cc
 8004214:	250c      	movcc	r5, #12
 8004216:	4638      	mov	r0, r7
 8004218:	4629      	mov	r1, r5
 800421a:	f7ff ffa5 	bl	8004168 <sbrk_aligned>
 800421e:	3001      	adds	r0, #1
 8004220:	d02b      	beq.n	800427a <_malloc_r+0xd2>
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	442b      	add	r3, r5
 8004226:	6023      	str	r3, [r4, #0]
 8004228:	e00e      	b.n	8004248 <_malloc_r+0xa0>
 800422a:	6822      	ldr	r2, [r4, #0]
 800422c:	1b52      	subs	r2, r2, r5
 800422e:	d41e      	bmi.n	800426e <_malloc_r+0xc6>
 8004230:	2a0b      	cmp	r2, #11
 8004232:	d916      	bls.n	8004262 <_malloc_r+0xba>
 8004234:	1961      	adds	r1, r4, r5
 8004236:	42a3      	cmp	r3, r4
 8004238:	6025      	str	r5, [r4, #0]
 800423a:	bf18      	it	ne
 800423c:	6059      	strne	r1, [r3, #4]
 800423e:	6863      	ldr	r3, [r4, #4]
 8004240:	bf08      	it	eq
 8004242:	6031      	streq	r1, [r6, #0]
 8004244:	5162      	str	r2, [r4, r5]
 8004246:	604b      	str	r3, [r1, #4]
 8004248:	4638      	mov	r0, r7
 800424a:	f104 060b 	add.w	r6, r4, #11
 800424e:	f000 f835 	bl	80042bc <__malloc_unlock>
 8004252:	f026 0607 	bic.w	r6, r6, #7
 8004256:	1d23      	adds	r3, r4, #4
 8004258:	1af2      	subs	r2, r6, r3
 800425a:	d0b6      	beq.n	80041ca <_malloc_r+0x22>
 800425c:	1b9b      	subs	r3, r3, r6
 800425e:	50a3      	str	r3, [r4, r2]
 8004260:	e7b3      	b.n	80041ca <_malloc_r+0x22>
 8004262:	6862      	ldr	r2, [r4, #4]
 8004264:	42a3      	cmp	r3, r4
 8004266:	bf0c      	ite	eq
 8004268:	6032      	streq	r2, [r6, #0]
 800426a:	605a      	strne	r2, [r3, #4]
 800426c:	e7ec      	b.n	8004248 <_malloc_r+0xa0>
 800426e:	4623      	mov	r3, r4
 8004270:	6864      	ldr	r4, [r4, #4]
 8004272:	e7b2      	b.n	80041da <_malloc_r+0x32>
 8004274:	4634      	mov	r4, r6
 8004276:	6876      	ldr	r6, [r6, #4]
 8004278:	e7b9      	b.n	80041ee <_malloc_r+0x46>
 800427a:	230c      	movs	r3, #12
 800427c:	4638      	mov	r0, r7
 800427e:	603b      	str	r3, [r7, #0]
 8004280:	f000 f81c 	bl	80042bc <__malloc_unlock>
 8004284:	e7a1      	b.n	80041ca <_malloc_r+0x22>
 8004286:	6025      	str	r5, [r4, #0]
 8004288:	e7de      	b.n	8004248 <_malloc_r+0xa0>
 800428a:	bf00      	nop
 800428c:	20000174 	.word	0x20000174

08004290 <_sbrk_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	2300      	movs	r3, #0
 8004294:	4d05      	ldr	r5, [pc, #20]	; (80042ac <_sbrk_r+0x1c>)
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fe f94e 	bl	800253c <_sbrk>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_sbrk_r+0x1a>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_sbrk_r+0x1a>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	2000017c 	.word	0x2000017c

080042b0 <__malloc_lock>:
 80042b0:	4801      	ldr	r0, [pc, #4]	; (80042b8 <__malloc_lock+0x8>)
 80042b2:	f000 b809 	b.w	80042c8 <__retarget_lock_acquire_recursive>
 80042b6:	bf00      	nop
 80042b8:	20000180 	.word	0x20000180

080042bc <__malloc_unlock>:
 80042bc:	4801      	ldr	r0, [pc, #4]	; (80042c4 <__malloc_unlock+0x8>)
 80042be:	f000 b804 	b.w	80042ca <__retarget_lock_release_recursive>
 80042c2:	bf00      	nop
 80042c4:	20000180 	.word	0x20000180

080042c8 <__retarget_lock_acquire_recursive>:
 80042c8:	4770      	bx	lr

080042ca <__retarget_lock_release_recursive>:
 80042ca:	4770      	bx	lr
 80042cc:	0000      	movs	r0, r0
	...

080042d0 <floor>:
 80042d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 80042d8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 80042dc:	2e13      	cmp	r6, #19
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4607      	mov	r7, r0
 80042e4:	460c      	mov	r4, r1
 80042e6:	4605      	mov	r5, r0
 80042e8:	dc33      	bgt.n	8004352 <floor+0x82>
 80042ea:	2e00      	cmp	r6, #0
 80042ec:	da14      	bge.n	8004318 <floor+0x48>
 80042ee:	a334      	add	r3, pc, #208	; (adr r3, 80043c0 <floor+0xf0>)
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f7fb ff32 	bl	800015c <__adddf3>
 80042f8:	2200      	movs	r2, #0
 80042fa:	2300      	movs	r3, #0
 80042fc:	f7fc fb74 	bl	80009e8 <__aeabi_dcmpgt>
 8004300:	b138      	cbz	r0, 8004312 <floor+0x42>
 8004302:	2c00      	cmp	r4, #0
 8004304:	da58      	bge.n	80043b8 <floor+0xe8>
 8004306:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800430a:	431d      	orrs	r5, r3
 800430c:	d001      	beq.n	8004312 <floor+0x42>
 800430e:	2500      	movs	r5, #0
 8004310:	4c2d      	ldr	r4, [pc, #180]	; (80043c8 <floor+0xf8>)
 8004312:	4623      	mov	r3, r4
 8004314:	462f      	mov	r7, r5
 8004316:	e025      	b.n	8004364 <floor+0x94>
 8004318:	4a2c      	ldr	r2, [pc, #176]	; (80043cc <floor+0xfc>)
 800431a:	fa42 f806 	asr.w	r8, r2, r6
 800431e:	ea01 0208 	and.w	r2, r1, r8
 8004322:	4302      	orrs	r2, r0
 8004324:	d01e      	beq.n	8004364 <floor+0x94>
 8004326:	a326      	add	r3, pc, #152	; (adr r3, 80043c0 <floor+0xf0>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fb ff16 	bl	800015c <__adddf3>
 8004330:	2200      	movs	r2, #0
 8004332:	2300      	movs	r3, #0
 8004334:	f7fc fb58 	bl	80009e8 <__aeabi_dcmpgt>
 8004338:	2800      	cmp	r0, #0
 800433a:	d0ea      	beq.n	8004312 <floor+0x42>
 800433c:	2c00      	cmp	r4, #0
 800433e:	bfbe      	ittt	lt
 8004340:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004344:	fa43 f606 	asrlt.w	r6, r3, r6
 8004348:	19a4      	addlt	r4, r4, r6
 800434a:	2500      	movs	r5, #0
 800434c:	ea24 0408 	bic.w	r4, r4, r8
 8004350:	e7df      	b.n	8004312 <floor+0x42>
 8004352:	2e33      	cmp	r6, #51	; 0x33
 8004354:	dd0a      	ble.n	800436c <floor+0x9c>
 8004356:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800435a:	d103      	bne.n	8004364 <floor+0x94>
 800435c:	f7fb fefe 	bl	800015c <__adddf3>
 8004360:	4607      	mov	r7, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4638      	mov	r0, r7
 8004366:	4619      	mov	r1, r3
 8004368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800436c:	f04f 32ff 	mov.w	r2, #4294967295
 8004370:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8004374:	fa22 f808 	lsr.w	r8, r2, r8
 8004378:	ea18 0f00 	tst.w	r8, r0
 800437c:	d0f2      	beq.n	8004364 <floor+0x94>
 800437e:	a310      	add	r3, pc, #64	; (adr r3, 80043c0 <floor+0xf0>)
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f7fb feea 	bl	800015c <__adddf3>
 8004388:	2200      	movs	r2, #0
 800438a:	2300      	movs	r3, #0
 800438c:	f7fc fb2c 	bl	80009e8 <__aeabi_dcmpgt>
 8004390:	2800      	cmp	r0, #0
 8004392:	d0be      	beq.n	8004312 <floor+0x42>
 8004394:	2c00      	cmp	r4, #0
 8004396:	da02      	bge.n	800439e <floor+0xce>
 8004398:	2e14      	cmp	r6, #20
 800439a:	d103      	bne.n	80043a4 <floor+0xd4>
 800439c:	3401      	adds	r4, #1
 800439e:	ea25 0508 	bic.w	r5, r5, r8
 80043a2:	e7b6      	b.n	8004312 <floor+0x42>
 80043a4:	2301      	movs	r3, #1
 80043a6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80043aa:	fa03 f606 	lsl.w	r6, r3, r6
 80043ae:	4435      	add	r5, r6
 80043b0:	42bd      	cmp	r5, r7
 80043b2:	bf38      	it	cc
 80043b4:	18e4      	addcc	r4, r4, r3
 80043b6:	e7f2      	b.n	800439e <floor+0xce>
 80043b8:	2500      	movs	r5, #0
 80043ba:	462c      	mov	r4, r5
 80043bc:	e7a9      	b.n	8004312 <floor+0x42>
 80043be:	bf00      	nop
 80043c0:	8800759c 	.word	0x8800759c
 80043c4:	7e37e43c 	.word	0x7e37e43c
 80043c8:	bff00000 	.word	0xbff00000
 80043cc:	000fffff 	.word	0x000fffff

080043d0 <_init>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr

080043dc <_fini>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	bf00      	nop
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr
