
ScreenTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d90  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  08005ea0  08005ea0  00015ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd8  08006bd8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08006bd8  08006bd8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bd8  08006bd8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000078  08006c58  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08006c58  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c292  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214c  00000000  00000000  0002c333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0002e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  0002f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e34  00000000  00000000  0002fdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e24e  00000000  00000000  00048bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf7f  00000000  00000000  00056e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2dc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004430  00000000  00000000  000e2e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e88 	.word	0x08005e88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005e88 	.word	0x08005e88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	; 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000daa:	2afd      	cmp	r2, #253	; 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	; 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	; 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	; 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <__gesf2>:
 8000ff8:	f04f 3cff 	mov.w	ip, #4294967295
 8000ffc:	e006      	b.n	800100c <__cmpsf2+0x4>
 8000ffe:	bf00      	nop

08001000 <__lesf2>:
 8001000:	f04f 0c01 	mov.w	ip, #1
 8001004:	e002      	b.n	800100c <__cmpsf2+0x4>
 8001006:	bf00      	nop

08001008 <__cmpsf2>:
 8001008:	f04f 0c01 	mov.w	ip, #1
 800100c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001010:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001014:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001018:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800101c:	bf18      	it	ne
 800101e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001022:	d011      	beq.n	8001048 <__cmpsf2+0x40>
 8001024:	b001      	add	sp, #4
 8001026:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102a:	bf18      	it	ne
 800102c:	ea90 0f01 	teqne	r0, r1
 8001030:	bf58      	it	pl
 8001032:	ebb2 0003 	subspl.w	r0, r2, r3
 8001036:	bf88      	it	hi
 8001038:	17c8      	asrhi	r0, r1, #31
 800103a:	bf38      	it	cc
 800103c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001040:	bf18      	it	ne
 8001042:	f040 0001 	orrne.w	r0, r0, #1
 8001046:	4770      	bx	lr
 8001048:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800104c:	d102      	bne.n	8001054 <__cmpsf2+0x4c>
 800104e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001052:	d105      	bne.n	8001060 <__cmpsf2+0x58>
 8001054:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001058:	d1e4      	bne.n	8001024 <__cmpsf2+0x1c>
 800105a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800105e:	d0e1      	beq.n	8001024 <__cmpsf2+0x1c>
 8001060:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <__aeabi_cfrcmple>:
 8001068:	4684      	mov	ip, r0
 800106a:	4608      	mov	r0, r1
 800106c:	4661      	mov	r1, ip
 800106e:	e7ff      	b.n	8001070 <__aeabi_cfcmpeq>

08001070 <__aeabi_cfcmpeq>:
 8001070:	b50f      	push	{r0, r1, r2, r3, lr}
 8001072:	f7ff ffc9 	bl	8001008 <__cmpsf2>
 8001076:	2800      	cmp	r0, #0
 8001078:	bf48      	it	mi
 800107a:	f110 0f00 	cmnmi.w	r0, #0
 800107e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001080 <__aeabi_fcmpeq>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff fff4 	bl	8001070 <__aeabi_cfcmpeq>
 8001088:	bf0c      	ite	eq
 800108a:	2001      	moveq	r0, #1
 800108c:	2000      	movne	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmplt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffea 	bl	8001070 <__aeabi_cfcmpeq>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmple>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffe0 	bl	8001070 <__aeabi_cfcmpeq>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpge>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffd2 	bl	8001068 <__aeabi_cfrcmple>
 80010c4:	bf94      	ite	ls
 80010c6:	2001      	movls	r0, #1
 80010c8:	2000      	movhi	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpgt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffc8 	bl	8001068 <__aeabi_cfrcmple>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_f2iz>:
 80010e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010ec:	d30f      	bcc.n	800110e <__aeabi_f2iz+0x2a>
 80010ee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f6:	d90d      	bls.n	8001114 <__aeabi_f2iz+0x30>
 80010f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001100:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001104:	fa23 f002 	lsr.w	r0, r3, r2
 8001108:	bf18      	it	ne
 800110a:	4240      	negne	r0, r0
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr
 8001114:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001118:	d101      	bne.n	800111e <__aeabi_f2iz+0x3a>
 800111a:	0242      	lsls	r2, r0, #9
 800111c:	d105      	bne.n	800112a <__aeabi_f2iz+0x46>
 800111e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001122:	bf08      	it	eq
 8001124:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr

08001130 <__aeabi_f2uiz>:
 8001130:	0042      	lsls	r2, r0, #1
 8001132:	d20e      	bcs.n	8001152 <__aeabi_f2uiz+0x22>
 8001134:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001138:	d30b      	bcc.n	8001152 <__aeabi_f2uiz+0x22>
 800113a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800113e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001142:	d409      	bmi.n	8001158 <__aeabi_f2uiz+0x28>
 8001144:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800114c:	fa23 f002 	lsr.w	r0, r3, r2
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr
 8001158:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800115c:	d101      	bne.n	8001162 <__aeabi_f2uiz+0x32>
 800115e:	0242      	lsls	r2, r0, #9
 8001160:	d102      	bne.n	8001168 <__aeabi_f2uiz+0x38>
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	4770      	bx	lr
 8001168:	f04f 0000 	mov.w	r0, #0
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop

08001170 <smallRbit>:
static uint8_t SendBuf[2];

//This buffer holds 1 Character bitmap image (8x8)
//static uint8_t chBuf[8];

uint8_t smallRbit(uint8_t re) {
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	return (uint8_t) (__RBIT(re) >> 24);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	fa93 f3a3 	rbit	r3, r3
 8001184:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	0e1b      	lsrs	r3, r3, #24
 800118a:	b2db      	uxtb	r3, r3
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <modulo>:

int modulo(int x, int N) {
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
	return (x % N + N) % N;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	fb01 f202 	mul.w	r2, r1, r2
 80011ae:	1a9a      	subs	r2, r3, r2
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	4413      	add	r3, r2
 80011b4:	683a      	ldr	r2, [r7, #0]
 80011b6:	fb93 f2f2 	sdiv	r2, r3, r2
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	fb01 f202 	mul.w	r2, r1, r2
 80011c0:	1a9b      	subs	r3, r3, r2
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <LCD_Init>:

// Display Initialization
void LCD_Init(LS013B4DN04 *MemDisp, SPI_HandleTypeDef *Bus,
		GPIO_TypeDef *dispGPIO, uint16_t LCDcs) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	807b      	strh	r3, [r7, #2]

	//Store params into our struct
	MemDisp->Bus = Bus;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	601a      	str	r2, [r3, #0]
	MemDisp->dispGPIO = dispGPIO;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	605a      	str	r2, [r3, #4]
	MemDisp->LCDcs = LCDcs;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	887a      	ldrh	r2, [r7, #2]
 80011ea:	811a      	strh	r2, [r3, #8]

	DispBuf = malloc(1152);
 80011ec:	f44f 6090 	mov.w	r0, #1152	; 0x480
 80011f0:	f003 fcc8 	bl	8004b84 <malloc>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <LCD_Init+0xb4>)
 80011fa:	601a      	str	r2, [r3, #0]
	DispBuf2 = malloc(1152);
 80011fc:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8001200:	f003 fcc0 	bl	8004b84 <malloc>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <LCD_Init+0xb8>)
 800120a:	601a      	str	r2, [r3, #0]
	TextBuf = malloc(8);
 800120c:	2008      	movs	r0, #8
 800120e:	f003 fcb9 	bl	8004b84 <malloc>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <LCD_Init+0xbc>)
 8001218:	601a      	str	r2, [r3, #0]

	memset(DispBuf, 0x00, 1152);
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <LCD_Init+0xb4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fcc3 	bl	8004bb0 <memset>
	memset(DispBuf2, 0x00, 1152);
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <LCD_Init+0xb8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f003 fcbb 	bl	8004bb0 <memset>
	memset(TextBuf, 0x00, 1152);
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <LCD_Init+0xbc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f003 fcb3 	bl	8004bb0 <memset>

	//At lease 3 + 13 clock is needed for Display clear (16 Clock = 8x2 bit = 2 byte)
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6858      	ldr	r0, [r3, #4]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	891b      	ldrh	r3, [r3, #8]
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	f002 fa0a 	bl	800366e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to data sheet
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	2396      	movs	r3, #150	; 0x96
 8001260:	2202      	movs	r2, #2
 8001262:	490a      	ldr	r1, [pc, #40]	; (800128c <LCD_Init+0xc0>)
 8001264:	f002 fe88 	bl	8003f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6858      	ldr	r0, [r3, #4]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	891b      	ldrh	r3, [r3, #8]
 8001270:	2200      	movs	r2, #0
 8001272:	4619      	mov	r1, r3
 8001274:	f002 f9fb 	bl	800366e <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000098 	.word	0x20000098
 8001284:	2000009c 	.word	0x2000009c
 8001288:	200000a0 	.word	0x200000a0
 800128c:	20000000 	.word	0x20000000

08001290 <LCD_UpdateFull>:

// Display update (Transmit data)
void LCD_UpdateFull(LS013B4DN04 *MemDisp) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8001298:	4b31      	ldr	r3, [pc, #196]	; (8001360 <LCD_UpdateFull+0xd0>)
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	4b31      	ldr	r3, [pc, #196]	; (8001364 <LCD_UpdateFull+0xd4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <LCD_UpdateFull+0xd0>)
 80012a6:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 80012a8:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <LCD_UpdateFull+0xd0>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4b2b      	ldr	r3, [pc, #172]	; (8001360 <LCD_UpdateFull+0xd0>)
 80012b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6858      	ldr	r0, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	891b      	ldrh	r3, [r3, #8]
 80012be:	2201      	movs	r2, #1
 80012c0:	4619      	mov	r1, r3
 80012c2:	f002 f9d4 	bl	800366e <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	2396      	movs	r3, #150	; 0x96
 80012cc:	2201      	movs	r2, #1
 80012ce:	4924      	ldr	r1, [pc, #144]	; (8001360 <LCD_UpdateFull+0xd0>)
 80012d0:	f002 fe52 	bl	8003f78 <HAL_SPI_Transmit>

	for (uint8_t row = 0; row < 96; row++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]
 80012d8:	e02b      	b.n	8001332 <LCD_UpdateFull+0xa2>
		SendBuf[1] = smallRbit(row + 1); // counting from row number 1 to row number 96
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff45 	bl	8001170 <smallRbit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <LCD_UpdateFull+0xd0>)
 80012ec:	705a      	strb	r2, [r3, #1]
		HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	491d      	ldr	r1, [pc, #116]	; (8001368 <LCD_UpdateFull+0xd8>)
 80012f4:	2396      	movs	r3, #150	; 0x96
 80012f6:	2201      	movs	r2, #1
 80012f8:	f002 fe3e 	bl	8003f78 <HAL_SPI_Transmit>

		uint16_t offset = row * 12;
 80012fc:	7bfb      	ldrb	r3, [r7, #15]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	0052      	lsls	r2, r2, #1
 8001304:	4413      	add	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	81bb      	strh	r3, [r7, #12]
		HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <LCD_UpdateFull+0xdc>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	89bb      	ldrh	r3, [r7, #12]
 8001314:	18d1      	adds	r1, r2, r3
 8001316:	2396      	movs	r3, #150	; 0x96
 8001318:	220c      	movs	r2, #12
 800131a:	f002 fe2d 	bl	8003f78 <HAL_SPI_Transmit>

		HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	2396      	movs	r3, #150	; 0x96
 8001324:	2201      	movs	r2, #1
 8001326:	4912      	ldr	r1, [pc, #72]	; (8001370 <LCD_UpdateFull+0xe0>)
 8001328:	f002 fe26 	bl	8003f78 <HAL_SPI_Transmit>
	for (uint8_t row = 0; row < 96; row++) {
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	3301      	adds	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	2b5f      	cmp	r3, #95	; 0x5f
 8001336:	d9d0      	bls.n	80012da <LCD_UpdateFull+0x4a>
	}

	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 1, 150);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	2396      	movs	r3, #150	; 0x96
 800133e:	2201      	movs	r2, #1
 8001340:	490b      	ldr	r1, [pc, #44]	; (8001370 <LCD_UpdateFull+0xe0>)
 8001342:	f002 fe19 	bl	8003f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6858      	ldr	r0, [r3, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	891b      	ldrh	r3, [r3, #8]
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	f002 f98c 	bl	800366e <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200000a4 	.word	0x200000a4
 8001364:	20000004 	.word	0x20000004
 8001368:	200000a5 	.word	0x200000a5
 800136c:	20000098 	.word	0x20000098
 8001370:	20000094 	.word	0x20000094

08001374 <LCD_UpdateLine>:

// Display update (Transmit data)
void LCD_UpdateLine(LS013B4DN04 *MemDisp, uint8_t lineNum) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	70fb      	strb	r3, [r7, #3]
	SendBuf[0] |= printCMD[0]; // M0 High, M2 Low
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <LCD_UpdateLine+0xb4>)
 8001382:	781a      	ldrb	r2, [r3, #0]
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <LCD_UpdateLine+0xb8>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4313      	orrs	r3, r2
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <LCD_UpdateLine+0xb4>)
 800138e:	701a      	strb	r2, [r3, #0]
	SendBuf[0] ^= 1 << 6;
 8001390:	4b25      	ldr	r3, [pc, #148]	; (8001428 <LCD_UpdateLine+0xb4>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8001398:	b2da      	uxtb	r2, r3
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <LCD_UpdateLine+0xb4>)
 800139c:	701a      	strb	r2, [r3, #0]
	// CS On
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_SET); // Begin
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6858      	ldr	r0, [r3, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	891b      	ldrh	r3, [r3, #8]
 80013a6:	2201      	movs	r2, #1
 80013a8:	4619      	mov	r1, r3
 80013aa:	f002 f960 	bl	800366e <HAL_GPIO_WritePin>

	// Command
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf, 1, 150);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	2396      	movs	r3, #150	; 0x96
 80013b4:	2201      	movs	r2, #1
 80013b6:	491c      	ldr	r1, [pc, #112]	; (8001428 <LCD_UpdateLine+0xb4>)
 80013b8:	f002 fdde 	bl	8003f78 <HAL_SPI_Transmit>

	// Line num
	SendBuf[1] = smallRbit(lineNum + 1); // counting from row number 1 to row number 96
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	3301      	adds	r3, #1
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fed4 	bl	8001170 <smallRbit>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <LCD_UpdateLine+0xb4>)
 80013ce:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit(MemDisp->Bus, SendBuf + 1, 1, 150);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	4916      	ldr	r1, [pc, #88]	; (8001430 <LCD_UpdateLine+0xbc>)
 80013d6:	2396      	movs	r3, #150	; 0x96
 80013d8:	2201      	movs	r2, #1
 80013da:	f002 fdcd 	bl	8003f78 <HAL_SPI_Transmit>

	uint16_t offset = lineNum * 12;
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	0052      	lsls	r2, r2, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	81fb      	strh	r3, [r7, #14]
	HAL_SPI_Transmit(MemDisp->Bus, DispBuf + offset, 12, 150);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6818      	ldr	r0, [r3, #0]
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <LCD_UpdateLine+0xc0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	18d1      	adds	r1, r2, r3
 80013f8:	2396      	movs	r3, #150	; 0x96
 80013fa:	220c      	movs	r2, #12
 80013fc:	f002 fdbc 	bl	8003f78 <HAL_SPI_Transmit>

	// Trailer
	HAL_SPI_Transmit(MemDisp->Bus, &emptyByte, 2, 150);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6818      	ldr	r0, [r3, #0]
 8001404:	2396      	movs	r3, #150	; 0x96
 8001406:	2202      	movs	r2, #2
 8001408:	490b      	ldr	r1, [pc, #44]	; (8001438 <LCD_UpdateLine+0xc4>)
 800140a:	f002 fdb5 	bl	8003f78 <HAL_SPI_Transmit>

	// Cs Off
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET); // Done
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6858      	ldr	r0, [r3, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	891b      	ldrh	r3, [r3, #8]
 8001416:	2200      	movs	r2, #0
 8001418:	4619      	mov	r1, r3
 800141a:	f002 f928 	bl	800366e <HAL_GPIO_WritePin>
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200000a4 	.word	0x200000a4
 800142c:	20000004 	.word	0x20000004
 8001430:	200000a5 	.word	0x200000a5
 8001434:	20000098 	.word	0x20000098
 8001438:	20000094 	.word	0x20000094

0800143c <LCD_LoadFull>:
	HAL_SPI_Transmit(MemDisp->Bus, (uint8_t*) clearCMD, 2, 150); //According to Datasheet
	HAL_GPIO_WritePin(MemDisp->dispGPIO, MemDisp->LCDcs, GPIO_PIN_RESET);
}

// Load full pic
void LCD_LoadFull(uint8_t *BMP) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	memcpy(DispBuf, BMP, 1152);
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <LCD_LoadFull+0x20>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fba0 	bl	8004b94 <memcpy>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000098 	.word	0x20000098

08001460 <LCD_LoadObjs>:

void LCD_LoadObjs(GameObj *header, uint8_t drawMode, uint8_t repeatMode,
bool flip) {
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af04      	add	r7, sp, #16
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	4608      	mov	r0, r1
 800146a:	4611      	mov	r1, r2
 800146c:	461a      	mov	r2, r3
 800146e:	4603      	mov	r3, r0
 8001470:	70fb      	strb	r3, [r7, #3]
 8001472:	460b      	mov	r3, r1
 8001474:	70bb      	strb	r3, [r7, #2]
 8001476:	4613      	mov	r3, r2
 8001478:	707b      	strb	r3, [r7, #1]
	GameObj *ptr = header;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	60fb      	str	r3, [r7, #12]

	if (!ptr->full)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	7b9b      	ldrb	r3, [r3, #14]
 8001482:	f083 0301 	eor.w	r3, r3, #1
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d125      	bne.n	80014d8 <LCD_LoadObjs+0x78>
		return;

	for (;;) {
		LCD_LoadObj(ptr->bmp, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	689c      	ldr	r4, [r3, #8]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	7b1d      	ldrb	r5, [r3, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	7b5b      	ldrb	r3, [r3, #13]
 80014a0:	787a      	ldrb	r2, [r7, #1]
 80014a2:	9203      	str	r2, [sp, #12]
 80014a4:	78ba      	ldrb	r2, [r7, #2]
 80014a6:	9202      	str	r2, [sp, #8]
 80014a8:	78fa      	ldrb	r2, [r7, #3]
 80014aa:	9201      	str	r2, [sp, #4]
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	462b      	mov	r3, r5
 80014b0:	4622      	mov	r2, r4
 80014b2:	f000 f817 	bl	80014e4 <LCD_LoadObj>
				repeatMode, flip);

		// If looped through all / next buffer is empty
		if (!ptr->next->full || ptr->next == header)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	7b9b      	ldrb	r3, [r3, #14]
 80014bc:	f083 0301 	eor.w	r3, r3, #1
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10a      	bne.n	80014dc <LCD_LoadObjs+0x7c>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d005      	beq.n	80014dc <LCD_LoadObjs+0x7c>
			return;
		ptr = ptr->next;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	60fb      	str	r3, [r7, #12]
		LCD_LoadObj(ptr->bmp, ptr->x, ptr->y, ptr->width, ptr->height, drawMode,
 80014d6:	e7d9      	b.n	800148c <LCD_LoadObjs+0x2c>
		return;
 80014d8:	bf00      	nop
 80014da:	e000      	b.n	80014de <LCD_LoadObjs+0x7e>
			return;
 80014dc:	bf00      	nop
	}
}
 80014de:	3710      	adds	r7, #16
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}

080014e4 <LCD_LoadObj>:

void LCD_LoadObj(uint8_t *bmp, float posX, float posY, uint8_t width,
		uint8_t height, uint8_t drawMode, uint8_t repeatMode, bool flip) {
 80014e4:	b5b0      	push	{r4, r5, r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
 80014f0:	70fb      	strb	r3, [r7, #3]
	short displayRow;
	short displayRowOffset;

	//Counting from Y origin point to bmpH using for loop
	for (uint8_t y = 0; y < height; y++) {
 80014f2:	2300      	movs	r3, #0
 80014f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014f8:	e181      	b.n	80017fe <LCD_LoadObj+0x31a>
		displayRow = modulo(floor(posY) + y, 96);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe ff94 	bl	8000428 <__aeabi_f2d>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	f004 fc3e 	bl	8005d88 <floor>
 800150c:	4604      	mov	r4, r0
 800150e:	460d      	mov	r5, r1
 8001510:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ff75 	bl	8000404 <__aeabi_i2d>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4620      	mov	r0, r4
 8001520:	4629      	mov	r1, r5
 8001522:	f7fe fe23 	bl	800016c <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fa6d 	bl	8000a0c <__aeabi_d2iz>
 8001532:	4603      	mov	r3, r0
 8001534:	2160      	movs	r1, #96	; 0x60
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fe2d 	bl	8001196 <modulo>
 800153c:	4603      	mov	r3, r0
 800153e:	847b      	strh	r3, [r7, #34]	; 0x22

		if ((repeatMode == REPEATMODE_NONE)
 8001540:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <LCD_LoadObj+0x78>
				&& (displayRow < 0 || displayRow >= 96)) {
 8001548:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800154c:	2b00      	cmp	r3, #0
 800154e:	f2c0 8150 	blt.w	80017f2 <LCD_LoadObj+0x30e>
 8001552:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001556:	2b5f      	cmp	r3, #95	; 0x5f
 8001558:	f300 814b 	bgt.w	80017f2 <LCD_LoadObj+0x30e>
			continue;
		}

		displayRowOffset = displayRow * 12;
 800155c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800155e:	461a      	mov	r2, r3
 8001560:	0052      	lsls	r2, r2, #1
 8001562:	4413      	add	r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	b29b      	uxth	r3, r3
 8001568:	843b      	strh	r3, [r7, #32]

		int firstXByte = floor(floor(posX) / 8);
 800156a:	68b8      	ldr	r0, [r7, #8]
 800156c:	f7fe ff5c 	bl	8000428 <__aeabi_f2d>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f004 fc06 	bl	8005d88 <floor>
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4ba5      	ldr	r3, [pc, #660]	; (8001818 <LCD_LoadObj+0x334>)
 8001582:	f7ff f8d3 	bl	800072c <__aeabi_ddiv>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f004 fbfb 	bl	8005d88 <floor>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	4610      	mov	r0, r2
 8001598:	4619      	mov	r1, r3
 800159a:	f7ff fa37 	bl	8000a0c <__aeabi_d2iz>
 800159e:	4603      	mov	r3, r0
 80015a0:	61fb      	str	r3, [r7, #28]
		uint8_t leftOffset = modulo(floor(posX), 8);
 80015a2:	68b8      	ldr	r0, [r7, #8]
 80015a4:	f7fe ff40 	bl	8000428 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	f004 fbea 	bl	8005d88 <floor>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fa26 	bl	8000a0c <__aeabi_d2iz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2108      	movs	r1, #8
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fde6 	bl	8001196 <modulo>
 80015ca:	4603      	mov	r3, r0
 80015cc:	76fb      	strb	r3, [r7, #27]

		uint8_t v1 = 0x00, v2 = 0x00;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80015d4:	2300      	movs	r3, #0
 80015d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t *currentEditingBuf;

		for (uint8_t j = 0; j < width + 1; j++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80015e0:	e100      	b.n	80017e4 <LCD_LoadObj+0x300>
			if (j == width)
 80015e2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d103      	bne.n	80015f4 <LCD_LoadObj+0x110>
				v2 = 0x00;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80015f2:	e00d      	b.n	8001610 <LCD_LoadObj+0x12c>
			else
				v2 = *(bmp + width * y + j);
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001604:	4413      	add	r3, r2
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

			if (repeatMode == REPEATMODE_NONE
 8001610:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	d110      	bne.n	800163a <LCD_LoadObj+0x156>
					&& (firstXByte + j < 0 || firstXByte + j > 11)) {
 8001618:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4413      	add	r3, r2
 8001620:	2b00      	cmp	r3, #0
 8001622:	db05      	blt.n	8001630 <LCD_LoadObj+0x14c>
 8001624:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	2b0b      	cmp	r3, #11
 800162e:	dd04      	ble.n	800163a <LCD_LoadObj+0x156>
				v1 = v2;
 8001630:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				continue;
 8001638:	e0cf      	b.n	80017da <LCD_LoadObj+0x2f6>
			}

			currentEditingBuf = DispBuf + displayRowOffset
					+ (firstXByte + j) % 12;
 800163a:	4b78      	ldr	r3, [pc, #480]	; (800181c <LCD_LoadObj+0x338>)
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	f9b7 4020 	ldrsh.w	r4, [r7, #32]
 8001642:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	441a      	add	r2, r3
 800164a:	4b75      	ldr	r3, [pc, #468]	; (8001820 <LCD_LoadObj+0x33c>)
 800164c:	fb83 1302 	smull	r1, r3, r3, r2
 8001650:	1059      	asrs	r1, r3, #1
 8001652:	17d3      	asrs	r3, r2, #31
 8001654:	1ac9      	subs	r1, r1, r3
 8001656:	460b      	mov	r3, r1
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	440b      	add	r3, r1
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	1ad1      	subs	r1, r2, r3
 8001660:	460b      	mov	r3, r1
 8001662:	4423      	add	r3, r4
			currentEditingBuf = DispBuf + displayRowOffset
 8001664:	4403      	add	r3, r0
 8001666:	617b      	str	r3, [r7, #20]

			if (flip) {
 8001668:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800166c:	2b00      	cmp	r3, #0
 800166e:	d058      	beq.n	8001722 <LCD_LoadObj+0x23e>
				switch (drawMode) {
 8001670:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001674:	2b02      	cmp	r3, #2
 8001676:	d03b      	beq.n	80016f0 <LCD_LoadObj+0x20c>
 8001678:	2b02      	cmp	r3, #2
 800167a:	f300 80aa 	bgt.w	80017d2 <LCD_LoadObj+0x2ee>
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <LCD_LoadObj+0x1a4>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d01b      	beq.n	80016be <LCD_LoadObj+0x1da>
 8001686:	e0a4      	b.n	80017d2 <LCD_LoadObj+0x2ee>
				case DRAWMODE_ADD:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25a      	sxtb	r2, r3
 800168e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001692:	7efb      	ldrb	r3, [r7, #27]
 8001694:	f1c3 0308 	rsb	r3, r3, #8
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 800169c:	b259      	sxtb	r1, r3
 800169e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80016a2:	7efb      	ldrb	r3, [r7, #27]
 80016a4:	fa40 f303 	asr.w	r3, r0, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	430b      	orrs	r3, r1
 80016ac:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 80016ae:	43db      	mvns	r3, r3
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	4013      	ands	r3, r2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	701a      	strb	r2, [r3, #0]
					break;
 80016bc:	e089      	b.n	80017d2 <LCD_LoadObj+0x2ee>
				case DRAWMODE_CULL:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80016c8:	7efb      	ldrb	r3, [r7, #27]
 80016ca:	f1c3 0308 	rsb	r3, r3, #8
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80016d2:	b259      	sxtb	r1, r3
 80016d4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80016d8:	7efb      	ldrb	r3, [r7, #27]
 80016da:	fa40 f303 	asr.w	r3, r0, r3
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	430b      	orrs	r3, r1
 80016e2:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	701a      	strb	r2, [r3, #0]
					break;
 80016ee:	e070      	b.n	80017d2 <LCD_LoadObj+0x2ee>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b25a      	sxtb	r2, r3
 80016f6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80016fa:	7efb      	ldrb	r3, [r7, #27]
 80016fc:	f1c3 0308 	rsb	r3, r3, #8
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 8001704:	b259      	sxtb	r1, r3
 8001706:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800170a:	7efb      	ldrb	r3, [r7, #27]
 800170c:	fa40 f303 	asr.w	r3, r0, r3
 8001710:	b25b      	sxtb	r3, r3
 8001712:	430b      	orrs	r3, r1
 8001714:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 8001716:	4053      	eors	r3, r2
 8001718:	b25b      	sxtb	r3, r3
 800171a:	b2da      	uxtb	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	701a      	strb	r2, [r3, #0]
					break;
 8001720:	e057      	b.n	80017d2 <LCD_LoadObj+0x2ee>
				}
			} else {
				switch (drawMode) {
 8001722:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001726:	2b02      	cmp	r3, #2
 8001728:	d03a      	beq.n	80017a0 <LCD_LoadObj+0x2bc>
 800172a:	2b02      	cmp	r3, #2
 800172c:	dc51      	bgt.n	80017d2 <LCD_LoadObj+0x2ee>
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <LCD_LoadObj+0x254>
 8001732:	2b01      	cmp	r3, #1
 8001734:	d019      	beq.n	800176a <LCD_LoadObj+0x286>
 8001736:	e04c      	b.n	80017d2 <LCD_LoadObj+0x2ee>
				case DRAWMODE_ADD:
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25a      	sxtb	r2, r3
 800173e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001742:	7efb      	ldrb	r3, [r7, #27]
 8001744:	f1c3 0308 	rsb	r3, r3, #8
 8001748:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 800174c:	b259      	sxtb	r1, r3
 800174e:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001752:	7efb      	ldrb	r3, [r7, #27]
 8001754:	fa40 f303 	asr.w	r3, r0, r3
 8001758:	b25b      	sxtb	r3, r3
 800175a:	430b      	orrs	r3, r1
 800175c:	b25b      	sxtb	r3, r3
					*currentEditingBuf |= ((v1 << (8 - leftOffset))
 800175e:	4313      	orrs	r3, r2
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	701a      	strb	r2, [r3, #0]
					break;
 8001768:	e033      	b.n	80017d2 <LCD_LoadObj+0x2ee>
				case DRAWMODE_CULL:
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b25a      	sxtb	r2, r3
 8001770:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001774:	7efb      	ldrb	r3, [r7, #27]
 8001776:	f1c3 0308 	rsb	r3, r3, #8
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 800177e:	b259      	sxtb	r1, r3
 8001780:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8001784:	7efb      	ldrb	r3, [r7, #27]
 8001786:	fa40 f303 	asr.w	r3, r0, r3
 800178a:	b25b      	sxtb	r3, r3
 800178c:	430b      	orrs	r3, r1
 800178e:	b25b      	sxtb	r3, r3
					*currentEditingBuf &= ~((v1 << (8 - leftOffset))
 8001790:	43db      	mvns	r3, r3
 8001792:	b25b      	sxtb	r3, r3
 8001794:	4013      	ands	r3, r2
 8001796:	b25b      	sxtb	r3, r3
 8001798:	b2da      	uxtb	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	701a      	strb	r2, [r3, #0]
					break;
 800179e:	e018      	b.n	80017d2 <LCD_LoadObj+0x2ee>
				case DRAWMODE_TOGGLE:
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b25a      	sxtb	r2, r3
 80017a6:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80017aa:	7efb      	ldrb	r3, [r7, #27]
 80017ac:	f1c3 0308 	rsb	r3, r3, #8
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
							| (v2 >> leftOffset));
 80017b4:	b259      	sxtb	r1, r3
 80017b6:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80017ba:	7efb      	ldrb	r3, [r7, #27]
 80017bc:	fa40 f303 	asr.w	r3, r0, r3
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	430b      	orrs	r3, r1
 80017c4:	b25b      	sxtb	r3, r3
					*currentEditingBuf ^= ((v1 << (8 - leftOffset))
 80017c6:	4053      	eors	r3, r2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	701a      	strb	r2, [r3, #0]
					break;
 80017d0:	bf00      	nop
				}
			}

			v1 = v2;
 80017d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80017d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for (uint8_t j = 0; j < width + 1; j++) {
 80017da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017de:	3301      	adds	r3, #1
 80017e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80017e4:	78fa      	ldrb	r2, [r7, #3]
 80017e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ea:	429a      	cmp	r2, r3
 80017ec:	f4bf aef9 	bcs.w	80015e2 <LCD_LoadObj+0xfe>
 80017f0:	e000      	b.n	80017f4 <LCD_LoadObj+0x310>
			continue;
 80017f2:	bf00      	nop
	for (uint8_t y = 0; y < height; y++) {
 80017f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017f8:	3301      	adds	r3, #1
 80017fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017fe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001802:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001806:	429a      	cmp	r2, r3
 8001808:	f4ff ae77 	bcc.w	80014fa <LCD_LoadObj+0x16>
		}
	}
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bdb0      	pop	{r4, r5, r7, pc}
 8001816:	bf00      	nop
 8001818:	40200000 	.word	0x40200000
 800181c:	20000098 	.word	0x20000098
 8001820:	2aaaaaab 	.word	0x2aaaaaab

08001824 <LCD_DrawLine>:

void LCD_DrawLine(uint8_t startingRow, int startingPoint, uint8_t length,
		uint8_t drawMode, bool flip) {
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6039      	str	r1, [r7, #0]
 800182c:	4611      	mov	r1, r2
 800182e:	461a      	mov	r2, r3
 8001830:	4603      	mov	r3, r0
 8001832:	71fb      	strb	r3, [r7, #7]
 8001834:	460b      	mov	r3, r1
 8001836:	71bb      	strb	r3, [r7, #6]
 8001838:	4613      	mov	r3, r2
 800183a:	717b      	strb	r3, [r7, #5]
	uint16_t rowOffset = (startingRow % 96) * 12;
 800183c:	79fa      	ldrb	r2, [r7, #7]
 800183e:	4b78      	ldr	r3, [pc, #480]	; (8001a20 <LCD_DrawLine+0x1fc>)
 8001840:	fba3 1302 	umull	r1, r3, r3, r2
 8001844:	0999      	lsrs	r1, r3, #6
 8001846:	460b      	mov	r3, r1
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	440b      	add	r3, r1
 800184c:	015b      	lsls	r3, r3, #5
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	b2db      	uxtb	r3, r3
 8001852:	b29b      	uxth	r3, r3
 8001854:	461a      	mov	r2, r3
 8001856:	0052      	lsls	r2, r2, #1
 8001858:	4413      	add	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	82bb      	strh	r3, [r7, #20]

	for (uint8_t j = 0; j < length; j++) {
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]
 8001862:	e0d1      	b.n	8001a08 <LCD_DrawLine+0x1e4>
		if (startingPoint + j < 0 || startingPoint + j > 95)
 8001864:	7dfa      	ldrb	r2, [r7, #23]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	4413      	add	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	f2c0 80c8 	blt.w	8001a00 <LCD_DrawLine+0x1dc>
 8001870:	7dfa      	ldrb	r2, [r7, #23]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	4413      	add	r3, r2
 8001876:	2b5f      	cmp	r3, #95	; 0x5f
 8001878:	f300 80c2 	bgt.w	8001a00 <LCD_DrawLine+0x1dc>
			continue;
		uint8_t additionalOffset = ((startingPoint + j) % 96) / 8;
 800187c:	7dfa      	ldrb	r2, [r7, #23]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	441a      	add	r2, r3
 8001882:	4b68      	ldr	r3, [pc, #416]	; (8001a24 <LCD_DrawLine+0x200>)
 8001884:	fb83 1302 	smull	r1, r3, r3, r2
 8001888:	1119      	asrs	r1, r3, #4
 800188a:	17d3      	asrs	r3, r2, #31
 800188c:	1ac9      	subs	r1, r1, r3
 800188e:	460b      	mov	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	440b      	add	r3, r1
 8001894:	015b      	lsls	r3, r3, #5
 8001896:	1ad1      	subs	r1, r2, r3
 8001898:	460b      	mov	r3, r1
 800189a:	2b00      	cmp	r3, #0
 800189c:	da00      	bge.n	80018a0 <LCD_DrawLine+0x7c>
 800189e:	3307      	adds	r3, #7
 80018a0:	10db      	asrs	r3, r3, #3
 80018a2:	74fb      	strb	r3, [r7, #19]

		uint8_t *currentEditingBuf = DispBuf + rowOffset + additionalOffset;
 80018a4:	4b60      	ldr	r3, [pc, #384]	; (8001a28 <LCD_DrawLine+0x204>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	8ab9      	ldrh	r1, [r7, #20]
 80018aa:	7cfb      	ldrb	r3, [r7, #19]
 80018ac:	440b      	add	r3, r1
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
		if (flip) {
 80018b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d051      	beq.n	800195e <LCD_DrawLine+0x13a>
			switch (drawMode) {
 80018ba:	797b      	ldrb	r3, [r7, #5]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d037      	beq.n	8001930 <LCD_DrawLine+0x10c>
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	f300 809e 	bgt.w	8001a02 <LCD_DrawLine+0x1de>
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <LCD_DrawLine+0xac>
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d019      	beq.n	8001902 <LCD_DrawLine+0xde>
 80018ce:	e098      	b.n	8001a02 <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	b25a      	sxtb	r2, r3
 80018d6:	7df9      	ldrb	r1, [r7, #23]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	440b      	add	r3, r1
 80018dc:	4259      	negs	r1, r3
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	f001 0107 	and.w	r1, r1, #7
 80018e6:	bf58      	it	pl
 80018e8:	424b      	negpl	r3, r1
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	fa41 f303 	asr.w	r3, r1, r3
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	43db      	mvns	r3, r3
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	4013      	ands	r3, r2
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	701a      	strb	r2, [r3, #0]
				break;
 8001900:	e07f      	b.n	8001a02 <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b25a      	sxtb	r2, r3
 8001908:	7df9      	ldrb	r1, [r7, #23]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	440b      	add	r3, r1
 800190e:	4259      	negs	r1, r3
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	f001 0107 	and.w	r1, r1, #7
 8001918:	bf58      	it	pl
 800191a:	424b      	negpl	r3, r1
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	fa41 f303 	asr.w	r3, r1, r3
 8001922:	b25b      	sxtb	r3, r3
 8001924:	4313      	orrs	r3, r2
 8001926:	b25b      	sxtb	r3, r3
 8001928:	b2da      	uxtb	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	701a      	strb	r2, [r3, #0]
				break;
 800192e:	e068      	b.n	8001a02 <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b25a      	sxtb	r2, r3
 8001936:	7df9      	ldrb	r1, [r7, #23]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	440b      	add	r3, r1
 800193c:	4259      	negs	r1, r3
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	f001 0107 	and.w	r1, r1, #7
 8001946:	bf58      	it	pl
 8001948:	424b      	negpl	r3, r1
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	fa41 f303 	asr.w	r3, r1, r3
 8001950:	b25b      	sxtb	r3, r3
 8001952:	4053      	eors	r3, r2
 8001954:	b25b      	sxtb	r3, r3
 8001956:	b2da      	uxtb	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	701a      	strb	r2, [r3, #0]
				break;
 800195c:	e051      	b.n	8001a02 <LCD_DrawLine+0x1de>
			}
		} else {
			switch (drawMode) {
 800195e:	797b      	ldrb	r3, [r7, #5]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d036      	beq.n	80019d2 <LCD_DrawLine+0x1ae>
 8001964:	2b02      	cmp	r3, #2
 8001966:	dc4c      	bgt.n	8001a02 <LCD_DrawLine+0x1de>
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <LCD_DrawLine+0x14e>
 800196c:	2b01      	cmp	r3, #1
 800196e:	d017      	beq.n	80019a0 <LCD_DrawLine+0x17c>
 8001970:	e047      	b.n	8001a02 <LCD_DrawLine+0x1de>
			case DRAWMODE_ADD:
				*currentEditingBuf |= (0x80 >> ((startingPoint + j) % 8));
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b25a      	sxtb	r2, r3
 8001978:	7df9      	ldrb	r1, [r7, #23]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	440b      	add	r3, r1
 800197e:	4259      	negs	r1, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f001 0107 	and.w	r1, r1, #7
 8001988:	bf58      	it	pl
 800198a:	424b      	negpl	r3, r1
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	fa41 f303 	asr.w	r3, r1, r3
 8001992:	b25b      	sxtb	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b25b      	sxtb	r3, r3
 8001998:	b2da      	uxtb	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	701a      	strb	r2, [r3, #0]
				break;
 800199e:	e030      	b.n	8001a02 <LCD_DrawLine+0x1de>
			case DRAWMODE_CULL:
				*currentEditingBuf &= ~(0x80 >> ((startingPoint + j) % 8));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b25a      	sxtb	r2, r3
 80019a6:	7df9      	ldrb	r1, [r7, #23]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	440b      	add	r3, r1
 80019ac:	4259      	negs	r1, r3
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	f001 0107 	and.w	r1, r1, #7
 80019b6:	bf58      	it	pl
 80019b8:	424b      	negpl	r3, r1
 80019ba:	2180      	movs	r1, #128	; 0x80
 80019bc:	fa41 f303 	asr.w	r3, r1, r3
 80019c0:	b25b      	sxtb	r3, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	4013      	ands	r3, r2
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	701a      	strb	r2, [r3, #0]
				break;
 80019d0:	e017      	b.n	8001a02 <LCD_DrawLine+0x1de>
			case DRAWMODE_TOGGLE:
				*currentEditingBuf ^= (0x80 >> ((startingPoint + j) % 8));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b25a      	sxtb	r2, r3
 80019d8:	7df9      	ldrb	r1, [r7, #23]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	440b      	add	r3, r1
 80019de:	4259      	negs	r1, r3
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	f001 0107 	and.w	r1, r1, #7
 80019e8:	bf58      	it	pl
 80019ea:	424b      	negpl	r3, r1
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	fa41 f303 	asr.w	r3, r1, r3
 80019f2:	b25b      	sxtb	r3, r3
 80019f4:	4053      	eors	r3, r2
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	701a      	strb	r2, [r3, #0]
				break;
 80019fe:	e000      	b.n	8001a02 <LCD_DrawLine+0x1de>
			continue;
 8001a00:	bf00      	nop
	for (uint8_t j = 0; j < length; j++) {
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	3301      	adds	r3, #1
 8001a06:	75fb      	strb	r3, [r7, #23]
 8001a08:	7dfa      	ldrb	r2, [r7, #23]
 8001a0a:	79bb      	ldrb	r3, [r7, #6]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f4ff af29 	bcc.w	8001864 <LCD_DrawLine+0x40>
			}
		}

	}
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	aaaaaaab 	.word	0xaaaaaaab
 8001a24:	2aaaaaab 	.word	0x2aaaaaab
 8001a28:	20000098 	.word	0x20000098

08001a2c <LCD_Invert>:

// Inverts color, WILL CAUSE PERFORMANCE LOSS
void LCD_Invert(void) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
	uint16_t invt = 1152;
 8001a32:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001a36:	80fb      	strh	r3, [r7, #6]
	do {
		invt--;
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	80fb      	strh	r3, [r7, #6]
		DispBuf[invt] = ~DispBuf[invt];
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <LCD_Invert+0x3c>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	4413      	add	r3, r2
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <LCD_Invert+0x3c>)
 8001a4a:	6819      	ldr	r1, [r3, #0]
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	440b      	add	r3, r1
 8001a50:	43d2      	mvns	r2, r2
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]
	} while (invt);
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1ed      	bne.n	8001a38 <LCD_Invert+0xc>
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	20000098 	.word	0x20000098

08001a6c <LCD_Fill>:

//Fill screen with either black or white color
void LCD_Fill(bool flip) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
	memset(DispBuf, (flip ? 0xFF : 0x00), 1152);
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <LCD_Fill+0x2c>)
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <LCD_Fill+0x18>
 8001a80:	23ff      	movs	r3, #255	; 0xff
 8001a82:	e000      	b.n	8001a86 <LCD_Fill+0x1a>
 8001a84:	2300      	movs	r3, #0
 8001a86:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f003 f890 	bl	8004bb0 <memset>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000098 	.word	0x20000098

08001a9c <LCD_Print>:
	}

}

void LCD_Print(char *str, short xPos, short yPos, uint8_t drawMode,
		uint8_t repeatMode, bool flip) {
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af04      	add	r7, sp, #16
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4603      	mov	r3, r0
 8001aac:	817b      	strh	r3, [r7, #10]
 8001aae:	460b      	mov	r3, r1
 8001ab0:	813b      	strh	r3, [r7, #8]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	71fb      	strb	r3, [r7, #7]
	short strLength = strlen(str);
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f7fe fb4a 	bl	8000150 <strlen>
 8001abc:	4603      	mov	r3, r0
 8001abe:	833b      	strh	r3, [r7, #24]
	short lineSpacing = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	82fb      	strh	r3, [r7, #22]
	short charSpacing = -1;
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	82bb      	strh	r3, [r7, #20]
	short spaceSpacing = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	827b      	strh	r3, [r7, #18]
	short tabSpacing = 8 + charSpacing;
 8001ace:	8abb      	ldrh	r3, [r7, #20]
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	823b      	strh	r3, [r7, #16]

	short lineOff = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	83fb      	strh	r3, [r7, #30]
	short charOff = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	83bb      	strh	r3, [r7, #28]

	for (short i = 0; i < strLength; i++) {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	837b      	strh	r3, [r7, #26]
 8001ae2:	e064      	b.n	8001bae <LCD_Print+0x112>
		if (str[i] == '\n') {
 8001ae4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b0a      	cmp	r3, #10
 8001af0:	d109      	bne.n	8001b06 <LCD_Print+0x6a>
			lineOff += (8 + lineSpacing);
 8001af2:	8afa      	ldrh	r2, [r7, #22]
 8001af4:	8bfb      	ldrh	r3, [r7, #30]
 8001af6:	4413      	add	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3308      	adds	r3, #8
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	83fb      	strh	r3, [r7, #30]
			charOff = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	83bb      	strh	r3, [r7, #28]
			continue;
 8001b04:	e04d      	b.n	8001ba2 <LCD_Print+0x106>
		}
		if (str[i] == ' ') {
 8001b06:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b0a:	68fa      	ldr	r2, [r7, #12]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b20      	cmp	r3, #32
 8001b12:	d105      	bne.n	8001b20 <LCD_Print+0x84>
			charOff += spaceSpacing;
 8001b14:	8bba      	ldrh	r2, [r7, #28]
 8001b16:	8a7b      	ldrh	r3, [r7, #18]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	83bb      	strh	r3, [r7, #28]
			continue;
 8001b1e:	e040      	b.n	8001ba2 <LCD_Print+0x106>
		}
		if (str[i] == '\t') {
 8001b20:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b09      	cmp	r3, #9
 8001b2c:	d105      	bne.n	8001b3a <LCD_Print+0x9e>
			charOff += tabSpacing;
 8001b2e:	8bba      	ldrh	r2, [r7, #28]
 8001b30:	8a3b      	ldrh	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	83bb      	strh	r3, [r7, #28]
			continue;
 8001b38:	e033      	b.n	8001ba2 <LCD_Print+0x106>
		}

		FetchText(TextBuf, str[i]);
 8001b3a:	4b22      	ldr	r3, [pc, #136]	; (8001bc4 <LCD_Print+0x128>)
 8001b3c:	6818      	ldr	r0, [r3, #0]
 8001b3e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4413      	add	r3, r2
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f001 f865 	bl	8002c18 <FetchText>
		LCD_LoadObj(TextBuf, xPos + charOff, yPos + lineOff, 1, 8, drawMode,
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <LCD_Print+0x128>)
 8001b50:	681c      	ldr	r4, [r3, #0]
 8001b52:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b56:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff f8a7 	bl	8000cb0 <__aeabi_i2f>
 8001b62:	4605      	mov	r5, r0
 8001b64:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b68:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f89e 	bl	8000cb0 <__aeabi_i2f>
 8001b74:	4602      	mov	r2, r0
 8001b76:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b7a:	9303      	str	r3, [sp, #12]
 8001b7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001b80:	9302      	str	r3, [sp, #8]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2308      	movs	r3, #8
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	4629      	mov	r1, r5
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f7ff fca8 	bl	80014e4 <LCD_LoadObj>
				repeatMode, flip);
		charOff += (8 + charSpacing);
 8001b94:	8aba      	ldrh	r2, [r7, #20]
 8001b96:	8bbb      	ldrh	r3, [r7, #28]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3308      	adds	r3, #8
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	83bb      	strh	r3, [r7, #28]
	for (short i = 0; i < strLength; i++) {
 8001ba2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	837b      	strh	r3, [r7, #26]
 8001bae:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001bb2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	db94      	blt.n	8001ae4 <LCD_Print+0x48>
	}
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc4:	200000a0 	.word	0x200000a0

08001bc8 <KeyScan>:

static uint8_t KeyBuffer[2] = { 0x00, 0x00 };
static bool ButtonDownDetectionEnable[2] = { 0, 0 };
static bool ButtonUpDetectionEnable[2] = { 0, 0 };

void KeyScan() {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
	KeyBuffer[0] = ((KeyBuffer[0] << 1) | (KEY0_STATE & 0x01));
 8001bce:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <KeyScan+0xdc>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	b25c      	sxtb	r4, r3
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <KeyScan+0xe0>)
 8001bda:	f001 fd31 	bl	8003640 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	b25b      	sxtb	r3, r3
 8001be8:	4323      	orrs	r3, r4
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <KeyScan+0xdc>)
 8001bf0:	701a      	strb	r2, [r3, #0]
	KeyBuffer[1] = ((KeyBuffer[1] << 1) | (KEY1_STATE & 0x01));
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <KeyScan+0xdc>)
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	b25c      	sxtb	r4, r3
 8001bfa:	2102      	movs	r1, #2
 8001bfc:	482a      	ldr	r0, [pc, #168]	; (8001ca8 <KeyScan+0xe0>)
 8001bfe:	f001 fd1f 	bl	8003640 <HAL_GPIO_ReadPin>
 8001c02:	4603      	mov	r3, r0
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	b25b      	sxtb	r3, r3
 8001c0c:	4323      	orrs	r3, r4
 8001c0e:	b25b      	sxtb	r3, r3
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <KeyScan+0xdc>)
 8001c14:	705a      	strb	r2, [r3, #1]

	for (uint8_t j = 0; j < 2; j++) {
 8001c16:	2300      	movs	r3, #0
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	e03a      	b.n	8001c92 <KeyScan+0xca>
		if ((KeyBuffer[j] | 0xf0) == 0xff) {
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <KeyScan+0xdc>)
 8001c20:	5cd3      	ldrb	r3, [r2, r3]
 8001c22:	f063 030f 	orn	r3, r3, #15
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2bff      	cmp	r3, #255	; 0xff
 8001c2a:	d115      	bne.n	8001c58 <KeyScan+0x90>
			if (!KeyState[j] && ButtonDownDetectionEnable[j]) {
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4a1f      	ldr	r2, [pc, #124]	; (8001cac <KeyScan+0xe4>)
 8001c30:	5cd3      	ldrb	r3, [r2, r3]
 8001c32:	f083 0301 	eor.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <KeyScan+0x86>
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4a1c      	ldr	r2, [pc, #112]	; (8001cb0 <KeyScan+0xe8>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <KeyScan+0x86>
				KeyPressed[j] = 1;
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	4a1a      	ldr	r2, [pc, #104]	; (8001cb4 <KeyScan+0xec>)
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 1;
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <KeyScan+0xe4>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	54d1      	strb	r1, [r2, r3]
 8001c56:	e019      	b.n	8001c8c <KeyScan+0xc4>
		} else if ((KeyBuffer[j] | 0xf0) == 0xf0) {
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <KeyScan+0xdc>)
 8001c5c:	5cd3      	ldrb	r3, [r2, r3]
 8001c5e:	f063 030f 	orn	r3, r3, #15
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2bf0      	cmp	r3, #240	; 0xf0
 8001c66:	d111      	bne.n	8001c8c <KeyScan+0xc4>
			if (KeyState[j] && ButtonUpDetectionEnable[j]) {
 8001c68:	79fb      	ldrb	r3, [r7, #7]
 8001c6a:	4a10      	ldr	r2, [pc, #64]	; (8001cac <KeyScan+0xe4>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <KeyScan+0xbc>
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	4a10      	ldr	r2, [pc, #64]	; (8001cb8 <KeyScan+0xf0>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <KeyScan+0xbc>
				KeyReleased[j] = 1;
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <KeyScan+0xf4>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	54d1      	strb	r1, [r2, r3]
			}
			KeyState[j] = 0;
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <KeyScan+0xe4>)
 8001c88:	2100      	movs	r1, #0
 8001c8a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j = 0; j < 2; j++) {
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d9c1      	bls.n	8001c1c <KeyScan+0x54>
		}
	}
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200000b4 	.word	0x200000b4
 8001ca8:	40010c00 	.word	0x40010c00
 8001cac:	200000a8 	.word	0x200000a8
 8001cb0:	200000b8 	.word	0x200000b8
 8001cb4:	200000ac 	.word	0x200000ac
 8001cb8:	200000bc 	.word	0x200000bc
 8001cbc:	200000b0 	.word	0x200000b0

08001cc0 <GetButton>:

bool GetButton(uint8_t buttonIndex) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
	return KeyState[buttonIndex];
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <GetButton+0x1c>)
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	200000a8 	.word	0x200000a8

08001ce0 <GetButtonDown>:

bool GetButtonDown(uint8_t buttonIndex) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
	EnableButtonDownDetection(buttonIndex);
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f000 f837 	bl	8001d60 <EnableButtonDownDetection>
	if (KeyPressed[buttonIndex]) {
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <GetButtonDown+0x3c>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <GetButtonDown+0x30>
		KeyPressed[buttonIndex] = 0;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <GetButtonDown+0x3c>)
 8001d00:	2100      	movs	r1, #0
 8001d02:	54d1      	strb	r1, [r2, r3]
		DisableButtonDownDetection(buttonIndex);
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 f83a 	bl	8001d80 <DisableButtonDownDetection>
		return 1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <GetButtonDown+0x32>
	}
	return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200000ac 	.word	0x200000ac

08001d20 <GetButtonUp>:

bool GetButtonUp(uint8_t buttonIndex) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
	EnableButtonUpDetection(buttonIndex);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f000 f837 	bl	8001da0 <EnableButtonUpDetection>
	if (KeyReleased[buttonIndex]) {
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <GetButtonUp+0x3c>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <GetButtonUp+0x30>
		KeyReleased[buttonIndex] = 0;
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <GetButtonUp+0x3c>)
 8001d40:	2100      	movs	r1, #0
 8001d42:	54d1      	strb	r1, [r2, r3]
		DisableButtonUpDetection(buttonIndex);
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f000 f83a 	bl	8001dc0 <DisableButtonUpDetection>
		return 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <GetButtonUp+0x32>
	}
	return 0;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200000b0 	.word	0x200000b0

08001d60 <EnableButtonDownDetection>:

void EnableButtonDownDetection(uint8_t buttonIndex){
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
	ButtonDownDetectionEnable[buttonIndex] = 1;
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <EnableButtonDownDetection+0x1c>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	54d1      	strb	r1, [r2, r3]
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	200000b8 	.word	0x200000b8

08001d80 <DisableButtonDownDetection>:

void DisableButtonDownDetection(uint8_t buttonIndex){
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	ButtonDownDetectionEnable[buttonIndex] = 0;
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <DisableButtonDownDetection+0x1c>)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	54d1      	strb	r1, [r2, r3]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr
 8001d9c:	200000b8 	.word	0x200000b8

08001da0 <EnableButtonUpDetection>:

void EnableButtonUpDetection(uint8_t buttonIndex){
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	71fb      	strb	r3, [r7, #7]
	ButtonUpDetectionEnable[buttonIndex] = 1;
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <EnableButtonUpDetection+0x1c>)
 8001dae:	2101      	movs	r1, #1
 8001db0:	54d1      	strb	r1, [r2, r3]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr
 8001dbc:	200000bc 	.word	0x200000bc

08001dc0 <DisableButtonUpDetection>:

void DisableButtonUpDetection(uint8_t buttonIndex){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
	ButtonUpDetectionEnable[buttonIndex] = 0;
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4a03      	ldr	r2, [pc, #12]	; (8001ddc <DisableButtonUpDetection+0x1c>)
 8001dce:	2100      	movs	r1, #0
 8001dd0:	54d1      	strb	r1, [r2, r3]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	200000bc 	.word	0x200000bc

08001de0 <IsOverlapping>:
 */

#include "gamelogic.h"

bool IsOverlapping(short x1, short y1, short x2, short y2, short x3, short y3,
		short x4, short y4) {
 8001de0:	b490      	push	{r4, r7}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4604      	mov	r4, r0
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4623      	mov	r3, r4
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	4603      	mov	r3, r0
 8001df4:	80bb      	strh	r3, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	803b      	strh	r3, [r7, #0]
	if (x1 > x4 || x3 > x2 || y1 > y4 || y3 > y2) {
 8001dfe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001e02:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dc11      	bgt.n	8001e2e <IsOverlapping+0x4e>
 8001e0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001e0e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	dc0b      	bgt.n	8001e2e <IsOverlapping+0x4e>
 8001e16:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001e1a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	dc05      	bgt.n	8001e2e <IsOverlapping+0x4e>
 8001e22:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001e26:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	dd01      	ble.n	8001e32 <IsOverlapping+0x52>
		return false;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <IsOverlapping+0x54>
	}
	return true;
 8001e32:	2301      	movs	r3, #1
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc90      	pop	{r4, r7}
 8001e3c:	4770      	bx	lr

08001e3e <IsFadedOutOfScene>:

bool IsFadedOutOfScene(GameObj *obj) {
 8001e3e:	b590      	push	{r4, r7, lr}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
	if (obj->x + obj->width * 8 < 0) {
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685c      	ldr	r4, [r3, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7b1b      	ldrb	r3, [r3, #12]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe ff2d 	bl	8000cb0 <__aeabi_i2f>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7fe fe74 	bl	8000b48 <__addsf3>
 8001e60:	4603      	mov	r3, r0
 8001e62:	f04f 0100 	mov.w	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f914 	bl	8001094 <__aeabi_fcmplt>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <IsFadedOutOfScene+0x38>
		return true;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <IsFadedOutOfScene+0x3a>
	} else {
		return false;
 8001e76:	2300      	movs	r3, #0
	}
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}

08001e80 <Append>:

// Append buffer in loop, if buffers are all occupied, use the first buffer
GameObj* Append(GameObj *header, short xPos, short yPos) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	803b      	strh	r3, [r7, #0]
	GameObj *ptr = header;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	60fb      	str	r3, [r7, #12]

	// If the current pointer is occupied, look for the next pos
	while (ptr->full) {
 8001e94:	e028      	b.n	8001ee8 <Append+0x68>
		ptr = ptr->next;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	60fb      	str	r3, [r7, #12]
		// Have cycled for a whole loop
		if (ptr == header) {
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d121      	bne.n	8001ee8 <Append+0x68>
			ptr->bmp = header->bmp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]
			ptr->x = xPos;
 8001eac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fefd 	bl	8000cb0 <__aeabi_i2f>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	605a      	str	r2, [r3, #4]
			ptr->y = yPos;
 8001ebc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fef5 	bl	8000cb0 <__aeabi_i2f>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	609a      	str	r2, [r3, #8]
			ptr->width = header->width;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7b1a      	ldrb	r2, [r3, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	731a      	strb	r2, [r3, #12]
			ptr->height = header->height;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	7b5a      	ldrb	r2, [r3, #13]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	735a      	strb	r2, [r3, #13]
			ptr->full = 1;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	739a      	strb	r2, [r3, #14]
			return header->next;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	e023      	b.n	8001f30 <Append+0xb0>
	while (ptr->full) {
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	7b9b      	ldrb	r3, [r3, #14]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1d2      	bne.n	8001e96 <Append+0x16>
		}
	}

	ptr->bmp = header->bmp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]
	ptr->x = xPos;
 8001ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fed7 	bl	8000cb0 <__aeabi_i2f>
 8001f02:	4602      	mov	r2, r0
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	605a      	str	r2, [r3, #4]
	ptr->y = yPos;
 8001f08:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7fe fecf 	bl	8000cb0 <__aeabi_i2f>
 8001f12:	4602      	mov	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	609a      	str	r2, [r3, #8]
	ptr->width = header->width;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7b1a      	ldrb	r2, [r3, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	731a      	strb	r2, [r3, #12]
	ptr->height = header->height;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7b5a      	ldrb	r2, [r3, #13]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	735a      	strb	r2, [r3, #13]
	ptr->full = 1;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	739a      	strb	r2, [r3, #14]
	return header;
 8001f2e:	687b      	ldr	r3, [r7, #4]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <GenLoopBuf>:

// Generate loop buffer given certain size
GameObj* GenLoopBuf(uint8_t size) {
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
	GameObj *head = NULL, *cyclic = NULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
	head = (GameObj*) malloc(sizeof(GameObj));
 8001f4a:	2014      	movs	r0, #20
 8001f4c:	f002 fe1a 	bl	8004b84 <malloc>
 8001f50:	4603      	mov	r3, r0
 8001f52:	60fb      	str	r3, [r7, #12]
	head->full = 0;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2200      	movs	r2, #0
 8001f58:	739a      	strb	r2, [r3, #14]
	cyclic = head;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8001f5e:	2301      	movs	r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	e00f      	b.n	8001f84 <GenLoopBuf+0x4c>
		GameObj *body = (GameObj*) malloc(sizeof(GameObj));
 8001f64:	2014      	movs	r0, #20
 8001f66:	f002 fe0d 	bl	8004b84 <malloc>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	60bb      	str	r3, [r7, #8]
		body->full = 0;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	739a      	strb	r2, [r3, #14]
		cyclic->next = body;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	611a      	str	r2, [r3, #16]
		cyclic = body;
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	617b      	str	r3, [r7, #20]
	for (int i = 1; i < size; i++) {
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	3301      	adds	r3, #1
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbeb      	blt.n	8001f64 <GenLoopBuf+0x2c>
	}
	cyclic->next = head;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	611a      	str	r2, [r3, #16]
	return head;
 8001f92:	68fb      	ldr	r3, [r7, #12]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HeaderInit>:

// Initializes the head pointer with the given values, n resets other buffers
void HeaderInit(GameObj *header, uint8_t *bmp, uint8_t width, uint8_t height) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b087      	sub	sp, #28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	461a      	mov	r2, r3
 8001faa:	460b      	mov	r3, r1
 8001fac:	71fb      	strb	r3, [r7, #7]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	71bb      	strb	r3, [r7, #6]
	GameObj *ptr = header;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	617b      	str	r3, [r7, #20]

	ptr->bmp = bmp;
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	601a      	str	r2, [r3, #0]
	ptr->x = 0;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
	ptr->y = 0;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
	ptr->width = width;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	79fa      	ldrb	r2, [r7, #7]
 8001fd0:	731a      	strb	r2, [r3, #12]
	ptr->height = height;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	79ba      	ldrb	r2, [r7, #6]
 8001fd6:	735a      	strb	r2, [r3, #13]
	ptr->full = 0;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	739a      	strb	r2, [r3, #14]

	for (;;) {
		if (ptr->next == header)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d006      	beq.n	8001ff6 <HeaderInit+0x5a>
			return;
		ptr = ptr->next;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	617b      	str	r3, [r7, #20]
		ptr->full = 0;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	739a      	strb	r2, [r3, #14]
		if (ptr->next == header)
 8001ff4:	e7f3      	b.n	8001fde <HeaderInit+0x42>
			return;
 8001ff6:	bf00      	nop
	}
}
 8001ff8:	371c      	adds	r7, #28
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <ShiftX>:

// Shift all buffers and return the first active pointer
GameObj* ShiftX(GameObj *header, float byX) {
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	GameObj *ptr = header;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]

	// Cycle through all valid buffers once and apply the drift
	for (;;) {
		if (ptr->full) {
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	7b9b      	ldrb	r3, [r3, #14]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <ShiftX+0x2a>
			ptr->x += byX;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	6839      	ldr	r1, [r7, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fd93 	bl	8000b48 <__addsf3>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	605a      	str	r2, [r3, #4]
		}
		// Have cycled through the buffer
		if (!ptr->next->full || ptr->next == header)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	7b9b      	ldrb	r3, [r3, #14]
 8002030:	f083 0301 	eor.w	r3, r3, #1
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d108      	bne.n	800204c <ShiftX+0x4c>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	d003      	beq.n	800204c <ShiftX+0x4c>
			break;
		ptr = ptr->next;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	60fb      	str	r3, [r7, #12]
		if (ptr->full) {
 800204a:	e7e0      	b.n	800200e <ShiftX+0xe>
	}

	ptr = header;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	60fb      	str	r3, [r7, #12]
	// Return the first available buffer, if no buf is available, return header
	while (IsFadedOutOfScene(ptr)) {
 8002050:	e012      	b.n	8002078 <ShiftX+0x78>
		ptr->full = 0;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	739a      	strb	r2, [r3, #14]
		if (!ptr->next->full || ptr->next == header) {
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	7b9b      	ldrb	r3, [r3, #14]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10d      	bne.n	8002084 <ShiftX+0x84>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	429a      	cmp	r2, r3
 8002070:	d008      	beq.n	8002084 <ShiftX+0x84>
			break;
		}
		ptr = ptr->next;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	60fb      	str	r3, [r7, #12]
	while (IsFadedOutOfScene(ptr)) {
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff fee0 	bl	8001e3e <IsFadedOutOfScene>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e6      	bne.n	8002052 <ShiftX+0x52>
	}
	return ptr;
 8002084:	68fb      	ldr	r3, [r7, #12]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <Random>:

short Random(unsigned long seed, short lowerLim, short upperLim) {
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	807b      	strh	r3, [r7, #2]
 800209a:	4613      	mov	r3, r2
 800209c:	803b      	strh	r3, [r7, #0]
	srand(seed);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f002 fe6a 	bl	8004d78 <srand>
	return rand() % (upperLim - lowerLim + 1) + lowerLim;
 80020a4:	f002 fe96 	bl	8004dd4 <rand>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f9b7 1000 	ldrsh.w	r1, [r7]
 80020ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020b2:	1acb      	subs	r3, r1, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	fb92 f1f3 	sdiv	r1, r2, r3
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	4413      	add	r3, r2
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b21b      	sxth	r3, r3
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	0000      	movs	r0, r0
 80020d4:	0000      	movs	r0, r0
	...

080020d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80020d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020dc:	b08b      	sub	sp, #44	; 0x2c
 80020de:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020e0:	f000 ff96 	bl	8003010 <HAL_Init>
	/* USER CODE BEGIN Init */
	/* USER CODE END Init */
	/* Configure the system clock */
	SystemClock_Config();
 80020e4:	f000 fc6a 	bl	80029bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */
	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020e8:	f000 fd30 	bl	8002b4c <MX_GPIO_Init>
	MX_SPI1_Init();
 80020ec:	f000 fca8 	bl	8002a40 <MX_SPI1_Init>
	MX_TIM1_Init();
 80020f0:	f000 fcdc 	bl	8002aac <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);
 80020f4:	4859      	ldr	r0, [pc, #356]	; (800225c <main+0x184>)
 80020f6:	f002 f971 	bl	80043dc <HAL_TIM_Base_Start_IT>
	// ALL GPIO AND BUSES MUST BE INITED BEFORE CALL THIS FUNCTION
	LCD_Init(&MemDisp, &hspi1, GPIOA, CS_Pin);
 80020fa:	2310      	movs	r3, #16
 80020fc:	4a58      	ldr	r2, [pc, #352]	; (8002260 <main+0x188>)
 80020fe:	4959      	ldr	r1, [pc, #356]	; (8002264 <main+0x18c>)
 8002100:	4859      	ldr	r0, [pc, #356]	; (8002268 <main+0x190>)
 8002102:	f7ff f863 	bl	80011cc <LCD_Init>

	GameObj *dinoHeader = GenLoopBuf(1);
 8002106:	2001      	movs	r0, #1
 8002108:	f7ff ff16 	bl	8001f38 <GenLoopBuf>
 800210c:	6178      	str	r0, [r7, #20]
	GameObj *fireHeader = GenLoopBuf(1);
 800210e:	2001      	movs	r0, #1
 8002110:	f7ff ff12 	bl	8001f38 <GenLoopBuf>
 8002114:	6138      	str	r0, [r7, #16]
	GameObj *cloudHeader = GenLoopBuf(CLOUD_BUF_SIZE);
 8002116:	2002      	movs	r0, #2
 8002118:	f7ff ff0e 	bl	8001f38 <GenLoopBuf>
 800211c:	60f8      	str	r0, [r7, #12]
	GameObj *plantHeader = GenLoopBuf(PLANT_BUF_SIZE);
 800211e:	2002      	movs	r0, #2
 8002120:	f7ff ff0a 	bl	8001f38 <GenLoopBuf>
 8002124:	60b8      	str	r0, [r7, #8]

	LCD_LoadFull((uint8_t*) Title);
 8002126:	4851      	ldr	r0, [pc, #324]	; (800226c <main+0x194>)
 8002128:	f7ff f988 	bl	800143c <LCD_LoadFull>
	/// START OVER
	while (1) {
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		isJumping = 0, flipStatus = 0;
 800212c:	4b50      	ldr	r3, [pc, #320]	; (8002270 <main+0x198>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	4b50      	ldr	r3, [pc, #320]	; (8002274 <main+0x19c>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
		jumpTick = 0, nextPlantTickDel = 0, nextCloudTickDel = 0;
 8002138:	4b4f      	ldr	r3, [pc, #316]	; (8002278 <main+0x1a0>)
 800213a:	2200      	movs	r2, #0
 800213c:	801a      	strh	r2, [r3, #0]
 800213e:	4b4f      	ldr	r3, [pc, #316]	; (800227c <main+0x1a4>)
 8002140:	2200      	movs	r2, #0
 8002142:	801a      	strh	r2, [r3, #0]
 8002144:	4b4e      	ldr	r3, [pc, #312]	; (8002280 <main+0x1a8>)
 8002146:	2200      	movs	r2, #0
 8002148:	801a      	strh	r2, [r3, #0]
		tick = 0, plantSubTick = 0, cloudSubTick = 0;
 800214a:	4b4e      	ldr	r3, [pc, #312]	; (8002284 <main+0x1ac>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <main+0x1b0>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	4b4d      	ldr	r3, [pc, #308]	; (800228c <main+0x1b4>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
		overallSpeed = 1;
 800215c:	4b4c      	ldr	r3, [pc, #304]	; (8002290 <main+0x1b8>)
 800215e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002162:	601a      	str	r2, [r3, #0]

		HeaderInit(dinoHeader, NULL, 3, 22);
 8002164:	2316      	movs	r3, #22
 8002166:	2203      	movs	r2, #3
 8002168:	2100      	movs	r1, #0
 800216a:	6978      	ldr	r0, [r7, #20]
 800216c:	f7ff ff16 	bl	8001f9c <HeaderInit>
		HeaderInit(fireHeader, NULL, 9, 25);
 8002170:	2319      	movs	r3, #25
 8002172:	2209      	movs	r2, #9
 8002174:	2100      	movs	r1, #0
 8002176:	6938      	ldr	r0, [r7, #16]
 8002178:	f7ff ff10 	bl	8001f9c <HeaderInit>
		HeaderInit(cloudHeader, (uint8_t*) Cloud, 6, 14);
 800217c:	230e      	movs	r3, #14
 800217e:	2206      	movs	r2, #6
 8002180:	4944      	ldr	r1, [pc, #272]	; (8002294 <main+0x1bc>)
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f7ff ff0a 	bl	8001f9c <HeaderInit>
		HeaderInit(plantHeader, (uint8_t*) Plant1, 2, 22);
 8002188:	2316      	movs	r3, #22
 800218a:	2202      	movs	r2, #2
 800218c:	4942      	ldr	r1, [pc, #264]	; (8002298 <main+0x1c0>)
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f7ff ff04 	bl	8001f9c <HeaderInit>

		dinoHeader = Append(dinoHeader, 4, DinoGroundPos);
 8002194:	4b41      	ldr	r3, [pc, #260]	; (800229c <main+0x1c4>)
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ffa4 	bl	80010e4 <__aeabi_f2iz>
 800219c:	4603      	mov	r3, r0
 800219e:	b21b      	sxth	r3, r3
 80021a0:	461a      	mov	r2, r3
 80021a2:	2104      	movs	r1, #4
 80021a4:	6978      	ldr	r0, [r7, #20]
 80021a6:	f7ff fe6b 	bl	8001e80 <Append>
 80021aa:	6178      	str	r0, [r7, #20]
		fireHeader = Append(fireHeader, 24, 52);
 80021ac:	2234      	movs	r2, #52	; 0x34
 80021ae:	2118      	movs	r1, #24
 80021b0:	6938      	ldr	r0, [r7, #16]
 80021b2:	f7ff fe65 	bl	8001e80 <Append>
 80021b6:	6138      	str	r0, [r7, #16]

		LCD_Fill(flipStatus);
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <main+0x19c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff fc55 	bl	8001a6c <LCD_Fill>
		LCD_DrawLine(77, 0, 29, DRAWMODE_ADD, flipStatus);
 80021c2:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <main+0x19c>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2300      	movs	r3, #0
 80021ca:	221d      	movs	r2, #29
 80021cc:	2100      	movs	r1, #0
 80021ce:	204d      	movs	r0, #77	; 0x4d
 80021d0:	f7ff fb28 	bl	8001824 <LCD_DrawLine>
		dinoHeader->bmp = (uint8_t*) DinoNormalS;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	4a32      	ldr	r2, [pc, #200]	; (80022a0 <main+0x1c8>)
 80021d8:	601a      	str	r2, [r3, #0]
		LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10, DRAWMODE_CULL,
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	4931      	ldr	r1, [pc, #196]	; (80022a4 <main+0x1cc>)
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fcb1 	bl	8000b48 <__addsf3>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe ffa1 	bl	8001130 <__aeabi_f2uiz>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b2dc      	uxtb	r4, r3
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	492c      	ldr	r1, [pc, #176]	; (80022a8 <main+0x1d0>)
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fca5 	bl	8000b48 <__addsf3>
 80021fe:	4603      	mov	r3, r0
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe ff6f 	bl	80010e4 <__aeabi_f2iz>
 8002206:	4601      	mov	r1, r0
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <main+0x19c>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	9300      	str	r3, [sp, #0]
 800220e:	2301      	movs	r3, #1
 8002210:	220a      	movs	r2, #10
 8002212:	4620      	mov	r0, r4
 8002214:	f7ff fb06 	bl	8001824 <LCD_DrawLine>
				flipStatus);
		LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 8002218:	4b16      	ldr	r3, [pc, #88]	; (8002274 <main+0x19c>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	6978      	ldr	r0, [r7, #20]
 8002222:	f7ff f91d 	bl	8001460 <LCD_LoadObjs>
		LCD_Print("\t\tMax    #    Chloe", 2, 14, DRAWMODE_ADD,
 8002226:	4b13      	ldr	r3, [pc, #76]	; (8002274 <main+0x19c>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2300      	movs	r3, #0
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2300      	movs	r3, #0
 8002232:	220e      	movs	r2, #14
 8002234:	2102      	movs	r1, #2
 8002236:	481d      	ldr	r0, [pc, #116]	; (80022ac <main+0x1d4>)
 8002238:	f7ff fc30 	bl	8001a9c <LCD_Print>
		REPEATMODE_NONE, flipStatus);

		while (!GetButtonUp(JUMP_BUTTON))
 800223c:	e002      	b.n	8002244 <main+0x16c>
			LCD_UpdateFull(&MemDisp);
 800223e:	480a      	ldr	r0, [pc, #40]	; (8002268 <main+0x190>)
 8002240:	f7ff f826 	bl	8001290 <LCD_UpdateFull>
		while (!GetButtonUp(JUMP_BUTTON))
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff fd6b 	bl	8001d20 <GetButtonUp>
 800224a:	4603      	mov	r3, r0
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f3      	bne.n	800223e <main+0x166>

		for (uint8_t l = 29; l <= 96; l++) {
 8002256:	231d      	movs	r3, #29
 8002258:	71fb      	strb	r3, [r7, #7]
 800225a:	e05f      	b.n	800231c <main+0x244>
 800225c:	20000118 	.word	0x20000118
 8002260:	40010800 	.word	0x40010800
 8002264:	200000c0 	.word	0x200000c0
 8002268:	20000160 	.word	0x20000160
 800226c:	080062a0 	.word	0x080062a0
 8002270:	2000016c 	.word	0x2000016c
 8002274:	2000016d 	.word	0x2000016d
 8002278:	2000016e 	.word	0x2000016e
 800227c:	20000170 	.word	0x20000170
 8002280:	20000172 	.word	0x20000172
 8002284:	20000174 	.word	0x20000174
 8002288:	20000178 	.word	0x20000178
 800228c:	2000017c 	.word	0x2000017c
 8002290:	20000184 	.word	0x20000184
 8002294:	08005ecc 	.word	0x08005ecc
 8002298:	08005f20 	.word	0x08005f20
 800229c:	42680000 	.word	0x42680000
 80022a0:	08006014 	.word	0x08006014
 80022a4:	41980000 	.word	0x41980000
 80022a8:	40400000 	.word	0x40400000
 80022ac:	08005ea0 	.word	0x08005ea0
			uint8_t delayTime = ceil(((float) (96 - l) * 5 / 67));
 80022b0:	79fb      	ldrb	r3, [r7, #7]
 80022b2:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fcfa 	bl	8000cb0 <__aeabi_i2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	496d      	ldr	r1, [pc, #436]	; (8002474 <main+0x39c>)
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe fd49 	bl	8000d58 <__aeabi_fmul>
 80022c6:	4603      	mov	r3, r0
 80022c8:	496b      	ldr	r1, [pc, #428]	; (8002478 <main+0x3a0>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe fdf8 	bl	8000ec0 <__aeabi_fdiv>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f8a8 	bl	8000428 <__aeabi_f2d>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f003 fcd2 	bl	8005c88 <ceil>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fbb6 	bl	8000a5c <__aeabi_d2uiz>
 80022f0:	4603      	mov	r3, r0
 80022f2:	70fb      	strb	r3, [r7, #3]
			LCD_DrawLine(77, l, 1, DRAWMODE_ADD, flipStatus);
 80022f4:	79f9      	ldrb	r1, [r7, #7]
 80022f6:	4b61      	ldr	r3, [pc, #388]	; (800247c <main+0x3a4>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	2201      	movs	r2, #1
 8002300:	204d      	movs	r0, #77	; 0x4d
 8002302:	f7ff fa8f 	bl	8001824 <LCD_DrawLine>
			LCD_UpdateLine(&MemDisp, 77);
 8002306:	214d      	movs	r1, #77	; 0x4d
 8002308:	485d      	ldr	r0, [pc, #372]	; (8002480 <main+0x3a8>)
 800230a:	f7ff f833 	bl	8001374 <LCD_UpdateLine>
			HAL_Delay(delayTime);
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	4618      	mov	r0, r3
 8002312:	f000 fedf 	bl	80030d4 <HAL_Delay>
		for (uint8_t l = 29; l <= 96; l++) {
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	3301      	adds	r3, #1
 800231a:	71fb      	strb	r3, [r7, #7]
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	2b60      	cmp	r3, #96	; 0x60
 8002320:	d9c6      	bls.n	80022b0 <main+0x1d8>
		}

		/// THE TICK LOOP
		while (1) {
			// Day and night invertion
			flipStatus = ((tick / 800) % 3 == 2) ? 1 : 0;
 8002322:	4b58      	ldr	r3, [pc, #352]	; (8002484 <main+0x3ac>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a58      	ldr	r2, [pc, #352]	; (8002488 <main+0x3b0>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	0a19      	lsrs	r1, r3, #8
 800232e:	4b57      	ldr	r3, [pc, #348]	; (800248c <main+0x3b4>)
 8002330:	fba3 2301 	umull	r2, r3, r3, r1
 8002334:	085a      	lsrs	r2, r3, #1
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	1aca      	subs	r2, r1, r3
 800233e:	2a02      	cmp	r2, #2
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b4c      	ldr	r3, [pc, #304]	; (800247c <main+0x3a4>)
 800234a:	701a      	strb	r2, [r3, #0]

			if (GetButtonDown(JUMP_BUTTON) && !isJumping)
 800234c:	2001      	movs	r0, #1
 800234e:	f7ff fcc7 	bl	8001ce0 <GetButtonDown>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <main+0x294>
 8002358:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <main+0x3b8>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	f083 0301 	eor.w	r3, r3, #1
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <main+0x294>
				isJumping = 1;
 8002366:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <main+0x3b8>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]

			dinoVerticalMovement = DinoGroundPos;
 800236c:	4b49      	ldr	r3, [pc, #292]	; (8002494 <main+0x3bc>)
 800236e:	4618      	mov	r0, r3
 8002370:	f7fe feb8 	bl	80010e4 <__aeabi_f2iz>
 8002374:	4603      	mov	r3, r0
 8002376:	b21a      	sxth	r2, r3
 8002378:	4b47      	ldr	r3, [pc, #284]	; (8002498 <main+0x3c0>)
 800237a:	801a      	strh	r2, [r3, #0]
			if (isJumping) {
 800237c:	4b44      	ldr	r3, [pc, #272]	; (8002490 <main+0x3b8>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8099 	beq.w	80024b8 <main+0x3e0>
				if (jumpTick < JumpTickMax / overallSpeed - 1) {
 8002386:	4b45      	ldr	r3, [pc, #276]	; (800249c <main+0x3c4>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe fc90 	bl	8000cb0 <__aeabi_i2f>
 8002390:	4604      	mov	r4, r0
 8002392:	4a43      	ldr	r2, [pc, #268]	; (80024a0 <main+0x3c8>)
 8002394:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <main+0x3cc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f7fe fd90 	bl	8000ec0 <__aeabi_fdiv>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fbcc 	bl	8000b44 <__aeabi_fsub>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4619      	mov	r1, r3
 80023b0:	4620      	mov	r0, r4
 80023b2:	f7fe fe6f 	bl	8001094 <__aeabi_fcmplt>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d077      	beq.n	80024ac <main+0x3d4>
					jumpTick++;
 80023bc:	4b37      	ldr	r3, [pc, #220]	; (800249c <main+0x3c4>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <main+0x3c4>)
 80023c6:	801a      	strh	r2, [r3, #0]
					dinoVerticalMovement = jumpTick
							* (jumpTick - JumpTickMax / overallSpeed)
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <main+0x3c4>)
 80023ca:	881b      	ldrh	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe fc6f 	bl	8000cb0 <__aeabi_i2f>
 80023d2:	4604      	mov	r4, r0
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <main+0x3c4>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe fc69 	bl	8000cb0 <__aeabi_i2f>
 80023de:	4605      	mov	r5, r0
 80023e0:	4a2f      	ldr	r2, [pc, #188]	; (80024a0 <main+0x3c8>)
 80023e2:	4b30      	ldr	r3, [pc, #192]	; (80024a4 <main+0x3cc>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4619      	mov	r1, r3
 80023e8:	4610      	mov	r0, r2
 80023ea:	f7fe fd69 	bl	8000ec0 <__aeabi_fdiv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	4628      	mov	r0, r5
 80023f4:	f7fe fba6 	bl	8000b44 <__aeabi_fsub>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4619      	mov	r1, r3
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7fe fcab 	bl	8000d58 <__aeabi_fmul>
 8002402:	4603      	mov	r3, r0
 8002404:	461c      	mov	r4, r3
							* (4
									/ ((JumpTickMax / overallSpeed)
 8002406:	4a26      	ldr	r2, [pc, #152]	; (80024a0 <main+0x3c8>)
 8002408:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <main+0x3cc>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f7fe fd56 	bl	8000ec0 <__aeabi_fdiv>
 8002414:	4603      	mov	r3, r0
 8002416:	461d      	mov	r5, r3
											* (JumpTickMax / overallSpeed)))
 8002418:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <main+0x3c8>)
 800241a:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <main+0x3cc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7fe fd4d 	bl	8000ec0 <__aeabi_fdiv>
 8002426:	4603      	mov	r3, r0
 8002428:	4619      	mov	r1, r3
 800242a:	4628      	mov	r0, r5
 800242c:	f7fe fc94 	bl	8000d58 <__aeabi_fmul>
 8002430:	4603      	mov	r3, r0
									/ ((JumpTickMax / overallSpeed)
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 4081 	mov.w	r0, #1082130432	; 0x40800000
 8002438:	f7fe fd42 	bl	8000ec0 <__aeabi_fdiv>
 800243c:	4603      	mov	r3, r0
							* (4
 800243e:	4619      	mov	r1, r3
 8002440:	4620      	mov	r0, r4
 8002442:	f7fe fc89 	bl	8000d58 <__aeabi_fmul>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
							* DinoJumpHeight + DinoGroundPos;
 800244a:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <main+0x3d0>)
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f7fe fc82 	bl	8000d58 <__aeabi_fmul>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <main+0x3bc>)
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f7fe fb73 	bl	8000b48 <__addsf3>
 8002462:	4603      	mov	r3, r0
					dinoVerticalMovement = jumpTick
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fe3d 	bl	80010e4 <__aeabi_f2iz>
 800246a:	4603      	mov	r3, r0
 800246c:	b21a      	sxth	r2, r3
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <main+0x3c0>)
 8002470:	801a      	strh	r2, [r3, #0]
 8002472:	e021      	b.n	80024b8 <main+0x3e0>
 8002474:	40a00000 	.word	0x40a00000
 8002478:	42860000 	.word	0x42860000
 800247c:	2000016d 	.word	0x2000016d
 8002480:	20000160 	.word	0x20000160
 8002484:	20000174 	.word	0x20000174
 8002488:	51eb851f 	.word	0x51eb851f
 800248c:	aaaaaaab 	.word	0xaaaaaaab
 8002490:	2000016c 	.word	0x2000016c
 8002494:	42680000 	.word	0x42680000
 8002498:	20000180 	.word	0x20000180
 800249c:	2000016e 	.word	0x2000016e
 80024a0:	42700000 	.word	0x42700000
 80024a4:	20000184 	.word	0x20000184
 80024a8:	42200000 	.word	0x42200000
				} else {
					isJumping = 0;
 80024ac:	4b5c      	ldr	r3, [pc, #368]	; (8002620 <main+0x548>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	701a      	strb	r2, [r3, #0]
					jumpTick = 0;
 80024b2:	4b5c      	ldr	r3, [pc, #368]	; (8002624 <main+0x54c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	801a      	strh	r2, [r3, #0]
				}
			}

			// Plant generation
			if (tick - plantSubTick == nextPlantTickDel) {
 80024b8:	4b5b      	ldr	r3, [pc, #364]	; (8002628 <main+0x550>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b5b      	ldr	r3, [pc, #364]	; (800262c <main+0x554>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	4a5b      	ldr	r2, [pc, #364]	; (8002630 <main+0x558>)
 80024c4:	8812      	ldrh	r2, [r2, #0]
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d114      	bne.n	80024f4 <main+0x41c>
				plantHeader = Append(plantHeader, 96, 59);
 80024ca:	223b      	movs	r2, #59	; 0x3b
 80024cc:	2160      	movs	r1, #96	; 0x60
 80024ce:	68b8      	ldr	r0, [r7, #8]
 80024d0:	f7ff fcd6 	bl	8001e80 <Append>
 80024d4:	60b8      	str	r0, [r7, #8]
				nextPlantTickDel = Random(tick, 80, 160);
 80024d6:	4b54      	ldr	r3, [pc, #336]	; (8002628 <main+0x550>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	22a0      	movs	r2, #160	; 0xa0
 80024dc:	2150      	movs	r1, #80	; 0x50
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fdd5 	bl	800208e <Random>
 80024e4:	4603      	mov	r3, r0
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	4b51      	ldr	r3, [pc, #324]	; (8002630 <main+0x558>)
 80024ea:	801a      	strh	r2, [r3, #0]
				plantSubTick = tick;
 80024ec:	4b4e      	ldr	r3, [pc, #312]	; (8002628 <main+0x550>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a4e      	ldr	r2, [pc, #312]	; (800262c <main+0x554>)
 80024f2:	6013      	str	r3, [r2, #0]
			}
			// Clound generation
			if (tick - cloudSubTick == nextCloudTickDel) {
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <main+0x550>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <main+0x55c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	4a4e      	ldr	r2, [pc, #312]	; (8002638 <main+0x560>)
 8002500:	8812      	ldrh	r2, [r2, #0]
 8002502:	4293      	cmp	r3, r2
 8002504:	d11e      	bne.n	8002544 <main+0x46c>
				cloudHeader = Append(cloudHeader, 96, Random(tick, 12, 20));
 8002506:	4b48      	ldr	r3, [pc, #288]	; (8002628 <main+0x550>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2214      	movs	r2, #20
 800250c:	210c      	movs	r1, #12
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fdbd 	bl	800208e <Random>
 8002514:	4603      	mov	r3, r0
 8002516:	461a      	mov	r2, r3
 8002518:	2160      	movs	r1, #96	; 0x60
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f7ff fcb0 	bl	8001e80 <Append>
 8002520:	60f8      	str	r0, [r7, #12]
				nextCloudTickDel = Random(tick, 1200, 2000);
 8002522:	4b41      	ldr	r3, [pc, #260]	; (8002628 <main+0x550>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800252a:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fdad 	bl	800208e <Random>
 8002534:	4603      	mov	r3, r0
 8002536:	b29a      	uxth	r2, r3
 8002538:	4b3f      	ldr	r3, [pc, #252]	; (8002638 <main+0x560>)
 800253a:	801a      	strh	r2, [r3, #0]
				cloudSubTick = tick;
 800253c:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <main+0x550>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a3c      	ldr	r2, [pc, #240]	; (8002634 <main+0x55c>)
 8002542:	6013      	str	r3, [r2, #0]
			}

			// Reset canvas
			LCD_Fill(flipStatus);
 8002544:	4b3d      	ldr	r3, [pc, #244]	; (800263c <main+0x564>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fa8f 	bl	8001a6c <LCD_Fill>
			// Draw ground
			LCD_DrawLine(77, 0, 96, DRAWMODE_ADD, flipStatus);
 800254e:	4b3b      	ldr	r3, [pc, #236]	; (800263c <main+0x564>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2300      	movs	r3, #0
 8002556:	2260      	movs	r2, #96	; 0x60
 8002558:	2100      	movs	r1, #0
 800255a:	204d      	movs	r0, #77	; 0x4d
 800255c:	f7ff f962 	bl	8001824 <LCD_DrawLine>

			// Obj shift
			plantHeader = ShiftX(plantHeader, -1 * overallSpeed);
 8002560:	4b37      	ldr	r3, [pc, #220]	; (8002640 <main+0x568>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002568:	4619      	mov	r1, r3
 800256a:	68b8      	ldr	r0, [r7, #8]
 800256c:	f7ff fd48 	bl	8002000 <ShiftX>
 8002570:	60b8      	str	r0, [r7, #8]
			cloudHeader = ShiftX(cloudHeader, -0.1 * overallSpeed);
 8002572:	4b33      	ldr	r3, [pc, #204]	; (8002640 <main+0x568>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fd ff56 	bl	8000428 <__aeabi_f2d>
 800257c:	a326      	add	r3, pc, #152	; (adr r3, 8002618 <main+0x540>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fd ffa9 	bl	80004d8 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7fe fa85 	bl	8000a9c <__aeabi_d2f>
 8002592:	4603      	mov	r3, r0
 8002594:	4619      	mov	r1, r3
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff fd32 	bl	8002000 <ShiftX>
 800259c:	60f8      	str	r0, [r7, #12]

			dinoHeader->y = dinoVerticalMovement;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <main+0x56c>)
 80025a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fb83 	bl	8000cb0 <__aeabi_i2f>
 80025aa:	4602      	mov	r2, r0
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	609a      	str	r2, [r3, #8]
			// Culling masks
			ptr = plantHeader;
 80025b0:	4a25      	ldr	r2, [pc, #148]	; (8002648 <main+0x570>)
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6013      	str	r3, [r2, #0]
			for (;;) {
				if (ptr->full) {
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <main+0x570>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	7b9b      	ldrb	r3, [r3, #14]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d014      	beq.n	80025ea <main+0x512>
					LCD_DrawLine(77, ptr->x + 2, 6, DRAWMODE_CULL, flipStatus);
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <main+0x570>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fabc 	bl	8000b48 <__addsf3>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fd86 	bl	80010e4 <__aeabi_f2iz>
 80025d8:	4601      	mov	r1, r0
 80025da:	4b18      	ldr	r3, [pc, #96]	; (800263c <main+0x564>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2301      	movs	r3, #1
 80025e2:	2206      	movs	r2, #6
 80025e4:	204d      	movs	r0, #77	; 0x4d
 80025e6:	f7ff f91d 	bl	8001824 <LCD_DrawLine>
				}
				// If looped through all / next buffer is empty
				if (!ptr->next->full || ptr->next == plantHeader) {
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <main+0x570>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	7b9b      	ldrb	r3, [r3, #14]
 80025f2:	f083 0301 	eor.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d127      	bne.n	800264c <main+0x574>
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <main+0x570>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	429a      	cmp	r2, r3
 8002606:	d021      	beq.n	800264c <main+0x574>
					break;
				}
				ptr = ptr->next;
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <main+0x570>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <main+0x570>)
 8002610:	6013      	str	r3, [r2, #0]
				if (ptr->full) {
 8002612:	e7d0      	b.n	80025b6 <main+0x4de>
 8002614:	f3af 8000 	nop.w
 8002618:	9999999a 	.word	0x9999999a
 800261c:	bfb99999 	.word	0xbfb99999
 8002620:	2000016c 	.word	0x2000016c
 8002624:	2000016e 	.word	0x2000016e
 8002628:	20000174 	.word	0x20000174
 800262c:	20000178 	.word	0x20000178
 8002630:	20000170 	.word	0x20000170
 8002634:	2000017c 	.word	0x2000017c
 8002638:	20000172 	.word	0x20000172
 800263c:	2000016d 	.word	0x2000016d
 8002640:	20000184 	.word	0x20000184
 8002644:	20000180 	.word	0x20000180
 8002648:	20000188 	.word	0x20000188
			}
			LCD_DrawLine(dinoHeader->y + 19, dinoHeader->x + 3, 10,
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	49a3      	ldr	r1, [pc, #652]	; (80028e0 <main+0x808>)
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fa78 	bl	8000b48 <__addsf3>
 8002658:	4603      	mov	r3, r0
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd68 	bl	8001130 <__aeabi_f2uiz>
 8002660:	4603      	mov	r3, r0
 8002662:	b2dc      	uxtb	r4, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	499e      	ldr	r1, [pc, #632]	; (80028e4 <main+0x80c>)
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fa6c 	bl	8000b48 <__addsf3>
 8002670:	4603      	mov	r3, r0
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fd36 	bl	80010e4 <__aeabi_f2iz>
 8002678:	4601      	mov	r1, r0
 800267a:	4b9b      	ldr	r3, [pc, #620]	; (80028e8 <main+0x810>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	220a      	movs	r2, #10
 8002684:	4620      	mov	r0, r4
 8002686:	f7ff f8cd 	bl	8001824 <LCD_DrawLine>
			DRAWMODE_CULL, flipStatus);
			// Render fire
			if (!isJumping) {
 800268a:	4b98      	ldr	r3, [pc, #608]	; (80028ec <main+0x814>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	f083 0301 	eor.w	r3, r3, #1
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d026      	beq.n	80026e6 <main+0x60e>
				if (GetButton(FIRE_BUTTON)) {
 8002698:	2000      	movs	r0, #0
 800269a:	f7ff fb11 	bl	8001cc0 <GetButton>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d020      	beq.n	80026e6 <main+0x60e>
					fireHeader->bmp = (uint8_t*) Fire[(tick
							/ (int) (30 / overallSpeed)) % 2];
 80026a4:	4b92      	ldr	r3, [pc, #584]	; (80028f0 <main+0x818>)
 80026a6:	681c      	ldr	r4, [r3, #0]
 80026a8:	4b92      	ldr	r3, [pc, #584]	; (80028f4 <main+0x81c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4892      	ldr	r0, [pc, #584]	; (80028f8 <main+0x820>)
 80026b0:	f7fe fc06 	bl	8000ec0 <__aeabi_fdiv>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fd14 	bl	80010e4 <__aeabi_f2iz>
 80026bc:	4603      	mov	r3, r0
 80026be:	fbb4 f3f3 	udiv	r3, r4, r3
 80026c2:	f003 0201 	and.w	r2, r3, #1
					fireHeader->bmp = (uint8_t*) Fire[(tick
 80026c6:	4613      	mov	r3, r2
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	1a9b      	subs	r3, r3, r2
 80026cc:	011a      	lsls	r2, r3, #4
 80026ce:	1ad2      	subs	r2, r2, r3
 80026d0:	4b8a      	ldr	r3, [pc, #552]	; (80028fc <main+0x824>)
 80026d2:	441a      	add	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	601a      	str	r2, [r3, #0]
					LCD_LoadObjs(fireHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80026d8:	4b83      	ldr	r3, [pc, #524]	; (80028e8 <main+0x810>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	6938      	ldr	r0, [r7, #16]
 80026e2:	f7fe febd 	bl	8001460 <LCD_LoadObjs>
							flipStatus);
				}
			}

			LCD_LoadObjs(plantHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80026e6:	4b80      	ldr	r3, [pc, #512]	; (80028e8 <main+0x810>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	68b8      	ldr	r0, [r7, #8]
 80026f0:	f7fe feb6 	bl	8001460 <LCD_LoadObjs>
					flipStatus);
			LCD_LoadObjs(cloudHeader, DRAWMODE_ADD, REPEATMODE_NONE,
 80026f4:	4b7c      	ldr	r3, [pc, #496]	; (80028e8 <main+0x810>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2200      	movs	r2, #0
 80026fa:	2100      	movs	r1, #0
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f7fe feaf 	bl	8001460 <LCD_LoadObjs>
					flipStatus);

			// Check death
			ptr = plantHeader;
 8002702:	4a7f      	ldr	r2, [pc, #508]	; (8002900 <main+0x828>)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6013      	str	r3, [r2, #0]
			for (;;) {
				if (ptr->full) {
 8002708:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <main+0x828>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	7b9b      	ldrb	r3, [r3, #14]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d05b      	beq.n	80027ca <main+0x6f2>
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	4973      	ldr	r1, [pc, #460]	; (80028e4 <main+0x80c>)
 8002718:	4618      	mov	r0, r3
 800271a:	f7fe fa15 	bl	8000b48 <__addsf3>
 800271e:	4603      	mov	r3, r0
 8002720:	4618      	mov	r0, r3
 8002722:	f7fe fcdf 	bl	80010e4 <__aeabi_f2iz>
 8002726:	4603      	mov	r3, r0
 8002728:	b21d      	sxth	r5, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe fcd8 	bl	80010e4 <__aeabi_f2iz>
 8002734:	4603      	mov	r3, r0
 8002736:	b21e      	sxth	r6, r3
							dinoHeader->x + 23 - 7, dinoHeader->y + 21 - 4,
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4971      	ldr	r1, [pc, #452]	; (8002904 <main+0x82c>)
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fa02 	bl	8000b48 <__addsf3>
 8002744:	4603      	mov	r3, r0
 8002746:	4970      	ldr	r1, [pc, #448]	; (8002908 <main+0x830>)
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe f9fb 	bl	8000b44 <__aeabi_fsub>
 800274e:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002750:	4618      	mov	r0, r3
 8002752:	f7fe fcc7 	bl	80010e4 <__aeabi_f2iz>
 8002756:	4603      	mov	r3, r0
 8002758:	fa0f f883 	sxth.w	r8, r3
							dinoHeader->x + 23 - 7, dinoHeader->y + 21 - 4,
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	496a      	ldr	r1, [pc, #424]	; (800290c <main+0x834>)
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe f9f0 	bl	8000b48 <__addsf3>
 8002768:	4603      	mov	r3, r0
 800276a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe f9e8 	bl	8000b44 <__aeabi_fsub>
 8002774:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fcb4 	bl	80010e4 <__aeabi_f2iz>
 800277c:	4603      	mov	r3, r0
 800277e:	fa0f f983 	sxth.w	r9, r3
							ptr->x, 59, ptr->x + 9, 59 + 21)) {
 8002782:	4b5f      	ldr	r3, [pc, #380]	; (8002900 <main+0x828>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe fcab 	bl	80010e4 <__aeabi_f2iz>
 800278e:	4603      	mov	r3, r0
 8002790:	b21c      	sxth	r4, r3
							ptr->x, 59, ptr->x + 9, 59 + 21)) {
 8002792:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <main+0x828>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	495d      	ldr	r1, [pc, #372]	; (8002910 <main+0x838>)
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe f9d4 	bl	8000b48 <__addsf3>
 80027a0:	4603      	mov	r3, r0
					if (IsOverlapping(dinoHeader->x + 3, dinoHeader->y,
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe fc9e 	bl	80010e4 <__aeabi_f2iz>
 80027a8:	4603      	mov	r3, r0
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	2250      	movs	r2, #80	; 0x50
 80027ae:	9203      	str	r2, [sp, #12]
 80027b0:	9302      	str	r3, [sp, #8]
 80027b2:	233b      	movs	r3, #59	; 0x3b
 80027b4:	9301      	str	r3, [sp, #4]
 80027b6:	9400      	str	r4, [sp, #0]
 80027b8:	464b      	mov	r3, r9
 80027ba:	4642      	mov	r2, r8
 80027bc:	4631      	mov	r1, r6
 80027be:	4628      	mov	r0, r5
 80027c0:	f7ff fb0e 	bl	8001de0 <IsOverlapping>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d172      	bne.n	80028b0 <main+0x7d8>
						goto Dead;
					}
				}
				// If looped through all / next buffer is empty
				if (!ptr->next->full || ptr->next == plantHeader) {
 80027ca:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <main+0x828>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	7b9b      	ldrb	r3, [r3, #14]
 80027d2:	f083 0301 	eor.w	r3, r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10b      	bne.n	80027f4 <main+0x71c>
 80027dc:	4b48      	ldr	r3, [pc, #288]	; (8002900 <main+0x828>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d005      	beq.n	80027f4 <main+0x71c>
					break;
				}
				ptr = ptr->next;
 80027e8:	4b45      	ldr	r3, [pc, #276]	; (8002900 <main+0x828>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4a44      	ldr	r2, [pc, #272]	; (8002900 <main+0x828>)
 80027f0:	6013      	str	r3, [r2, #0]
				if (ptr->full) {
 80027f2:	e789      	b.n	8002708 <main+0x630>
			}

			// Render dino!
			// Dino is jumping
			if (isJumping) {
 80027f4:	4b3d      	ldr	r3, [pc, #244]	; (80028ec <main+0x814>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <main+0x72c>
				dinoHeader->bmp = (uint8_t*) DinoNormalS;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	4a45      	ldr	r2, [pc, #276]	; (8002914 <main+0x83c>)
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	e03a      	b.n	800287a <main+0x7a2>
			}
			// Fire dino
			else if (GetButton(FIRE_BUTTON)) {
 8002804:	2000      	movs	r0, #0
 8002806:	f7ff fa5b 	bl	8001cc0 <GetButton>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01a      	beq.n	8002846 <main+0x76e>
				dinoHeader->bmp = (uint8_t*) DinoFireRunning[(tick
						/ (int) (16 / overallSpeed)) % 2];
 8002810:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <main+0x818>)
 8002812:	681c      	ldr	r4, [r3, #0]
 8002814:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <main+0x81c>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4619      	mov	r1, r3
 800281a:	f04f 4083 	mov.w	r0, #1098907648	; 0x41800000
 800281e:	f7fe fb4f 	bl	8000ec0 <__aeabi_fdiv>
 8002822:	4603      	mov	r3, r0
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fc5d 	bl	80010e4 <__aeabi_f2iz>
 800282a:	4603      	mov	r3, r0
 800282c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002830:	f003 0201 	and.w	r2, r3, #1
				dinoHeader->bmp = (uint8_t*) DinoFireRunning[(tick
 8002834:	4613      	mov	r3, r2
 8002836:	015b      	lsls	r3, r3, #5
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4a36      	ldr	r2, [pc, #216]	; (8002918 <main+0x840>)
 800283e:	441a      	add	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e019      	b.n	800287a <main+0x7a2>
			}
			// Dino is running normally
			else {
				dinoHeader->bmp = (uint8_t*) DinoNormalRunning[(tick
						/ (int) (16 / overallSpeed)) % 2];
 8002846:	4b2a      	ldr	r3, [pc, #168]	; (80028f0 <main+0x818>)
 8002848:	681c      	ldr	r4, [r3, #0]
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <main+0x81c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	f04f 4083 	mov.w	r0, #1098907648	; 0x41800000
 8002854:	f7fe fb34 	bl	8000ec0 <__aeabi_fdiv>
 8002858:	4603      	mov	r3, r0
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fc42 	bl	80010e4 <__aeabi_f2iz>
 8002860:	4603      	mov	r3, r0
 8002862:	fbb4 f3f3 	udiv	r3, r4, r3
 8002866:	f003 0201 	and.w	r2, r3, #1
				dinoHeader->bmp = (uint8_t*) DinoNormalRunning[(tick
 800286a:	4613      	mov	r3, r2
 800286c:	015b      	lsls	r3, r3, #5
 800286e:	4413      	add	r3, r2
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4a2a      	ldr	r2, [pc, #168]	; (800291c <main+0x844>)
 8002874:	441a      	add	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	601a      	str	r2, [r3, #0]
			}
			LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <main+0x810>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7fe fdec 	bl	8001460 <LCD_LoadObjs>

			// Render game process
			LCD_Print("# # #", 4, 4, DRAWMODE_ADD, REPEATMODE_NONE,
 8002888:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <main+0x810>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	2300      	movs	r3, #0
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2300      	movs	r3, #0
 8002894:	2204      	movs	r2, #4
 8002896:	2104      	movs	r1, #4
 8002898:	4821      	ldr	r0, [pc, #132]	; (8002920 <main+0x848>)
 800289a:	f7ff f8ff 	bl	8001a9c <LCD_Print>
					flipStatus);

			tick++;
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <main+0x818>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <main+0x818>)
 80028a6:	6013      	str	r3, [r2, #0]
			LCD_UpdateFull(&MemDisp);
 80028a8:	481e      	ldr	r0, [pc, #120]	; (8002924 <main+0x84c>)
 80028aa:	f7fe fcf1 	bl	8001290 <LCD_UpdateFull>
			flipStatus = ((tick / 800) % 3 == 2) ? 1 : 0;
 80028ae:	e538      	b.n	8002322 <main+0x24a>
						goto Dead;
 80028b0:	bf00      	nop
		}

		// Dead handler (outer loop)
		if (0) {
			Dead:
			DisableButtonDownDetection(JUMP_BUTTON);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f7ff fa64 	bl	8001d80 <DisableButtonDownDetection>
			dinoHeader->bmp = (uint8_t*) DinoDead;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	4a1b      	ldr	r2, [pc, #108]	; (8002928 <main+0x850>)
 80028bc:	601a      	str	r2, [r3, #0]
			LCD_LoadObjs(dinoHeader, DRAWMODE_ADD, REPEATMODE_NONE, flipStatus);
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <main+0x810>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2200      	movs	r2, #0
 80028c4:	2100      	movs	r1, #0
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7fe fdca 	bl	8001460 <LCD_LoadObjs>
			LCD_UpdateFull(&MemDisp);
 80028cc:	4815      	ldr	r0, [pc, #84]	; (8002924 <main+0x84c>)
 80028ce:	f7fe fcdf 	bl	8001290 <LCD_UpdateFull>

			HAL_Delay(500);
 80028d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80028d6:	f000 fbfd 	bl	80030d4 <HAL_Delay>

			for (uint8_t i = 0; i < 4; i++) {
 80028da:	2300      	movs	r3, #0
 80028dc:	71bb      	strb	r3, [r7, #6]
 80028de:	e030      	b.n	8002942 <main+0x86a>
 80028e0:	41980000 	.word	0x41980000
 80028e4:	40400000 	.word	0x40400000
 80028e8:	2000016d 	.word	0x2000016d
 80028ec:	2000016c 	.word	0x2000016c
 80028f0:	20000174 	.word	0x20000174
 80028f4:	20000184 	.word	0x20000184
 80028f8:	41f00000 	.word	0x41f00000
 80028fc:	080060dc 	.word	0x080060dc
 8002900:	20000188 	.word	0x20000188
 8002904:	41b80000 	.word	0x41b80000
 8002908:	40e00000 	.word	0x40e00000
 800290c:	41a80000 	.word	0x41a80000
 8002910:	41100000 	.word	0x41100000
 8002914:	08006014 	.word	0x08006014
 8002918:	08006058 	.word	0x08006058
 800291c:	08005f90 	.word	0x08005f90
 8002920:	08005eb4 	.word	0x08005eb4
 8002924:	20000160 	.word	0x20000160
 8002928:	08005f4c 	.word	0x08005f4c
				LCD_Invert();
 800292c:	f7ff f87e 	bl	8001a2c <LCD_Invert>
				LCD_UpdateFull(&MemDisp);
 8002930:	481e      	ldr	r0, [pc, #120]	; (80029ac <main+0x8d4>)
 8002932:	f7fe fcad 	bl	8001290 <LCD_UpdateFull>
				HAL_Delay(40);
 8002936:	2028      	movs	r0, #40	; 0x28
 8002938:	f000 fbcc 	bl	80030d4 <HAL_Delay>
			for (uint8_t i = 0; i < 4; i++) {
 800293c:	79bb      	ldrb	r3, [r7, #6]
 800293e:	3301      	adds	r3, #1
 8002940:	71bb      	strb	r3, [r7, #6]
 8002942:	79bb      	ldrb	r3, [r7, #6]
 8002944:	2b03      	cmp	r3, #3
 8002946:	d9f1      	bls.n	800292c <main+0x854>
			}

			for (uint8_t l = 96; l > 28; l--) {
 8002948:	2360      	movs	r3, #96	; 0x60
 800294a:	717b      	strb	r3, [r7, #5]
 800294c:	e029      	b.n	80029a2 <main+0x8ca>
				uint8_t delayTime = (uint8_t) ((float) (96 - l) * 5 / 67);
 800294e:	797b      	ldrb	r3, [r7, #5]
 8002950:	f1c3 0360 	rsb	r3, r3, #96	; 0x60
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe f9ab 	bl	8000cb0 <__aeabi_i2f>
 800295a:	4603      	mov	r3, r0
 800295c:	4914      	ldr	r1, [pc, #80]	; (80029b0 <main+0x8d8>)
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe f9fa 	bl	8000d58 <__aeabi_fmul>
 8002964:	4603      	mov	r3, r0
 8002966:	4913      	ldr	r1, [pc, #76]	; (80029b4 <main+0x8dc>)
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe faa9 	bl	8000ec0 <__aeabi_fdiv>
 800296e:	4603      	mov	r3, r0
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fbdd 	bl	8001130 <__aeabi_f2uiz>
 8002976:	4603      	mov	r3, r0
 8002978:	713b      	strb	r3, [r7, #4]
				LCD_DrawLine(77, l, 1, DRAWMODE_CULL, flipStatus);
 800297a:	7979      	ldrb	r1, [r7, #5]
 800297c:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <main+0x8e0>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2301      	movs	r3, #1
 8002984:	2201      	movs	r2, #1
 8002986:	204d      	movs	r0, #77	; 0x4d
 8002988:	f7fe ff4c 	bl	8001824 <LCD_DrawLine>
				LCD_UpdateLine(&MemDisp, 77);
 800298c:	214d      	movs	r1, #77	; 0x4d
 800298e:	4807      	ldr	r0, [pc, #28]	; (80029ac <main+0x8d4>)
 8002990:	f7fe fcf0 	bl	8001374 <LCD_UpdateLine>
				HAL_Delay(delayTime);
 8002994:	793b      	ldrb	r3, [r7, #4]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fb9c 	bl	80030d4 <HAL_Delay>
			for (uint8_t l = 96; l > 28; l--) {
 800299c:	797b      	ldrb	r3, [r7, #5]
 800299e:	3b01      	subs	r3, #1
 80029a0:	717b      	strb	r3, [r7, #5]
 80029a2:	797b      	ldrb	r3, [r7, #5]
 80029a4:	2b1c      	cmp	r3, #28
 80029a6:	d8d2      	bhi.n	800294e <main+0x876>
		isJumping = 0, flipStatus = 0;
 80029a8:	f7ff bbc0 	b.w	800212c <main+0x54>
 80029ac:	20000160 	.word	0x20000160
 80029b0:	40a00000 	.word	0x40a00000
 80029b4:	42860000 	.word	0x42860000
 80029b8:	2000016d 	.word	0x2000016d

080029bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b090      	sub	sp, #64	; 0x40
 80029c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80029c2:	f107 0318 	add.w	r3, r7, #24
 80029c6:	2228      	movs	r2, #40	; 0x28
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 f8f0 	bl	8004bb0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	605a      	str	r2, [r3, #4]
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80029de:	2302      	movs	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029e2:	2301      	movs	r3, #1
 80029e4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029e6:	2310      	movs	r3, #16
 80029e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80029ea:	2302      	movs	r3, #2
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80029ee:	2300      	movs	r3, #0
 80029f0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80029f2:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80029f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80029f8:	f107 0318 	add.w	r3, r7, #24
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fe4f 	bl	80036a0 <HAL_RCC_OscConfig>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <SystemClock_Config+0x50>
		Error_Handler();
 8002a08:	f000 f900 	bl	8002c0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a0c:	230f      	movs	r3, #15
 8002a0e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a10:	2302      	movs	r3, #2
 8002a12:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a1c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002a22:	1d3b      	adds	r3, r7, #4
 8002a24:	2101      	movs	r1, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f001 f8bc 	bl	8003ba4 <HAL_RCC_ClockConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <SystemClock_Config+0x7a>
		Error_Handler();
 8002a32:	f000 f8eb 	bl	8002c0c <Error_Handler>
	}
}
 8002a36:	bf00      	nop
 8002a38:	3740      	adds	r7, #64	; 0x40
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a46:	4a18      	ldr	r2, [pc, #96]	; (8002aa8 <MX_SPI1_Init+0x68>)
 8002a48:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a4a:	4b16      	ldr	r3, [pc, #88]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a50:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a64:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a6a:	4b0e      	ldr	r3, [pc, #56]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a70:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002a72:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a74:	2210      	movs	r2, #16
 8002a76:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a78:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a8c:	220a      	movs	r2, #10
 8002a8e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002a90:	4804      	ldr	r0, [pc, #16]	; (8002aa4 <MX_SPI1_Init+0x64>)
 8002a92:	f001 f9ed 	bl	8003e70 <HAL_SPI_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_SPI1_Init+0x60>
		Error_Handler();
 8002a9c:	f000 f8b6 	bl	8002c0c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	200000c0 	.word	0x200000c0
 8002aa8:	40013000 	.word	0x40013000

08002aac <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ab2:	f107 0308 	add.w	r3, r7, #8
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002aca:	4a1f      	ldr	r2, [pc, #124]	; (8002b48 <MX_TIM1_Init+0x9c>)
 8002acc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1000 - 1;
 8002ace:	4b1d      	ldr	r3, [pc, #116]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002ad0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ad4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002ade:	2263      	movs	r2, #99	; 0x63
 8002ae0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002aee:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002af4:	4813      	ldr	r0, [pc, #76]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002af6:	f001 fc21 	bl	800433c <HAL_TIM_Base_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM1_Init+0x58>
		Error_Handler();
 8002b00:	f000 f884 	bl	8002c0c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b08:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	4619      	mov	r1, r3
 8002b10:	480c      	ldr	r0, [pc, #48]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002b12:	f001 fdbd 	bl	8004690 <HAL_TIM_ConfigClockSource>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM1_Init+0x74>
		Error_Handler();
 8002b1c:	f000 f876 	bl	8002c0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002b28:	463b      	mov	r3, r7
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4805      	ldr	r0, [pc, #20]	; (8002b44 <MX_TIM1_Init+0x98>)
 8002b2e:	f001 ff8f 	bl	8004a50 <HAL_TIMEx_MasterConfigSynchronization>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8002b38:	f000 f868 	bl	8002c0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000118 	.word	0x20000118
 8002b48:	40012c00 	.word	0x40012c00

08002b4c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002b52:	f107 0308 	add.w	r3, r7, #8
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
 8002b5e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b60:	4b1f      	ldr	r3, [pc, #124]	; (8002be0 <MX_GPIO_Init+0x94>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <MX_GPIO_Init+0x94>)
 8002b66:	f043 0304 	orr.w	r3, r3, #4
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <MX_GPIO_Init+0x94>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <MX_GPIO_Init+0x94>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <MX_GPIO_Init+0x94>)
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <MX_GPIO_Init+0x94>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8002b90:	2201      	movs	r2, #1
 8002b92:	2104      	movs	r1, #4
 8002b94:	4813      	ldr	r0, [pc, #76]	; (8002be4 <MX_GPIO_Init+0x98>)
 8002b96:	f000 fd6a 	bl	800366e <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	2110      	movs	r1, #16
 8002b9e:	4811      	ldr	r0, [pc, #68]	; (8002be4 <MX_GPIO_Init+0x98>)
 8002ba0:	f000 fd65 	bl	800366e <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_B_Pin CS_Pin */
	GPIO_InitStruct.Pin = LED_B_Pin | CS_Pin;
 8002ba4:	2314      	movs	r3, #20
 8002ba6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480a      	ldr	r0, [pc, #40]	; (8002be4 <MX_GPIO_Init+0x98>)
 8002bbc:	f000 fbbc 	bl	8003338 <HAL_GPIO_Init>

	/*Configure GPIO pins : KEY0_Pin KEY1_Pin */
	GPIO_InitStruct.Pin = KEY0_Pin | KEY1_Pin;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4805      	ldr	r0, [pc, #20]	; (8002be8 <MX_GPIO_Init+0x9c>)
 8002bd4:	f000 fbb0 	bl	8003338 <HAL_GPIO_Init>

}
 8002bd8:	bf00      	nop
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40010800 	.word	0x40010800
 8002be8:	40010c00 	.word	0x40010c00

08002bec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d101      	bne.n	8002c00 <HAL_TIM_PeriodElapsedCallback+0x14>
//		LEDB_TOGGLE;
		KeyScan();
 8002bfc:	f7fe ffe4 	bl	8001bc8 <KeyScan>
	}
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000118 	.word	0x20000118

08002c0c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c10:	b672      	cpsid	i
}
 8002c12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c14:	e7fe      	b.n	8002c14 <Error_Handler+0x8>
	...

08002c18 <FetchText>:
		0x0c, 0x60, 0x92, 0x00, 0xfe, 0x14, 0xc6, 0x38, 0x38, 0xc6, 0x0c, 0x10,
		0x7c, 0x30, 0xc6, 0x18, 0x00, 0xc6, 0x00, 0x10, 0x38, 0x70, 0xc6, 0x18,
		0x38, 0x7c, 0x00, 0x10, 0x10, 0x20, 0x7c, 0x18, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, };

void FetchText(uint8_t *TextBuf, char chr) {
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	460b      	mov	r3, r1
 8002c22:	70fb      	strb	r3, [r7, #3]
	uint8_t charSerialNum = -1;
 8002c24:	23ff      	movs	r3, #255	; 0xff
 8002c26:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 96; i++) {
 8002c28:	2300      	movs	r3, #0
 8002c2a:	73bb      	strb	r3, [r7, #14]
 8002c2c:	e00b      	b.n	8002c46 <FetchText+0x2e>
		if (chr == CharList[i]) {
 8002c2e:	7bbb      	ldrb	r3, [r7, #14]
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <FetchText+0x88>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d102      	bne.n	8002c40 <FetchText+0x28>
			charSerialNum = i;
 8002c3a:	7bbb      	ldrb	r3, [r7, #14]
 8002c3c:	73fb      	strb	r3, [r7, #15]
			break;
 8002c3e:	e005      	b.n	8002c4c <FetchText+0x34>
	for (uint8_t i = 0; i < 96; i++) {
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	3301      	adds	r3, #1
 8002c44:	73bb      	strb	r3, [r7, #14]
 8002c46:	7bbb      	ldrb	r3, [r7, #14]
 8002c48:	2b5f      	cmp	r3, #95	; 0x5f
 8002c4a:	d9f0      	bls.n	8002c2e <FetchText+0x16>
	if (charSerialNum == -1) {
		memset(TextBuf, 0x00, 8);
		return;
	}

	uint8_t charLookupX = charSerialNum % 8;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	72fb      	strb	r3, [r7, #11]
	uint8_t charLookupY = 8 * (charSerialNum / 8);
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	08db      	lsrs	r3, r3, #3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	72bb      	strb	r3, [r7, #10]
	uint8_t n = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	737b      	strb	r3, [r7, #13]

	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 8002c62:	7abb      	ldrb	r3, [r7, #10]
 8002c64:	733b      	strb	r3, [r7, #12]
 8002c66:	e011      	b.n	8002c8c <FetchText+0x74>
		TextBuf[n] = *((uint8_t*) PressStartStandard96 + y * 8 + charLookupX);
 8002c68:	7b3b      	ldrb	r3, [r7, #12]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	4413      	add	r3, r2
 8002c72:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <FetchText+0x8c>)
 8002c74:	441a      	add	r2, r3
 8002c76:	7b7b      	ldrb	r3, [r7, #13]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	440b      	add	r3, r1
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	701a      	strb	r2, [r3, #0]
		n++;
 8002c80:	7b7b      	ldrb	r3, [r7, #13]
 8002c82:	3301      	adds	r3, #1
 8002c84:	737b      	strb	r3, [r7, #13]
	for (uint8_t y = charLookupY; y < charLookupY + 8; y++) {
 8002c86:	7b3b      	ldrb	r3, [r7, #12]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	733b      	strb	r3, [r7, #12]
 8002c8c:	7abb      	ldrb	r3, [r7, #10]
 8002c8e:	1dda      	adds	r2, r3, #7
 8002c90:	7b3b      	ldrb	r3, [r7, #12]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dae8      	bge.n	8002c68 <FetchText+0x50>
	}
}
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	08006720 	.word	0x08006720
 8002ca4:	08006780 	.word	0x08006780

08002ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6193      	str	r3, [r2, #24]
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <HAL_MspInit+0x5c>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <HAL_MspInit+0x5c>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cda:	607b      	str	r3, [r7, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002cde:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_MspInit+0x60>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <HAL_MspInit+0x60>)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40010000 	.word	0x40010000

08002d0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <HAL_SPI_MspInit+0x70>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d123      	bne.n	8002d74 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <HAL_SPI_MspInit+0x74>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <HAL_SPI_MspInit+0x74>)
 8002d32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <HAL_SPI_MspInit+0x74>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d44:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <HAL_SPI_MspInit+0x74>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_SPI_MspInit+0x74>)
 8002d4a:	f043 0304 	orr.w	r3, r3, #4
 8002d4e:	6193      	str	r3, [r2, #24]
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_SPI_MspInit+0x74>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002d5c:	23a0      	movs	r3, #160	; 0xa0
 8002d5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d68:	f107 0310 	add.w	r3, r7, #16
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4805      	ldr	r0, [pc, #20]	; (8002d84 <HAL_SPI_MspInit+0x78>)
 8002d70:	f000 fae2 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d74:	bf00      	nop
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40013000 	.word	0x40013000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40010800 	.word	0x40010800

08002d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0d      	ldr	r2, [pc, #52]	; (8002dcc <HAL_TIM_Base_MspInit+0x44>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d113      	bne.n	8002dc2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	; (8002dd0 <HAL_TIM_Base_MspInit+0x48>)
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_TIM_Base_MspInit+0x48>)
 8002da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002da4:	6193      	str	r3, [r2, #24]
 8002da6:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_TIM_Base_MspInit+0x48>)
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	2019      	movs	r0, #25
 8002db8:	f000 fa87 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002dbc:	2019      	movs	r0, #25
 8002dbe:	f000 faa0 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40012c00 	.word	0x40012c00
 8002dd0:	40021000 	.word	0x40021000

08002dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <NMI_Handler+0x4>

08002dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dde:	e7fe      	b.n	8002dde <HardFault_Handler+0x4>

08002de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <MemManage_Handler+0x4>

08002de6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de6:	b480      	push	{r7}
 8002de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dea:	e7fe      	b.n	8002dea <BusFault_Handler+0x4>

08002dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <UsageFault_Handler+0x4>

08002df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df2:	b480      	push	{r7}
 8002df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr

08002e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1a:	f000 f93f 	bl	800309c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <TIM1_UP_IRQHandler+0x10>)
 8002e2a:	f001 fb29 	bl	8004480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000118 	.word	0x20000118

08002e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
	return 1;
 8002e3c:	2301      	movs	r3, #1
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <_kill>:

int _kill(int pid, int sig)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e50:	f001 fe6e 	bl	8004b30 <__errno>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2216      	movs	r2, #22
 8002e58:	601a      	str	r2, [r3, #0]
	return -1;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_exit>:

void _exit (int status)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffe7 	bl	8002e46 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e78:	e7fe      	b.n	8002e78 <_exit+0x12>

08002e7a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e00a      	b.n	8002ea2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e8c:	f3af 8000 	nop.w
 8002e90:	4601      	mov	r1, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	60ba      	str	r2, [r7, #8]
 8002e98:	b2ca      	uxtb	r2, r1
 8002e9a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	dbf0      	blt.n	8002e8c <_read+0x12>
	}

return len;
 8002eaa:	687b      	ldr	r3, [r7, #4]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	e009      	b.n	8002eda <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1c5a      	adds	r2, r3, #1
 8002eca:	60ba      	str	r2, [r7, #8]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	dbf1      	blt.n	8002ec6 <_write+0x12>
	}
	return len;
 8002ee2:	687b      	ldr	r3, [r7, #4]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <_close>:

int _close(int file)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f12:	605a      	str	r2, [r3, #4]
	return 0;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <_isatty>:

int _isatty(int file)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	return 1;
 8002f28:	2301      	movs	r3, #1
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <_sbrk+0x5c>)
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <_sbrk+0x60>)
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <_sbrk+0x64>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <_sbrk+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f7c:	f001 fdd8 	bl	8004b30 <__errno>
 8002f80:	4603      	mov	r3, r0
 8002f82:	220c      	movs	r2, #12
 8002f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	e009      	b.n	8002fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <_sbrk+0x64>)
 8002f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	20005000 	.word	0x20005000
 8002fac:	00000400 	.word	0x00000400
 8002fb0:	2000018c 	.word	0x2000018c
 8002fb4:	200001a8 	.word	0x200001a8

08002fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <Reset_Handler>:
 8002fc4:	480c      	ldr	r0, [pc, #48]	; (8002ff8 <LoopFillZerobss+0x12>)
 8002fc6:	490d      	ldr	r1, [pc, #52]	; (8002ffc <LoopFillZerobss+0x16>)
 8002fc8:	4a0d      	ldr	r2, [pc, #52]	; (8003000 <LoopFillZerobss+0x1a>)
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e002      	b.n	8002fd4 <LoopCopyDataInit>

08002fce <CopyDataInit>:
 8002fce:	58d4      	ldr	r4, [r2, r3]
 8002fd0:	50c4      	str	r4, [r0, r3]
 8002fd2:	3304      	adds	r3, #4

08002fd4 <LoopCopyDataInit>:
 8002fd4:	18c4      	adds	r4, r0, r3
 8002fd6:	428c      	cmp	r4, r1
 8002fd8:	d3f9      	bcc.n	8002fce <CopyDataInit>
 8002fda:	4a0a      	ldr	r2, [pc, #40]	; (8003004 <LoopFillZerobss+0x1e>)
 8002fdc:	4c0a      	ldr	r4, [pc, #40]	; (8003008 <LoopFillZerobss+0x22>)
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e001      	b.n	8002fe6 <LoopFillZerobss>

08002fe2 <FillZerobss>:
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	3204      	adds	r2, #4

08002fe6 <LoopFillZerobss>:
 8002fe6:	42a2      	cmp	r2, r4
 8002fe8:	d3fb      	bcc.n	8002fe2 <FillZerobss>
 8002fea:	f7ff ffe5 	bl	8002fb8 <SystemInit>
 8002fee:	f001 fda5 	bl	8004b3c <__libc_init_array>
 8002ff2:	f7ff f871 	bl	80020d8 <main>
 8002ff6:	4770      	bx	lr
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	20000078 	.word	0x20000078
 8003000:	08006be0 	.word	0x08006be0
 8003004:	20000078 	.word	0x20000078
 8003008:	200001a4 	.word	0x200001a4

0800300c <ADC1_2_IRQHandler>:
 800300c:	e7fe      	b.n	800300c <ADC1_2_IRQHandler>
	...

08003010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <HAL_Init+0x28>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <HAL_Init+0x28>)
 800301a:	f043 0310 	orr.w	r3, r3, #16
 800301e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003020:	2003      	movs	r0, #3
 8003022:	f000 f947 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003026:	200f      	movs	r0, #15
 8003028:	f000 f808 	bl	800303c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800302c:	f7ff fe3c 	bl	8002ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40022000 	.word	0x40022000

0800303c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_InitTick+0x54>)
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <HAL_InitTick+0x58>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003052:	fbb3 f3f1 	udiv	r3, r3, r1
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f95f 	bl	800331e <HAL_SYSTICK_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e00e      	b.n	8003088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b0f      	cmp	r3, #15
 800306e:	d80a      	bhi.n	8003086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003070:	2200      	movs	r2, #0
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	f04f 30ff 	mov.w	r0, #4294967295
 8003078:	f000 f927 	bl	80032ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800307c:	4a06      	ldr	r2, [pc, #24]	; (8003098 <HAL_InitTick+0x5c>)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000008 	.word	0x20000008
 8003094:	20000010 	.word	0x20000010
 8003098:	2000000c 	.word	0x2000000c

0800309c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_IncTick+0x1c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_IncTick+0x20>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4413      	add	r3, r2
 80030ac:	4a03      	ldr	r2, [pc, #12]	; (80030bc <HAL_IncTick+0x20>)
 80030ae:	6013      	str	r3, [r2, #0]
}
 80030b0:	bf00      	nop
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr
 80030b8:	20000010 	.word	0x20000010
 80030bc:	20000190 	.word	0x20000190

080030c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return uwTick;
 80030c4:	4b02      	ldr	r3, [pc, #8]	; (80030d0 <HAL_GetTick+0x10>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr
 80030d0:	20000190 	.word	0x20000190

080030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d005      	beq.n	80030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_Delay+0x44>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030fa:	bf00      	nop
 80030fc:	f7ff ffe0 	bl	80030c0 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f7      	bhi.n	80030fc <HAL_Delay+0x28>
  {
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000010 	.word	0x20000010

0800311c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	; (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <__NVIC_GetPriorityGrouping+0x18>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0307 	and.w	r3, r3, #7
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db0b      	blt.n	80031aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4906      	ldr	r1, [pc, #24]	; (80031b4 <__NVIC_EnableIRQ+0x34>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db0a      	blt.n	80031e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <__NVIC_SetPriority+0x4c>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e0:	e00a      	b.n	80031f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4908      	ldr	r1, [pc, #32]	; (8003208 <__NVIC_SetPriority+0x50>)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3b04      	subs	r3, #4
 80031f0:	0112      	lsls	r2, r2, #4
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	440b      	add	r3, r1
 80031f6:	761a      	strb	r2, [r3, #24]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bc80      	pop	{r7}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e100 	.word	0xe000e100
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf28      	it	cs
 800322a:	2304      	movcs	r3, #4
 800322c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3304      	adds	r3, #4
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <NVIC_EncodePriority+0x30>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3b03      	subs	r3, #3
 800323a:	e000      	b.n	800323e <NVIC_EncodePriority+0x32>
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	401a      	ands	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003254:	f04f 31ff 	mov.w	r1, #4294967295
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	43d9      	mvns	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	4313      	orrs	r3, r2
         );
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d301      	bcc.n	8003286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003282:	2301      	movs	r3, #1
 8003284:	e00f      	b.n	80032a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <SysTick_Config+0x40>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328e:	210f      	movs	r1, #15
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f7ff ff90 	bl	80031b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <SysTick_Config+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Config+0x40>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff2d 	bl	800311c <__NVIC_SetPriorityGrouping>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032dc:	f7ff ff42 	bl	8003164 <__NVIC_GetPriorityGrouping>
 80032e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff ff90 	bl	800320c <NVIC_EncodePriority>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff5f 	bl	80031b8 <__NVIC_SetPriority>
}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff35 	bl	8003180 <__NVIC_EnableIRQ>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffa2 	bl	8003270 <SysTick_Config>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b08b      	sub	sp, #44	; 0x2c
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800334a:	e169      	b.n	8003620 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800334c:	2201      	movs	r2, #1
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	429a      	cmp	r2, r3
 8003366:	f040 8158 	bne.w	800361a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4a9a      	ldr	r2, [pc, #616]	; (80035d8 <HAL_GPIO_Init+0x2a0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d05e      	beq.n	8003432 <HAL_GPIO_Init+0xfa>
 8003374:	4a98      	ldr	r2, [pc, #608]	; (80035d8 <HAL_GPIO_Init+0x2a0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d875      	bhi.n	8003466 <HAL_GPIO_Init+0x12e>
 800337a:	4a98      	ldr	r2, [pc, #608]	; (80035dc <HAL_GPIO_Init+0x2a4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d058      	beq.n	8003432 <HAL_GPIO_Init+0xfa>
 8003380:	4a96      	ldr	r2, [pc, #600]	; (80035dc <HAL_GPIO_Init+0x2a4>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d86f      	bhi.n	8003466 <HAL_GPIO_Init+0x12e>
 8003386:	4a96      	ldr	r2, [pc, #600]	; (80035e0 <HAL_GPIO_Init+0x2a8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d052      	beq.n	8003432 <HAL_GPIO_Init+0xfa>
 800338c:	4a94      	ldr	r2, [pc, #592]	; (80035e0 <HAL_GPIO_Init+0x2a8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d869      	bhi.n	8003466 <HAL_GPIO_Init+0x12e>
 8003392:	4a94      	ldr	r2, [pc, #592]	; (80035e4 <HAL_GPIO_Init+0x2ac>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d04c      	beq.n	8003432 <HAL_GPIO_Init+0xfa>
 8003398:	4a92      	ldr	r2, [pc, #584]	; (80035e4 <HAL_GPIO_Init+0x2ac>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d863      	bhi.n	8003466 <HAL_GPIO_Init+0x12e>
 800339e:	4a92      	ldr	r2, [pc, #584]	; (80035e8 <HAL_GPIO_Init+0x2b0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d046      	beq.n	8003432 <HAL_GPIO_Init+0xfa>
 80033a4:	4a90      	ldr	r2, [pc, #576]	; (80035e8 <HAL_GPIO_Init+0x2b0>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d85d      	bhi.n	8003466 <HAL_GPIO_Init+0x12e>
 80033aa:	2b12      	cmp	r3, #18
 80033ac:	d82a      	bhi.n	8003404 <HAL_GPIO_Init+0xcc>
 80033ae:	2b12      	cmp	r3, #18
 80033b0:	d859      	bhi.n	8003466 <HAL_GPIO_Init+0x12e>
 80033b2:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <HAL_GPIO_Init+0x80>)
 80033b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b8:	08003433 	.word	0x08003433
 80033bc:	0800340d 	.word	0x0800340d
 80033c0:	0800341f 	.word	0x0800341f
 80033c4:	08003461 	.word	0x08003461
 80033c8:	08003467 	.word	0x08003467
 80033cc:	08003467 	.word	0x08003467
 80033d0:	08003467 	.word	0x08003467
 80033d4:	08003467 	.word	0x08003467
 80033d8:	08003467 	.word	0x08003467
 80033dc:	08003467 	.word	0x08003467
 80033e0:	08003467 	.word	0x08003467
 80033e4:	08003467 	.word	0x08003467
 80033e8:	08003467 	.word	0x08003467
 80033ec:	08003467 	.word	0x08003467
 80033f0:	08003467 	.word	0x08003467
 80033f4:	08003467 	.word	0x08003467
 80033f8:	08003467 	.word	0x08003467
 80033fc:	08003415 	.word	0x08003415
 8003400:	08003429 	.word	0x08003429
 8003404:	4a79      	ldr	r2, [pc, #484]	; (80035ec <HAL_GPIO_Init+0x2b4>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800340a:	e02c      	b.n	8003466 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	623b      	str	r3, [r7, #32]
          break;
 8003412:	e029      	b.n	8003468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	3304      	adds	r3, #4
 800341a:	623b      	str	r3, [r7, #32]
          break;
 800341c:	e024      	b.n	8003468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	3308      	adds	r3, #8
 8003424:	623b      	str	r3, [r7, #32]
          break;
 8003426:	e01f      	b.n	8003468 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	330c      	adds	r3, #12
 800342e:	623b      	str	r3, [r7, #32]
          break;
 8003430:	e01a      	b.n	8003468 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800343a:	2304      	movs	r3, #4
 800343c:	623b      	str	r3, [r7, #32]
          break;
 800343e:	e013      	b.n	8003468 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003448:	2308      	movs	r3, #8
 800344a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	611a      	str	r2, [r3, #16]
          break;
 8003452:	e009      	b.n	8003468 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003454:	2308      	movs	r3, #8
 8003456:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69fa      	ldr	r2, [r7, #28]
 800345c:	615a      	str	r2, [r3, #20]
          break;
 800345e:	e003      	b.n	8003468 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003460:	2300      	movs	r3, #0
 8003462:	623b      	str	r3, [r7, #32]
          break;
 8003464:	e000      	b.n	8003468 <HAL_GPIO_Init+0x130>
          break;
 8003466:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2bff      	cmp	r3, #255	; 0xff
 800346c:	d801      	bhi.n	8003472 <HAL_GPIO_Init+0x13a>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	e001      	b.n	8003476 <HAL_GPIO_Init+0x13e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3304      	adds	r3, #4
 8003476:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2bff      	cmp	r3, #255	; 0xff
 800347c:	d802      	bhi.n	8003484 <HAL_GPIO_Init+0x14c>
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	e002      	b.n	800348a <HAL_GPIO_Init+0x152>
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	3b08      	subs	r3, #8
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	210f      	movs	r1, #15
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	401a      	ands	r2, r3
 800349c:	6a39      	ldr	r1, [r7, #32]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	fa01 f303 	lsl.w	r3, r1, r3
 80034a4:	431a      	orrs	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80b1 	beq.w	800361a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_GPIO_Init+0x2b8>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	4a4c      	ldr	r2, [pc, #304]	; (80035f0 <HAL_GPIO_Init+0x2b8>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6193      	str	r3, [r2, #24]
 80034c4:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <HAL_GPIO_Init+0x2b8>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034d0:	4a48      	ldr	r2, [pc, #288]	; (80035f4 <HAL_GPIO_Init+0x2bc>)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	089b      	lsrs	r3, r3, #2
 80034d6:	3302      	adds	r3, #2
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	220f      	movs	r2, #15
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4013      	ands	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a40      	ldr	r2, [pc, #256]	; (80035f8 <HAL_GPIO_Init+0x2c0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_GPIO_Init+0x1ec>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3f      	ldr	r2, [pc, #252]	; (80035fc <HAL_GPIO_Init+0x2c4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00d      	beq.n	8003520 <HAL_GPIO_Init+0x1e8>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3e      	ldr	r2, [pc, #248]	; (8003600 <HAL_GPIO_Init+0x2c8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <HAL_GPIO_Init+0x1e4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3d      	ldr	r2, [pc, #244]	; (8003604 <HAL_GPIO_Init+0x2cc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d101      	bne.n	8003518 <HAL_GPIO_Init+0x1e0>
 8003514:	2303      	movs	r3, #3
 8003516:	e006      	b.n	8003526 <HAL_GPIO_Init+0x1ee>
 8003518:	2304      	movs	r3, #4
 800351a:	e004      	b.n	8003526 <HAL_GPIO_Init+0x1ee>
 800351c:	2302      	movs	r3, #2
 800351e:	e002      	b.n	8003526 <HAL_GPIO_Init+0x1ee>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_GPIO_Init+0x1ee>
 8003524:	2300      	movs	r3, #0
 8003526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003528:	f002 0203 	and.w	r2, r2, #3
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	4093      	lsls	r3, r2
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003536:	492f      	ldr	r1, [pc, #188]	; (80035f4 <HAL_GPIO_Init+0x2bc>)
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	3302      	adds	r3, #2
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d006      	beq.n	800355e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003550:	4b2d      	ldr	r3, [pc, #180]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	492c      	ldr	r1, [pc, #176]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800355e:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	43db      	mvns	r3, r3
 8003566:	4928      	ldr	r1, [pc, #160]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 8003568:	4013      	ands	r3, r2
 800356a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d006      	beq.n	8003586 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003578:	4b23      	ldr	r3, [pc, #140]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	4922      	ldr	r1, [pc, #136]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003586:	4b20      	ldr	r3, [pc, #128]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	43db      	mvns	r3, r3
 800358e:	491e      	ldr	r1, [pc, #120]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 8003590:	4013      	ands	r3, r2
 8003592:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d006      	beq.n	80035ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	4918      	ldr	r1, [pc, #96]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	608b      	str	r3, [r1, #8]
 80035ac:	e006      	b.n	80035bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035ae:	4b16      	ldr	r3, [pc, #88]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	43db      	mvns	r3, r3
 80035b6:	4914      	ldr	r1, [pc, #80]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 80035b8:	4013      	ands	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d021      	beq.n	800360c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	490e      	ldr	r1, [pc, #56]	; (8003608 <HAL_GPIO_Init+0x2d0>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60cb      	str	r3, [r1, #12]
 80035d4:	e021      	b.n	800361a <HAL_GPIO_Init+0x2e2>
 80035d6:	bf00      	nop
 80035d8:	10320000 	.word	0x10320000
 80035dc:	10310000 	.word	0x10310000
 80035e0:	10220000 	.word	0x10220000
 80035e4:	10210000 	.word	0x10210000
 80035e8:	10120000 	.word	0x10120000
 80035ec:	10110000 	.word	0x10110000
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40010000 	.word	0x40010000
 80035f8:	40010800 	.word	0x40010800
 80035fc:	40010c00 	.word	0x40010c00
 8003600:	40011000 	.word	0x40011000
 8003604:	40011400 	.word	0x40011400
 8003608:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_GPIO_Init+0x304>)
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	43db      	mvns	r3, r3
 8003614:	4909      	ldr	r1, [pc, #36]	; (800363c <HAL_GPIO_Init+0x304>)
 8003616:	4013      	ands	r3, r2
 8003618:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	3301      	adds	r3, #1
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	fa22 f303 	lsr.w	r3, r2, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	f47f ae8e 	bne.w	800334c <HAL_GPIO_Init+0x14>
  }
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop
 8003634:	372c      	adds	r7, #44	; 0x2c
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	40010400 	.word	0x40010400

08003640 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	887b      	ldrh	r3, [r7, #2]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d002      	beq.n	800365e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e001      	b.n	8003662 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800365e:	2300      	movs	r3, #0
 8003660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	bc80      	pop	{r7}
 800366c:	4770      	bx	lr

0800366e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]
 800367a:	4613      	mov	r3, r2
 800367c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800367e:	787b      	ldrb	r3, [r7, #1]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003684:	887a      	ldrh	r2, [r7, #2]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800368a:	e003      	b.n	8003694 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	041a      	lsls	r2, r3, #16
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	611a      	str	r2, [r3, #16]
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
	...

080036a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e272      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8087 	beq.w	80037ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c0:	4b92      	ldr	r3, [pc, #584]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d00c      	beq.n	80036e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036cc:	4b8f      	ldr	r3, [pc, #572]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d112      	bne.n	80036fe <HAL_RCC_OscConfig+0x5e>
 80036d8:	4b8c      	ldr	r3, [pc, #560]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e4:	d10b      	bne.n	80036fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e6:	4b89      	ldr	r3, [pc, #548]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d06c      	beq.n	80037cc <HAL_RCC_OscConfig+0x12c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d168      	bne.n	80037cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e24c      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x76>
 8003708:	4b80      	ldr	r3, [pc, #512]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7f      	ldr	r2, [pc, #508]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 800370e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	e02e      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x98>
 800371e:	4b7b      	ldr	r3, [pc, #492]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7a      	ldr	r2, [pc, #488]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b78      	ldr	r3, [pc, #480]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a77      	ldr	r2, [pc, #476]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e01d      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0xbc>
 8003742:	4b72      	ldr	r3, [pc, #456]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a71      	ldr	r2, [pc, #452]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4b6f      	ldr	r3, [pc, #444]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a6e      	ldr	r2, [pc, #440]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0xd4>
 800375c:	4b6b      	ldr	r3, [pc, #428]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a6a      	ldr	r2, [pc, #424]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b68      	ldr	r3, [pc, #416]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a67      	ldr	r2, [pc, #412]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003772:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377c:	f7ff fca0 	bl	80030c0 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7ff fc9c 	bl	80030c0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	; 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e200      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003796:	4b5d      	ldr	r3, [pc, #372]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0xe4>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7ff fc8c 	bl	80030c0 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ac:	f7ff fc88 	bl	80030c0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	; 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e1ec      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037be:	4b53      	ldr	r3, [pc, #332]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x10c>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d063      	beq.n	80038a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037da:	4b4c      	ldr	r3, [pc, #304]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00b      	beq.n	80037fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037e6:	4b49      	ldr	r3, [pc, #292]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d11c      	bne.n	800382c <HAL_RCC_OscConfig+0x18c>
 80037f2:	4b46      	ldr	r3, [pc, #280]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d116      	bne.n	800382c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fe:	4b43      	ldr	r3, [pc, #268]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <HAL_RCC_OscConfig+0x176>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d001      	beq.n	8003816 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e1c0      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003816:	4b3d      	ldr	r3, [pc, #244]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4939      	ldr	r1, [pc, #228]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003826:	4313      	orrs	r3, r2
 8003828:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	e03a      	b.n	80038a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003836:	2201      	movs	r2, #1
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7ff fc41 	bl	80030c0 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003842:	f7ff fc3d 	bl	80030c0 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e1a1      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003854:	4b2d      	ldr	r3, [pc, #180]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	00db      	lsls	r3, r3, #3
 800386e:	4927      	ldr	r1, [pc, #156]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
 8003874:	e015      	b.n	80038a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_RCC_OscConfig+0x270>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387c:	f7ff fc20 	bl	80030c0 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003884:	f7ff fc1c 	bl	80030c0 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e180      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d03a      	beq.n	8003924 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d019      	beq.n	80038ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b6:	4b17      	ldr	r3, [pc, #92]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80038b8:	2201      	movs	r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038bc:	f7ff fc00 	bl	80030c0 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c4:	f7ff fbfc 	bl	80030c0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e160      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <HAL_RCC_OscConfig+0x26c>)
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038e2:	2001      	movs	r0, #1
 80038e4:	f000 faa6 	bl	8003e34 <RCC_Delay>
 80038e8:	e01c      	b.n	8003924 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f0:	f7ff fbe6 	bl	80030c0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f6:	e00f      	b.n	8003918 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f8:	f7ff fbe2 	bl	80030c0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d908      	bls.n	8003918 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e146      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
 800390a:	bf00      	nop
 800390c:	40021000 	.word	0x40021000
 8003910:	42420000 	.word	0x42420000
 8003914:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003918:	4b92      	ldr	r3, [pc, #584]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e9      	bne.n	80038f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80a6 	beq.w	8003a7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003932:	2300      	movs	r3, #0
 8003934:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003936:	4b8b      	ldr	r3, [pc, #556]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10d      	bne.n	800395e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003942:	4b88      	ldr	r3, [pc, #544]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	4a87      	ldr	r2, [pc, #540]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394c:	61d3      	str	r3, [r2, #28]
 800394e:	4b85      	ldr	r3, [pc, #532]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	60bb      	str	r3, [r7, #8]
 8003958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	4b82      	ldr	r3, [pc, #520]	; (8003b68 <HAL_RCC_OscConfig+0x4c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003966:	2b00      	cmp	r3, #0
 8003968:	d118      	bne.n	800399c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800396a:	4b7f      	ldr	r3, [pc, #508]	; (8003b68 <HAL_RCC_OscConfig+0x4c8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7e      	ldr	r2, [pc, #504]	; (8003b68 <HAL_RCC_OscConfig+0x4c8>)
 8003970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003976:	f7ff fba3 	bl	80030c0 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397e:	f7ff fb9f 	bl	80030c0 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b64      	cmp	r3, #100	; 0x64
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e103      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003990:	4b75      	ldr	r3, [pc, #468]	; (8003b68 <HAL_RCC_OscConfig+0x4c8>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d106      	bne.n	80039b2 <HAL_RCC_OscConfig+0x312>
 80039a4:	4b6f      	ldr	r3, [pc, #444]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6213      	str	r3, [r2, #32]
 80039b0:	e02d      	b.n	8003a0e <HAL_RCC_OscConfig+0x36e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x334>
 80039ba:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4a69      	ldr	r2, [pc, #420]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	4b67      	ldr	r3, [pc, #412]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4a66      	ldr	r2, [pc, #408]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	6213      	str	r3, [r2, #32]
 80039d2:	e01c      	b.n	8003a0e <HAL_RCC_OscConfig+0x36e>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b05      	cmp	r3, #5
 80039da:	d10c      	bne.n	80039f6 <HAL_RCC_OscConfig+0x356>
 80039dc:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a60      	ldr	r2, [pc, #384]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	f043 0304 	orr.w	r3, r3, #4
 80039e6:	6213      	str	r3, [r2, #32]
 80039e8:	4b5e      	ldr	r3, [pc, #376]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	4a5d      	ldr	r2, [pc, #372]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6213      	str	r3, [r2, #32]
 80039f4:	e00b      	b.n	8003a0e <HAL_RCC_OscConfig+0x36e>
 80039f6:	4b5b      	ldr	r3, [pc, #364]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4a5a      	ldr	r2, [pc, #360]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	6213      	str	r3, [r2, #32]
 8003a02:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	6a1b      	ldr	r3, [r3, #32]
 8003a06:	4a57      	ldr	r2, [pc, #348]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d015      	beq.n	8003a42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7ff fb53 	bl	80030c0 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1c:	e00a      	b.n	8003a34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1e:	f7ff fb4f 	bl	80030c0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0b1      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0ee      	beq.n	8003a1e <HAL_RCC_OscConfig+0x37e>
 8003a40:	e014      	b.n	8003a6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7ff fb3d 	bl	80030c0 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7ff fb39 	bl	80030c0 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e09b      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	4b40      	ldr	r3, [pc, #256]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1ee      	bne.n	8003a4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4b3c      	ldr	r3, [pc, #240]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	4a3b      	ldr	r2, [pc, #236]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8087 	beq.w	8003b96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a88:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d061      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d146      	bne.n	8003b2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <HAL_RCC_OscConfig+0x4cc>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa2:	f7ff fb0d 	bl	80030c0 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7ff fb09 	bl	80030c0 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e06d      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abc:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f0      	bne.n	8003aaa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad0:	d108      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ad2:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4921      	ldr	r1, [pc, #132]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae4:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a19      	ldr	r1, [r3, #32]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	430b      	orrs	r3, r1
 8003af6:	491b      	ldr	r1, [pc, #108]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003afc:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x4cc>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b02:	f7ff fadd 	bl	80030c0 <HAL_GetTick>
 8003b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b08:	e008      	b.n	8003b1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0a:	f7ff fad9 	bl	80030c0 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d901      	bls.n	8003b1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e03d      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f0      	beq.n	8003b0a <HAL_RCC_OscConfig+0x46a>
 8003b28:	e035      	b.n	8003b96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <HAL_RCC_OscConfig+0x4cc>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7ff fac6 	bl	80030c0 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b38:	f7ff fac2 	bl	80030c0 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e026      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_RCC_OscConfig+0x4c4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x498>
 8003b56:	e01e      	b.n	8003b96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e019      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_OscConfig+0x500>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d106      	bne.n	8003b92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d001      	beq.n	8003b96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40021000 	.word	0x40021000

08003ba4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0d0      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb8:	4b6a      	ldr	r3, [pc, #424]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d910      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc6:	4b67      	ldr	r3, [pc, #412]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 0207 	bic.w	r2, r3, #7
 8003bce:	4965      	ldr	r1, [pc, #404]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b63      	ldr	r3, [pc, #396]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0b8      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c18:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a52      	ldr	r2, [pc, #328]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c24:	4b50      	ldr	r3, [pc, #320]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	494d      	ldr	r1, [pc, #308]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d040      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d115      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e07f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c62:	4b41      	ldr	r3, [pc, #260]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e073      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c72:	4b3d      	ldr	r3, [pc, #244]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e06b      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c82:	4b39      	ldr	r3, [pc, #228]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f023 0203 	bic.w	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4936      	ldr	r1, [pc, #216]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c94:	f7ff fa14 	bl	80030c0 <HAL_GetTick>
 8003c98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9c:	f7ff fa10 	bl	80030c0 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e053      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 020c 	and.w	r2, r3, #12
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1eb      	bne.n	8003c9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc4:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d210      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 0207 	bic.w	r2, r3, #7
 8003cda:	4922      	ldr	r1, [pc, #136]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e032      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4916      	ldr	r1, [pc, #88]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	490e      	ldr	r1, [pc, #56]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d32:	f000 f821 	bl	8003d78 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490a      	ldr	r1, [pc, #40]	; (8003d6c <HAL_RCC_ClockConfig+0x1c8>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4a:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <HAL_RCC_ClockConfig+0x1cc>)
 8003d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1d0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff f972 	bl	800303c <HAL_InitTick>

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40022000 	.word	0x40022000
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	08006a80 	.word	0x08006a80
 8003d70:	20000008 	.word	0x20000008
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d78:	b490      	push	{r4, r7}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d80:	1d3c      	adds	r4, r7, #4
 8003d82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d88:	f240 2301 	movw	r3, #513	; 0x201
 8003d8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
 8003d92:	2300      	movs	r3, #0
 8003d94:	61bb      	str	r3, [r7, #24]
 8003d96:	2300      	movs	r3, #0
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003da2:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d002      	beq.n	8003db8 <HAL_RCC_GetSysClockFreq+0x40>
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0x46>
 8003db6:	e02b      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003db8:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dba:	623b      	str	r3, [r7, #32]
      break;
 8003dbc:	e02b      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	0c9b      	lsrs	r3, r3, #18
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	3328      	adds	r3, #40	; 0x28
 8003dc8:	443b      	add	r3, r7
 8003dca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dce:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d012      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dda:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	0c5b      	lsrs	r3, r3, #17
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	3328      	adds	r3, #40	; 0x28
 8003de6:	443b      	add	r3, r7
 8003de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003dec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	4a0e      	ldr	r2, [pc, #56]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003df2:	fb03 f202 	mul.w	r2, r3, r2
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8003dfe:	e004      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	4a0b      	ldr	r2, [pc, #44]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	623b      	str	r3, [r7, #32]
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e12:	623b      	str	r3, [r7, #32]
      break;
 8003e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e16:	6a3b      	ldr	r3, [r7, #32]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3728      	adds	r7, #40	; 0x28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc90      	pop	{r4, r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	08005ebc 	.word	0x08005ebc
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	007a1200 	.word	0x007a1200
 8003e30:	003d0900 	.word	0x003d0900

08003e34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <RCC_Delay+0x34>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <RCC_Delay+0x38>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	0a5b      	lsrs	r3, r3, #9
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e50:	bf00      	nop
  }
  while (Delay --);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	60fa      	str	r2, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f9      	bne.n	8003e50 <RCC_Delay+0x1c>
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	20000008 	.word	0x20000008
 8003e6c:	10624dd3 	.word	0x10624dd3

08003e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e076      	b.n	8003f70 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d108      	bne.n	8003e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e92:	d009      	beq.n	8003ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	61da      	str	r2, [r3, #28]
 8003e9a:	e005      	b.n	8003ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d106      	bne.n	8003ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7fe ff22 	bl	8002d0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2202      	movs	r2, #2
 8003ecc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ede:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2c:	ea42 0103 	orr.w	r1, r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	0c1a      	lsrs	r2, r3, #16
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f002 0204 	and.w	r2, r2, #4
 8003f4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_SPI_Transmit+0x22>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e126      	b.n	80041e8 <HAL_SPI_Transmit+0x270>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fa2:	f7ff f88d 	bl	80030c0 <HAL_GetTick>
 8003fa6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d002      	beq.n	8003fbe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fbc:	e10b      	b.n	80041d6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Transmit+0x52>
 8003fc4:	88fb      	ldrh	r3, [r7, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fce:	e102      	b.n	80041d6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	88fa      	ldrh	r2, [r7, #6]
 8003fe8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	88fa      	ldrh	r2, [r7, #6]
 8003fee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004016:	d10f      	bne.n	8004038 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004026:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004036:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004042:	2b40      	cmp	r3, #64	; 0x40
 8004044:	d007      	beq.n	8004056 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800405e:	d14b      	bne.n	80040f8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_SPI_Transmit+0xf6>
 8004068:	8afb      	ldrh	r3, [r7, #22]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d13e      	bne.n	80040ec <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004092:	e02b      	b.n	80040ec <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d112      	bne.n	80040c8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	881a      	ldrh	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	1c9a      	adds	r2, r3, #2
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80040c6:	e011      	b.n	80040ec <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040c8:	f7fe fffa 	bl	80030c0 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d803      	bhi.n	80040e0 <HAL_SPI_Transmit+0x168>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d102      	bne.n	80040e6 <HAL_SPI_Transmit+0x16e>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d102      	bne.n	80040ec <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040ea:	e074      	b.n	80041d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ce      	bne.n	8004094 <HAL_SPI_Transmit+0x11c>
 80040f6:	e04c      	b.n	8004192 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <HAL_SPI_Transmit+0x18e>
 8004100:	8afb      	ldrh	r3, [r7, #22]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d140      	bne.n	8004188 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	330c      	adds	r3, #12
 8004110:	7812      	ldrb	r2, [r2, #0]
 8004112:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800412c:	e02c      	b.n	8004188 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d113      	bne.n	8004164 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	7812      	ldrb	r2, [r2, #0]
 8004148:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	86da      	strh	r2, [r3, #54]	; 0x36
 8004162:	e011      	b.n	8004188 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004164:	f7fe ffac 	bl	80030c0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d803      	bhi.n	800417c <HAL_SPI_Transmit+0x204>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417a:	d102      	bne.n	8004182 <HAL_SPI_Transmit+0x20a>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004186:	e026      	b.n	80041d6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1cd      	bne.n	800412e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	6839      	ldr	r1, [r7, #0]
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f8b2 	bl	8004300 <SPI_EndRxTxTransaction>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d002      	beq.n	80041a8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041b0:	2300      	movs	r3, #0
 80041b2:	613b      	str	r3, [r7, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	613b      	str	r3, [r7, #16]
 80041c4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e000      	b.n	80041d6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004200:	f7fe ff5e 	bl	80030c0 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004210:	f7fe ff56 	bl	80030c0 <HAL_GetTick>
 8004214:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	015b      	lsls	r3, r3, #5
 800421c:	0d1b      	lsrs	r3, r3, #20
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004226:	e054      	b.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d050      	beq.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004230:	f7fe ff46 	bl	80030c0 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	429a      	cmp	r2, r3
 800423e:	d902      	bls.n	8004246 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d13d      	bne.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800425e:	d111      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d004      	beq.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004272:	d107      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428c:	d10f      	bne.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e017      	b.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d19b      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000008 	.word	0x20000008

08004300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2200      	movs	r2, #0
 8004314:	2180      	movs	r1, #128	; 0x80
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff ff6a 	bl	80041f0 <SPI_WaitFlagStateUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d007      	beq.n	8004332 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	f043 0220 	orr.w	r2, r3, #32
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e000      	b.n	8004334 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e041      	b.n	80043d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fe fd10 	bl	8002d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3304      	adds	r3, #4
 8004378:	4619      	mov	r1, r3
 800437a:	4610      	mov	r0, r2
 800437c:	f000 fa70 	bl	8004860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e03a      	b.n	800446a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a18      	ldr	r2, [pc, #96]	; (8004474 <HAL_TIM_Base_Start_IT+0x98>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x58>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441e:	d009      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x58>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a14      	ldr	r2, [pc, #80]	; (8004478 <HAL_TIM_Base_Start_IT+0x9c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d004      	beq.n	8004434 <HAL_TIM_Base_Start_IT+0x58>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a13      	ldr	r2, [pc, #76]	; (800447c <HAL_TIM_Base_Start_IT+0xa0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d111      	bne.n	8004458 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 0307 	and.w	r3, r3, #7
 800443e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b06      	cmp	r3, #6
 8004444:	d010      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004456:	e007      	b.n	8004468 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40000400 	.word	0x40000400
 800447c:	40000800 	.word	0x40000800

08004480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b02      	cmp	r3, #2
 8004494:	d122      	bne.n	80044dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d11b      	bne.n	80044dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f06f 0202 	mvn.w	r2, #2
 80044ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	699b      	ldr	r3, [r3, #24]
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d003      	beq.n	80044ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f9b1 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 80044c8:	e005      	b.n	80044d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f9a4 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f9b3 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	d122      	bne.n	8004530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d11b      	bne.n	8004530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0204 	mvn.w	r2, #4
 8004500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f987 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f97a 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f989 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0308 	and.w	r3, r3, #8
 800453a:	2b08      	cmp	r3, #8
 800453c:	d122      	bne.n	8004584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b08      	cmp	r3, #8
 800454a:	d11b      	bne.n	8004584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f06f 0208 	mvn.w	r2, #8
 8004554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2204      	movs	r2, #4
 800455a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f95d 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 8004570:	e005      	b.n	800457e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f950 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f95f 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f003 0310 	and.w	r3, r3, #16
 800458e:	2b10      	cmp	r3, #16
 8004590:	d122      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f003 0310 	and.w	r3, r3, #16
 800459c:	2b10      	cmp	r3, #16
 800459e:	d11b      	bne.n	80045d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0210 	mvn.w	r2, #16
 80045a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2208      	movs	r2, #8
 80045ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f933 	bl	800482a <HAL_TIM_IC_CaptureCallback>
 80045c4:	e005      	b.n	80045d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f000 f926 	bl	8004818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f935 	bl	800483c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d10e      	bne.n	8004604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d107      	bne.n	8004604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f06f 0201 	mvn.w	r2, #1
 80045fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fe faf4 	bl	8002bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800460e:	2b80      	cmp	r3, #128	; 0x80
 8004610:	d10e      	bne.n	8004630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461c:	2b80      	cmp	r3, #128	; 0x80
 800461e:	d107      	bne.n	8004630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa77 	bl	8004b1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463a:	2b40      	cmp	r3, #64	; 0x40
 800463c:	d10e      	bne.n	800465c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d107      	bne.n	800465c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f8f9 	bl	800484e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b20      	cmp	r3, #32
 8004668:	d10e      	bne.n	8004688 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b20      	cmp	r3, #32
 8004676:	d107      	bne.n	8004688 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0220 	mvn.w	r2, #32
 8004680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa42 	bl	8004b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_TIM_ConfigClockSource+0x18>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e0b3      	b.n	8004810 <HAL_TIM_ConfigClockSource+0x180>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e0:	d03e      	beq.n	8004760 <HAL_TIM_ConfigClockSource+0xd0>
 80046e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e6:	f200 8087 	bhi.w	80047f8 <HAL_TIM_ConfigClockSource+0x168>
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ee:	f000 8085 	beq.w	80047fc <HAL_TIM_ConfigClockSource+0x16c>
 80046f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f6:	d87f      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x168>
 80046f8:	2b70      	cmp	r3, #112	; 0x70
 80046fa:	d01a      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0xa2>
 80046fc:	2b70      	cmp	r3, #112	; 0x70
 80046fe:	d87b      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x168>
 8004700:	2b60      	cmp	r3, #96	; 0x60
 8004702:	d050      	beq.n	80047a6 <HAL_TIM_ConfigClockSource+0x116>
 8004704:	2b60      	cmp	r3, #96	; 0x60
 8004706:	d877      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x168>
 8004708:	2b50      	cmp	r3, #80	; 0x50
 800470a:	d03c      	beq.n	8004786 <HAL_TIM_ConfigClockSource+0xf6>
 800470c:	2b50      	cmp	r3, #80	; 0x50
 800470e:	d873      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x168>
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d058      	beq.n	80047c6 <HAL_TIM_ConfigClockSource+0x136>
 8004714:	2b40      	cmp	r3, #64	; 0x40
 8004716:	d86f      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x168>
 8004718:	2b30      	cmp	r3, #48	; 0x30
 800471a:	d064      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x156>
 800471c:	2b30      	cmp	r3, #48	; 0x30
 800471e:	d86b      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x168>
 8004720:	2b20      	cmp	r3, #32
 8004722:	d060      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x156>
 8004724:	2b20      	cmp	r3, #32
 8004726:	d867      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x168>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05c      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x156>
 800472c:	2b10      	cmp	r3, #16
 800472e:	d05a      	beq.n	80047e6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004730:	e062      	b.n	80047f8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6899      	ldr	r1, [r3, #8]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f000 f966 	bl	8004a12 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004754:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68fa      	ldr	r2, [r7, #12]
 800475c:	609a      	str	r2, [r3, #8]
      break;
 800475e:	e04e      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	6899      	ldr	r1, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	f000 f94f 	bl	8004a12 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004782:	609a      	str	r2, [r3, #8]
      break;
 8004784:	e03b      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6859      	ldr	r1, [r3, #4]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	461a      	mov	r2, r3
 8004794:	f000 f8c6 	bl	8004924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2150      	movs	r1, #80	; 0x50
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f91d 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 80047a4:	e02b      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	6859      	ldr	r1, [r3, #4]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	461a      	mov	r2, r3
 80047b4:	f000 f8e4 	bl	8004980 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2160      	movs	r1, #96	; 0x60
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 f90d 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 80047c4:	e01b      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6818      	ldr	r0, [r3, #0]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	6859      	ldr	r1, [r3, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	461a      	mov	r2, r3
 80047d4:	f000 f8a6 	bl	8004924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2140      	movs	r1, #64	; 0x40
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f8fd 	bl	80049de <TIM_ITRx_SetConfig>
      break;
 80047e4:	e00b      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f000 f8f4 	bl	80049de <TIM_ITRx_SetConfig>
        break;
 80047f6:	e002      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047f8:	bf00      	nop
 80047fa:	e000      	b.n	80047fe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80047fc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	bc80      	pop	{r7}
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	bc80      	pop	{r7}
 800483a:	4770      	bx	lr

0800483c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr

0800484e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr

08004860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a29      	ldr	r2, [pc, #164]	; (8004918 <TIM_Base_SetConfig+0xb8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00b      	beq.n	8004890 <TIM_Base_SetConfig+0x30>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487e:	d007      	beq.n	8004890 <TIM_Base_SetConfig+0x30>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a26      	ldr	r2, [pc, #152]	; (800491c <TIM_Base_SetConfig+0xbc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_Base_SetConfig+0x30>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a25      	ldr	r2, [pc, #148]	; (8004920 <TIM_Base_SetConfig+0xc0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d108      	bne.n	80048a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4313      	orrs	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a1c      	ldr	r2, [pc, #112]	; (8004918 <TIM_Base_SetConfig+0xb8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x62>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a19      	ldr	r2, [pc, #100]	; (800491c <TIM_Base_SetConfig+0xbc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x62>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a18      	ldr	r2, [pc, #96]	; (8004920 <TIM_Base_SetConfig+0xc0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a07      	ldr	r2, [pc, #28]	; (8004918 <TIM_Base_SetConfig+0xb8>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	615a      	str	r2, [r3, #20]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	40012c00 	.word	0x40012c00
 800491c:	40000400 	.word	0x40000400
 8004920:	40000800 	.word	0x40000800

08004924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	f023 0201 	bic.w	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800494e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	4313      	orrs	r3, r2
 8004958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f023 030a 	bic.w	r3, r3, #10
 8004960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	621a      	str	r2, [r3, #32]
}
 8004976:	bf00      	nop
 8004978:	371c      	adds	r7, #28
 800497a:	46bd      	mov	sp, r7
 800497c:	bc80      	pop	{r7}
 800497e:	4770      	bx	lr

08004980 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004980:	b480      	push	{r7}
 8004982:	b087      	sub	sp, #28
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	f023 0210 	bic.w	r2, r3, #16
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	031b      	lsls	r3, r3, #12
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	621a      	str	r2, [r3, #32]
}
 80049d4:	bf00      	nop
 80049d6:	371c      	adds	r7, #28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049de:	b480      	push	{r7}
 80049e0:	b085      	sub	sp, #20
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	f043 0307 	orr.w	r3, r3, #7
 8004a00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b087      	sub	sp, #28
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
 8004a1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	021a      	lsls	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	431a      	orrs	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	609a      	str	r2, [r3, #8]
}
 8004a46:	bf00      	nop
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e046      	b.n	8004af6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00e      	beq.n	8004aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab4:	d009      	beq.n	8004aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ad0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800

08004b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	4770      	bx	lr

08004b1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr

08004b30 <__errno>:
 8004b30:	4b01      	ldr	r3, [pc, #4]	; (8004b38 <__errno+0x8>)
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000014 	.word	0x20000014

08004b3c <__libc_init_array>:
 8004b3c:	b570      	push	{r4, r5, r6, lr}
 8004b3e:	2600      	movs	r6, #0
 8004b40:	4d0c      	ldr	r5, [pc, #48]	; (8004b74 <__libc_init_array+0x38>)
 8004b42:	4c0d      	ldr	r4, [pc, #52]	; (8004b78 <__libc_init_array+0x3c>)
 8004b44:	1b64      	subs	r4, r4, r5
 8004b46:	10a4      	asrs	r4, r4, #2
 8004b48:	42a6      	cmp	r6, r4
 8004b4a:	d109      	bne.n	8004b60 <__libc_init_array+0x24>
 8004b4c:	f001 f99c 	bl	8005e88 <_init>
 8004b50:	2600      	movs	r6, #0
 8004b52:	4d0a      	ldr	r5, [pc, #40]	; (8004b7c <__libc_init_array+0x40>)
 8004b54:	4c0a      	ldr	r4, [pc, #40]	; (8004b80 <__libc_init_array+0x44>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	42a6      	cmp	r6, r4
 8004b5c:	d105      	bne.n	8004b6a <__libc_init_array+0x2e>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b64:	4798      	blx	r3
 8004b66:	3601      	adds	r6, #1
 8004b68:	e7ee      	b.n	8004b48 <__libc_init_array+0xc>
 8004b6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b6e:	4798      	blx	r3
 8004b70:	3601      	adds	r6, #1
 8004b72:	e7f2      	b.n	8004b5a <__libc_init_array+0x1e>
 8004b74:	08006bd8 	.word	0x08006bd8
 8004b78:	08006bd8 	.word	0x08006bd8
 8004b7c:	08006bd8 	.word	0x08006bd8
 8004b80:	08006bdc 	.word	0x08006bdc

08004b84 <malloc>:
 8004b84:	4b02      	ldr	r3, [pc, #8]	; (8004b90 <malloc+0xc>)
 8004b86:	4601      	mov	r1, r0
 8004b88:	6818      	ldr	r0, [r3, #0]
 8004b8a:	f000 b881 	b.w	8004c90 <_malloc_r>
 8004b8e:	bf00      	nop
 8004b90:	20000014 	.word	0x20000014

08004b94 <memcpy>:
 8004b94:	440a      	add	r2, r1
 8004b96:	4291      	cmp	r1, r2
 8004b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b9c:	d100      	bne.n	8004ba0 <memcpy+0xc>
 8004b9e:	4770      	bx	lr
 8004ba0:	b510      	push	{r4, lr}
 8004ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ba6:	4291      	cmp	r1, r2
 8004ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bac:	d1f9      	bne.n	8004ba2 <memcpy+0xe>
 8004bae:	bd10      	pop	{r4, pc}

08004bb0 <memset>:
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4402      	add	r2, r0
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d100      	bne.n	8004bba <memset+0xa>
 8004bb8:	4770      	bx	lr
 8004bba:	f803 1b01 	strb.w	r1, [r3], #1
 8004bbe:	e7f9      	b.n	8004bb4 <memset+0x4>

08004bc0 <_free_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	4605      	mov	r5, r0
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	d040      	beq.n	8004c4a <_free_r+0x8a>
 8004bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bcc:	1f0c      	subs	r4, r1, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfb8      	it	lt
 8004bd2:	18e4      	addlt	r4, r4, r3
 8004bd4:	f000 f97c 	bl	8004ed0 <__malloc_lock>
 8004bd8:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <_free_r+0x8c>)
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	b933      	cbnz	r3, 8004bec <_free_r+0x2c>
 8004bde:	6063      	str	r3, [r4, #4]
 8004be0:	6014      	str	r4, [r2, #0]
 8004be2:	4628      	mov	r0, r5
 8004be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004be8:	f000 b978 	b.w	8004edc <__malloc_unlock>
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d908      	bls.n	8004c02 <_free_r+0x42>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	1821      	adds	r1, r4, r0
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	bf01      	itttt	eq
 8004bf8:	6819      	ldreq	r1, [r3, #0]
 8004bfa:	685b      	ldreq	r3, [r3, #4]
 8004bfc:	1809      	addeq	r1, r1, r0
 8004bfe:	6021      	streq	r1, [r4, #0]
 8004c00:	e7ed      	b.n	8004bde <_free_r+0x1e>
 8004c02:	461a      	mov	r2, r3
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	b10b      	cbz	r3, 8004c0c <_free_r+0x4c>
 8004c08:	42a3      	cmp	r3, r4
 8004c0a:	d9fa      	bls.n	8004c02 <_free_r+0x42>
 8004c0c:	6811      	ldr	r1, [r2, #0]
 8004c0e:	1850      	adds	r0, r2, r1
 8004c10:	42a0      	cmp	r0, r4
 8004c12:	d10b      	bne.n	8004c2c <_free_r+0x6c>
 8004c14:	6820      	ldr	r0, [r4, #0]
 8004c16:	4401      	add	r1, r0
 8004c18:	1850      	adds	r0, r2, r1
 8004c1a:	4283      	cmp	r3, r0
 8004c1c:	6011      	str	r1, [r2, #0]
 8004c1e:	d1e0      	bne.n	8004be2 <_free_r+0x22>
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4401      	add	r1, r0
 8004c26:	6011      	str	r1, [r2, #0]
 8004c28:	6053      	str	r3, [r2, #4]
 8004c2a:	e7da      	b.n	8004be2 <_free_r+0x22>
 8004c2c:	d902      	bls.n	8004c34 <_free_r+0x74>
 8004c2e:	230c      	movs	r3, #12
 8004c30:	602b      	str	r3, [r5, #0]
 8004c32:	e7d6      	b.n	8004be2 <_free_r+0x22>
 8004c34:	6820      	ldr	r0, [r4, #0]
 8004c36:	1821      	adds	r1, r4, r0
 8004c38:	428b      	cmp	r3, r1
 8004c3a:	bf01      	itttt	eq
 8004c3c:	6819      	ldreq	r1, [r3, #0]
 8004c3e:	685b      	ldreq	r3, [r3, #4]
 8004c40:	1809      	addeq	r1, r1, r0
 8004c42:	6021      	streq	r1, [r4, #0]
 8004c44:	6063      	str	r3, [r4, #4]
 8004c46:	6054      	str	r4, [r2, #4]
 8004c48:	e7cb      	b.n	8004be2 <_free_r+0x22>
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	20000194 	.word	0x20000194

08004c50 <sbrk_aligned>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4e0e      	ldr	r6, [pc, #56]	; (8004c8c <sbrk_aligned+0x3c>)
 8004c54:	460c      	mov	r4, r1
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b911      	cbnz	r1, 8004c62 <sbrk_aligned+0x12>
 8004c5c:	f000 f8f8 	bl	8004e50 <_sbrk_r>
 8004c60:	6030      	str	r0, [r6, #0]
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f8f3 	bl	8004e50 <_sbrk_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d00a      	beq.n	8004c84 <sbrk_aligned+0x34>
 8004c6e:	1cc4      	adds	r4, r0, #3
 8004c70:	f024 0403 	bic.w	r4, r4, #3
 8004c74:	42a0      	cmp	r0, r4
 8004c76:	d007      	beq.n	8004c88 <sbrk_aligned+0x38>
 8004c78:	1a21      	subs	r1, r4, r0
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f000 f8e8 	bl	8004e50 <_sbrk_r>
 8004c80:	3001      	adds	r0, #1
 8004c82:	d101      	bne.n	8004c88 <sbrk_aligned+0x38>
 8004c84:	f04f 34ff 	mov.w	r4, #4294967295
 8004c88:	4620      	mov	r0, r4
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	20000198 	.word	0x20000198

08004c90 <_malloc_r>:
 8004c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	1ccd      	adds	r5, r1, #3
 8004c96:	f025 0503 	bic.w	r5, r5, #3
 8004c9a:	3508      	adds	r5, #8
 8004c9c:	2d0c      	cmp	r5, #12
 8004c9e:	bf38      	it	cc
 8004ca0:	250c      	movcc	r5, #12
 8004ca2:	2d00      	cmp	r5, #0
 8004ca4:	4607      	mov	r7, r0
 8004ca6:	db01      	blt.n	8004cac <_malloc_r+0x1c>
 8004ca8:	42a9      	cmp	r1, r5
 8004caa:	d905      	bls.n	8004cb8 <_malloc_r+0x28>
 8004cac:	230c      	movs	r3, #12
 8004cae:	2600      	movs	r6, #0
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cb8:	4e2e      	ldr	r6, [pc, #184]	; (8004d74 <_malloc_r+0xe4>)
 8004cba:	f000 f909 	bl	8004ed0 <__malloc_lock>
 8004cbe:	6833      	ldr	r3, [r6, #0]
 8004cc0:	461c      	mov	r4, r3
 8004cc2:	bb34      	cbnz	r4, 8004d12 <_malloc_r+0x82>
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	f7ff ffc2 	bl	8004c50 <sbrk_aligned>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	4604      	mov	r4, r0
 8004cd0:	d14d      	bne.n	8004d6e <_malloc_r+0xde>
 8004cd2:	6834      	ldr	r4, [r6, #0]
 8004cd4:	4626      	mov	r6, r4
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d140      	bne.n	8004d5c <_malloc_r+0xcc>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4638      	mov	r0, r7
 8004ce0:	eb04 0803 	add.w	r8, r4, r3
 8004ce4:	f000 f8b4 	bl	8004e50 <_sbrk_r>
 8004ce8:	4580      	cmp	r8, r0
 8004cea:	d13a      	bne.n	8004d62 <_malloc_r+0xd2>
 8004cec:	6821      	ldr	r1, [r4, #0]
 8004cee:	3503      	adds	r5, #3
 8004cf0:	1a6d      	subs	r5, r5, r1
 8004cf2:	f025 0503 	bic.w	r5, r5, #3
 8004cf6:	3508      	adds	r5, #8
 8004cf8:	2d0c      	cmp	r5, #12
 8004cfa:	bf38      	it	cc
 8004cfc:	250c      	movcc	r5, #12
 8004cfe:	4638      	mov	r0, r7
 8004d00:	4629      	mov	r1, r5
 8004d02:	f7ff ffa5 	bl	8004c50 <sbrk_aligned>
 8004d06:	3001      	adds	r0, #1
 8004d08:	d02b      	beq.n	8004d62 <_malloc_r+0xd2>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	442b      	add	r3, r5
 8004d0e:	6023      	str	r3, [r4, #0]
 8004d10:	e00e      	b.n	8004d30 <_malloc_r+0xa0>
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	1b52      	subs	r2, r2, r5
 8004d16:	d41e      	bmi.n	8004d56 <_malloc_r+0xc6>
 8004d18:	2a0b      	cmp	r2, #11
 8004d1a:	d916      	bls.n	8004d4a <_malloc_r+0xba>
 8004d1c:	1961      	adds	r1, r4, r5
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	6025      	str	r5, [r4, #0]
 8004d22:	bf18      	it	ne
 8004d24:	6059      	strne	r1, [r3, #4]
 8004d26:	6863      	ldr	r3, [r4, #4]
 8004d28:	bf08      	it	eq
 8004d2a:	6031      	streq	r1, [r6, #0]
 8004d2c:	5162      	str	r2, [r4, r5]
 8004d2e:	604b      	str	r3, [r1, #4]
 8004d30:	4638      	mov	r0, r7
 8004d32:	f104 060b 	add.w	r6, r4, #11
 8004d36:	f000 f8d1 	bl	8004edc <__malloc_unlock>
 8004d3a:	f026 0607 	bic.w	r6, r6, #7
 8004d3e:	1d23      	adds	r3, r4, #4
 8004d40:	1af2      	subs	r2, r6, r3
 8004d42:	d0b6      	beq.n	8004cb2 <_malloc_r+0x22>
 8004d44:	1b9b      	subs	r3, r3, r6
 8004d46:	50a3      	str	r3, [r4, r2]
 8004d48:	e7b3      	b.n	8004cb2 <_malloc_r+0x22>
 8004d4a:	6862      	ldr	r2, [r4, #4]
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	bf0c      	ite	eq
 8004d50:	6032      	streq	r2, [r6, #0]
 8004d52:	605a      	strne	r2, [r3, #4]
 8004d54:	e7ec      	b.n	8004d30 <_malloc_r+0xa0>
 8004d56:	4623      	mov	r3, r4
 8004d58:	6864      	ldr	r4, [r4, #4]
 8004d5a:	e7b2      	b.n	8004cc2 <_malloc_r+0x32>
 8004d5c:	4634      	mov	r4, r6
 8004d5e:	6876      	ldr	r6, [r6, #4]
 8004d60:	e7b9      	b.n	8004cd6 <_malloc_r+0x46>
 8004d62:	230c      	movs	r3, #12
 8004d64:	4638      	mov	r0, r7
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	f000 f8b8 	bl	8004edc <__malloc_unlock>
 8004d6c:	e7a1      	b.n	8004cb2 <_malloc_r+0x22>
 8004d6e:	6025      	str	r5, [r4, #0]
 8004d70:	e7de      	b.n	8004d30 <_malloc_r+0xa0>
 8004d72:	bf00      	nop
 8004d74:	20000194 	.word	0x20000194

08004d78 <srand>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4b10      	ldr	r3, [pc, #64]	; (8004dbc <srand+0x44>)
 8004d7c:	4604      	mov	r4, r0
 8004d7e:	681d      	ldr	r5, [r3, #0]
 8004d80:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004d82:	b9b3      	cbnz	r3, 8004db2 <srand+0x3a>
 8004d84:	2018      	movs	r0, #24
 8004d86:	f7ff fefd 	bl	8004b84 <malloc>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	63a8      	str	r0, [r5, #56]	; 0x38
 8004d8e:	b920      	cbnz	r0, 8004d9a <srand+0x22>
 8004d90:	2142      	movs	r1, #66	; 0x42
 8004d92:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <srand+0x48>)
 8004d94:	480b      	ldr	r0, [pc, #44]	; (8004dc4 <srand+0x4c>)
 8004d96:	f000 f86b 	bl	8004e70 <__assert_func>
 8004d9a:	490b      	ldr	r1, [pc, #44]	; (8004dc8 <srand+0x50>)
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <srand+0x54>)
 8004d9e:	e9c0 1300 	strd	r1, r3, [r0]
 8004da2:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <srand+0x58>)
 8004da4:	2100      	movs	r1, #0
 8004da6:	6083      	str	r3, [r0, #8]
 8004da8:	230b      	movs	r3, #11
 8004daa:	8183      	strh	r3, [r0, #12]
 8004dac:	2001      	movs	r0, #1
 8004dae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004db2:	2200      	movs	r2, #0
 8004db4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004db6:	611c      	str	r4, [r3, #16]
 8004db8:	615a      	str	r2, [r3, #20]
 8004dba:	bd38      	pop	{r3, r4, r5, pc}
 8004dbc:	20000014 	.word	0x20000014
 8004dc0:	08006a94 	.word	0x08006a94
 8004dc4:	08006aab 	.word	0x08006aab
 8004dc8:	abcd330e 	.word	0xabcd330e
 8004dcc:	e66d1234 	.word	0xe66d1234
 8004dd0:	0005deec 	.word	0x0005deec

08004dd4 <rand>:
 8004dd4:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <rand+0x5c>)
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	681c      	ldr	r4, [r3, #0]
 8004dda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ddc:	b9b3      	cbnz	r3, 8004e0c <rand+0x38>
 8004dde:	2018      	movs	r0, #24
 8004de0:	f7ff fed0 	bl	8004b84 <malloc>
 8004de4:	4602      	mov	r2, r0
 8004de6:	63a0      	str	r0, [r4, #56]	; 0x38
 8004de8:	b920      	cbnz	r0, 8004df4 <rand+0x20>
 8004dea:	214e      	movs	r1, #78	; 0x4e
 8004dec:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <rand+0x60>)
 8004dee:	4812      	ldr	r0, [pc, #72]	; (8004e38 <rand+0x64>)
 8004df0:	f000 f83e 	bl	8004e70 <__assert_func>
 8004df4:	4911      	ldr	r1, [pc, #68]	; (8004e3c <rand+0x68>)
 8004df6:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <rand+0x6c>)
 8004df8:	e9c0 1300 	strd	r1, r3, [r0]
 8004dfc:	4b11      	ldr	r3, [pc, #68]	; (8004e44 <rand+0x70>)
 8004dfe:	2100      	movs	r1, #0
 8004e00:	6083      	str	r3, [r0, #8]
 8004e02:	230b      	movs	r3, #11
 8004e04:	8183      	strh	r3, [r0, #12]
 8004e06:	2001      	movs	r0, #1
 8004e08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8004e0c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8004e0e:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <rand+0x74>)
 8004e10:	6920      	ldr	r0, [r4, #16]
 8004e12:	6963      	ldr	r3, [r4, #20]
 8004e14:	4342      	muls	r2, r0
 8004e16:	490d      	ldr	r1, [pc, #52]	; (8004e4c <rand+0x78>)
 8004e18:	fb01 2203 	mla	r2, r1, r3, r2
 8004e1c:	fba0 0101 	umull	r0, r1, r0, r1
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	eb42 0001 	adc.w	r0, r2, r1
 8004e26:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8004e2a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004e2e:	bd10      	pop	{r4, pc}
 8004e30:	20000014 	.word	0x20000014
 8004e34:	08006a94 	.word	0x08006a94
 8004e38:	08006aab 	.word	0x08006aab
 8004e3c:	abcd330e 	.word	0xabcd330e
 8004e40:	e66d1234 	.word	0xe66d1234
 8004e44:	0005deec 	.word	0x0005deec
 8004e48:	5851f42d 	.word	0x5851f42d
 8004e4c:	4c957f2d 	.word	0x4c957f2d

08004e50 <_sbrk_r>:
 8004e50:	b538      	push	{r3, r4, r5, lr}
 8004e52:	2300      	movs	r3, #0
 8004e54:	4d05      	ldr	r5, [pc, #20]	; (8004e6c <_sbrk_r+0x1c>)
 8004e56:	4604      	mov	r4, r0
 8004e58:	4608      	mov	r0, r1
 8004e5a:	602b      	str	r3, [r5, #0]
 8004e5c:	f7fe f876 	bl	8002f4c <_sbrk>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	d102      	bne.n	8004e6a <_sbrk_r+0x1a>
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	b103      	cbz	r3, 8004e6a <_sbrk_r+0x1a>
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	bd38      	pop	{r3, r4, r5, pc}
 8004e6c:	2000019c 	.word	0x2000019c

08004e70 <__assert_func>:
 8004e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e72:	4614      	mov	r4, r2
 8004e74:	461a      	mov	r2, r3
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <__assert_func+0x2c>)
 8004e78:	4605      	mov	r5, r0
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68d8      	ldr	r0, [r3, #12]
 8004e7e:	b14c      	cbz	r4, 8004e94 <__assert_func+0x24>
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <__assert_func+0x30>)
 8004e82:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004e86:	9100      	str	r1, [sp, #0]
 8004e88:	462b      	mov	r3, r5
 8004e8a:	4906      	ldr	r1, [pc, #24]	; (8004ea4 <__assert_func+0x34>)
 8004e8c:	f000 f80e 	bl	8004eac <fiprintf>
 8004e90:	f000 fbd8 	bl	8005644 <abort>
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <__assert_func+0x38>)
 8004e96:	461c      	mov	r4, r3
 8004e98:	e7f3      	b.n	8004e82 <__assert_func+0x12>
 8004e9a:	bf00      	nop
 8004e9c:	20000014 	.word	0x20000014
 8004ea0:	08006b06 	.word	0x08006b06
 8004ea4:	08006b13 	.word	0x08006b13
 8004ea8:	08006b41 	.word	0x08006b41

08004eac <fiprintf>:
 8004eac:	b40e      	push	{r1, r2, r3}
 8004eae:	b503      	push	{r0, r1, lr}
 8004eb0:	4601      	mov	r1, r0
 8004eb2:	ab03      	add	r3, sp, #12
 8004eb4:	4805      	ldr	r0, [pc, #20]	; (8004ecc <fiprintf+0x20>)
 8004eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004eba:	6800      	ldr	r0, [r0, #0]
 8004ebc:	9301      	str	r3, [sp, #4]
 8004ebe:	f000 f83b 	bl	8004f38 <_vfiprintf_r>
 8004ec2:	b002      	add	sp, #8
 8004ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ec8:	b003      	add	sp, #12
 8004eca:	4770      	bx	lr
 8004ecc:	20000014 	.word	0x20000014

08004ed0 <__malloc_lock>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	; (8004ed8 <__malloc_lock+0x8>)
 8004ed2:	f000 bd73 	b.w	80059bc <__retarget_lock_acquire_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	200001a0 	.word	0x200001a0

08004edc <__malloc_unlock>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__malloc_unlock+0x8>)
 8004ede:	f000 bd6e 	b.w	80059be <__retarget_lock_release_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	200001a0 	.word	0x200001a0

08004ee8 <__sfputc_r>:
 8004ee8:	6893      	ldr	r3, [r2, #8]
 8004eea:	b410      	push	{r4}
 8004eec:	3b01      	subs	r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	6093      	str	r3, [r2, #8]
 8004ef2:	da07      	bge.n	8004f04 <__sfputc_r+0x1c>
 8004ef4:	6994      	ldr	r4, [r2, #24]
 8004ef6:	42a3      	cmp	r3, r4
 8004ef8:	db01      	blt.n	8004efe <__sfputc_r+0x16>
 8004efa:	290a      	cmp	r1, #10
 8004efc:	d102      	bne.n	8004f04 <__sfputc_r+0x1c>
 8004efe:	bc10      	pop	{r4}
 8004f00:	f000 bae0 	b.w	80054c4 <__swbuf_r>
 8004f04:	6813      	ldr	r3, [r2, #0]
 8004f06:	1c58      	adds	r0, r3, #1
 8004f08:	6010      	str	r0, [r2, #0]
 8004f0a:	7019      	strb	r1, [r3, #0]
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	bc10      	pop	{r4}
 8004f10:	4770      	bx	lr

08004f12 <__sfputs_r>:
 8004f12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f14:	4606      	mov	r6, r0
 8004f16:	460f      	mov	r7, r1
 8004f18:	4614      	mov	r4, r2
 8004f1a:	18d5      	adds	r5, r2, r3
 8004f1c:	42ac      	cmp	r4, r5
 8004f1e:	d101      	bne.n	8004f24 <__sfputs_r+0x12>
 8004f20:	2000      	movs	r0, #0
 8004f22:	e007      	b.n	8004f34 <__sfputs_r+0x22>
 8004f24:	463a      	mov	r2, r7
 8004f26:	4630      	mov	r0, r6
 8004f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f2c:	f7ff ffdc 	bl	8004ee8 <__sfputc_r>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d1f3      	bne.n	8004f1c <__sfputs_r+0xa>
 8004f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f38 <_vfiprintf_r>:
 8004f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3c:	460d      	mov	r5, r1
 8004f3e:	4614      	mov	r4, r2
 8004f40:	4698      	mov	r8, r3
 8004f42:	4606      	mov	r6, r0
 8004f44:	b09d      	sub	sp, #116	; 0x74
 8004f46:	b118      	cbz	r0, 8004f50 <_vfiprintf_r+0x18>
 8004f48:	6983      	ldr	r3, [r0, #24]
 8004f4a:	b90b      	cbnz	r3, 8004f50 <_vfiprintf_r+0x18>
 8004f4c:	f000 fc98 	bl	8005880 <__sinit>
 8004f50:	4b89      	ldr	r3, [pc, #548]	; (8005178 <_vfiprintf_r+0x240>)
 8004f52:	429d      	cmp	r5, r3
 8004f54:	d11b      	bne.n	8004f8e <_vfiprintf_r+0x56>
 8004f56:	6875      	ldr	r5, [r6, #4]
 8004f58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f5a:	07d9      	lsls	r1, r3, #31
 8004f5c:	d405      	bmi.n	8004f6a <_vfiprintf_r+0x32>
 8004f5e:	89ab      	ldrh	r3, [r5, #12]
 8004f60:	059a      	lsls	r2, r3, #22
 8004f62:	d402      	bmi.n	8004f6a <_vfiprintf_r+0x32>
 8004f64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f66:	f000 fd29 	bl	80059bc <__retarget_lock_acquire_recursive>
 8004f6a:	89ab      	ldrh	r3, [r5, #12]
 8004f6c:	071b      	lsls	r3, r3, #28
 8004f6e:	d501      	bpl.n	8004f74 <_vfiprintf_r+0x3c>
 8004f70:	692b      	ldr	r3, [r5, #16]
 8004f72:	b9eb      	cbnz	r3, 8004fb0 <_vfiprintf_r+0x78>
 8004f74:	4629      	mov	r1, r5
 8004f76:	4630      	mov	r0, r6
 8004f78:	f000 faf6 	bl	8005568 <__swsetup_r>
 8004f7c:	b1c0      	cbz	r0, 8004fb0 <_vfiprintf_r+0x78>
 8004f7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f80:	07dc      	lsls	r4, r3, #31
 8004f82:	d50e      	bpl.n	8004fa2 <_vfiprintf_r+0x6a>
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	b01d      	add	sp, #116	; 0x74
 8004f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8e:	4b7b      	ldr	r3, [pc, #492]	; (800517c <_vfiprintf_r+0x244>)
 8004f90:	429d      	cmp	r5, r3
 8004f92:	d101      	bne.n	8004f98 <_vfiprintf_r+0x60>
 8004f94:	68b5      	ldr	r5, [r6, #8]
 8004f96:	e7df      	b.n	8004f58 <_vfiprintf_r+0x20>
 8004f98:	4b79      	ldr	r3, [pc, #484]	; (8005180 <_vfiprintf_r+0x248>)
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	bf08      	it	eq
 8004f9e:	68f5      	ldreq	r5, [r6, #12]
 8004fa0:	e7da      	b.n	8004f58 <_vfiprintf_r+0x20>
 8004fa2:	89ab      	ldrh	r3, [r5, #12]
 8004fa4:	0598      	lsls	r0, r3, #22
 8004fa6:	d4ed      	bmi.n	8004f84 <_vfiprintf_r+0x4c>
 8004fa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004faa:	f000 fd08 	bl	80059be <__retarget_lock_release_recursive>
 8004fae:	e7e9      	b.n	8004f84 <_vfiprintf_r+0x4c>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004fba:	2330      	movs	r3, #48	; 0x30
 8004fbc:	f04f 0901 	mov.w	r9, #1
 8004fc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004fc4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005184 <_vfiprintf_r+0x24c>
 8004fc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004fcc:	4623      	mov	r3, r4
 8004fce:	469a      	mov	sl, r3
 8004fd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fd4:	b10a      	cbz	r2, 8004fda <_vfiprintf_r+0xa2>
 8004fd6:	2a25      	cmp	r2, #37	; 0x25
 8004fd8:	d1f9      	bne.n	8004fce <_vfiprintf_r+0x96>
 8004fda:	ebba 0b04 	subs.w	fp, sl, r4
 8004fde:	d00b      	beq.n	8004ff8 <_vfiprintf_r+0xc0>
 8004fe0:	465b      	mov	r3, fp
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7ff ff93 	bl	8004f12 <__sfputs_r>
 8004fec:	3001      	adds	r0, #1
 8004fee:	f000 80aa 	beq.w	8005146 <_vfiprintf_r+0x20e>
 8004ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ff4:	445a      	add	r2, fp
 8004ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8004ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80a2 	beq.w	8005146 <_vfiprintf_r+0x20e>
 8005002:	2300      	movs	r3, #0
 8005004:	f04f 32ff 	mov.w	r2, #4294967295
 8005008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800500c:	f10a 0a01 	add.w	sl, sl, #1
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	9307      	str	r3, [sp, #28]
 8005014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005018:	931a      	str	r3, [sp, #104]	; 0x68
 800501a:	4654      	mov	r4, sl
 800501c:	2205      	movs	r2, #5
 800501e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005022:	4858      	ldr	r0, [pc, #352]	; (8005184 <_vfiprintf_r+0x24c>)
 8005024:	f000 fd32 	bl	8005a8c <memchr>
 8005028:	9a04      	ldr	r2, [sp, #16]
 800502a:	b9d8      	cbnz	r0, 8005064 <_vfiprintf_r+0x12c>
 800502c:	06d1      	lsls	r1, r2, #27
 800502e:	bf44      	itt	mi
 8005030:	2320      	movmi	r3, #32
 8005032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005036:	0713      	lsls	r3, r2, #28
 8005038:	bf44      	itt	mi
 800503a:	232b      	movmi	r3, #43	; 0x2b
 800503c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005040:	f89a 3000 	ldrb.w	r3, [sl]
 8005044:	2b2a      	cmp	r3, #42	; 0x2a
 8005046:	d015      	beq.n	8005074 <_vfiprintf_r+0x13c>
 8005048:	4654      	mov	r4, sl
 800504a:	2000      	movs	r0, #0
 800504c:	f04f 0c0a 	mov.w	ip, #10
 8005050:	9a07      	ldr	r2, [sp, #28]
 8005052:	4621      	mov	r1, r4
 8005054:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005058:	3b30      	subs	r3, #48	; 0x30
 800505a:	2b09      	cmp	r3, #9
 800505c:	d94e      	bls.n	80050fc <_vfiprintf_r+0x1c4>
 800505e:	b1b0      	cbz	r0, 800508e <_vfiprintf_r+0x156>
 8005060:	9207      	str	r2, [sp, #28]
 8005062:	e014      	b.n	800508e <_vfiprintf_r+0x156>
 8005064:	eba0 0308 	sub.w	r3, r0, r8
 8005068:	fa09 f303 	lsl.w	r3, r9, r3
 800506c:	4313      	orrs	r3, r2
 800506e:	46a2      	mov	sl, r4
 8005070:	9304      	str	r3, [sp, #16]
 8005072:	e7d2      	b.n	800501a <_vfiprintf_r+0xe2>
 8005074:	9b03      	ldr	r3, [sp, #12]
 8005076:	1d19      	adds	r1, r3, #4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	9103      	str	r1, [sp, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	bfbb      	ittet	lt
 8005080:	425b      	neglt	r3, r3
 8005082:	f042 0202 	orrlt.w	r2, r2, #2
 8005086:	9307      	strge	r3, [sp, #28]
 8005088:	9307      	strlt	r3, [sp, #28]
 800508a:	bfb8      	it	lt
 800508c:	9204      	strlt	r2, [sp, #16]
 800508e:	7823      	ldrb	r3, [r4, #0]
 8005090:	2b2e      	cmp	r3, #46	; 0x2e
 8005092:	d10c      	bne.n	80050ae <_vfiprintf_r+0x176>
 8005094:	7863      	ldrb	r3, [r4, #1]
 8005096:	2b2a      	cmp	r3, #42	; 0x2a
 8005098:	d135      	bne.n	8005106 <_vfiprintf_r+0x1ce>
 800509a:	9b03      	ldr	r3, [sp, #12]
 800509c:	3402      	adds	r4, #2
 800509e:	1d1a      	adds	r2, r3, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	9203      	str	r2, [sp, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	bfb8      	it	lt
 80050a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80050ac:	9305      	str	r3, [sp, #20]
 80050ae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005188 <_vfiprintf_r+0x250>
 80050b2:	2203      	movs	r2, #3
 80050b4:	4650      	mov	r0, sl
 80050b6:	7821      	ldrb	r1, [r4, #0]
 80050b8:	f000 fce8 	bl	8005a8c <memchr>
 80050bc:	b140      	cbz	r0, 80050d0 <_vfiprintf_r+0x198>
 80050be:	2340      	movs	r3, #64	; 0x40
 80050c0:	eba0 000a 	sub.w	r0, r0, sl
 80050c4:	fa03 f000 	lsl.w	r0, r3, r0
 80050c8:	9b04      	ldr	r3, [sp, #16]
 80050ca:	3401      	adds	r4, #1
 80050cc:	4303      	orrs	r3, r0
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050d4:	2206      	movs	r2, #6
 80050d6:	482d      	ldr	r0, [pc, #180]	; (800518c <_vfiprintf_r+0x254>)
 80050d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050dc:	f000 fcd6 	bl	8005a8c <memchr>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	d03f      	beq.n	8005164 <_vfiprintf_r+0x22c>
 80050e4:	4b2a      	ldr	r3, [pc, #168]	; (8005190 <_vfiprintf_r+0x258>)
 80050e6:	bb1b      	cbnz	r3, 8005130 <_vfiprintf_r+0x1f8>
 80050e8:	9b03      	ldr	r3, [sp, #12]
 80050ea:	3307      	adds	r3, #7
 80050ec:	f023 0307 	bic.w	r3, r3, #7
 80050f0:	3308      	adds	r3, #8
 80050f2:	9303      	str	r3, [sp, #12]
 80050f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f6:	443b      	add	r3, r7
 80050f8:	9309      	str	r3, [sp, #36]	; 0x24
 80050fa:	e767      	b.n	8004fcc <_vfiprintf_r+0x94>
 80050fc:	460c      	mov	r4, r1
 80050fe:	2001      	movs	r0, #1
 8005100:	fb0c 3202 	mla	r2, ip, r2, r3
 8005104:	e7a5      	b.n	8005052 <_vfiprintf_r+0x11a>
 8005106:	2300      	movs	r3, #0
 8005108:	f04f 0c0a 	mov.w	ip, #10
 800510c:	4619      	mov	r1, r3
 800510e:	3401      	adds	r4, #1
 8005110:	9305      	str	r3, [sp, #20]
 8005112:	4620      	mov	r0, r4
 8005114:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005118:	3a30      	subs	r2, #48	; 0x30
 800511a:	2a09      	cmp	r2, #9
 800511c:	d903      	bls.n	8005126 <_vfiprintf_r+0x1ee>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0c5      	beq.n	80050ae <_vfiprintf_r+0x176>
 8005122:	9105      	str	r1, [sp, #20]
 8005124:	e7c3      	b.n	80050ae <_vfiprintf_r+0x176>
 8005126:	4604      	mov	r4, r0
 8005128:	2301      	movs	r3, #1
 800512a:	fb0c 2101 	mla	r1, ip, r1, r2
 800512e:	e7f0      	b.n	8005112 <_vfiprintf_r+0x1da>
 8005130:	ab03      	add	r3, sp, #12
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	462a      	mov	r2, r5
 8005136:	4630      	mov	r0, r6
 8005138:	4b16      	ldr	r3, [pc, #88]	; (8005194 <_vfiprintf_r+0x25c>)
 800513a:	a904      	add	r1, sp, #16
 800513c:	f3af 8000 	nop.w
 8005140:	4607      	mov	r7, r0
 8005142:	1c78      	adds	r0, r7, #1
 8005144:	d1d6      	bne.n	80050f4 <_vfiprintf_r+0x1bc>
 8005146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005148:	07d9      	lsls	r1, r3, #31
 800514a:	d405      	bmi.n	8005158 <_vfiprintf_r+0x220>
 800514c:	89ab      	ldrh	r3, [r5, #12]
 800514e:	059a      	lsls	r2, r3, #22
 8005150:	d402      	bmi.n	8005158 <_vfiprintf_r+0x220>
 8005152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005154:	f000 fc33 	bl	80059be <__retarget_lock_release_recursive>
 8005158:	89ab      	ldrh	r3, [r5, #12]
 800515a:	065b      	lsls	r3, r3, #25
 800515c:	f53f af12 	bmi.w	8004f84 <_vfiprintf_r+0x4c>
 8005160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005162:	e711      	b.n	8004f88 <_vfiprintf_r+0x50>
 8005164:	ab03      	add	r3, sp, #12
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	462a      	mov	r2, r5
 800516a:	4630      	mov	r0, r6
 800516c:	4b09      	ldr	r3, [pc, #36]	; (8005194 <_vfiprintf_r+0x25c>)
 800516e:	a904      	add	r1, sp, #16
 8005170:	f000 f882 	bl	8005278 <_printf_i>
 8005174:	e7e4      	b.n	8005140 <_vfiprintf_r+0x208>
 8005176:	bf00      	nop
 8005178:	08006b98 	.word	0x08006b98
 800517c:	08006bb8 	.word	0x08006bb8
 8005180:	08006b78 	.word	0x08006b78
 8005184:	08006b42 	.word	0x08006b42
 8005188:	08006b48 	.word	0x08006b48
 800518c:	08006b4c 	.word	0x08006b4c
 8005190:	00000000 	.word	0x00000000
 8005194:	08004f13 	.word	0x08004f13

08005198 <_printf_common>:
 8005198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800519c:	4616      	mov	r6, r2
 800519e:	4699      	mov	r9, r3
 80051a0:	688a      	ldr	r2, [r1, #8]
 80051a2:	690b      	ldr	r3, [r1, #16]
 80051a4:	4607      	mov	r7, r0
 80051a6:	4293      	cmp	r3, r2
 80051a8:	bfb8      	it	lt
 80051aa:	4613      	movlt	r3, r2
 80051ac:	6033      	str	r3, [r6, #0]
 80051ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051b2:	460c      	mov	r4, r1
 80051b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051b8:	b10a      	cbz	r2, 80051be <_printf_common+0x26>
 80051ba:	3301      	adds	r3, #1
 80051bc:	6033      	str	r3, [r6, #0]
 80051be:	6823      	ldr	r3, [r4, #0]
 80051c0:	0699      	lsls	r1, r3, #26
 80051c2:	bf42      	ittt	mi
 80051c4:	6833      	ldrmi	r3, [r6, #0]
 80051c6:	3302      	addmi	r3, #2
 80051c8:	6033      	strmi	r3, [r6, #0]
 80051ca:	6825      	ldr	r5, [r4, #0]
 80051cc:	f015 0506 	ands.w	r5, r5, #6
 80051d0:	d106      	bne.n	80051e0 <_printf_common+0x48>
 80051d2:	f104 0a19 	add.w	sl, r4, #25
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	6832      	ldr	r2, [r6, #0]
 80051da:	1a9b      	subs	r3, r3, r2
 80051dc:	42ab      	cmp	r3, r5
 80051de:	dc28      	bgt.n	8005232 <_printf_common+0x9a>
 80051e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051e4:	1e13      	subs	r3, r2, #0
 80051e6:	6822      	ldr	r2, [r4, #0]
 80051e8:	bf18      	it	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	0692      	lsls	r2, r2, #26
 80051ee:	d42d      	bmi.n	800524c <_printf_common+0xb4>
 80051f0:	4649      	mov	r1, r9
 80051f2:	4638      	mov	r0, r7
 80051f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051f8:	47c0      	blx	r8
 80051fa:	3001      	adds	r0, #1
 80051fc:	d020      	beq.n	8005240 <_printf_common+0xa8>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	68e5      	ldr	r5, [r4, #12]
 8005202:	f003 0306 	and.w	r3, r3, #6
 8005206:	2b04      	cmp	r3, #4
 8005208:	bf18      	it	ne
 800520a:	2500      	movne	r5, #0
 800520c:	6832      	ldr	r2, [r6, #0]
 800520e:	f04f 0600 	mov.w	r6, #0
 8005212:	68a3      	ldr	r3, [r4, #8]
 8005214:	bf08      	it	eq
 8005216:	1aad      	subeq	r5, r5, r2
 8005218:	6922      	ldr	r2, [r4, #16]
 800521a:	bf08      	it	eq
 800521c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005220:	4293      	cmp	r3, r2
 8005222:	bfc4      	itt	gt
 8005224:	1a9b      	subgt	r3, r3, r2
 8005226:	18ed      	addgt	r5, r5, r3
 8005228:	341a      	adds	r4, #26
 800522a:	42b5      	cmp	r5, r6
 800522c:	d11a      	bne.n	8005264 <_printf_common+0xcc>
 800522e:	2000      	movs	r0, #0
 8005230:	e008      	b.n	8005244 <_printf_common+0xac>
 8005232:	2301      	movs	r3, #1
 8005234:	4652      	mov	r2, sl
 8005236:	4649      	mov	r1, r9
 8005238:	4638      	mov	r0, r7
 800523a:	47c0      	blx	r8
 800523c:	3001      	adds	r0, #1
 800523e:	d103      	bne.n	8005248 <_printf_common+0xb0>
 8005240:	f04f 30ff 	mov.w	r0, #4294967295
 8005244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005248:	3501      	adds	r5, #1
 800524a:	e7c4      	b.n	80051d6 <_printf_common+0x3e>
 800524c:	2030      	movs	r0, #48	; 0x30
 800524e:	18e1      	adds	r1, r4, r3
 8005250:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005254:	1c5a      	adds	r2, r3, #1
 8005256:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800525a:	4422      	add	r2, r4
 800525c:	3302      	adds	r3, #2
 800525e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005262:	e7c5      	b.n	80051f0 <_printf_common+0x58>
 8005264:	2301      	movs	r3, #1
 8005266:	4622      	mov	r2, r4
 8005268:	4649      	mov	r1, r9
 800526a:	4638      	mov	r0, r7
 800526c:	47c0      	blx	r8
 800526e:	3001      	adds	r0, #1
 8005270:	d0e6      	beq.n	8005240 <_printf_common+0xa8>
 8005272:	3601      	adds	r6, #1
 8005274:	e7d9      	b.n	800522a <_printf_common+0x92>
	...

08005278 <_printf_i>:
 8005278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800527c:	7e0f      	ldrb	r7, [r1, #24]
 800527e:	4691      	mov	r9, r2
 8005280:	2f78      	cmp	r7, #120	; 0x78
 8005282:	4680      	mov	r8, r0
 8005284:	460c      	mov	r4, r1
 8005286:	469a      	mov	sl, r3
 8005288:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800528a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800528e:	d807      	bhi.n	80052a0 <_printf_i+0x28>
 8005290:	2f62      	cmp	r7, #98	; 0x62
 8005292:	d80a      	bhi.n	80052aa <_printf_i+0x32>
 8005294:	2f00      	cmp	r7, #0
 8005296:	f000 80d9 	beq.w	800544c <_printf_i+0x1d4>
 800529a:	2f58      	cmp	r7, #88	; 0x58
 800529c:	f000 80a4 	beq.w	80053e8 <_printf_i+0x170>
 80052a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052a8:	e03a      	b.n	8005320 <_printf_i+0xa8>
 80052aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052ae:	2b15      	cmp	r3, #21
 80052b0:	d8f6      	bhi.n	80052a0 <_printf_i+0x28>
 80052b2:	a101      	add	r1, pc, #4	; (adr r1, 80052b8 <_printf_i+0x40>)
 80052b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052b8:	08005311 	.word	0x08005311
 80052bc:	08005325 	.word	0x08005325
 80052c0:	080052a1 	.word	0x080052a1
 80052c4:	080052a1 	.word	0x080052a1
 80052c8:	080052a1 	.word	0x080052a1
 80052cc:	080052a1 	.word	0x080052a1
 80052d0:	08005325 	.word	0x08005325
 80052d4:	080052a1 	.word	0x080052a1
 80052d8:	080052a1 	.word	0x080052a1
 80052dc:	080052a1 	.word	0x080052a1
 80052e0:	080052a1 	.word	0x080052a1
 80052e4:	08005433 	.word	0x08005433
 80052e8:	08005355 	.word	0x08005355
 80052ec:	08005415 	.word	0x08005415
 80052f0:	080052a1 	.word	0x080052a1
 80052f4:	080052a1 	.word	0x080052a1
 80052f8:	08005455 	.word	0x08005455
 80052fc:	080052a1 	.word	0x080052a1
 8005300:	08005355 	.word	0x08005355
 8005304:	080052a1 	.word	0x080052a1
 8005308:	080052a1 	.word	0x080052a1
 800530c:	0800541d 	.word	0x0800541d
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	1d1a      	adds	r2, r3, #4
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	602a      	str	r2, [r5, #0]
 8005318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800531c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005320:	2301      	movs	r3, #1
 8005322:	e0a4      	b.n	800546e <_printf_i+0x1f6>
 8005324:	6820      	ldr	r0, [r4, #0]
 8005326:	6829      	ldr	r1, [r5, #0]
 8005328:	0606      	lsls	r6, r0, #24
 800532a:	f101 0304 	add.w	r3, r1, #4
 800532e:	d50a      	bpl.n	8005346 <_printf_i+0xce>
 8005330:	680e      	ldr	r6, [r1, #0]
 8005332:	602b      	str	r3, [r5, #0]
 8005334:	2e00      	cmp	r6, #0
 8005336:	da03      	bge.n	8005340 <_printf_i+0xc8>
 8005338:	232d      	movs	r3, #45	; 0x2d
 800533a:	4276      	negs	r6, r6
 800533c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005340:	230a      	movs	r3, #10
 8005342:	485e      	ldr	r0, [pc, #376]	; (80054bc <_printf_i+0x244>)
 8005344:	e019      	b.n	800537a <_printf_i+0x102>
 8005346:	680e      	ldr	r6, [r1, #0]
 8005348:	f010 0f40 	tst.w	r0, #64	; 0x40
 800534c:	602b      	str	r3, [r5, #0]
 800534e:	bf18      	it	ne
 8005350:	b236      	sxthne	r6, r6
 8005352:	e7ef      	b.n	8005334 <_printf_i+0xbc>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	6820      	ldr	r0, [r4, #0]
 8005358:	1d19      	adds	r1, r3, #4
 800535a:	6029      	str	r1, [r5, #0]
 800535c:	0601      	lsls	r1, r0, #24
 800535e:	d501      	bpl.n	8005364 <_printf_i+0xec>
 8005360:	681e      	ldr	r6, [r3, #0]
 8005362:	e002      	b.n	800536a <_printf_i+0xf2>
 8005364:	0646      	lsls	r6, r0, #25
 8005366:	d5fb      	bpl.n	8005360 <_printf_i+0xe8>
 8005368:	881e      	ldrh	r6, [r3, #0]
 800536a:	2f6f      	cmp	r7, #111	; 0x6f
 800536c:	bf0c      	ite	eq
 800536e:	2308      	moveq	r3, #8
 8005370:	230a      	movne	r3, #10
 8005372:	4852      	ldr	r0, [pc, #328]	; (80054bc <_printf_i+0x244>)
 8005374:	2100      	movs	r1, #0
 8005376:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800537a:	6865      	ldr	r5, [r4, #4]
 800537c:	2d00      	cmp	r5, #0
 800537e:	bfa8      	it	ge
 8005380:	6821      	ldrge	r1, [r4, #0]
 8005382:	60a5      	str	r5, [r4, #8]
 8005384:	bfa4      	itt	ge
 8005386:	f021 0104 	bicge.w	r1, r1, #4
 800538a:	6021      	strge	r1, [r4, #0]
 800538c:	b90e      	cbnz	r6, 8005392 <_printf_i+0x11a>
 800538e:	2d00      	cmp	r5, #0
 8005390:	d04d      	beq.n	800542e <_printf_i+0x1b6>
 8005392:	4615      	mov	r5, r2
 8005394:	fbb6 f1f3 	udiv	r1, r6, r3
 8005398:	fb03 6711 	mls	r7, r3, r1, r6
 800539c:	5dc7      	ldrb	r7, [r0, r7]
 800539e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053a2:	4637      	mov	r7, r6
 80053a4:	42bb      	cmp	r3, r7
 80053a6:	460e      	mov	r6, r1
 80053a8:	d9f4      	bls.n	8005394 <_printf_i+0x11c>
 80053aa:	2b08      	cmp	r3, #8
 80053ac:	d10b      	bne.n	80053c6 <_printf_i+0x14e>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	07de      	lsls	r6, r3, #31
 80053b2:	d508      	bpl.n	80053c6 <_printf_i+0x14e>
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	6861      	ldr	r1, [r4, #4]
 80053b8:	4299      	cmp	r1, r3
 80053ba:	bfde      	ittt	le
 80053bc:	2330      	movle	r3, #48	; 0x30
 80053be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053c6:	1b52      	subs	r2, r2, r5
 80053c8:	6122      	str	r2, [r4, #16]
 80053ca:	464b      	mov	r3, r9
 80053cc:	4621      	mov	r1, r4
 80053ce:	4640      	mov	r0, r8
 80053d0:	f8cd a000 	str.w	sl, [sp]
 80053d4:	aa03      	add	r2, sp, #12
 80053d6:	f7ff fedf 	bl	8005198 <_printf_common>
 80053da:	3001      	adds	r0, #1
 80053dc:	d14c      	bne.n	8005478 <_printf_i+0x200>
 80053de:	f04f 30ff 	mov.w	r0, #4294967295
 80053e2:	b004      	add	sp, #16
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	4834      	ldr	r0, [pc, #208]	; (80054bc <_printf_i+0x244>)
 80053ea:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053ee:	6829      	ldr	r1, [r5, #0]
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80053f6:	6029      	str	r1, [r5, #0]
 80053f8:	061d      	lsls	r5, r3, #24
 80053fa:	d514      	bpl.n	8005426 <_printf_i+0x1ae>
 80053fc:	07df      	lsls	r7, r3, #31
 80053fe:	bf44      	itt	mi
 8005400:	f043 0320 	orrmi.w	r3, r3, #32
 8005404:	6023      	strmi	r3, [r4, #0]
 8005406:	b91e      	cbnz	r6, 8005410 <_printf_i+0x198>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	f023 0320 	bic.w	r3, r3, #32
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	2310      	movs	r3, #16
 8005412:	e7af      	b.n	8005374 <_printf_i+0xfc>
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	f043 0320 	orr.w	r3, r3, #32
 800541a:	6023      	str	r3, [r4, #0]
 800541c:	2378      	movs	r3, #120	; 0x78
 800541e:	4828      	ldr	r0, [pc, #160]	; (80054c0 <_printf_i+0x248>)
 8005420:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005424:	e7e3      	b.n	80053ee <_printf_i+0x176>
 8005426:	0659      	lsls	r1, r3, #25
 8005428:	bf48      	it	mi
 800542a:	b2b6      	uxthmi	r6, r6
 800542c:	e7e6      	b.n	80053fc <_printf_i+0x184>
 800542e:	4615      	mov	r5, r2
 8005430:	e7bb      	b.n	80053aa <_printf_i+0x132>
 8005432:	682b      	ldr	r3, [r5, #0]
 8005434:	6826      	ldr	r6, [r4, #0]
 8005436:	1d18      	adds	r0, r3, #4
 8005438:	6961      	ldr	r1, [r4, #20]
 800543a:	6028      	str	r0, [r5, #0]
 800543c:	0635      	lsls	r5, r6, #24
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	d501      	bpl.n	8005446 <_printf_i+0x1ce>
 8005442:	6019      	str	r1, [r3, #0]
 8005444:	e002      	b.n	800544c <_printf_i+0x1d4>
 8005446:	0670      	lsls	r0, r6, #25
 8005448:	d5fb      	bpl.n	8005442 <_printf_i+0x1ca>
 800544a:	8019      	strh	r1, [r3, #0]
 800544c:	2300      	movs	r3, #0
 800544e:	4615      	mov	r5, r2
 8005450:	6123      	str	r3, [r4, #16]
 8005452:	e7ba      	b.n	80053ca <_printf_i+0x152>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	2100      	movs	r1, #0
 8005458:	1d1a      	adds	r2, r3, #4
 800545a:	602a      	str	r2, [r5, #0]
 800545c:	681d      	ldr	r5, [r3, #0]
 800545e:	6862      	ldr	r2, [r4, #4]
 8005460:	4628      	mov	r0, r5
 8005462:	f000 fb13 	bl	8005a8c <memchr>
 8005466:	b108      	cbz	r0, 800546c <_printf_i+0x1f4>
 8005468:	1b40      	subs	r0, r0, r5
 800546a:	6060      	str	r0, [r4, #4]
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	2300      	movs	r3, #0
 8005472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005476:	e7a8      	b.n	80053ca <_printf_i+0x152>
 8005478:	462a      	mov	r2, r5
 800547a:	4649      	mov	r1, r9
 800547c:	4640      	mov	r0, r8
 800547e:	6923      	ldr	r3, [r4, #16]
 8005480:	47d0      	blx	sl
 8005482:	3001      	adds	r0, #1
 8005484:	d0ab      	beq.n	80053de <_printf_i+0x166>
 8005486:	6823      	ldr	r3, [r4, #0]
 8005488:	079b      	lsls	r3, r3, #30
 800548a:	d413      	bmi.n	80054b4 <_printf_i+0x23c>
 800548c:	68e0      	ldr	r0, [r4, #12]
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	4298      	cmp	r0, r3
 8005492:	bfb8      	it	lt
 8005494:	4618      	movlt	r0, r3
 8005496:	e7a4      	b.n	80053e2 <_printf_i+0x16a>
 8005498:	2301      	movs	r3, #1
 800549a:	4632      	mov	r2, r6
 800549c:	4649      	mov	r1, r9
 800549e:	4640      	mov	r0, r8
 80054a0:	47d0      	blx	sl
 80054a2:	3001      	adds	r0, #1
 80054a4:	d09b      	beq.n	80053de <_printf_i+0x166>
 80054a6:	3501      	adds	r5, #1
 80054a8:	68e3      	ldr	r3, [r4, #12]
 80054aa:	9903      	ldr	r1, [sp, #12]
 80054ac:	1a5b      	subs	r3, r3, r1
 80054ae:	42ab      	cmp	r3, r5
 80054b0:	dcf2      	bgt.n	8005498 <_printf_i+0x220>
 80054b2:	e7eb      	b.n	800548c <_printf_i+0x214>
 80054b4:	2500      	movs	r5, #0
 80054b6:	f104 0619 	add.w	r6, r4, #25
 80054ba:	e7f5      	b.n	80054a8 <_printf_i+0x230>
 80054bc:	08006b53 	.word	0x08006b53
 80054c0:	08006b64 	.word	0x08006b64

080054c4 <__swbuf_r>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	460e      	mov	r6, r1
 80054c8:	4614      	mov	r4, r2
 80054ca:	4605      	mov	r5, r0
 80054cc:	b118      	cbz	r0, 80054d6 <__swbuf_r+0x12>
 80054ce:	6983      	ldr	r3, [r0, #24]
 80054d0:	b90b      	cbnz	r3, 80054d6 <__swbuf_r+0x12>
 80054d2:	f000 f9d5 	bl	8005880 <__sinit>
 80054d6:	4b21      	ldr	r3, [pc, #132]	; (800555c <__swbuf_r+0x98>)
 80054d8:	429c      	cmp	r4, r3
 80054da:	d12b      	bne.n	8005534 <__swbuf_r+0x70>
 80054dc:	686c      	ldr	r4, [r5, #4]
 80054de:	69a3      	ldr	r3, [r4, #24]
 80054e0:	60a3      	str	r3, [r4, #8]
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	071a      	lsls	r2, r3, #28
 80054e6:	d52f      	bpl.n	8005548 <__swbuf_r+0x84>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	b36b      	cbz	r3, 8005548 <__swbuf_r+0x84>
 80054ec:	6923      	ldr	r3, [r4, #16]
 80054ee:	6820      	ldr	r0, [r4, #0]
 80054f0:	b2f6      	uxtb	r6, r6
 80054f2:	1ac0      	subs	r0, r0, r3
 80054f4:	6963      	ldr	r3, [r4, #20]
 80054f6:	4637      	mov	r7, r6
 80054f8:	4283      	cmp	r3, r0
 80054fa:	dc04      	bgt.n	8005506 <__swbuf_r+0x42>
 80054fc:	4621      	mov	r1, r4
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f92a 	bl	8005758 <_fflush_r>
 8005504:	bb30      	cbnz	r0, 8005554 <__swbuf_r+0x90>
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	3001      	adds	r0, #1
 800550a:	3b01      	subs	r3, #1
 800550c:	60a3      	str	r3, [r4, #8]
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	6022      	str	r2, [r4, #0]
 8005514:	701e      	strb	r6, [r3, #0]
 8005516:	6963      	ldr	r3, [r4, #20]
 8005518:	4283      	cmp	r3, r0
 800551a:	d004      	beq.n	8005526 <__swbuf_r+0x62>
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	07db      	lsls	r3, r3, #31
 8005520:	d506      	bpl.n	8005530 <__swbuf_r+0x6c>
 8005522:	2e0a      	cmp	r6, #10
 8005524:	d104      	bne.n	8005530 <__swbuf_r+0x6c>
 8005526:	4621      	mov	r1, r4
 8005528:	4628      	mov	r0, r5
 800552a:	f000 f915 	bl	8005758 <_fflush_r>
 800552e:	b988      	cbnz	r0, 8005554 <__swbuf_r+0x90>
 8005530:	4638      	mov	r0, r7
 8005532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005534:	4b0a      	ldr	r3, [pc, #40]	; (8005560 <__swbuf_r+0x9c>)
 8005536:	429c      	cmp	r4, r3
 8005538:	d101      	bne.n	800553e <__swbuf_r+0x7a>
 800553a:	68ac      	ldr	r4, [r5, #8]
 800553c:	e7cf      	b.n	80054de <__swbuf_r+0x1a>
 800553e:	4b09      	ldr	r3, [pc, #36]	; (8005564 <__swbuf_r+0xa0>)
 8005540:	429c      	cmp	r4, r3
 8005542:	bf08      	it	eq
 8005544:	68ec      	ldreq	r4, [r5, #12]
 8005546:	e7ca      	b.n	80054de <__swbuf_r+0x1a>
 8005548:	4621      	mov	r1, r4
 800554a:	4628      	mov	r0, r5
 800554c:	f000 f80c 	bl	8005568 <__swsetup_r>
 8005550:	2800      	cmp	r0, #0
 8005552:	d0cb      	beq.n	80054ec <__swbuf_r+0x28>
 8005554:	f04f 37ff 	mov.w	r7, #4294967295
 8005558:	e7ea      	b.n	8005530 <__swbuf_r+0x6c>
 800555a:	bf00      	nop
 800555c:	08006b98 	.word	0x08006b98
 8005560:	08006bb8 	.word	0x08006bb8
 8005564:	08006b78 	.word	0x08006b78

08005568 <__swsetup_r>:
 8005568:	4b32      	ldr	r3, [pc, #200]	; (8005634 <__swsetup_r+0xcc>)
 800556a:	b570      	push	{r4, r5, r6, lr}
 800556c:	681d      	ldr	r5, [r3, #0]
 800556e:	4606      	mov	r6, r0
 8005570:	460c      	mov	r4, r1
 8005572:	b125      	cbz	r5, 800557e <__swsetup_r+0x16>
 8005574:	69ab      	ldr	r3, [r5, #24]
 8005576:	b913      	cbnz	r3, 800557e <__swsetup_r+0x16>
 8005578:	4628      	mov	r0, r5
 800557a:	f000 f981 	bl	8005880 <__sinit>
 800557e:	4b2e      	ldr	r3, [pc, #184]	; (8005638 <__swsetup_r+0xd0>)
 8005580:	429c      	cmp	r4, r3
 8005582:	d10f      	bne.n	80055a4 <__swsetup_r+0x3c>
 8005584:	686c      	ldr	r4, [r5, #4]
 8005586:	89a3      	ldrh	r3, [r4, #12]
 8005588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800558c:	0719      	lsls	r1, r3, #28
 800558e:	d42c      	bmi.n	80055ea <__swsetup_r+0x82>
 8005590:	06dd      	lsls	r5, r3, #27
 8005592:	d411      	bmi.n	80055b8 <__swsetup_r+0x50>
 8005594:	2309      	movs	r3, #9
 8005596:	6033      	str	r3, [r6, #0]
 8005598:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	e03e      	b.n	8005622 <__swsetup_r+0xba>
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <__swsetup_r+0xd4>)
 80055a6:	429c      	cmp	r4, r3
 80055a8:	d101      	bne.n	80055ae <__swsetup_r+0x46>
 80055aa:	68ac      	ldr	r4, [r5, #8]
 80055ac:	e7eb      	b.n	8005586 <__swsetup_r+0x1e>
 80055ae:	4b24      	ldr	r3, [pc, #144]	; (8005640 <__swsetup_r+0xd8>)
 80055b0:	429c      	cmp	r4, r3
 80055b2:	bf08      	it	eq
 80055b4:	68ec      	ldreq	r4, [r5, #12]
 80055b6:	e7e6      	b.n	8005586 <__swsetup_r+0x1e>
 80055b8:	0758      	lsls	r0, r3, #29
 80055ba:	d512      	bpl.n	80055e2 <__swsetup_r+0x7a>
 80055bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055be:	b141      	cbz	r1, 80055d2 <__swsetup_r+0x6a>
 80055c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c4:	4299      	cmp	r1, r3
 80055c6:	d002      	beq.n	80055ce <__swsetup_r+0x66>
 80055c8:	4630      	mov	r0, r6
 80055ca:	f7ff faf9 	bl	8004bc0 <_free_r>
 80055ce:	2300      	movs	r3, #0
 80055d0:	6363      	str	r3, [r4, #52]	; 0x34
 80055d2:	89a3      	ldrh	r3, [r4, #12]
 80055d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055d8:	81a3      	strh	r3, [r4, #12]
 80055da:	2300      	movs	r3, #0
 80055dc:	6063      	str	r3, [r4, #4]
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	89a3      	ldrh	r3, [r4, #12]
 80055e4:	f043 0308 	orr.w	r3, r3, #8
 80055e8:	81a3      	strh	r3, [r4, #12]
 80055ea:	6923      	ldr	r3, [r4, #16]
 80055ec:	b94b      	cbnz	r3, 8005602 <__swsetup_r+0x9a>
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055f8:	d003      	beq.n	8005602 <__swsetup_r+0x9a>
 80055fa:	4621      	mov	r1, r4
 80055fc:	4630      	mov	r0, r6
 80055fe:	f000 fa05 	bl	8005a0c <__smakebuf_r>
 8005602:	89a0      	ldrh	r0, [r4, #12]
 8005604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005608:	f010 0301 	ands.w	r3, r0, #1
 800560c:	d00a      	beq.n	8005624 <__swsetup_r+0xbc>
 800560e:	2300      	movs	r3, #0
 8005610:	60a3      	str	r3, [r4, #8]
 8005612:	6963      	ldr	r3, [r4, #20]
 8005614:	425b      	negs	r3, r3
 8005616:	61a3      	str	r3, [r4, #24]
 8005618:	6923      	ldr	r3, [r4, #16]
 800561a:	b943      	cbnz	r3, 800562e <__swsetup_r+0xc6>
 800561c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005620:	d1ba      	bne.n	8005598 <__swsetup_r+0x30>
 8005622:	bd70      	pop	{r4, r5, r6, pc}
 8005624:	0781      	lsls	r1, r0, #30
 8005626:	bf58      	it	pl
 8005628:	6963      	ldrpl	r3, [r4, #20]
 800562a:	60a3      	str	r3, [r4, #8]
 800562c:	e7f4      	b.n	8005618 <__swsetup_r+0xb0>
 800562e:	2000      	movs	r0, #0
 8005630:	e7f7      	b.n	8005622 <__swsetup_r+0xba>
 8005632:	bf00      	nop
 8005634:	20000014 	.word	0x20000014
 8005638:	08006b98 	.word	0x08006b98
 800563c:	08006bb8 	.word	0x08006bb8
 8005640:	08006b78 	.word	0x08006b78

08005644 <abort>:
 8005644:	2006      	movs	r0, #6
 8005646:	b508      	push	{r3, lr}
 8005648:	f000 fa56 	bl	8005af8 <raise>
 800564c:	2001      	movs	r0, #1
 800564e:	f7fd fc0a 	bl	8002e66 <_exit>
	...

08005654 <__sflush_r>:
 8005654:	898a      	ldrh	r2, [r1, #12]
 8005656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005658:	4605      	mov	r5, r0
 800565a:	0710      	lsls	r0, r2, #28
 800565c:	460c      	mov	r4, r1
 800565e:	d457      	bmi.n	8005710 <__sflush_r+0xbc>
 8005660:	684b      	ldr	r3, [r1, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	dc04      	bgt.n	8005670 <__sflush_r+0x1c>
 8005666:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	dc01      	bgt.n	8005670 <__sflush_r+0x1c>
 800566c:	2000      	movs	r0, #0
 800566e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005672:	2e00      	cmp	r6, #0
 8005674:	d0fa      	beq.n	800566c <__sflush_r+0x18>
 8005676:	2300      	movs	r3, #0
 8005678:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800567c:	682f      	ldr	r7, [r5, #0]
 800567e:	602b      	str	r3, [r5, #0]
 8005680:	d032      	beq.n	80056e8 <__sflush_r+0x94>
 8005682:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	075a      	lsls	r2, r3, #29
 8005688:	d505      	bpl.n	8005696 <__sflush_r+0x42>
 800568a:	6863      	ldr	r3, [r4, #4]
 800568c:	1ac0      	subs	r0, r0, r3
 800568e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005690:	b10b      	cbz	r3, 8005696 <__sflush_r+0x42>
 8005692:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005694:	1ac0      	subs	r0, r0, r3
 8005696:	2300      	movs	r3, #0
 8005698:	4602      	mov	r2, r0
 800569a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800569c:	4628      	mov	r0, r5
 800569e:	6a21      	ldr	r1, [r4, #32]
 80056a0:	47b0      	blx	r6
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	d106      	bne.n	80056b6 <__sflush_r+0x62>
 80056a8:	6829      	ldr	r1, [r5, #0]
 80056aa:	291d      	cmp	r1, #29
 80056ac:	d82c      	bhi.n	8005708 <__sflush_r+0xb4>
 80056ae:	4a29      	ldr	r2, [pc, #164]	; (8005754 <__sflush_r+0x100>)
 80056b0:	40ca      	lsrs	r2, r1
 80056b2:	07d6      	lsls	r6, r2, #31
 80056b4:	d528      	bpl.n	8005708 <__sflush_r+0xb4>
 80056b6:	2200      	movs	r2, #0
 80056b8:	6062      	str	r2, [r4, #4]
 80056ba:	6922      	ldr	r2, [r4, #16]
 80056bc:	04d9      	lsls	r1, r3, #19
 80056be:	6022      	str	r2, [r4, #0]
 80056c0:	d504      	bpl.n	80056cc <__sflush_r+0x78>
 80056c2:	1c42      	adds	r2, r0, #1
 80056c4:	d101      	bne.n	80056ca <__sflush_r+0x76>
 80056c6:	682b      	ldr	r3, [r5, #0]
 80056c8:	b903      	cbnz	r3, 80056cc <__sflush_r+0x78>
 80056ca:	6560      	str	r0, [r4, #84]	; 0x54
 80056cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056ce:	602f      	str	r7, [r5, #0]
 80056d0:	2900      	cmp	r1, #0
 80056d2:	d0cb      	beq.n	800566c <__sflush_r+0x18>
 80056d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056d8:	4299      	cmp	r1, r3
 80056da:	d002      	beq.n	80056e2 <__sflush_r+0x8e>
 80056dc:	4628      	mov	r0, r5
 80056de:	f7ff fa6f 	bl	8004bc0 <_free_r>
 80056e2:	2000      	movs	r0, #0
 80056e4:	6360      	str	r0, [r4, #52]	; 0x34
 80056e6:	e7c2      	b.n	800566e <__sflush_r+0x1a>
 80056e8:	6a21      	ldr	r1, [r4, #32]
 80056ea:	2301      	movs	r3, #1
 80056ec:	4628      	mov	r0, r5
 80056ee:	47b0      	blx	r6
 80056f0:	1c41      	adds	r1, r0, #1
 80056f2:	d1c7      	bne.n	8005684 <__sflush_r+0x30>
 80056f4:	682b      	ldr	r3, [r5, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0c4      	beq.n	8005684 <__sflush_r+0x30>
 80056fa:	2b1d      	cmp	r3, #29
 80056fc:	d001      	beq.n	8005702 <__sflush_r+0xae>
 80056fe:	2b16      	cmp	r3, #22
 8005700:	d101      	bne.n	8005706 <__sflush_r+0xb2>
 8005702:	602f      	str	r7, [r5, #0]
 8005704:	e7b2      	b.n	800566c <__sflush_r+0x18>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800570c:	81a3      	strh	r3, [r4, #12]
 800570e:	e7ae      	b.n	800566e <__sflush_r+0x1a>
 8005710:	690f      	ldr	r7, [r1, #16]
 8005712:	2f00      	cmp	r7, #0
 8005714:	d0aa      	beq.n	800566c <__sflush_r+0x18>
 8005716:	0793      	lsls	r3, r2, #30
 8005718:	bf18      	it	ne
 800571a:	2300      	movne	r3, #0
 800571c:	680e      	ldr	r6, [r1, #0]
 800571e:	bf08      	it	eq
 8005720:	694b      	ldreq	r3, [r1, #20]
 8005722:	1bf6      	subs	r6, r6, r7
 8005724:	600f      	str	r7, [r1, #0]
 8005726:	608b      	str	r3, [r1, #8]
 8005728:	2e00      	cmp	r6, #0
 800572a:	dd9f      	ble.n	800566c <__sflush_r+0x18>
 800572c:	4633      	mov	r3, r6
 800572e:	463a      	mov	r2, r7
 8005730:	4628      	mov	r0, r5
 8005732:	6a21      	ldr	r1, [r4, #32]
 8005734:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005738:	47e0      	blx	ip
 800573a:	2800      	cmp	r0, #0
 800573c:	dc06      	bgt.n	800574c <__sflush_r+0xf8>
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	e790      	b.n	800566e <__sflush_r+0x1a>
 800574c:	4407      	add	r7, r0
 800574e:	1a36      	subs	r6, r6, r0
 8005750:	e7ea      	b.n	8005728 <__sflush_r+0xd4>
 8005752:	bf00      	nop
 8005754:	20400001 	.word	0x20400001

08005758 <_fflush_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	690b      	ldr	r3, [r1, #16]
 800575c:	4605      	mov	r5, r0
 800575e:	460c      	mov	r4, r1
 8005760:	b913      	cbnz	r3, 8005768 <_fflush_r+0x10>
 8005762:	2500      	movs	r5, #0
 8005764:	4628      	mov	r0, r5
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	b118      	cbz	r0, 8005772 <_fflush_r+0x1a>
 800576a:	6983      	ldr	r3, [r0, #24]
 800576c:	b90b      	cbnz	r3, 8005772 <_fflush_r+0x1a>
 800576e:	f000 f887 	bl	8005880 <__sinit>
 8005772:	4b14      	ldr	r3, [pc, #80]	; (80057c4 <_fflush_r+0x6c>)
 8005774:	429c      	cmp	r4, r3
 8005776:	d11b      	bne.n	80057b0 <_fflush_r+0x58>
 8005778:	686c      	ldr	r4, [r5, #4]
 800577a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0ef      	beq.n	8005762 <_fflush_r+0xa>
 8005782:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005784:	07d0      	lsls	r0, r2, #31
 8005786:	d404      	bmi.n	8005792 <_fflush_r+0x3a>
 8005788:	0599      	lsls	r1, r3, #22
 800578a:	d402      	bmi.n	8005792 <_fflush_r+0x3a>
 800578c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800578e:	f000 f915 	bl	80059bc <__retarget_lock_acquire_recursive>
 8005792:	4628      	mov	r0, r5
 8005794:	4621      	mov	r1, r4
 8005796:	f7ff ff5d 	bl	8005654 <__sflush_r>
 800579a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800579c:	4605      	mov	r5, r0
 800579e:	07da      	lsls	r2, r3, #31
 80057a0:	d4e0      	bmi.n	8005764 <_fflush_r+0xc>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	059b      	lsls	r3, r3, #22
 80057a6:	d4dd      	bmi.n	8005764 <_fflush_r+0xc>
 80057a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057aa:	f000 f908 	bl	80059be <__retarget_lock_release_recursive>
 80057ae:	e7d9      	b.n	8005764 <_fflush_r+0xc>
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <_fflush_r+0x70>)
 80057b2:	429c      	cmp	r4, r3
 80057b4:	d101      	bne.n	80057ba <_fflush_r+0x62>
 80057b6:	68ac      	ldr	r4, [r5, #8]
 80057b8:	e7df      	b.n	800577a <_fflush_r+0x22>
 80057ba:	4b04      	ldr	r3, [pc, #16]	; (80057cc <_fflush_r+0x74>)
 80057bc:	429c      	cmp	r4, r3
 80057be:	bf08      	it	eq
 80057c0:	68ec      	ldreq	r4, [r5, #12]
 80057c2:	e7da      	b.n	800577a <_fflush_r+0x22>
 80057c4:	08006b98 	.word	0x08006b98
 80057c8:	08006bb8 	.word	0x08006bb8
 80057cc:	08006b78 	.word	0x08006b78

080057d0 <std>:
 80057d0:	2300      	movs	r3, #0
 80057d2:	b510      	push	{r4, lr}
 80057d4:	4604      	mov	r4, r0
 80057d6:	e9c0 3300 	strd	r3, r3, [r0]
 80057da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057de:	6083      	str	r3, [r0, #8]
 80057e0:	8181      	strh	r1, [r0, #12]
 80057e2:	6643      	str	r3, [r0, #100]	; 0x64
 80057e4:	81c2      	strh	r2, [r0, #14]
 80057e6:	6183      	str	r3, [r0, #24]
 80057e8:	4619      	mov	r1, r3
 80057ea:	2208      	movs	r2, #8
 80057ec:	305c      	adds	r0, #92	; 0x5c
 80057ee:	f7ff f9df 	bl	8004bb0 <memset>
 80057f2:	4b05      	ldr	r3, [pc, #20]	; (8005808 <std+0x38>)
 80057f4:	6224      	str	r4, [r4, #32]
 80057f6:	6263      	str	r3, [r4, #36]	; 0x24
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <std+0x3c>)
 80057fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <std+0x40>)
 80057fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <std+0x44>)
 8005802:	6323      	str	r3, [r4, #48]	; 0x30
 8005804:	bd10      	pop	{r4, pc}
 8005806:	bf00      	nop
 8005808:	08005b31 	.word	0x08005b31
 800580c:	08005b53 	.word	0x08005b53
 8005810:	08005b8b 	.word	0x08005b8b
 8005814:	08005baf 	.word	0x08005baf

08005818 <_cleanup_r>:
 8005818:	4901      	ldr	r1, [pc, #4]	; (8005820 <_cleanup_r+0x8>)
 800581a:	f000 b8af 	b.w	800597c <_fwalk_reent>
 800581e:	bf00      	nop
 8005820:	08005759 	.word	0x08005759

08005824 <__sfmoreglue>:
 8005824:	2268      	movs	r2, #104	; 0x68
 8005826:	b570      	push	{r4, r5, r6, lr}
 8005828:	1e4d      	subs	r5, r1, #1
 800582a:	4355      	muls	r5, r2
 800582c:	460e      	mov	r6, r1
 800582e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005832:	f7ff fa2d 	bl	8004c90 <_malloc_r>
 8005836:	4604      	mov	r4, r0
 8005838:	b140      	cbz	r0, 800584c <__sfmoreglue+0x28>
 800583a:	2100      	movs	r1, #0
 800583c:	e9c0 1600 	strd	r1, r6, [r0]
 8005840:	300c      	adds	r0, #12
 8005842:	60a0      	str	r0, [r4, #8]
 8005844:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005848:	f7ff f9b2 	bl	8004bb0 <memset>
 800584c:	4620      	mov	r0, r4
 800584e:	bd70      	pop	{r4, r5, r6, pc}

08005850 <__sfp_lock_acquire>:
 8005850:	4801      	ldr	r0, [pc, #4]	; (8005858 <__sfp_lock_acquire+0x8>)
 8005852:	f000 b8b3 	b.w	80059bc <__retarget_lock_acquire_recursive>
 8005856:	bf00      	nop
 8005858:	200001a1 	.word	0x200001a1

0800585c <__sfp_lock_release>:
 800585c:	4801      	ldr	r0, [pc, #4]	; (8005864 <__sfp_lock_release+0x8>)
 800585e:	f000 b8ae 	b.w	80059be <__retarget_lock_release_recursive>
 8005862:	bf00      	nop
 8005864:	200001a1 	.word	0x200001a1

08005868 <__sinit_lock_acquire>:
 8005868:	4801      	ldr	r0, [pc, #4]	; (8005870 <__sinit_lock_acquire+0x8>)
 800586a:	f000 b8a7 	b.w	80059bc <__retarget_lock_acquire_recursive>
 800586e:	bf00      	nop
 8005870:	200001a2 	.word	0x200001a2

08005874 <__sinit_lock_release>:
 8005874:	4801      	ldr	r0, [pc, #4]	; (800587c <__sinit_lock_release+0x8>)
 8005876:	f000 b8a2 	b.w	80059be <__retarget_lock_release_recursive>
 800587a:	bf00      	nop
 800587c:	200001a2 	.word	0x200001a2

08005880 <__sinit>:
 8005880:	b510      	push	{r4, lr}
 8005882:	4604      	mov	r4, r0
 8005884:	f7ff fff0 	bl	8005868 <__sinit_lock_acquire>
 8005888:	69a3      	ldr	r3, [r4, #24]
 800588a:	b11b      	cbz	r3, 8005894 <__sinit+0x14>
 800588c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005890:	f7ff bff0 	b.w	8005874 <__sinit_lock_release>
 8005894:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005898:	6523      	str	r3, [r4, #80]	; 0x50
 800589a:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <__sinit+0x68>)
 800589c:	4a13      	ldr	r2, [pc, #76]	; (80058ec <__sinit+0x6c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	bf08      	it	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	4620      	mov	r0, r4
 80058aa:	bf08      	it	eq
 80058ac:	61a3      	streq	r3, [r4, #24]
 80058ae:	f000 f81f 	bl	80058f0 <__sfp>
 80058b2:	6060      	str	r0, [r4, #4]
 80058b4:	4620      	mov	r0, r4
 80058b6:	f000 f81b 	bl	80058f0 <__sfp>
 80058ba:	60a0      	str	r0, [r4, #8]
 80058bc:	4620      	mov	r0, r4
 80058be:	f000 f817 	bl	80058f0 <__sfp>
 80058c2:	2200      	movs	r2, #0
 80058c4:	2104      	movs	r1, #4
 80058c6:	60e0      	str	r0, [r4, #12]
 80058c8:	6860      	ldr	r0, [r4, #4]
 80058ca:	f7ff ff81 	bl	80057d0 <std>
 80058ce:	2201      	movs	r2, #1
 80058d0:	2109      	movs	r1, #9
 80058d2:	68a0      	ldr	r0, [r4, #8]
 80058d4:	f7ff ff7c 	bl	80057d0 <std>
 80058d8:	2202      	movs	r2, #2
 80058da:	2112      	movs	r1, #18
 80058dc:	68e0      	ldr	r0, [r4, #12]
 80058de:	f7ff ff77 	bl	80057d0 <std>
 80058e2:	2301      	movs	r3, #1
 80058e4:	61a3      	str	r3, [r4, #24]
 80058e6:	e7d1      	b.n	800588c <__sinit+0xc>
 80058e8:	08006a90 	.word	0x08006a90
 80058ec:	08005819 	.word	0x08005819

080058f0 <__sfp>:
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	4607      	mov	r7, r0
 80058f4:	f7ff ffac 	bl	8005850 <__sfp_lock_acquire>
 80058f8:	4b1e      	ldr	r3, [pc, #120]	; (8005974 <__sfp+0x84>)
 80058fa:	681e      	ldr	r6, [r3, #0]
 80058fc:	69b3      	ldr	r3, [r6, #24]
 80058fe:	b913      	cbnz	r3, 8005906 <__sfp+0x16>
 8005900:	4630      	mov	r0, r6
 8005902:	f7ff ffbd 	bl	8005880 <__sinit>
 8005906:	3648      	adds	r6, #72	; 0x48
 8005908:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800590c:	3b01      	subs	r3, #1
 800590e:	d503      	bpl.n	8005918 <__sfp+0x28>
 8005910:	6833      	ldr	r3, [r6, #0]
 8005912:	b30b      	cbz	r3, 8005958 <__sfp+0x68>
 8005914:	6836      	ldr	r6, [r6, #0]
 8005916:	e7f7      	b.n	8005908 <__sfp+0x18>
 8005918:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800591c:	b9d5      	cbnz	r5, 8005954 <__sfp+0x64>
 800591e:	4b16      	ldr	r3, [pc, #88]	; (8005978 <__sfp+0x88>)
 8005920:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005924:	60e3      	str	r3, [r4, #12]
 8005926:	6665      	str	r5, [r4, #100]	; 0x64
 8005928:	f000 f847 	bl	80059ba <__retarget_lock_init_recursive>
 800592c:	f7ff ff96 	bl	800585c <__sfp_lock_release>
 8005930:	2208      	movs	r2, #8
 8005932:	4629      	mov	r1, r5
 8005934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800593c:	6025      	str	r5, [r4, #0]
 800593e:	61a5      	str	r5, [r4, #24]
 8005940:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005944:	f7ff f934 	bl	8004bb0 <memset>
 8005948:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800594c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005950:	4620      	mov	r0, r4
 8005952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005954:	3468      	adds	r4, #104	; 0x68
 8005956:	e7d9      	b.n	800590c <__sfp+0x1c>
 8005958:	2104      	movs	r1, #4
 800595a:	4638      	mov	r0, r7
 800595c:	f7ff ff62 	bl	8005824 <__sfmoreglue>
 8005960:	4604      	mov	r4, r0
 8005962:	6030      	str	r0, [r6, #0]
 8005964:	2800      	cmp	r0, #0
 8005966:	d1d5      	bne.n	8005914 <__sfp+0x24>
 8005968:	f7ff ff78 	bl	800585c <__sfp_lock_release>
 800596c:	230c      	movs	r3, #12
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	e7ee      	b.n	8005950 <__sfp+0x60>
 8005972:	bf00      	nop
 8005974:	08006a90 	.word	0x08006a90
 8005978:	ffff0001 	.word	0xffff0001

0800597c <_fwalk_reent>:
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	4606      	mov	r6, r0
 8005982:	4688      	mov	r8, r1
 8005984:	2700      	movs	r7, #0
 8005986:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800598a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800598e:	f1b9 0901 	subs.w	r9, r9, #1
 8005992:	d505      	bpl.n	80059a0 <_fwalk_reent+0x24>
 8005994:	6824      	ldr	r4, [r4, #0]
 8005996:	2c00      	cmp	r4, #0
 8005998:	d1f7      	bne.n	800598a <_fwalk_reent+0xe>
 800599a:	4638      	mov	r0, r7
 800599c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a0:	89ab      	ldrh	r3, [r5, #12]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d907      	bls.n	80059b6 <_fwalk_reent+0x3a>
 80059a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059aa:	3301      	adds	r3, #1
 80059ac:	d003      	beq.n	80059b6 <_fwalk_reent+0x3a>
 80059ae:	4629      	mov	r1, r5
 80059b0:	4630      	mov	r0, r6
 80059b2:	47c0      	blx	r8
 80059b4:	4307      	orrs	r7, r0
 80059b6:	3568      	adds	r5, #104	; 0x68
 80059b8:	e7e9      	b.n	800598e <_fwalk_reent+0x12>

080059ba <__retarget_lock_init_recursive>:
 80059ba:	4770      	bx	lr

080059bc <__retarget_lock_acquire_recursive>:
 80059bc:	4770      	bx	lr

080059be <__retarget_lock_release_recursive>:
 80059be:	4770      	bx	lr

080059c0 <__swhatbuf_r>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	460e      	mov	r6, r1
 80059c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c8:	4614      	mov	r4, r2
 80059ca:	2900      	cmp	r1, #0
 80059cc:	461d      	mov	r5, r3
 80059ce:	b096      	sub	sp, #88	; 0x58
 80059d0:	da08      	bge.n	80059e4 <__swhatbuf_r+0x24>
 80059d2:	2200      	movs	r2, #0
 80059d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80059d8:	602a      	str	r2, [r5, #0]
 80059da:	061a      	lsls	r2, r3, #24
 80059dc:	d410      	bmi.n	8005a00 <__swhatbuf_r+0x40>
 80059de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e2:	e00e      	b.n	8005a02 <__swhatbuf_r+0x42>
 80059e4:	466a      	mov	r2, sp
 80059e6:	f000 f909 	bl	8005bfc <_fstat_r>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	dbf1      	blt.n	80059d2 <__swhatbuf_r+0x12>
 80059ee:	9a01      	ldr	r2, [sp, #4]
 80059f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059f8:	425a      	negs	r2, r3
 80059fa:	415a      	adcs	r2, r3
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	e7ee      	b.n	80059de <__swhatbuf_r+0x1e>
 8005a00:	2340      	movs	r3, #64	; 0x40
 8005a02:	2000      	movs	r0, #0
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	b016      	add	sp, #88	; 0x58
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a0c <__smakebuf_r>:
 8005a0c:	898b      	ldrh	r3, [r1, #12]
 8005a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a10:	079d      	lsls	r5, r3, #30
 8005a12:	4606      	mov	r6, r0
 8005a14:	460c      	mov	r4, r1
 8005a16:	d507      	bpl.n	8005a28 <__smakebuf_r+0x1c>
 8005a18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	6123      	str	r3, [r4, #16]
 8005a20:	2301      	movs	r3, #1
 8005a22:	6163      	str	r3, [r4, #20]
 8005a24:	b002      	add	sp, #8
 8005a26:	bd70      	pop	{r4, r5, r6, pc}
 8005a28:	466a      	mov	r2, sp
 8005a2a:	ab01      	add	r3, sp, #4
 8005a2c:	f7ff ffc8 	bl	80059c0 <__swhatbuf_r>
 8005a30:	9900      	ldr	r1, [sp, #0]
 8005a32:	4605      	mov	r5, r0
 8005a34:	4630      	mov	r0, r6
 8005a36:	f7ff f92b 	bl	8004c90 <_malloc_r>
 8005a3a:	b948      	cbnz	r0, 8005a50 <__smakebuf_r+0x44>
 8005a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a40:	059a      	lsls	r2, r3, #22
 8005a42:	d4ef      	bmi.n	8005a24 <__smakebuf_r+0x18>
 8005a44:	f023 0303 	bic.w	r3, r3, #3
 8005a48:	f043 0302 	orr.w	r3, r3, #2
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	e7e3      	b.n	8005a18 <__smakebuf_r+0xc>
 8005a50:	4b0d      	ldr	r3, [pc, #52]	; (8005a88 <__smakebuf_r+0x7c>)
 8005a52:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a54:	89a3      	ldrh	r3, [r4, #12]
 8005a56:	6020      	str	r0, [r4, #0]
 8005a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	9b00      	ldr	r3, [sp, #0]
 8005a60:	6120      	str	r0, [r4, #16]
 8005a62:	6163      	str	r3, [r4, #20]
 8005a64:	9b01      	ldr	r3, [sp, #4]
 8005a66:	b15b      	cbz	r3, 8005a80 <__smakebuf_r+0x74>
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a6e:	f000 f8d7 	bl	8005c20 <_isatty_r>
 8005a72:	b128      	cbz	r0, 8005a80 <__smakebuf_r+0x74>
 8005a74:	89a3      	ldrh	r3, [r4, #12]
 8005a76:	f023 0303 	bic.w	r3, r3, #3
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	81a3      	strh	r3, [r4, #12]
 8005a80:	89a0      	ldrh	r0, [r4, #12]
 8005a82:	4305      	orrs	r5, r0
 8005a84:	81a5      	strh	r5, [r4, #12]
 8005a86:	e7cd      	b.n	8005a24 <__smakebuf_r+0x18>
 8005a88:	08005819 	.word	0x08005819

08005a8c <memchr>:
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	b510      	push	{r4, lr}
 8005a90:	b2c9      	uxtb	r1, r1
 8005a92:	4402      	add	r2, r0
 8005a94:	4293      	cmp	r3, r2
 8005a96:	4618      	mov	r0, r3
 8005a98:	d101      	bne.n	8005a9e <memchr+0x12>
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	e003      	b.n	8005aa6 <memchr+0x1a>
 8005a9e:	7804      	ldrb	r4, [r0, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	428c      	cmp	r4, r1
 8005aa4:	d1f6      	bne.n	8005a94 <memchr+0x8>
 8005aa6:	bd10      	pop	{r4, pc}

08005aa8 <_raise_r>:
 8005aa8:	291f      	cmp	r1, #31
 8005aaa:	b538      	push	{r3, r4, r5, lr}
 8005aac:	4604      	mov	r4, r0
 8005aae:	460d      	mov	r5, r1
 8005ab0:	d904      	bls.n	8005abc <_raise_r+0x14>
 8005ab2:	2316      	movs	r3, #22
 8005ab4:	6003      	str	r3, [r0, #0]
 8005ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005abe:	b112      	cbz	r2, 8005ac6 <_raise_r+0x1e>
 8005ac0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ac4:	b94b      	cbnz	r3, 8005ada <_raise_r+0x32>
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 f830 	bl	8005b2c <_getpid_r>
 8005acc:	462a      	mov	r2, r5
 8005ace:	4601      	mov	r1, r0
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad6:	f000 b817 	b.w	8005b08 <_kill_r>
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d00a      	beq.n	8005af4 <_raise_r+0x4c>
 8005ade:	1c59      	adds	r1, r3, #1
 8005ae0:	d103      	bne.n	8005aea <_raise_r+0x42>
 8005ae2:	2316      	movs	r3, #22
 8005ae4:	6003      	str	r3, [r0, #0]
 8005ae6:	2001      	movs	r0, #1
 8005ae8:	e7e7      	b.n	8005aba <_raise_r+0x12>
 8005aea:	2400      	movs	r4, #0
 8005aec:	4628      	mov	r0, r5
 8005aee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005af2:	4798      	blx	r3
 8005af4:	2000      	movs	r0, #0
 8005af6:	e7e0      	b.n	8005aba <_raise_r+0x12>

08005af8 <raise>:
 8005af8:	4b02      	ldr	r3, [pc, #8]	; (8005b04 <raise+0xc>)
 8005afa:	4601      	mov	r1, r0
 8005afc:	6818      	ldr	r0, [r3, #0]
 8005afe:	f7ff bfd3 	b.w	8005aa8 <_raise_r>
 8005b02:	bf00      	nop
 8005b04:	20000014 	.word	0x20000014

08005b08 <_kill_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4d06      	ldr	r5, [pc, #24]	; (8005b28 <_kill_r+0x20>)
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	4611      	mov	r1, r2
 8005b14:	602b      	str	r3, [r5, #0]
 8005b16:	f7fd f996 	bl	8002e46 <_kill>
 8005b1a:	1c43      	adds	r3, r0, #1
 8005b1c:	d102      	bne.n	8005b24 <_kill_r+0x1c>
 8005b1e:	682b      	ldr	r3, [r5, #0]
 8005b20:	b103      	cbz	r3, 8005b24 <_kill_r+0x1c>
 8005b22:	6023      	str	r3, [r4, #0]
 8005b24:	bd38      	pop	{r3, r4, r5, pc}
 8005b26:	bf00      	nop
 8005b28:	2000019c 	.word	0x2000019c

08005b2c <_getpid_r>:
 8005b2c:	f7fd b984 	b.w	8002e38 <_getpid>

08005b30 <__sread>:
 8005b30:	b510      	push	{r4, lr}
 8005b32:	460c      	mov	r4, r1
 8005b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b38:	f000 f894 	bl	8005c64 <_read_r>
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	bfab      	itete	ge
 8005b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b42:	89a3      	ldrhlt	r3, [r4, #12]
 8005b44:	181b      	addge	r3, r3, r0
 8005b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b4a:	bfac      	ite	ge
 8005b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b4e:	81a3      	strhlt	r3, [r4, #12]
 8005b50:	bd10      	pop	{r4, pc}

08005b52 <__swrite>:
 8005b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b56:	461f      	mov	r7, r3
 8005b58:	898b      	ldrh	r3, [r1, #12]
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	05db      	lsls	r3, r3, #23
 8005b5e:	460c      	mov	r4, r1
 8005b60:	4616      	mov	r6, r2
 8005b62:	d505      	bpl.n	8005b70 <__swrite+0x1e>
 8005b64:	2302      	movs	r3, #2
 8005b66:	2200      	movs	r2, #0
 8005b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6c:	f000 f868 	bl	8005c40 <_lseek_r>
 8005b70:	89a3      	ldrh	r3, [r4, #12]
 8005b72:	4632      	mov	r2, r6
 8005b74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	463b      	mov	r3, r7
 8005b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b86:	f000 b817 	b.w	8005bb8 <_write_r>

08005b8a <__sseek>:
 8005b8a:	b510      	push	{r4, lr}
 8005b8c:	460c      	mov	r4, r1
 8005b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b92:	f000 f855 	bl	8005c40 <_lseek_r>
 8005b96:	1c43      	adds	r3, r0, #1
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	bf15      	itete	ne
 8005b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ba6:	81a3      	strheq	r3, [r4, #12]
 8005ba8:	bf18      	it	ne
 8005baa:	81a3      	strhne	r3, [r4, #12]
 8005bac:	bd10      	pop	{r4, pc}

08005bae <__sclose>:
 8005bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb2:	f000 b813 	b.w	8005bdc <_close_r>
	...

08005bb8 <_write_r>:
 8005bb8:	b538      	push	{r3, r4, r5, lr}
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	4d05      	ldr	r5, [pc, #20]	; (8005bd8 <_write_r+0x20>)
 8005bc4:	602a      	str	r2, [r5, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f7fd f974 	bl	8002eb4 <_write>
 8005bcc:	1c43      	adds	r3, r0, #1
 8005bce:	d102      	bne.n	8005bd6 <_write_r+0x1e>
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	b103      	cbz	r3, 8005bd6 <_write_r+0x1e>
 8005bd4:	6023      	str	r3, [r4, #0]
 8005bd6:	bd38      	pop	{r3, r4, r5, pc}
 8005bd8:	2000019c 	.word	0x2000019c

08005bdc <_close_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	2300      	movs	r3, #0
 8005be0:	4d05      	ldr	r5, [pc, #20]	; (8005bf8 <_close_r+0x1c>)
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	f7fd f980 	bl	8002eec <_close>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_close_r+0x1a>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_close_r+0x1a>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	2000019c 	.word	0x2000019c

08005bfc <_fstat_r>:
 8005bfc:	b538      	push	{r3, r4, r5, lr}
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4d06      	ldr	r5, [pc, #24]	; (8005c1c <_fstat_r+0x20>)
 8005c02:	4604      	mov	r4, r0
 8005c04:	4608      	mov	r0, r1
 8005c06:	4611      	mov	r1, r2
 8005c08:	602b      	str	r3, [r5, #0]
 8005c0a:	f7fd f97a 	bl	8002f02 <_fstat>
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	d102      	bne.n	8005c18 <_fstat_r+0x1c>
 8005c12:	682b      	ldr	r3, [r5, #0]
 8005c14:	b103      	cbz	r3, 8005c18 <_fstat_r+0x1c>
 8005c16:	6023      	str	r3, [r4, #0]
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2000019c 	.word	0x2000019c

08005c20 <_isatty_r>:
 8005c20:	b538      	push	{r3, r4, r5, lr}
 8005c22:	2300      	movs	r3, #0
 8005c24:	4d05      	ldr	r5, [pc, #20]	; (8005c3c <_isatty_r+0x1c>)
 8005c26:	4604      	mov	r4, r0
 8005c28:	4608      	mov	r0, r1
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	f7fd f978 	bl	8002f20 <_isatty>
 8005c30:	1c43      	adds	r3, r0, #1
 8005c32:	d102      	bne.n	8005c3a <_isatty_r+0x1a>
 8005c34:	682b      	ldr	r3, [r5, #0]
 8005c36:	b103      	cbz	r3, 8005c3a <_isatty_r+0x1a>
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	bd38      	pop	{r3, r4, r5, pc}
 8005c3c:	2000019c 	.word	0x2000019c

08005c40 <_lseek_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	4611      	mov	r1, r2
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4d05      	ldr	r5, [pc, #20]	; (8005c60 <_lseek_r+0x20>)
 8005c4c:	602a      	str	r2, [r5, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f7fd f970 	bl	8002f34 <_lseek>
 8005c54:	1c43      	adds	r3, r0, #1
 8005c56:	d102      	bne.n	8005c5e <_lseek_r+0x1e>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	b103      	cbz	r3, 8005c5e <_lseek_r+0x1e>
 8005c5c:	6023      	str	r3, [r4, #0]
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	2000019c 	.word	0x2000019c

08005c64 <_read_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4604      	mov	r4, r0
 8005c68:	4608      	mov	r0, r1
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	4d05      	ldr	r5, [pc, #20]	; (8005c84 <_read_r+0x20>)
 8005c70:	602a      	str	r2, [r5, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f7fd f901 	bl	8002e7a <_read>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_read_r+0x1e>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_read_r+0x1e>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	2000019c 	.word	0x2000019c

08005c88 <ceil>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005c90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005c94:	2e13      	cmp	r6, #19
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	4605      	mov	r5, r0
 8005ca0:	dc31      	bgt.n	8005d06 <ceil+0x7e>
 8005ca2:	2e00      	cmp	r6, #0
 8005ca4:	da12      	bge.n	8005ccc <ceil+0x44>
 8005ca6:	a334      	add	r3, pc, #208	; (adr r3, 8005d78 <ceil+0xf0>)
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f7fa fa5e 	bl	800016c <__adddf3>
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f7fa fea0 	bl	80009f8 <__aeabi_dcmpgt>
 8005cb8:	b128      	cbz	r0, 8005cc6 <ceil+0x3e>
 8005cba:	2c00      	cmp	r4, #0
 8005cbc:	db56      	blt.n	8005d6c <ceil+0xe4>
 8005cbe:	433c      	orrs	r4, r7
 8005cc0:	d058      	beq.n	8005d74 <ceil+0xec>
 8005cc2:	2500      	movs	r5, #0
 8005cc4:	4c2e      	ldr	r4, [pc, #184]	; (8005d80 <ceil+0xf8>)
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	462f      	mov	r7, r5
 8005cca:	e025      	b.n	8005d18 <ceil+0x90>
 8005ccc:	4a2d      	ldr	r2, [pc, #180]	; (8005d84 <ceil+0xfc>)
 8005cce:	fa42 f806 	asr.w	r8, r2, r6
 8005cd2:	ea01 0208 	and.w	r2, r1, r8
 8005cd6:	4302      	orrs	r2, r0
 8005cd8:	d01e      	beq.n	8005d18 <ceil+0x90>
 8005cda:	a327      	add	r3, pc, #156	; (adr r3, 8005d78 <ceil+0xf0>)
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f7fa fa44 	bl	800016c <__adddf3>
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f7fa fe86 	bl	80009f8 <__aeabi_dcmpgt>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d0ea      	beq.n	8005cc6 <ceil+0x3e>
 8005cf0:	2c00      	cmp	r4, #0
 8005cf2:	bfc2      	ittt	gt
 8005cf4:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8005cf8:	fa43 f606 	asrgt.w	r6, r3, r6
 8005cfc:	19a4      	addgt	r4, r4, r6
 8005cfe:	2500      	movs	r5, #0
 8005d00:	ea24 0408 	bic.w	r4, r4, r8
 8005d04:	e7df      	b.n	8005cc6 <ceil+0x3e>
 8005d06:	2e33      	cmp	r6, #51	; 0x33
 8005d08:	dd0a      	ble.n	8005d20 <ceil+0x98>
 8005d0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005d0e:	d103      	bne.n	8005d18 <ceil+0x90>
 8005d10:	f7fa fa2c 	bl	800016c <__adddf3>
 8005d14:	4607      	mov	r7, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4638      	mov	r0, r7
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d20:	f04f 32ff 	mov.w	r2, #4294967295
 8005d24:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005d28:	fa22 f808 	lsr.w	r8, r2, r8
 8005d2c:	ea18 0f00 	tst.w	r8, r0
 8005d30:	d0f2      	beq.n	8005d18 <ceil+0x90>
 8005d32:	a311      	add	r3, pc, #68	; (adr r3, 8005d78 <ceil+0xf0>)
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f7fa fa18 	bl	800016c <__adddf3>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2300      	movs	r3, #0
 8005d40:	f7fa fe5a 	bl	80009f8 <__aeabi_dcmpgt>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d0be      	beq.n	8005cc6 <ceil+0x3e>
 8005d48:	2c00      	cmp	r4, #0
 8005d4a:	dd02      	ble.n	8005d52 <ceil+0xca>
 8005d4c:	2e14      	cmp	r6, #20
 8005d4e:	d103      	bne.n	8005d58 <ceil+0xd0>
 8005d50:	3401      	adds	r4, #1
 8005d52:	ea25 0508 	bic.w	r5, r5, r8
 8005d56:	e7b6      	b.n	8005cc6 <ceil+0x3e>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005d5e:	fa03 f606 	lsl.w	r6, r3, r6
 8005d62:	4435      	add	r5, r6
 8005d64:	42bd      	cmp	r5, r7
 8005d66:	bf38      	it	cc
 8005d68:	18e4      	addcc	r4, r4, r3
 8005d6a:	e7f2      	b.n	8005d52 <ceil+0xca>
 8005d6c:	2500      	movs	r5, #0
 8005d6e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005d72:	e7a8      	b.n	8005cc6 <ceil+0x3e>
 8005d74:	4625      	mov	r5, r4
 8005d76:	e7a6      	b.n	8005cc6 <ceil+0x3e>
 8005d78:	8800759c 	.word	0x8800759c
 8005d7c:	7e37e43c 	.word	0x7e37e43c
 8005d80:	3ff00000 	.word	0x3ff00000
 8005d84:	000fffff 	.word	0x000fffff

08005d88 <floor>:
 8005d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d8c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005d90:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005d94:	2e13      	cmp	r6, #19
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4607      	mov	r7, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	4605      	mov	r5, r0
 8005da0:	dc33      	bgt.n	8005e0a <floor+0x82>
 8005da2:	2e00      	cmp	r6, #0
 8005da4:	da14      	bge.n	8005dd0 <floor+0x48>
 8005da6:	a334      	add	r3, pc, #208	; (adr r3, 8005e78 <floor+0xf0>)
 8005da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dac:	f7fa f9de 	bl	800016c <__adddf3>
 8005db0:	2200      	movs	r2, #0
 8005db2:	2300      	movs	r3, #0
 8005db4:	f7fa fe20 	bl	80009f8 <__aeabi_dcmpgt>
 8005db8:	b138      	cbz	r0, 8005dca <floor+0x42>
 8005dba:	2c00      	cmp	r4, #0
 8005dbc:	da58      	bge.n	8005e70 <floor+0xe8>
 8005dbe:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005dc2:	431d      	orrs	r5, r3
 8005dc4:	d001      	beq.n	8005dca <floor+0x42>
 8005dc6:	2500      	movs	r5, #0
 8005dc8:	4c2d      	ldr	r4, [pc, #180]	; (8005e80 <floor+0xf8>)
 8005dca:	4623      	mov	r3, r4
 8005dcc:	462f      	mov	r7, r5
 8005dce:	e025      	b.n	8005e1c <floor+0x94>
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <floor+0xfc>)
 8005dd2:	fa42 f806 	asr.w	r8, r2, r6
 8005dd6:	ea01 0208 	and.w	r2, r1, r8
 8005dda:	4302      	orrs	r2, r0
 8005ddc:	d01e      	beq.n	8005e1c <floor+0x94>
 8005dde:	a326      	add	r3, pc, #152	; (adr r3, 8005e78 <floor+0xf0>)
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f7fa f9c2 	bl	800016c <__adddf3>
 8005de8:	2200      	movs	r2, #0
 8005dea:	2300      	movs	r3, #0
 8005dec:	f7fa fe04 	bl	80009f8 <__aeabi_dcmpgt>
 8005df0:	2800      	cmp	r0, #0
 8005df2:	d0ea      	beq.n	8005dca <floor+0x42>
 8005df4:	2c00      	cmp	r4, #0
 8005df6:	bfbe      	ittt	lt
 8005df8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005dfc:	fa43 f606 	asrlt.w	r6, r3, r6
 8005e00:	19a4      	addlt	r4, r4, r6
 8005e02:	2500      	movs	r5, #0
 8005e04:	ea24 0408 	bic.w	r4, r4, r8
 8005e08:	e7df      	b.n	8005dca <floor+0x42>
 8005e0a:	2e33      	cmp	r6, #51	; 0x33
 8005e0c:	dd0a      	ble.n	8005e24 <floor+0x9c>
 8005e0e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005e12:	d103      	bne.n	8005e1c <floor+0x94>
 8005e14:	f7fa f9aa 	bl	800016c <__adddf3>
 8005e18:	4607      	mov	r7, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	4619      	mov	r1, r3
 8005e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e24:	f04f 32ff 	mov.w	r2, #4294967295
 8005e28:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8005e2c:	fa22 f808 	lsr.w	r8, r2, r8
 8005e30:	ea18 0f00 	tst.w	r8, r0
 8005e34:	d0f2      	beq.n	8005e1c <floor+0x94>
 8005e36:	a310      	add	r3, pc, #64	; (adr r3, 8005e78 <floor+0xf0>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f7fa f996 	bl	800016c <__adddf3>
 8005e40:	2200      	movs	r2, #0
 8005e42:	2300      	movs	r3, #0
 8005e44:	f7fa fdd8 	bl	80009f8 <__aeabi_dcmpgt>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d0be      	beq.n	8005dca <floor+0x42>
 8005e4c:	2c00      	cmp	r4, #0
 8005e4e:	da02      	bge.n	8005e56 <floor+0xce>
 8005e50:	2e14      	cmp	r6, #20
 8005e52:	d103      	bne.n	8005e5c <floor+0xd4>
 8005e54:	3401      	adds	r4, #1
 8005e56:	ea25 0508 	bic.w	r5, r5, r8
 8005e5a:	e7b6      	b.n	8005dca <floor+0x42>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005e62:	fa03 f606 	lsl.w	r6, r3, r6
 8005e66:	4435      	add	r5, r6
 8005e68:	42bd      	cmp	r5, r7
 8005e6a:	bf38      	it	cc
 8005e6c:	18e4      	addcc	r4, r4, r3
 8005e6e:	e7f2      	b.n	8005e56 <floor+0xce>
 8005e70:	2500      	movs	r5, #0
 8005e72:	462c      	mov	r4, r5
 8005e74:	e7a9      	b.n	8005dca <floor+0x42>
 8005e76:	bf00      	nop
 8005e78:	8800759c 	.word	0x8800759c
 8005e7c:	7e37e43c 	.word	0x7e37e43c
 8005e80:	bff00000 	.word	0xbff00000
 8005e84:	000fffff 	.word	0x000fffff

08005e88 <_init>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr

08005e94 <_fini>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr
